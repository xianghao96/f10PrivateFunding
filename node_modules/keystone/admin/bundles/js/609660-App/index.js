(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _elemental = require("./elemental");

var _reactRouter = require("react-router");

var _glamor = require("glamor");

var _Mobile = _interopRequireDefault(require("./components/Navigation/Mobile"));

var _Primary = _interopRequireDefault(require("./components/Navigation/Primary"));

var _Secondary = _interopRequireDefault(require("./components/Navigation/Secondary"));

var _Footer = _interopRequireDefault(require("./components/Footer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * The App component is the component that is rendered around all views, and
 * contains common things like navigation, footer, etc.
 */
var classes = {
  wrapper: {
    display: 'flex',
    flexDirection: 'column',
    minHeight: '100vh'
  },
  body: {
    flexGrow: 1
  }
};

var App = function App(props) {
  var listsByPath = require('../utils/lists').listsByPath;

  var children = props.children; // If we're on either a list or an item view

  var currentList, currentSection;

  if (props.params.listId) {
    currentList = listsByPath[props.params.listId]; // If we're on a list path that doesn't exist (e.g. /keystone/gibberishasfw34afsd) this will
    // be undefined

    if (!currentList) {
      children = _react["default"].createElement(_elemental.Container, null, _react["default"].createElement("p", null, "List not found!"), _react["default"].createElement(_reactRouter.Link, {
        to: "".concat(Keystone.adminPath)
      }, "Go back home"));
    } else {
      // Get the current section we're in for the navigation
      currentSection = Keystone.nav.by.list[currentList.key];
    }
  } // Default current section key to dashboard


  var currentSectionKey = currentSection && currentSection.key || 'dashboard';
  return _react["default"].createElement("div", {
    className: (0, _glamor.css)(classes.wrapper)
  }, _react["default"].createElement("header", null, _react["default"].createElement(_Mobile["default"], {
    brand: Keystone.brand,
    currentListKey: props.params.listId,
    currentSectionKey: currentSectionKey,
    sections: Keystone.nav.sections,
    signoutUrl: Keystone.signoutUrl
  }), _react["default"].createElement(_Primary["default"], {
    currentSectionKey: currentSectionKey,
    brand: Keystone.brand,
    sections: Keystone.nav.sections,
    signoutUrl: Keystone.signoutUrl
  }), currentSection ? _react["default"].createElement(_Secondary["default"], {
    currentListKey: props.params.listId,
    lists: currentSection.lists,
    itemId: props.params.itemId
  }) : null), _react["default"].createElement("main", {
    className: (0, _glamor.css)(classes.body)
  }, children), _react["default"].createElement(_Footer["default"], {
    appversion: Keystone.appversion,
    backUrl: Keystone.backUrl,
    brand: Keystone.brand,
    User: Keystone.User,
    user: Keystone.user,
    version: Keystone.version
  }));
};

module.exports = App;

},{"../utils/lists":154,"./components/Footer":2,"./components/Navigation/Mobile":5,"./components/Navigation/Primary":7,"./components/Navigation/Secondary":9,"./elemental":73,"glamor":undefined,"react":undefined,"react-router":undefined}],2:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _glamor = require("glamor");

var _elemental = require("../../elemental");

var _theme = _interopRequireDefault(require("../../../theme"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * The global Footer, displays a link to the website and the current Keystone
 * version in use
 */
var Footer = _react["default"].createClass({
  displayName: 'Footer',
  propTypes: {
    appversion: _react["default"].PropTypes.string,
    backUrl: _react["default"].PropTypes.string,
    brand: _react["default"].PropTypes.string,
    user: _react["default"].PropTypes.object,
    User: _react["default"].PropTypes.object,
    // eslint-disable-line react/sort-prop-types
    version: _react["default"].PropTypes.string
  },
  // Render the user
  renderUser: function renderUser() {
    var _this$props = this.props,
        User = _this$props.User,
        user = _this$props.user;
    if (!user) return null;
    return _react["default"].createElement("span", null, _react["default"].createElement("span", null, " Signed in as "), _react["default"].createElement("a", {
      href: "".concat(Keystone.adminPath, "/").concat(User.path, "/").concat(user.id),
      tabIndex: "-1",
      className: (0, _glamor.css)(classes.link)
    }, user.name), _react["default"].createElement("span", null, "."));
  },
  render: function render() {
    var _this$props2 = this.props,
        backUrl = _this$props2.backUrl,
        brand = _this$props2.brand,
        appversion = _this$props2.appversion,
        version = _this$props2.version;
    return _react["default"].createElement("footer", {
      className: (0, _glamor.css)(classes.footer),
      "data-keystone-footer": true
    }, _react["default"].createElement(_elemental.Container, null, _react["default"].createElement("a", {
      href: backUrl,
      tabIndex: "-1",
      className: (0, _glamor.css)(classes.link)
    }, brand + (appversion ? ' ' + appversion : '')), _react["default"].createElement("span", null, " powered by "), _react["default"].createElement("a", {
      href: "http://keystonejs.com",
      target: "_blank",
      className: (0, _glamor.css)(classes.link),
      tabIndex: "-1"
    }, "KeystoneJS"), _react["default"].createElement("span", null, " version ", version, "."), this.renderUser()));
  }
});
/* eslint quote-props: ["error", "as-needed"] */


var linkHoverAndFocus = {
  color: _theme["default"].color.gray60,
  outline: 'none'
};
var classes = {
  footer: {
    boxShadow: '0 -1px 0 rgba(0, 0, 0, 0.1)',
    color: _theme["default"].color.gray40,
    fontSize: _theme["default"].font.size.small,
    paddingBottom: 30,
    paddingTop: 40,
    textAlign: 'center'
  },
  link: {
    color: _theme["default"].color.gray60,
    ':hover': linkHoverAndFocus,
    ':focus': linkHoverAndFocus
  }
};
module.exports = Footer;

},{"../../../theme":149,"../../elemental":73,"glamor":undefined,"react":undefined}],3:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactRouter = require("react-router");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * A list item of the mobile navigation
 */
var MobileListItem = _react["default"].createClass({
  displayName: 'MobileListItem',
  propTypes: {
    children: _react["default"].PropTypes.node.isRequired,
    className: _react["default"].PropTypes.string,
    href: _react["default"].PropTypes.string.isRequired,
    onClick: _react["default"].PropTypes.func
  },
  render: function render() {
    return _react["default"].createElement(_reactRouter.Link, {
      className: this.props.className,
      to: this.props.href,
      onClick: this.props.onClick,
      tabIndex: "-1"
    }, this.props.children);
  }
});

module.exports = MobileListItem;

},{"react":undefined,"react-router":undefined}],4:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _ListItem = _interopRequireDefault(require("./ListItem"));

var _reactRouter = require("react-router");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * A mobile section
 */
var MobileSectionItem = _react["default"].createClass({
  displayName: 'MobileSectionItem',
  propTypes: {
    children: _react["default"].PropTypes.node.isRequired,
    className: _react["default"].PropTypes.string,
    currentListKey: _react["default"].PropTypes.string,
    href: _react["default"].PropTypes.string.isRequired,
    lists: _react["default"].PropTypes.array
  },
  // Render the lists
  renderLists: function renderLists() {
    var _this = this;

    if (!this.props.lists || this.props.lists.length <= 1) return null;
    var navLists = this.props.lists.map(function (item) {
      // Get the link and the classname
      var href = item.external ? item.path : "".concat(Keystone.adminPath, "/").concat(item.path);
      var className = _this.props.currentListKey && _this.props.currentListKey === item.path ? 'MobileNavigation__list-item is-active' : 'MobileNavigation__list-item';
      return _react["default"].createElement(_ListItem["default"], {
        key: item.path,
        href: href,
        className: className,
        onClick: _this.props.onClick
      }, item.label);
    });
    return _react["default"].createElement("div", {
      className: "MobileNavigation__lists"
    }, navLists);
  },
  render: function render() {
    return _react["default"].createElement("div", {
      className: this.props.className
    }, _react["default"].createElement(_reactRouter.Link, {
      className: "MobileNavigation__section-item",
      to: this.props.href,
      tabIndex: "-1",
      onClick: this.props.onClick
    }, this.props.children), this.renderLists());
  }
});

module.exports = MobileSectionItem;

},{"./ListItem":3,"react":undefined,"react-router":undefined}],5:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactAddonsCssTransitionGroup = _interopRequireDefault(require("react-addons-css-transition-group"));

var _SectionItem = _interopRequireDefault(require("./SectionItem"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * The mobile navigation, displayed on screens < 768px
 */
var ESCAPE_KEY_CODE = 27;

var MobileNavigation = _react["default"].createClass({
  displayName: 'MobileNavigation',
  propTypes: {
    brand: _react["default"].PropTypes.string,
    currentListKey: _react["default"].PropTypes.string,
    currentSectionKey: _react["default"].PropTypes.string,
    sections: _react["default"].PropTypes.array.isRequired,
    signoutUrl: _react["default"].PropTypes.string
  },
  getInitialState: function getInitialState() {
    return {
      barIsVisible: false
    };
  },
  // Handle showing and hiding the menu based on the window size when
  // resizing
  componentDidMount: function componentDidMount() {
    this.handleResize();
    window.addEventListener('resize', this.handleResize);
  },
  componentWillUnmount: function componentWillUnmount() {
    window.removeEventListener('resize', this.handleResize);
  },
  handleResize: function handleResize() {
    this.setState({
      barIsVisible: window.innerWidth < 768
    });
  },
  // Toggle the menu
  toggleMenu: function toggleMenu() {
    this[this.state.menuIsVisible ? 'hideMenu' : 'showMenu']();
  },
  // Show the menu
  showMenu: function showMenu() {
    this.setState({
      menuIsVisible: true
    }); // Make the body unscrollable, so you can only scroll in the menu

    document.body.style.overflow = 'hidden';
    document.body.addEventListener('keyup', this.handleEscapeKey, false);
  },
  // Hide the menu
  hideMenu: function hideMenu() {
    this.setState({
      menuIsVisible: false
    }); // Make the body scrollable again

    document.body.style.overflow = null;
    document.body.removeEventListener('keyup', this.handleEscapeKey, false);
  },
  // If the escape key was pressed, hide the menu
  handleEscapeKey: function handleEscapeKey(event) {
    if (event.which === ESCAPE_KEY_CODE) {
      this.hideMenu();
    }
  },
  renderNavigation: function renderNavigation() {
    var _this = this;

    if (!this.props.sections || !this.props.sections.length) return null;
    return this.props.sections.map(function (section) {
      // Get the link and the classname
      var href = section.lists[0].external ? section.lists[0].path : "".concat(Keystone.adminPath, "/").concat(section.lists[0].path);
      var className = _this.props.currentSectionKey && _this.props.currentSectionKey === section.key ? 'MobileNavigation__section is-active' : 'MobileNavigation__section'; // Render a SectionItem

      return _react["default"].createElement(_SectionItem["default"], {
        key: section.key,
        className: className,
        href: href,
        lists: section.lists,
        currentListKey: _this.props.currentListKey,
        onClick: _this.toggleMenu
      }, section.label);
    });
  },
  // Render a blockout
  renderBlockout: function renderBlockout() {
    if (!this.state.menuIsVisible) return null;
    return _react["default"].createElement("div", {
      className: "MobileNavigation__blockout",
      onClick: this.toggleMenu
    });
  },
  // Render the sidebar menu
  renderMenu: function renderMenu() {
    if (!this.state.menuIsVisible) return null;
    return _react["default"].createElement("nav", {
      className: "MobileNavigation__menu"
    }, _react["default"].createElement("div", {
      className: "MobileNavigation__sections"
    }, this.renderNavigation()));
  },
  render: function render() {
    if (!this.state.barIsVisible) return null;
    return _react["default"].createElement("div", {
      className: "MobileNavigation"
    }, _react["default"].createElement("div", {
      className: "MobileNavigation__bar"
    }, _react["default"].createElement("button", {
      type: "button",
      onClick: this.toggleMenu,
      className: "MobileNavigation__bar__button MobileNavigation__bar__button--menu"
    }, _react["default"].createElement("span", {
      className: 'MobileNavigation__bar__icon octicon octicon-' + (this.state.menuIsVisible ? 'x' : 'three-bars')
    })), _react["default"].createElement("span", {
      className: "MobileNavigation__bar__label"
    }, this.props.brand), _react["default"].createElement("a", {
      href: this.props.signoutUrl,
      className: "MobileNavigation__bar__button MobileNavigation__bar__button--signout"
    }, _react["default"].createElement("span", {
      className: "MobileNavigation__bar__icon octicon octicon-sign-out"
    }))), _react["default"].createElement("div", {
      className: "MobileNavigation__bar--placeholder"
    }), _react["default"].createElement(_reactAddonsCssTransitionGroup["default"], {
      transitionName: "MobileNavigation__menu",
      transitionEnterTimeout: 260,
      transitionLeaveTimeout: 200
    }, this.renderMenu()), _react["default"].createElement(_reactAddonsCssTransitionGroup["default"], {
      transitionName: "react-transitiongroup-fade",
      transitionEnterTimeout: 0,
      transitionLeaveTimeout: 0
    }, this.renderBlockout()));
  }
});

module.exports = MobileNavigation;

},{"./SectionItem":4,"react":undefined,"react-addons-css-transition-group":undefined}],6:[function(require,module,exports){
"use strict";

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _reactRouter = require("react-router");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

/**
 * A item in the primary navigation. If it has a "to" prop it'll render a
 * react-router "Link", if it has a "href" prop it'll render a simple "a" tag
 */
var PrimaryNavItem = function PrimaryNavItem(_ref) {
  var children = _ref.children,
      className = _ref.className,
      href = _ref.href,
      label = _ref.label,
      title = _ref.title,
      to = _ref.to,
      active = _ref.active;
  var itemClassName = (0, _classnames["default"])('primary-navbar__item', className);
  var Button = to ? _react["default"].createElement(_reactRouter.Link, {
    className: "primary-navbar__link",
    key: title,
    tabIndex: "-1",
    title: title,
    to: to // Block clicks on active link
    ,
    onClick: function onClick(evt) {
      if (active) evt.preventDefault();
    }
  }, children) : _react["default"].createElement("a", {
    className: "primary-navbar__link",
    href: href,
    key: title,
    tabIndex: "-1",
    title: title
  }, children);
  return _react["default"].createElement("li", {
    className: itemClassName,
    "data-section-label": label
  }, Button);
};

PrimaryNavItem.displayName = 'PrimaryNavItem';
PrimaryNavItem.propTypes = {
  children: _react.PropTypes.node.isRequired,
  className: _react.PropTypes.string,
  href: _react.PropTypes.string,
  label: _react.PropTypes.string,
  title: _react.PropTypes.string,
  to: _react.PropTypes.string
};
module.exports = PrimaryNavItem;

},{"classnames":undefined,"react":undefined,"react-router":undefined}],7:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _elemental = require("../../../elemental");

var _NavItem = _interopRequireDefault(require("./NavItem"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * The primary (i.e. uppermost) navigation on desktop. Renders all sections and
 * the home-, website- and signout buttons.
 */
var PrimaryNavigation = _react["default"].createClass({
  displayName: 'PrimaryNavigation',
  propTypes: {
    brand: _react["default"].PropTypes.string,
    currentSectionKey: _react["default"].PropTypes.string,
    sections: _react["default"].PropTypes.array.isRequired,
    signoutUrl: _react["default"].PropTypes.string
  },
  getInitialState: function getInitialState() {
    return {};
  },
  // Handle resizing, hide this navigation on mobile (i.e. < 768px) screens
  componentDidMount: function componentDidMount() {
    this.handleResize();
    window.addEventListener('resize', this.handleResize);
  },
  componentWillUnmount: function componentWillUnmount() {
    window.removeEventListener('resize', this.handleResize);
  },
  handleResize: function handleResize() {
    this.setState({
      navIsVisible: window.innerWidth >= 768
    });
  },
  // Render the sign out button
  renderSignout: function renderSignout() {
    if (!this.props.signoutUrl) return null;
    return _react["default"].createElement(_NavItem["default"], {
      label: "octicon-sign-out",
      href: this.props.signoutUrl,
      title: "Sign Out"
    }, _react["default"].createElement("span", {
      className: "octicon octicon-sign-out"
    }));
  },
  // Render the back button
  renderBackButton: function renderBackButton() {
    if (!Keystone.backUrl) return null;
    return _react["default"].createElement(_NavItem["default"], {
      label: "octicon-globe",
      href: Keystone.backUrl,
      title: 'Front page - ' + this.props.brand
    }, _react["default"].createElement("span", {
      className: "octicon octicon-globe"
    }));
  },
  // Render the link to the webpage
  renderFrontLink: function renderFrontLink() {
    return _react["default"].createElement("ul", {
      className: "app-nav app-nav--primary app-nav--right"
    }, this.renderBackButton(), this.renderSignout());
  },
  renderBrand: function renderBrand() {
    // TODO: support navbarLogo from keystone config
    var _this$props = this.props,
        brand = _this$props.brand,
        currentSectionKey = _this$props.currentSectionKey;
    var className = currentSectionKey === 'dashboard' ? 'primary-navbar__brand primary-navbar__item--active' : 'primary-navbar__brand';
    return _react["default"].createElement(_NavItem["default"], {
      className: className,
      label: "octicon-home",
      title: 'Dashboard - ' + brand,
      to: Keystone.adminPath
    }, _react["default"].createElement("span", {
      className: "octicon octicon-home"
    }));
  },
  // Render the navigation
  renderNavigation: function renderNavigation() {
    var _this = this;

    if (!this.props.sections || !this.props.sections.length) return null;
    return this.props.sections.map(function (section) {
      // Get the link and the class name
      var to = !section.lists[0].external && "".concat(Keystone.adminPath, "/").concat(section.lists[0].path);
      var href = section.lists[0].external && section.lists[0].path;
      var isActive = _this.props.currentSectionKey && _this.props.currentSectionKey === section.key;
      var className = isActive ? 'primary-navbar__item--active' : null;
      return _react["default"].createElement(_NavItem["default"], {
        active: isActive,
        key: section.key,
        label: section.label,
        className: className,
        to: to,
        href: href
      }, section.label);
    });
  },
  render: function render() {
    if (!this.state.navIsVisible) return null;
    return _react["default"].createElement("nav", {
      className: "primary-navbar"
    }, _react["default"].createElement(_elemental.Container, {
      clearFloatingChildren: true
    }, _react["default"].createElement("ul", {
      className: "app-nav app-nav--primary app-nav--left"
    }, this.renderBrand(), this.renderNavigation()), this.renderFrontLink()));
  }
});

module.exports = PrimaryNavigation;

},{"../../../elemental":73,"./NavItem":6,"react":undefined}],8:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactRouter = require("react-router");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * A navigation item of the secondary navigation
 */
var SecondaryNavItem = _react["default"].createClass({
  displayName: 'SecondaryNavItem',
  propTypes: {
    children: _react["default"].PropTypes.node.isRequired,
    className: _react["default"].PropTypes.string,
    href: _react["default"].PropTypes.string.isRequired,
    onClick: _react["default"].PropTypes.func,
    path: _react["default"].PropTypes.string,
    title: _react["default"].PropTypes.string
  },
  render: function render() {
    return _react["default"].createElement("li", {
      className: this.props.className,
      "data-list-path": this.props.path
    }, _react["default"].createElement(_reactRouter.Link, {
      to: this.props.href,
      onClick: this.props.onClick,
      title: this.props.title,
      tabIndex: "-1"
    }, this.props.children));
  }
});

module.exports = SecondaryNavItem;

},{"react":undefined,"react-router":undefined}],9:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactRedux = require("react-redux");

var _elemental = require("../../../elemental");

var _active = require("../../../screens/List/actions/active");

var _NavItem = _interopRequireDefault(require("./NavItem"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * The secondary navigation links to inidvidual lists of a section
 */
var SecondaryNavigation = _react["default"].createClass({
  displayName: 'SecondaryNavigation',
  propTypes: {
    currentListKey: _react["default"].PropTypes.string,
    lists: _react["default"].PropTypes.array.isRequired
  },
  getInitialState: function getInitialState() {
    return {};
  },
  // Handle resizing and hide this nav on mobile (i.e. < 768px) screens
  componentDidMount: function componentDidMount() {
    this.handleResize();
    window.addEventListener('resize', this.handleResize);
  },
  componentWillUnmount: function componentWillUnmount() {
    window.removeEventListener('resize', this.handleResize);
  },
  handleResize: function handleResize() {
    this.setState({
      navIsVisible: this.props.lists && Object.keys(this.props.lists).length > 0 && window.innerWidth >= 768
    });
  },
  // Render the navigation
  renderNavigation: function renderNavigation(lists) {
    var _this = this;

    var navigation = Object.keys(lists).map(function (key) {
      var list = lists[key]; // Get the link and the classname

      var href = list.external ? list.path : "".concat(Keystone.adminPath, "/").concat(list.path);
      var isActive = _this.props.currentListKey && _this.props.currentListKey === list.path;
      var className = isActive ? 'active' : null;

      var onClick = function onClick(evt) {
        // If it's the currently active navigation item and we're not on the item view,
        // clear the query params on click
        if (isActive && !_this.props.itemId) {
          evt.preventDefault();

          _this.props.dispatch((0, _active.setActiveList)(_this.props.currentList, _this.props.currentListKey));
        }
      };

      return _react["default"].createElement(_NavItem["default"], {
        key: list.path,
        path: list.path,
        className: className,
        href: href,
        onClick: onClick
      }, list.label);
    });
    return _react["default"].createElement("ul", {
      className: "app-nav app-nav--secondary app-nav--left"
    }, navigation);
  },
  render: function render() {
    if (!this.state.navIsVisible) return null;
    return _react["default"].createElement("nav", {
      className: "secondary-navbar"
    }, _react["default"].createElement(_elemental.Container, {
      clearFloatingChildren: true
    }, this.renderNavigation(this.props.lists)));
  }
});

module.exports = (0, _reactRedux.connect)(function (state) {
  return {
    currentList: state.lists.currentList
  };
})(SecondaryNavigation);

},{"../../../elemental":73,"../../../screens/List/actions/active":103,"./NavItem":8,"react":undefined,"react-redux":undefined}],10:[function(require,module,exports){
"use strict";

var _theme = _interopRequireDefault(require("../../../theme"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

module.exports = {
  danger: _theme["default"].alert.color.danger,
  error: _theme["default"].alert.color.danger,
  info: _theme["default"].alert.color.info,
  success: _theme["default"].alert.color.success,
  warning: _theme["default"].alert.color.warning
};

},{"../../../theme":149}],11:[function(require,module,exports){
"use strict";

var _glamor = require("glamor");

var _react = _interopRequireWildcard(require("react"));

var _styles = _interopRequireDefault(require("./styles"));

var _colors = _interopRequireDefault(require("./colors"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

// clone children if a class exists for the tagname
var cloneWithClassnames = function cloneWithClassnames(c) {
  var type = c.type && c.type.displayName ? c.type.displayName : c.type || null;
  if (!type || !_styles["default"][type]) return c;
  return (0, _react.cloneElement)(c, {
    className: (0, _glamor.css)(_styles["default"][type])
  });
};

function Alert(_ref) {
  var children = _ref.children,
      className = _ref.className,
      color = _ref.color,
      Component = _ref.component,
      props = _objectWithoutProperties(_ref, ["children", "className", "color", "component"]);

  props.className = (0, _glamor.css)(_styles["default"].alert, _styles["default"][color], className);
  props.children = _react.Children.map(children, cloneWithClassnames);
  return _react["default"].createElement(Component, _extends({}, props, {
    "data-alert-type": color
  }));
}

;
Alert.propTypes = {
  color: _react.PropTypes.oneOf(Object.keys(_colors["default"])).isRequired,
  component: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.string])
};
Alert.defaultProps = {
  component: 'div'
};
module.exports = Alert;

},{"./colors":10,"./styles":12,"glamor":undefined,"react":undefined}],12:[function(require,module,exports){
"use strict";

var _colors = _interopRequireDefault(require("./colors"));

var _theme = _interopRequireDefault(require("../../../theme"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Prepare variants
var colorVariants = {};
Object.keys(_colors["default"]).forEach(function (color) {
  colorVariants[color] = {
    backgroundColor: _colors["default"][color].background,
    borderColor: _colors["default"][color].border,
    color: _colors["default"][color].text
  };
}); // Prepare headings

var headingTagnames = {};
['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].forEach(function (tag) {
  headingTagnames[tag] = {
    color: 'inherit'
  };
});
var linkStyles = {
  color: 'inherit',
  textDecoration: 'underline',
  ':hover': {
    color: 'inherit'
  },
  ':focus': {
    color: 'inherit'
  }
};
module.exports = _objectSpread({
  alert: {
    borderColor: 'transparent',
    borderRadius: _theme["default"].alert.borderRadius,
    borderStyle: 'solid',
    borderWidth: _theme["default"].alert.borderWidth,
    margin: _theme["default"].alert.margin,
    padding: _theme["default"].alert.padding
  },
  // tagnames
  a: linkStyles,
  Link: linkStyles,
  strong: {
    fontWeight: 500
  }
}, headingTagnames, colorVariants);

},{"../../../theme":149,"./colors":10}],13:[function(require,module,exports){
"use strict";

var _glamor = require("glamor");

var _react = _interopRequireWildcard(require("react"));

var _theme = _interopRequireDefault(require("../../../theme"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function BlankState(_ref) {
  var className = _ref.className,
      children = _ref.children,
      heading = _ref.heading,
      Component = _ref.component,
      props = _objectWithoutProperties(_ref, ["className", "children", "heading", "component"]);

  props.className = (0, _glamor.css)(classes.container, className);
  return _react["default"].createElement(Component, props, !!heading && _react["default"].createElement("h2", {
    "data-e2e-blank-state-heading": true,
    className: (0, _glamor.css)(classes.heading)
  }, heading), children);
}

;
BlankState.propTypes = {
  component: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.string]).isRequired,
  heading: _react.PropTypes.string
};
BlankState.defaultProps = {
  component: 'div'
};
/* eslint quote-props: ["error", "as-needed"] */

var classes = {
  container: {
    backgroundColor: _theme["default"].blankstate.background,
    borderRadius: _theme["default"].blankstate.borderRadius,
    color: _theme["default"].blankstate.color,
    paddingBottom: _theme["default"].blankstate.paddingVertical,
    paddingLeft: _theme["default"].blankstate.paddingHorizontal,
    paddingRight: _theme["default"].blankstate.paddingHorizontal,
    paddingTop: _theme["default"].blankstate.paddingVertical,
    textAlign: 'center'
  },
  heading: {
    color: 'inherit',
    ':last-child': {
      marginBottom: 0
    }
  }
};
module.exports = BlankState;

},{"../../../theme":149,"glamor":undefined,"react":undefined}],14:[function(require,module,exports){
"use strict";

var _glamor = require("glamor");

var _react = _interopRequireWildcard(require("react"));

var _styles = _interopRequireDefault(require("./styles"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var commonClasses = _styles["default"].common;
var stylesheetCache = {};

function getStyleSheet(variant, color) {
  var cacheKey = "".concat(variant, "-").concat(color);

  if (!stylesheetCache[cacheKey]) {
    var variantStyles = _styles["default"][variant](color);

    stylesheetCache[cacheKey] = variantStyles;
  }

  return stylesheetCache[cacheKey];
}

var BUTTON_SIZES = ['large', 'medium', 'small', 'xsmall'];
var BUTTON_VARIANTS = ['fill', 'hollow', 'link'];
var BUTTON_COLORS = ['default', 'primary', 'success', 'warning', 'danger', 'cancel', 'delete']; // NOTE must NOT be functional component to allow `refs`

var Button =
/*#__PURE__*/
function (_Component) {
  _inherits(Button, _Component);

  function Button() {
    _classCallCheck(this, Button);

    return _possibleConstructorReturn(this, _getPrototypeOf(Button).apply(this, arguments));
  }

  _createClass(Button, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          active = _this$props.active,
          cssStyles = _this$props.cssStyles,
          block = _this$props.block,
          className = _this$props.className,
          color = _this$props.color,
          Tag = _this$props.component,
          disabled = _this$props.disabled,
          size = _this$props.size,
          variant = _this$props.variant,
          props = _objectWithoutProperties(_this$props, ["active", "cssStyles", "block", "className", "color", "component", "disabled", "size", "variant"]); // get the styles


      var variantClasses = getStyleSheet(variant, color);
      props.className = _glamor.css.apply(void 0, [commonClasses.base, commonClasses[size], variantClasses.base, block ? commonClasses.block : null, disabled ? commonClasses.disabled : null, active ? variantClasses.active : null].concat(_toConsumableArray(cssStyles)));

      if (className) {
        props.className += ' ' + className;
      } // return an anchor or button


      if (!Tag) {
        Tag = props.href ? 'a' : 'button';
      } // Ensure buttons don't submit by default


      if (Tag === 'button' && !props.type) {
        props.type = 'button';
      }

      return _react["default"].createElement(Tag, props);
    }
  }]);

  return Button;
}(_react.Component);

;
Button.propTypes = {
  active: _react.PropTypes.bool,
  block: _react.PropTypes.bool,
  color: _react.PropTypes.oneOf(BUTTON_COLORS),
  component: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.string]),
  cssStyles: _react.PropTypes.arrayOf(_react.PropTypes.shape({
    _definition: _react.PropTypes.object,
    _name: _react.PropTypes.string
  })),
  disabled: _react.PropTypes.bool,
  href: _react.PropTypes.string,
  size: _react.PropTypes.oneOf(BUTTON_SIZES),
  variant: _react.PropTypes.oneOf(BUTTON_VARIANTS)
};
Button.defaultProps = {
  cssStyles: [],
  color: 'default',
  variant: 'fill'
};
module.exports = Button;

},{"./styles":15,"glamor":undefined,"react":undefined}],15:[function(require,module,exports){
"use strict";

var _css = require("../../../utils/css");

var _color = require("../../../utils/color");

var _theme = _interopRequireDefault(require("../../../theme"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Common Styles
// ----------------
exports.common = {
  // Base Button
  // ----------------
  base: {
    'appearance': 'none',
    'background': 'none',
    'borderWidth': _theme["default"].button.borderWidth,
    'borderStyle': 'solid',
    'borderColor': 'transparent',
    'borderRadius': _theme["default"].button.borderRadius,
    'cursor': 'pointer',
    'display': 'inline-block',
    'fontWeight': _theme["default"].button.font.weight,
    'height': _theme["default"].component.height,
    'lineHeight': _theme["default"].component.lineHeight,
    'marginBottom': 0,
    'padding': "0 ".concat(_theme["default"].button.paddingHorizontal),
    'outline': 0,
    'textAlign': 'center',
    'touchAction': 'manipulation',
    'userSelect': 'none',
    'verticalAlign': 'middle',
    'whiteSpace': 'nowrap',
    ':hover': {
      color: _theme["default"].button["default"].textColor,
      textDecoration: 'none'
    },
    ':focus': {
      color: _theme["default"].button["default"].textColor,
      textDecoration: 'none'
    }
  },
  // Block Display
  // ----------------
  block: {
    display: 'block',
    width: '100%'
  },
  // Disabled
  // ----------------
  disabled: {
    opacity: 0.4,
    pointerEvents: 'none'
  },
  // Sizes
  // ----------------
  large: {
    fontSize: _theme["default"].font.size.large
  },
  "default": {
    fontSize: _theme["default"].font.size["default"]
  },
  small: {
    fontSize: _theme["default"].font.size.small
  },
  xsmall: {
    fontSize: _theme["default"].font.size.xsmall,
    lineHeight: '1.9',
    paddingLeft: '.66em',
    paddingRight: '.66em'
  }
}; // Fill Variant
// ----------------

function buttonFillVariant(textColor, bgColor) {
  var hoverStyles = _objectSpread({}, (0, _css.gradientVertical)((0, _color.lighten)(bgColor, 10), (0, _color.darken)(bgColor, 5)), {
    borderColor: "".concat((0, _color.darken)(bgColor, 5), " ").concat((0, _color.darken)(bgColor, 10), " ").concat((0, _color.darken)(bgColor, 15)),
    boxShadow: '0 1px 0 rgba(0,0,0,0.1)',
    color: textColor,
    outline: 'none'
  });

  var focusStyles = _objectSpread({}, (0, _css.gradientVertical)((0, _color.lighten)(bgColor, 10), (0, _color.darken)(bgColor, 5)), {
    borderColor: "".concat((0, _color.darken)(bgColor, 5), " ").concat((0, _color.darken)(bgColor, 10), " ").concat((0, _color.darken)(bgColor, 15)),
    boxShadow: "0 0 0 3px ".concat((0, _color.fade)(bgColor, 25)),
    color: textColor,
    outline: 'none'
  });

  var activeStyles = {
    backgroundColor: (0, _color.darken)(bgColor, 10),
    backgroundImage: 'none',
    borderColor: "".concat((0, _color.darken)(bgColor, 25), " ").concat((0, _color.darken)(bgColor, 15), " ").concat((0, _color.darken)(bgColor, 10)),
    boxShadow: 'inset 0 1px 2px rgba(0, 0, 0, 0.1)'
  };
  return {
    base: _objectSpread({}, (0, _css.gradientVertical)((0, _color.lighten)(bgColor, 5), (0, _color.darken)(bgColor, 10), bgColor), {
      'borderColor': "".concat((0, _color.darken)(bgColor, 10), " ").concat((0, _color.darken)(bgColor, 20), " ").concat((0, _color.darken)(bgColor, 25)),
      'boxShadow': 'inset 0 1px 0 rgba(255, 255, 255, 0.1)',
      'color': textColor,
      'fontWeight': 400,
      'textShadow': '0 -1px 0 rgba(0, 0, 0, 0.25)',
      ':hover': hoverStyles,
      ':focus': focusStyles,
      ':active': activeStyles
    }),
    active: activeStyles
  };
} // TODO: This is pretty hacky, needs to be consolidated with the Variant() method
// above (needs more theme variables to be implemented though)


function buttonFillDefault() {
  var borderColor = _theme["default"].input.border.color["default"];

  var hoverStyles = _objectSpread({}, (0, _css.gradientVertical)('#fff', '#eee'), {
    borderColor: "".concat((0, _color.darken)(borderColor, 5), " ").concat((0, _color.darken)(borderColor, 5), " ").concat((0, _color.darken)(borderColor, 10)),
    boxShadow: '0 1px 0 rgba(0,0,0,0.1)',
    color: _theme["default"].color.text
  });

  var focusStyles = {
    borderColor: _theme["default"].color.primary,
    boxShadow: "0 0 0 3px ".concat((0, _color.fade)(_theme["default"].color.primary, 10)),
    color: _theme["default"].color.text,
    outline: 'none'
  };
  var activeStyles = {
    background: '#e6e6e6',
    borderColor: (0, _color.darken)(borderColor, 10),
    boxShadow: 'inset 0 1px 2px rgba(0, 0, 0, 0.1)',
    color: _theme["default"].color.text
  };
  return {
    base: _objectSpread({}, (0, _css.gradientVertical)('#fafafa', '#eaeaea'), {
      'borderColor': "".concat(borderColor, " ").concat((0, _color.darken)(borderColor, 6), " ").concat((0, _color.darken)(borderColor, 12)),
      'color': _theme["default"].color.text,
      'textShadow': '0 1px 0 white',
      ':hover': hoverStyles,
      ':focus': focusStyles,
      ':active': activeStyles
    }),
    // gross hack
    active: _objectSpread({}, activeStyles, {
      ':hover': activeStyles,
      ':focus': _objectSpread({}, activeStyles, focusStyles, {
        boxShadow: "0 0 0 3px ".concat((0, _color.fade)(_theme["default"].color.primary, 10), ", inset 0 1px 2px rgba(0, 0, 0, 0.1)")
      }),
      ':active': activeStyles
    })
  };
}

exports.fill = function (color) {
  switch (color) {
    case 'default':
      return buttonFillDefault();

    case 'cancel':
    case 'delete':
      return buttonFillVariant('white', _theme["default"].button.danger.bgColor);

    default:
      return buttonFillVariant('white', _theme["default"].button[color].bgColor);
  }
}; // Hollow Variant
// ----------------


function buttonHollowVariant(textColor, borderColor) {
  var focusAndHoverStyles = {
    backgroundImage: 'none',
    backgroundColor: (0, _color.fade)(borderColor, 15),
    borderColor: (0, _color.darken)(borderColor, 15),
    boxShadow: 'none',
    color: textColor,
    outline: 'none'
  };
  var focusOnlyStyles = {
    boxShadow: "0 0 0 3px ".concat((0, _color.fade)(borderColor, 10))
  };
  var activeStyles = {
    backgroundColor: (0, _color.fade)(borderColor, 35),
    borderColor: (0, _color.darken)(borderColor, 25),
    boxShadow: 'none'
  };
  return {
    base: {
      'background': 'none',
      'borderColor': borderColor,
      'color': textColor,
      ':hover': focusAndHoverStyles,
      ':focus ': Object.assign({}, focusAndHoverStyles, focusOnlyStyles),
      ':active': activeStyles
    },
    active: activeStyles
  };
}

;

exports.hollow = function (color) {
  // TODO: better handling of cancel and delete colors
  if (color === 'cancel' || color === 'delete') color = 'danger';
  return buttonHollowVariant(_theme["default"].button[color].bgColor, _theme["default"].button[color].borderColor);
}; // Link Variant
// ----------------


function buttonLinkVariant(textColor, hoverColor) {
  var hoverStyles = {
    color: hoverColor,
    textDecoration: 'underline'
  };
  return {
    base: {
      'background': 'none',
      'border': 0,
      'boxShadow': 'none',
      'color': textColor,
      'fontWeight': 'normal',
      'outline': 'none',
      ':hover': hoverStyles,
      ':focus': hoverStyles,
      ':active': hoverStyles
    },
    active: hoverStyles
  };
}

;

function buttonLinkDelete() {
  var styles = buttonLinkVariant(_theme["default"].color.gray40, _theme["default"].color.danger);

  var hoverStyles = _objectSpread({}, (0, _css.gradientVertical)((0, _color.lighten)(_theme["default"].color.danger, 10), (0, _color.darken)(_theme["default"].color.danger, 10)), {
    backgroundColor: _theme["default"].color.danger,
    borderColor: "".concat((0, _color.darken)(_theme["default"].color.danger, 4), " ").concat((0, _color.darken)(_theme["default"].color.danger, 8), " ").concat((0, _color.darken)(_theme["default"].color.danger, 12)),
    boxShadow: '0 1px 0 rgba(0,0,0,0.1)',
    color: 'white',
    textDecoration: 'none'
  });

  var activeStyles = {
    backgroundColor: (0, _color.darken)(_theme["default"].color.danger, 4),
    backgroundImage: 'none',
    borderColor: "".concat((0, _color.darken)(_theme["default"].color.danger, 12), " ").concat((0, _color.darken)(_theme["default"].color.danger, 8), " ").concat((0, _color.darken)(_theme["default"].color.danger, 8)),
    boxShadow: 'inset 0 1px 2px rgba(0, 0, 0, 0.1)',
    color: 'white'
  };
  return {
    base: _objectSpread({}, styles.base, {
      ':hover': hoverStyles,
      ':focus': hoverStyles,
      ':active': activeStyles
    }),
    active: activeStyles
  };
}

exports.link = function (color) {
  switch (color) {
    case 'default':
      return buttonLinkVariant(_theme["default"].color.link, _theme["default"].color.linkHover);

    case 'cancel':
      return buttonLinkVariant(_theme["default"].color.gray40, _theme["default"].color.danger);

    case 'delete':
      return buttonLinkDelete();

    default:
      return buttonLinkVariant(_theme["default"].color[color], _theme["default"].color[color]);
  }
};

},{"../../../theme":149,"../../../utils/color":151,"../../../utils/css":153}],16:[function(require,module,exports){
"use strict";

var _react = _interopRequireWildcard(require("react"));

var _glamor = require("glamor");

var _styles = _interopRequireDefault(require("./styles"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function Center(_ref) {
  var className = _ref.className,
      Component = _ref.component,
      height = _ref.height,
      style = _ref.style,
      props = _objectWithoutProperties(_ref, ["className", "component", "height", "style"]);

  props.className = (0, _glamor.css)(_styles["default"].center, className);
  props.style = _objectSpread({
    height: height
  }, style);
  return _react["default"].createElement(Component, props);
}

;
Center.propTypes = {
  component: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.string]),
  height: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string])
};
Center.defaultProps = {
  component: 'div',
  height: 'auto'
};
module.exports = Center;

},{"./styles":17,"glamor":undefined,"react":undefined}],17:[function(require,module,exports){
"use strict";

// ==============================
// Center
// ==============================
module.exports = {
  center: {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center'
  }
};

},{}],18:[function(require,module,exports){
"use strict";

var _theme = _interopRequireDefault(require("../../../theme"));

var _color = require("../../../utils/color");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var baseColors = {};
['danger', 'info', 'primary', 'success', 'warning'].forEach(function (color) {
  baseColors[color] = {
    background: (0, _color.fade)(_theme["default"].color[color], 10),
    backgroundActive: (0, _color.fade)(_theme["default"].color[color], 20),
    backgroundHover: (0, _color.fade)(_theme["default"].color[color], 15),
    text: _theme["default"].color[color]
  };
});
var invertedColors = {};
['danger', 'info', 'primary', 'success', 'warning'].forEach(function (color) {
  invertedColors[color + '__inverted'] = {
    background: _theme["default"].color[color],
    backgroundActive: (0, _color.lighten)(_theme["default"].color[color], 5),
    backgroundHover: (0, _color.lighten)(_theme["default"].color[color], 15),
    text: 'white'
  };
});
module.exports = _objectSpread({
  "default": {
    background: _theme["default"].color.gray10,
    backgroundActive: _theme["default"].color.gray20,
    backgroundHover: _theme["default"].color.gray15,
    text: _theme["default"].color.gray60
  }
}, baseColors, {
  // inverted
  default__inverted: {
    background: _theme["default"].color.gray60,
    backgroundActive: (0, _color.lighten)(_theme["default"].color.gray60, 5),
    backgroundHover: (0, _color.lighten)(_theme["default"].color.gray60, 15),
    text: 'white'
  }
}, invertedColors);

},{"../../../theme":149,"../../../utils/color":151}],19:[function(require,module,exports){
"use strict";

var _glamor = require("glamor");

var _react = _interopRequireWildcard(require("react"));

var _styles = _interopRequireDefault(require("./styles"));

var _colors = _interopRequireDefault(require("./colors"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function Chip(_ref) {
  var className = _ref.className,
      children = _ref.children,
      color = _ref.color,
      inverted = _ref.inverted,
      label = _ref.label,
      onClear = _ref.onClear,
      onClick = _ref.onClick,
      props = _objectWithoutProperties(_ref, ["className", "children", "color", "inverted", "label", "onClear", "onClick"]);

  props.className = (0, _glamor.css)(_styles["default"].chip, className);
  var labelClassName = (0, _glamor.css)(_styles["default"].button, _styles["default"].label, _styles["default"]['button__' + color + (inverted ? '__inverted' : '')]);
  var clearClassName = (0, _glamor.css)(_styles["default"].button, _styles["default"].clear, _styles["default"]['button__' + color + (inverted ? '__inverted' : '')]);
  return _react["default"].createElement("div", props, _react["default"].createElement("button", {
    type: "button",
    onClick: onClick,
    className: labelClassName
  }, label, children), !!onClear && _react["default"].createElement("button", {
    type: "button",
    onClick: onClear,
    className: clearClassName
  }, "\xD7"));
}

;
Chip.propTypes = {
  color: _react.PropTypes.oneOf(Object.keys(_colors["default"])).isRequired,
  inverted: _react.PropTypes.bool,
  label: _react["default"].PropTypes.string.isRequired,
  onClear: _react["default"].PropTypes.func,
  onClick: _react["default"].PropTypes.func
};
Chip.defaultProps = {
  color: 'default'
};
module.exports = Chip;

},{"./colors":18,"./styles":20,"glamor":undefined,"react":undefined}],20:[function(require,module,exports){
"use strict";

var _colors = _interopRequireDefault(require("./colors"));

var _theme = _interopRequireDefault(require("../../../theme"));

var _css = require("../../../utils/css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Prepare variants
var colorVariants = {};
Object.keys(_colors["default"]).forEach(function (color) {
  var hoverStyles = {
    backgroundColor: _colors["default"][color].backgroundHover
  };
  colorVariants['button__' + color] = {
    backgroundColor: _colors["default"][color].background,
    color: _colors["default"][color].text,
    ':hover': hoverStyles,
    ':focus': hoverStyles,
    ':active': {
      backgroundColor: _colors["default"][color].backgroundActive
    }
  };
});
module.exports = _objectSpread({
  chip: {
    display: 'inline-block',
    fontSize: _theme["default"].font.size.small,
    fontWeight: 500,
    marginRight: '0.5em',
    overflow: 'hidden',
    lineHeight: '2.2em'
  },
  // tagnames
  button: {
    appearance: 'none',
    background: 'none',
    border: 'none',
    cursor: 'pointer',
    display: 'block',
    "float": 'left',
    padding: '0 .9em',
    outline: 'none',
    // make pills - exaggerate the padding toward the radii so it looks even
    ':first-child': _objectSpread({}, (0, _css.borderLeftRadius)('3em'), {
      paddingLeft: '1.1em'
    }),
    ':last-child': _objectSpread({}, (0, _css.borderRightRadius)('3em'), {
      paddingRight: '1.1em'
    })
  },
  // provide separation between the label and clear buttons
  // floating stops the margins from collapsing into eaching
  label: {
    marginRight: 1
  },
  clear: {
    marginLeft: 1
  }
}, colorVariants);

},{"../../../theme":149,"../../../utils/css":153,"./colors":18}],21:[function(require,module,exports){
"use strict";

var _glamor = require("glamor");

var _react = _interopRequireWildcard(require("react"));

var _styles = _interopRequireDefault(require("./styles"));

var _sizes = _interopRequireDefault(require("./sizes"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function Container(_ref) {
  var className = _ref.className,
      clearFloatingChildren = _ref.clearFloatingChildren,
      Component = _ref.component,
      width = _ref.width,
      props = _objectWithoutProperties(_ref, ["className", "clearFloatingChildren", "component", "width"]);

  props.className = (0, _glamor.css)(_styles["default"].container, _styles["default"][width], clearFloatingChildren ? _styles["default"].clearfix : null, className);
  return _react["default"].createElement(Component, props);
}

;
Container.propTypes = {
  clearFloatingChildren: _react.PropTypes.bool,
  component: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.string]).isRequired,
  width: _react.PropTypes.oneOf(Object.keys(_sizes["default"])).isRequired
};
Container.defaultProps = {
  component: 'div',
  width: 'large'
};
module.exports = Container;

},{"./sizes":22,"./styles":23,"glamor":undefined,"react":undefined}],22:[function(require,module,exports){
"use strict";

var _theme = _interopRequireDefault(require("../../../theme"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

module.exports = {
  small: _theme["default"].container.size.small,
  medium: _theme["default"].container.size.medium,
  large: _theme["default"].container.size.large
};

},{"../../../theme":149}],23:[function(require,module,exports){
"use strict";

var _sizes = _interopRequireDefault(require("./sizes"));

var _theme = _interopRequireDefault(require("../../../theme"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Prepare sizes
var sizeVariants = {};
Object.keys(_sizes["default"]).forEach(function (size) {
  sizeVariants[size] = {
    maxWidth: _sizes["default"][size]
  };
});
/*
	Micro clearfix hack
	1.	The space content is one way to avoid an Opera bug when the
			contenteditable attribute is included anywhere else in the document.
			Otherwise it causes space to appear at the top and bottom of elements
			that are clearfixed.
	2.	The use of `table` rather than `block` is only necessary if using
			`:before` to contain the top-margins of child elements.
*/

var clearfixStyles = {
  clear: 'both',
  content: '" "',
  // 1
  display: 'table' // 2

};
module.exports = _objectSpread({
  container: {
    marginLeft: 'auto',
    marginRight: 'auto',
    paddingLeft: _theme["default"].container.gutter,
    paddingRight: _theme["default"].container.gutter
  },
  // clear floating children
  clearfix: {
    ':before': clearfixStyles,
    ':after': clearfixStyles
  }
}, sizeVariants);

},{"../../../theme":149,"./sizes":22}],24:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _glamor = require("glamor");

var _Button = _interopRequireDefault(require("../Button"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function DropdownButton(_ref) {
  var children = _ref.children,
      props = _objectWithoutProperties(_ref, ["children"]);

  return _react["default"].createElement(_Button["default"], props, children, _react["default"].createElement("span", {
    className: (0, _glamor.css)(classes.arrow)
  }));
}

; // NOTE
// 1: take advantage of `currentColor` by leaving border top color undefined
// 2: even though the arrow is vertically centered, visually it appears too low
//    because of lowercase characters beside it

var classes = {
  arrow: {
    borderLeft: '0.3em solid transparent',
    borderRight: '0.3em solid transparent',
    borderTop: '0.3em solid',
    // 1
    display: 'inline-block',
    height: 0,
    marginTop: '-0.125em',
    // 2
    verticalAlign: 'middle',
    width: 0,
    // add spacing
    ':first-child': {
      marginRight: '0.5em'
    },
    ':last-child': {
      marginLeft: '0.5em'
    }
  }
};
module.exports = DropdownButton;

},{"../Button":14,"glamor":undefined,"react":undefined}],25:[function(require,module,exports){
"use strict";

var _glamor = require("glamor");

var _react = _interopRequireWildcard(require("react"));

var _styles = _interopRequireDefault(require("./styles"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Form =
/*#__PURE__*/
function (_Component) {
  _inherits(Form, _Component);

  function Form() {
    _classCallCheck(this, Form);

    return _possibleConstructorReturn(this, _getPrototypeOf(Form).apply(this, arguments));
  }

  _createClass(Form, [{
    key: "getChildContext",
    value: function getChildContext() {
      return {
        formLayout: this.props.layout,
        labelWidth: this.props.labelWidth
      };
    }
  }, {
    key: "render",
    value: function render() {
      // NOTE `labelWidth` is declared to remove it from `props`, though never used
      var _this$props = this.props,
          className = _this$props.className,
          Component = _this$props.component,
          labelWidth = _this$props.labelWidth,
          layout = _this$props.layout,
          props = _objectWithoutProperties(_this$props, ["className", "component", "labelWidth", "layout"]);

      props.className = (0, _glamor.css)(_styles["default"].Form, _styles["default"]['Form__' + layout], className);
      return _react["default"].createElement(Component, props);
    }
  }]);

  return Form;
}(_react.Component);

;
Form.childContextTypes = {
  formLayout: _react.PropTypes.oneOf(['basic', 'horizontal', 'inline']),
  labelWidth: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string])
};
Form.propTypes = {
  children: _react.PropTypes.node.isRequired,
  component: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.func]),
  layout: _react.PropTypes.oneOf(['basic', 'horizontal', 'inline'])
};
Form.defaultProps = {
  component: 'form',
  layout: 'basic'
};
module.exports = Form;

},{"./styles":26,"glamor":undefined,"react":undefined}],26:[function(require,module,exports){
"use strict";

// ==============================
// Form
// ==============================
module.exports = {
  Form: {}
};

},{}],27:[function(require,module,exports){
"use strict";

var _glamor = require("glamor");

var _react = _interopRequireWildcard(require("react"));

var _styles = _interopRequireDefault(require("./styles"));

var _FormLabel = _interopRequireDefault(require("../FormLabel"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var FormField =
/*#__PURE__*/
function (_Component) {
  _inherits(FormField, _Component);

  function FormField() {
    var _this;

    _classCallCheck(this, FormField);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(FormField).call(this));
    _this.formFieldId = generateId();
    return _this;
  }

  _createClass(FormField, [{
    key: "getChildContext",
    value: function getChildContext() {
      return {
        formFieldId: this.formFieldId
      };
    }
  }, {
    key: "render",
    value: function render() {
      var _this$context = this.context,
          _this$context$formLay = _this$context.formLayout,
          formLayout = _this$context$formLay === void 0 ? 'basic' : _this$context$formLay,
          labelWidth = _this$context.labelWidth;

      var _this$props = this.props,
          cssStyles = _this$props.cssStyles,
          children = _this$props.children,
          className = _this$props.className,
          cropLabel = _this$props.cropLabel,
          htmlFor = _this$props.htmlFor,
          label = _this$props.label,
          offsetAbsentLabel = _this$props.offsetAbsentLabel,
          props = _objectWithoutProperties(_this$props, ["cssStyles", "children", "className", "cropLabel", "htmlFor", "label", "offsetAbsentLabel"]);

      props.className = (0, _glamor.css)(_styles["default"].FormField, _styles["default"]['FormField--form-layout-' + formLayout], offsetAbsentLabel ? _styles["default"]['FormField--offset-absent-label'] : null, cssStyles);

      if (className) {
        props.className += ' ' + className;
      }

      if (offsetAbsentLabel && labelWidth) {
        props.style = _objectSpread({
          paddingLeft: labelWidth
        }, props.style);
      } // elements


      var componentLabel = label ? _react["default"].createElement(_FormLabel["default"], {
        htmlFor: htmlFor,
        cropText: cropLabel
      }, label) : null;
      return _react["default"].createElement("div", _extends({}, props, {
        htmlFor: htmlFor
      }), componentLabel, children);
    }
  }]);

  return FormField;
}(_react.Component);

;
var stylesShape = {
  _definition: _react.PropTypes.object,
  _name: _react.PropTypes.string
};
FormField.contextTypes = {
  formLayout: _react.PropTypes.oneOf(['basic', 'horizontal', 'inline']),
  labelWidth: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string])
};
FormField.childContextTypes = {
  formFieldId: _react.PropTypes.string
};
FormField.propTypes = {
  children: _react.PropTypes.node,
  cropLabel: _react.PropTypes.bool,
  cssStyles: _react.PropTypes.oneOfType([_react.PropTypes.arrayOf(_react.PropTypes.shape(stylesShape)), _react.PropTypes.shape(stylesShape)]),
  htmlFor: _react["default"].PropTypes.string,
  label: _react["default"].PropTypes.string,
  offsetAbsentLabel: _react["default"].PropTypes.bool
};

function generateId() {
  return Math.random().toString(36).substr(2, 9);
}

;
module.exports = FormField;

},{"../FormLabel":32,"./styles":28,"glamor":undefined,"react":undefined}],28:[function(require,module,exports){
"use strict";

var _theme = _interopRequireDefault(require("../../../theme"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = {
  'FormField': {
    marginBottom: '1em',
    position: 'relative'
  },
  // when inside a horizontal form
  'FormField--form-layout-horizontal': _defineProperty({}, "@media (min-width: ".concat(_theme["default"].breakpoint.tabletLandscapeMin, ")"), {
    display: 'table',
    tableLayout: 'fixed',
    width: '100%'
  }),
  // inside horizontal form
  // typically for use with submit button inside
  'FormField--offset-absent-label': {
    paddingLeft: _theme["default"].form.label.width
  },
  // when inside an inline form
  'FormField--form-layout-inline': {
    'display': 'inline-block',
    'paddingLeft': '0.25em',
    'paddingRight': '0.25em',
    'verticalAlign': 'top',
    ':first-child': {
      paddingLeft: 0
    },
    ':last-child': {
      paddingRight: 0
    }
  }
};

},{"../../../theme":149}],29:[function(require,module,exports){
"use strict";

var _react = _interopRequireWildcard(require("react"));

var _glamor = require("glamor");

var _styles = _interopRequireDefault(require("./styles"));

var _concatClassnames = _interopRequireDefault(require("../../../utils/concatClassnames"));

var _noedit = _interopRequireDefault(require("./noedit"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

// NOTE must NOT be functional component to allow `refs`
var FormInput =
/*#__PURE__*/
function (_Component) {
  _inherits(FormInput, _Component);

  function FormInput() {
    _classCallCheck(this, FormInput);

    return _possibleConstructorReturn(this, _getPrototypeOf(FormInput).apply(this, arguments));
  }

  _createClass(FormInput, [{
    key: "blur",
    value: function blur() {
      this.target.blur();
    }
  }, {
    key: "focus",
    value: function focus() {
      this.target.focus();
    }
  }, {
    key: "render",
    value: function render() {
      var _this = this;

      var _this$props = this.props,
          cssStyles = _this$props.cssStyles,
          className = _this$props.className,
          disabled = _this$props.disabled,
          id = _this$props.id,
          multiline = _this$props.multiline,
          noedit = _this$props.noedit,
          size = _this$props.size,
          props = _objectWithoutProperties(_this$props, ["cssStyles", "className", "disabled", "id", "multiline", "noedit", "size"]); // NOTE return a different component for `noedit`


      if (noedit) return _react["default"].createElement(_noedit["default"], this.props);
      var _this$context = this.context,
          formFieldId = _this$context.formFieldId,
          formLayout = _this$context.formLayout;
      props.id = id || formFieldId;
      props.className = _glamor.css.apply(void 0, [_styles["default"].FormInput, _styles["default"]['FormInput__size--' + size], disabled ? _styles["default"]['FormInput--disabled'] : null, formLayout ? _styles["default"]['FormInput--form-layout-' + formLayout] : null].concat(_toConsumableArray((0, _concatClassnames["default"])(cssStyles))));

      if (className) {
        props.className += ' ' + className;
      }

      var setRef = function setRef(n) {
        return _this.target = n;
      };

      var Tag = multiline ? 'textarea' : 'input';
      return _react["default"].createElement(Tag, _extends({
        ref: setRef,
        disabled: props.disabled
      }, props));
    }
  }]);

  return FormInput;
}(_react.Component);

;
var stylesShape = {
  _definition: _react.PropTypes.object,
  _name: _react.PropTypes.string
};
FormInput.propTypes = {
  cssStyles: _react.PropTypes.oneOfType([_react.PropTypes.arrayOf(_react.PropTypes.shape(stylesShape)), _react.PropTypes.shape(stylesShape)]),
  multiline: _react.PropTypes.bool,
  size: _react.PropTypes.oneOf(['default', 'small', 'large']),
  type: _react.PropTypes.string
};
FormInput.defaultProps = {
  size: 'default',
  type: 'text'
};
FormInput.contextTypes = {
  formLayout: _react.PropTypes.oneOf(['basic', 'horizontal', 'inline']),
  formFieldId: _react.PropTypes.string
};
module.exports = FormInput;

},{"../../../utils/concatClassnames":152,"./noedit":30,"./styles":31,"glamor":undefined,"react":undefined}],30:[function(require,module,exports){
"use strict";

var _react = _interopRequireWildcard(require("react"));

var _glamor = require("glamor");

var _theme = _interopRequireDefault(require("../../../theme"));

var _color = require("../../../utils/color");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/* eslint quote-props: ["error", "as-needed"] */
function FormInputNoedit(_ref) {
  var className = _ref.className,
      Component = _ref.component,
      cropText = _ref.cropText,
      multiline = _ref.multiline,
      noedit = _ref.noedit,
      type = _ref.type,
      props = _objectWithoutProperties(_ref, ["className", "component", "cropText", "multiline", "noedit", "type"]);

  props.className = (0, _glamor.css)(classes.noedit, cropText ? classes.cropText : null, multiline ? classes.multiline : null, props.href || props.onClick ? classes.anchor : null, className);
  return _react["default"].createElement(Component, props);
}

;
FormInputNoedit.propTypes = {
  component: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.func]),
  cropText: _react.PropTypes.bool
};
FormInputNoedit.defaultProps = {
  component: 'span'
};
var anchorHoverAndFocusStyles = {
  backgroundColor: (0, _color.fade)(_theme["default"].color.link, 10),
  borderColor: (0, _color.fade)(_theme["default"].color.link, 10),
  color: _theme["default"].color.link,
  outline: 'none',
  textDecoration: 'underline'
};
var classes = {
  noedit: {
    appearance: 'none',
    backgroundColor: _theme["default"].input.background.noedit,
    backgroundImage: 'none',
    borderColor: _theme["default"].input.border.color.noedit,
    borderRadius: _theme["default"].input.border.radius,
    borderStyle: 'solid',
    borderWidth: _theme["default"].input.border.width,
    color: _theme["default"].color.gray80,
    display: 'inline-block',
    lineHeight: _theme["default"].input.lineHeight,
    padding: "0 ".concat(_theme["default"].input.paddingHorizontal),
    transition: 'border-color ease-in-out 0.15s, box-shadow ease-in-out 0.15s',
    verticalAlign: 'middle',
    // prevent empty inputs from collapsing by adding content
    ':empty:before': {
      color: _theme["default"].color.gray40,
      content: '"(no value)"'
    }
  },
  multiline: {
    display: 'block',
    height: 'auto',
    lineHeight: '1.4',
    paddingBottom: '0.6em',
    paddingTop: '0.6em'
  },
  // indicate clickability when using an anchor
  anchor: {
    backgroundColor: (0, _color.fade)(_theme["default"].color.link, 5),
    borderColor: (0, _color.fade)(_theme["default"].color.link, 10),
    color: _theme["default"].color.link,
    marginRight: 5,
    minWidth: 0,
    textDecoration: 'none',
    ':hover': anchorHoverAndFocusStyles,
    ':focus': anchorHoverAndFocusStyles
  }
};
module.exports = FormInputNoedit;

},{"../../../theme":149,"../../../utils/color":151,"glamor":undefined,"react":undefined}],31:[function(require,module,exports){
"use strict";

var _theme = _interopRequireDefault(require("../../../theme"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// ==============================
// Form Input
// ==============================
module.exports = {
  'FormInput': {
    'appearance': 'none',
    'backgroundColor': _theme["default"].input.background["default"],
    'backgroundImage': 'none',
    'borderColor': _theme["default"].input.border.color["default"],
    'borderRadius': _theme["default"].input.border.radius,
    'borderStyle': 'solid',
    'borderWidth': _theme["default"].input.border.width,
    'boxShadow': _theme["default"].input.boxShadow,
    'color': 'inherit',
    // FIXME
    'display': 'block',
    'height': _theme["default"].input.height,
    'lineHeight': _theme["default"].input.lineHeight,
    'padding': "0 ".concat(_theme["default"].input.paddingHorizontal),
    'transition': 'border-color ease-in-out 0.15s, box-shadow ease-in-out 0.15s',
    'width': '100%',
    ':hover': {
      borderColor: _theme["default"].input.border.color.hover,
      outline: 0
    },
    ':focus': {
      borderColor: _theme["default"].input.border.color.focus,
      boxShadow: _theme["default"].input.boxShadowFocus,
      outline: 0
    }
  },
  'FormInput--disabled': {
    backgroundColor: _theme["default"].input.background.disabled,
    pointerEvents: 'none'
  },
  // sizes
  'FormInput__size--small': {
    fontSize: _theme["default"].font.size.small
  },
  'FormInput__size--large': {
    fontSize: _theme["default"].font.size.large
  }
};

},{"../../../theme":149}],32:[function(require,module,exports){
"use strict";

var _glamor = require("glamor");

var _react = _interopRequireWildcard(require("react"));

var _styles = _interopRequireDefault(require("./styles"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function FormLabel(_ref, _ref2) {
  var cssStyles = _ref.cssStyles,
      className = _ref.className,
      Component = _ref.component,
      cropText = _ref.cropText,
      htmlFor = _ref.htmlFor,
      props = _objectWithoutProperties(_ref, ["cssStyles", "className", "component", "cropText", "htmlFor"]);

  var formFieldId = _ref2.formFieldId,
      formLayout = _ref2.formLayout,
      labelWidth = _ref2.labelWidth;
  props.htmlFor = htmlFor || formFieldId;
  props.className = (0, _glamor.css)(_styles["default"].FormLabel, formLayout ? _styles["default"]['FormLabel--form-layout-' + formLayout] : null, cropText ? _styles["default"]['FormLabel--crop-text'] : null, cssStyles);

  if (className) {
    props.className += ' ' + className;
  }

  if (labelWidth) {
    props.style = _objectSpread({
      width: labelWidth
    }, props.style);
  }

  return _react["default"].createElement(Component, props);
}

;
var stylesShape = {
  _definition: _react.PropTypes.object,
  _name: _react.PropTypes.string
};
FormLabel.propTypes = {
  component: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.func]),
  cropText: _react.PropTypes.bool,
  cssStyles: _react.PropTypes.oneOfType([_react.PropTypes.arrayOf(_react.PropTypes.shape(stylesShape)), _react.PropTypes.shape(stylesShape)])
};
FormLabel.defaultProps = {
  component: 'label'
};
FormLabel.contextTypes = {
  formLayout: _react.PropTypes.oneOf(['basic', 'horizontal', 'inline']),
  formFieldId: _react.PropTypes.string,
  labelWidth: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string])
};
module.exports = FormLabel;

},{"./styles":33,"glamor":undefined,"react":undefined}],33:[function(require,module,exports){
"use strict";

var _theme = _interopRequireDefault(require("../../../theme"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

module.exports = {
  'FormLabel': {
    color: _theme["default"].form.label.color,
    fontSize: _theme["default"].form.label.fontSize,
    fontWeight: _theme["default"].form.label.fontWeight,
    display: 'inline-block',
    marginBottom: '0.5em'
  },
  // when inside a horizontal form
  'FormLabel--form-layout-horizontal': _defineProperty({}, "@media (min-width: ".concat(_theme["default"].breakpoint.tabletLandscapeMin, ")"), {
    display: 'table-cell',
    lineHeight: _theme["default"].component.lineHeight,
    // fix
    marginBottom: 0,
    paddingRight: 5,
    verticalAlign: 'top',
    width: _theme["default"].form.label.width
  }),
  // crop long text
  'FormLabel--crop-text': {
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap'
  }
};

},{"../../../theme":149}],34:[function(require,module,exports){
"use strict";

var _react = _interopRequireWildcard(require("react"));

var _glamor = require("glamor");

var _styles = _interopRequireDefault(require("./styles"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function FormNote(_ref) {
  var className = _ref.className,
      children = _ref.children,
      Component = _ref.component,
      html = _ref.html,
      props = _objectWithoutProperties(_ref, ["className", "children", "component", "html"]);

  props.className = (0, _glamor.css)(_styles["default"].note, className); // Property Violation

  if (children && html) {
    console.error('Warning: FormNote cannot render `children` and `html`. You must provide one or the other.');
  }

  return html ? _react["default"].createElement(Component, _extends({}, props, {
    dangerouslySetInnerHTML: {
      __html: html
    }
  })) : _react["default"].createElement(Component, props, children);
}

;
FormNote.propTypes = {
  component: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.string]),
  html: _react.PropTypes.string
};
FormNote.defaultProps = {
  component: 'div'
};
module.exports = FormNote;

},{"./styles":35,"glamor":undefined,"react":undefined}],35:[function(require,module,exports){
"use strict";

var _theme = _interopRequireDefault(require("../../../theme"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// ==============================
// Form Note
// ==============================
module.exports = {
  note: {
    color: _theme["default"].form.note.color,
    fontSize: _theme["default"].form.note.fontSize,
    marginTop: _theme["default"].spacing.small
  }
};

},{"../../../theme":149}],36:[function(require,module,exports){
"use strict";

var _glamor = require("glamor");

var _react = _interopRequireWildcard(require("react"));

var _styles = _interopRequireDefault(require("./styles"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var FormSelect =
/*#__PURE__*/
function (_Component) {
  _inherits(FormSelect, _Component);

  function FormSelect() {
    _classCallCheck(this, FormSelect);

    return _possibleConstructorReturn(this, _getPrototypeOf(FormSelect).apply(this, arguments));
  }

  _createClass(FormSelect, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          id = _this$props.id,
          options = _this$props.options,
          props = _objectWithoutProperties(_this$props, ["children", "id", "options"]);

      var formFieldId = this.context.formFieldId;
      props.className = (0, _glamor.css)(_styles["default"].select, props.disabled ? _styles["default"]['select--disabled'] : null);
      props.id = id || formFieldId; // Property Violation

      if (options && children) {
        console.error('Warning: FormSelect cannot render `children` and `options`. You must provide one or the other.');
      }

      return _react["default"].createElement("div", {
        className: (0, _glamor.css)(_styles["default"].container)
      }, options ? _react["default"].createElement("select", props, options.map(function (opt) {
        return _react["default"].createElement("option", {
          key: opt.value,
          value: opt.value
        }, opt.label);
      })) : _react["default"].createElement("select", props, children), _react["default"].createElement("span", {
        className: (0, _glamor.css)(_styles["default"].arrows, props.disabled ? _styles["default"]['arrows--disabled'] : null)
      }, _react["default"].createElement("span", {
        className: (0, _glamor.css)(_styles["default"].arrow, _styles["default"].arrowTop)
      }), _react["default"].createElement("span", {
        className: (0, _glamor.css)(_styles["default"].arrow, _styles["default"].arrowBottom)
      })));
    }
  }]);

  return FormSelect;
}(_react.Component);

;
FormSelect.contextTypes = {
  formFieldId: _react.PropTypes.string
};
FormSelect.propTypes = {
  onChange: _react.PropTypes.func.isRequired,
  options: _react["default"].PropTypes.arrayOf(_react["default"].PropTypes.shape({
    label: _react["default"].PropTypes.string,
    value: _react["default"].PropTypes.string
  })),
  value: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string])
};
module.exports = FormSelect;

},{"./styles":37,"glamor":undefined,"react":undefined}],37:[function(require,module,exports){
"use strict";

var _theme = _interopRequireDefault(require("../../../theme"));

var _color = require("../../../utils/color");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// ==============================
// Form Select
// ==============================

/* eslint quote-props: ["error", "as-needed"] */
module.exports = {
  container: {
    position: 'relative'
  },
  // select node
  select: {
    appearance: 'none',
    backgroundColor: _theme["default"].input.background["default"],
    backgroundImage: 'none',
    borderColor: _theme["default"].input.border.color["default"],
    borderBottomColor: (0, _color.darken)(_theme["default"].input.border.color["default"], 4),
    borderTopColor: (0, _color.lighten)(_theme["default"].input.border.color["default"], 4),
    borderRadius: _theme["default"].input.border.radius,
    borderStyle: 'solid',
    borderWidth: _theme["default"].input.border.width,
    boxShadow: _theme["default"].select.boxShadow,
    color: 'inherit',
    // FIXME
    display: 'block',
    height: _theme["default"].input.height,
    lineHeight: _theme["default"].input.lineHeight,
    padding: "0 ".concat(_theme["default"].input.paddingHorizontal),
    transition: 'border-color ease-in-out 0.15s, box-shadow ease-in-out 0.15s',
    width: '100%',
    ':hover': {
      borderColor: _theme["default"].input.border.color.hover,
      outline: 0
    },
    ':focus': {
      borderColor: _theme["default"].input.border.color.focus,
      boxShadow: _theme["default"].input.boxShadowFocus,
      outline: 0
    }
  },
  'select--disabled': {
    backgroundColor: _theme["default"].input.background.disabled,
    pointerEvents: 'none'
  },
  // arrows
  arrows: {
    alignItems: 'center',
    display: 'flex',
    flexDirection: 'column',
    height: _theme["default"].input.height,
    justifyContent: 'center',
    pointerEvents: 'none',
    position: 'absolute',
    right: 0,
    top: 0,
    width: _theme["default"].input.height
  },
  arrow: {
    borderLeft: '0.3em solid transparent',
    borderRight: '0.3em solid transparent',
    display: 'inline-block',
    height: 0,
    verticalAlign: 'middle',
    width: 0,
    zIndex: 1
  },
  arrowTop: {
    borderBottom: '0.3em solid',
    marginBottom: '0.1em'
  },
  arrowBottom: {
    borderTop: '0.3em solid',
    marginTop: '0.1em'
  }
};

},{"../../../theme":149,"../../../utils/color":151}],38:[function(require,module,exports){
"use strict";

var _theme = _interopRequireDefault(require("../../../theme"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

module.exports = {
  danger: _theme["default"].glyph.color.danger,
  inherit: _theme["default"].glyph.color.inherit,
  inverted: _theme["default"].glyph.color.inverted,
  primary: _theme["default"].glyph.color.primary,
  success: _theme["default"].glyph.color.success,
  warning: _theme["default"].glyph.color.warning
};

},{"../../../theme":149}],39:[function(require,module,exports){
"use strict";

var _glamor = require("glamor");

var _react = _interopRequireWildcard(require("react"));

var _octicons = _interopRequireDefault(require("./octicons"));

var _colors = _interopRequireDefault(require("./colors"));

var _sizes = _interopRequireDefault(require("./sizes"));

var _styles = _interopRequireDefault(require("./styles"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

// FIXME static octicon classes leaning on Elemental to avoid duplicate
// font and CSS; inflating the project size
function Glyph(_ref) {
  var cssStyles = _ref.cssStyles,
      className = _ref.className,
      color = _ref.color,
      Component = _ref.component,
      name = _ref.name,
      size = _ref.size,
      style = _ref.style,
      props = _objectWithoutProperties(_ref, ["cssStyles", "className", "color", "component", "name", "size", "style"]);

  var colorIsValidType = Object.keys(_colors["default"]).includes(color);
  props.className = (0, _glamor.css)(_styles["default"].glyph, colorIsValidType && _styles["default"]['color__' + color], _styles["default"]['size__' + size], cssStyles) + " ".concat(_octicons["default"][name]);

  if (className) {
    props.className += ' ' + className;
  } // support random color strings


  props.style = _objectSpread({
    color: !colorIsValidType ? color : null
  }, style);
  return _react["default"].createElement(Component, props);
}

;
Glyph.propTypes = {
  color: _react.PropTypes.oneOfType([_react.PropTypes.oneOf(Object.keys(_colors["default"])), _react.PropTypes.string]),
  cssStyles: _react.PropTypes.shape({
    _definition: _react.PropTypes.object,
    _name: _react.PropTypes.string
  }),
  name: _react.PropTypes.oneOf(Object.keys(_octicons["default"])).isRequired,
  size: _react.PropTypes.oneOf(Object.keys(_sizes["default"]))
};
Glyph.defaultProps = {
  component: 'i',
  color: 'inherit',
  size: 'small'
};
module.exports = Glyph;

},{"./colors":38,"./octicons":40,"./sizes":41,"./styles":42,"glamor":undefined,"react":undefined}],40:[function(require,module,exports){
"use strict";

/* eslint quote-props: ["error", "as-needed"] */
module.exports = {
  alert: 'octicon octicon-alert',
  'arrow-down': 'octicon octicon-arrow-down',
  'arrow-left': 'octicon octicon-arrow-left',
  'arrow-right': 'octicon octicon-arrow-right',
  'arrow-small-down': 'octicon octicon-arrow-small-down',
  'arrow-small-left': 'octicon octicon-arrow-small-left',
  'arrow-small-right': 'octicon octicon-arrow-small-right',
  'arrow-small-up': 'octicon octicon-arrow-small-up',
  'arrow-up': 'octicon octicon-arrow-up',
  microscope: 'octicon octicon-microscope',
  beaker: 'octicon octicon-beaker',
  bell: 'octicon octicon-bell',
  book: 'octicon octicon-book',
  bookmark: 'octicon octicon-bookmark',
  briefcase: 'octicon octicon-briefcase',
  broadcast: 'octicon octicon-broadcast',
  browser: 'octicon octicon-browser',
  bug: 'octicon octicon-bug',
  calendar: 'octicon octicon-calendar',
  check: 'octicon octicon-check',
  checklist: 'octicon octicon-checklist',
  'chevron-down': 'octicon octicon-chevron-down',
  'chevron-left': 'octicon octicon-chevron-left',
  'chevron-right': 'octicon octicon-chevron-right',
  'chevron-up': 'octicon octicon-chevron-up',
  'circle-slash': 'octicon octicon-circle-slash',
  'circuit-board': 'octicon octicon-circuit-board',
  clippy: 'octicon octicon-clippy',
  clock: 'octicon octicon-clock',
  'cloud-download': 'octicon octicon-cloud-download',
  'cloud-upload': 'octicon octicon-cloud-upload',
  code: 'octicon octicon-code',
  'color-mode': 'octicon octicon-color-mode',
  'comment-add': 'octicon octicon-comment-add',
  comment: 'octicon octicon-comment',
  'comment-discussion': 'octicon octicon-comment-discussion',
  'credit-card': 'octicon octicon-credit-card',
  dash: 'octicon octicon-dash',
  dashboard: 'octicon octicon-dashboard',
  database: 'octicon octicon-database',
  clone: 'octicon octicon-clone',
  'desktop-download': 'octicon octicon-desktop-download',
  'device-camera': 'octicon octicon-device-camera',
  'device-camera-video': 'octicon octicon-device-camera-video',
  'device-desktop': 'octicon octicon-device-desktop',
  'device-mobile': 'octicon octicon-device-mobile',
  diff: 'octicon octicon-diff',
  'diff-added': 'octicon octicon-diff-added',
  'diff-ignored': 'octicon octicon-diff-ignored',
  'diff-modified': 'octicon octicon-diff-modified',
  'diff-removed': 'octicon octicon-diff-removed',
  'diff-renamed': 'octicon octicon-diff-renamed',
  ellipsis: 'octicon octicon-ellipsis',
  'eye-unwatch': 'octicon octicon-eye-unwatch',
  'eye-watch': 'octicon octicon-eye-watch',
  eye: 'octicon octicon-eye',
  'file-binary': 'octicon octicon-file-binary',
  'file-code': 'octicon octicon-file-code',
  'file-directory': 'octicon octicon-file-directory',
  'file-media': 'octicon octicon-file-media',
  'file-pdf': 'octicon octicon-file-pdf',
  'file-submodule': 'octicon octicon-file-submodule',
  'file-symlink-directory': 'octicon octicon-file-symlink-directory',
  'file-symlink-file': 'octicon octicon-file-symlink-file',
  'file-text': 'octicon octicon-file-text',
  'file-zip': 'octicon octicon-file-zip',
  flame: 'octicon octicon-flame',
  fold: 'octicon octicon-fold',
  gear: 'octicon octicon-gear',
  gift: 'octicon octicon-gift',
  gist: 'octicon octicon-gist',
  'gist-secret': 'octicon octicon-gist-secret',
  'git-branch-create': 'octicon octicon-git-branch-create',
  'git-branch-delete': 'octicon octicon-git-branch-delete',
  'git-branch': 'octicon octicon-git-branch',
  'git-commit': 'octicon octicon-git-commit',
  'git-compare': 'octicon octicon-git-compare',
  'git-merge': 'octicon octicon-git-merge',
  'git-pull-request-abandoned': 'octicon octicon-git-pull-request-abandoned',
  'git-pull-request': 'octicon octicon-git-pull-request',
  globe: 'octicon octicon-globe',
  graph: 'octicon octicon-graph',
  heart: 'octicon octicon-heart',
  history: 'octicon octicon-history',
  home: 'octicon octicon-home',
  'horizontal-rule': 'octicon octicon-horizontal-rule',
  hubot: 'octicon octicon-hubot',
  inbox: 'octicon octicon-inbox',
  info: 'octicon octicon-info',
  'issue-closed': 'octicon octicon-issue-closed',
  'issue-opened': 'octicon octicon-issue-opened',
  'issue-reopened': 'octicon octicon-issue-reopened',
  jersey: 'octicon octicon-jersey',
  key: 'octicon octicon-key',
  keyboard: 'octicon octicon-keyboard',
  law: 'octicon octicon-law',
  'light-bulb': 'octicon octicon-light-bulb',
  link: 'octicon octicon-link',
  'link-external': 'octicon octicon-link-external',
  'list-ordered': 'octicon octicon-list-ordered',
  'list-unordered': 'octicon octicon-list-unordered',
  location: 'octicon octicon-location',
  'gist-private': 'octicon octicon-gist-private',
  'mirror-private': 'octicon octicon-mirror-private',
  'git-fork-private': 'octicon octicon-git-fork-private',
  lock: 'octicon octicon-lock',
  'logo-github': 'octicon octicon-logo-github',
  mail: 'octicon octicon-mail',
  'mail-read': 'octicon octicon-mail-read',
  'mail-reply': 'octicon octicon-mail-reply',
  'mark-github': 'octicon octicon-mark-github',
  markdown: 'octicon octicon-markdown',
  megaphone: 'octicon octicon-megaphone',
  mention: 'octicon octicon-mention',
  milestone: 'octicon octicon-milestone',
  'mirror-public': 'octicon octicon-mirror-public',
  mirror: 'octicon octicon-mirror',
  'mortar-board': 'octicon octicon-mortar-board',
  mute: 'octicon octicon-mute',
  'no-newline': 'octicon octicon-no-newline',
  octoface: 'octicon octicon-octoface',
  organization: 'octicon octicon-organization',
  "package": 'octicon octicon-package',
  paintcan: 'octicon octicon-paintcan',
  pencil: 'octicon octicon-pencil',
  'person-add': 'octicon octicon-person-add',
  'person-follow': 'octicon octicon-person-follow',
  person: 'octicon octicon-person',
  pin: 'octicon octicon-pin',
  plug: 'octicon octicon-plug',
  'repo-create': 'octicon octicon-repo-create',
  'gist-new': 'octicon octicon-gist-new',
  'file-directory-create': 'octicon octicon-file-directory-create',
  'file-add': 'octicon octicon-file-add',
  plus: 'octicon octicon-plus',
  'primitive-dot': 'octicon octicon-primitive-dot',
  'primitive-square': 'octicon octicon-primitive-square',
  pulse: 'octicon octicon-pulse',
  question: 'octicon octicon-question',
  quote: 'octicon octicon-quote',
  'radio-tower': 'octicon octicon-radio-tower',
  'repo-delete': 'octicon octicon-repo-delete',
  repo: 'octicon octicon-repo',
  'repo-clone': 'octicon octicon-repo-clone',
  'repo-force-push': 'octicon octicon-repo-force-push',
  'gist-fork': 'octicon octicon-gist-fork',
  'repo-forked': 'octicon octicon-repo-forked',
  'repo-pull': 'octicon octicon-repo-pull',
  'repo-push': 'octicon octicon-repo-push',
  rocket: 'octicon octicon-rocket',
  rss: 'octicon octicon-rss',
  ruby: 'octicon octicon-ruby',
  'screen-full': 'octicon octicon-screen-full',
  'screen-normal': 'octicon octicon-screen-normal',
  'search-save': 'octicon octicon-search-save',
  search: 'octicon octicon-search',
  server: 'octicon octicon-server',
  settings: 'octicon octicon-settings',
  shield: 'octicon octicon-shield',
  'log-in': 'octicon octicon-log-in',
  'sign-in': 'octicon octicon-sign-in',
  'log-out': 'octicon octicon-log-out',
  'sign-out': 'octicon octicon-sign-out',
  squirrel: 'octicon octicon-squirrel',
  'star-add': 'octicon octicon-star-add',
  'star-delete': 'octicon octicon-star-delete',
  star: 'octicon octicon-star',
  stop: 'octicon octicon-stop',
  'repo-sync': 'octicon octicon-repo-sync',
  sync: 'octicon octicon-sync',
  'tag-remove': 'octicon octicon-tag-remove',
  'tag-add': 'octicon octicon-tag-add',
  tag: 'octicon octicon-tag',
  telescope: 'octicon octicon-telescope',
  terminal: 'octicon octicon-terminal',
  'three-bars': 'octicon octicon-three-bars',
  thumbsdown: 'octicon octicon-thumbsdown',
  thumbsup: 'octicon octicon-thumbsup',
  tools: 'octicon octicon-tools',
  trashcan: 'octicon octicon-trashcan',
  'triangle-down': 'octicon octicon-triangle-down',
  'triangle-left': 'octicon octicon-triangle-left',
  'triangle-right': 'octicon octicon-triangle-right',
  'triangle-up': 'octicon octicon-triangle-up',
  unfold: 'octicon octicon-unfold',
  unmute: 'octicon octicon-unmute',
  versions: 'octicon octicon-versions',
  watch: 'octicon octicon-watch',
  'remove-close': 'octicon octicon-remove-close',
  x: 'octicon octicon-x',
  zap: 'octicon octicon-zap'
};

},{}],41:[function(require,module,exports){
"use strict";

var _theme = _interopRequireDefault(require("../../../theme"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

module.exports = {
  small: _theme["default"].glyph.size.small,
  medium: _theme["default"].glyph.size.medium,
  large: _theme["default"].glyph.size.large
};

},{"../../../theme":149}],42:[function(require,module,exports){
"use strict";

var _colors = _interopRequireDefault(require("./colors"));

var _sizes = _interopRequireDefault(require("./sizes"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Prepare variants
var colorVariants = {};
Object.keys(_colors["default"]).forEach(function (color) {
  colorVariants["color__".concat(color)] = {
    color: _colors["default"][color]
  };
}); // Prepare sizes

var sizeVariants = {};
Object.keys(_sizes["default"]).forEach(function (size) {
  sizeVariants["size__".concat(size)] = {
    fontSize: _sizes["default"][size]
  };
});
module.exports = _objectSpread({
  glyph: {}
}, colorVariants, sizeVariants);

},{"./colors":38,"./sizes":41}],43:[function(require,module,exports){
"use strict";

var _react = _interopRequireWildcard(require("react"));

var _Button = _interopRequireDefault(require("../Button"));

var _Glyph = _interopRequireDefault(require("../Glyph"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function GlyphButton(_ref) {
  var children = _ref.children,
      glyph = _ref.glyph,
      glyphColor = _ref.glyphColor,
      glyphSize = _ref.glyphSize,
      glyphStyle = _ref.glyphStyle,
      position = _ref.position,
      props = _objectWithoutProperties(_ref, ["children", "glyph", "glyphColor", "glyphSize", "glyphStyle", "position"]);

  var isDefault = position === 'default';
  var isLeft = position === 'left';
  var isRight = position === 'right';
  var offset = {};
  if (isLeft) offset.marginRight = '0.5em';
  if (isRight) offset.marginLeft = '0.5em';

  var glyphStyles = _objectSpread({}, offset, glyphStyle);

  var icon = _react["default"].createElement(_Glyph["default"], {
    cssStyles: classes.glyph,
    color: glyphColor,
    name: glyph,
    size: glyphSize,
    style: glyphStyles
  });

  return _react["default"].createElement(_Button["default"], props, (isDefault || isLeft) && icon, children, isRight && icon);
}

; // For props "glyph", "glyphColor", and "glyphSize":
// prop type validation will occur within the Glyph component, no need to
// duplicate, just pass it through.

GlyphButton.propTypes = {
  glyph: _react.PropTypes.string,
  glyphColor: _react.PropTypes.string,
  glyphSize: _react.PropTypes.string,
  glyphStyle: _react.PropTypes.object,
  position: _react.PropTypes.oneOf(['default', 'left', 'right'])
};
GlyphButton.defaultProps = {
  glyphStyle: {},
  position: 'default' // no margin, assumes no children

};
var classes = {
  glyph: {
    display: 'inline-block',
    marginTop: '-0.125em',
    // fix icon alignment
    verticalAlign: 'middle'
  }
};
module.exports = GlyphButton;

},{"../Button":14,"../Glyph":39,"react":undefined}],44:[function(require,module,exports){
"use strict";

var _react = _interopRequireWildcard(require("react"));

var _FormField = _interopRequireDefault(require("../FormField"));

var _Glyph = _interopRequireDefault(require("../Glyph"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function GlyphField(_ref) {
  var children = _ref.children,
      glyph = _ref.glyph,
      glyphColor = _ref.glyphColor,
      glyphSize = _ref.glyphSize,
      position = _ref.position,
      props = _objectWithoutProperties(_ref, ["children", "glyph", "glyphColor", "glyphSize", "position"]);

  var isLeft = position === 'left';
  var isRight = position === 'right';
  var glyphStyles = {};
  if (isLeft) glyphStyles.marginRight = '0.5em';
  if (isRight) glyphStyles.marginLeft = '0.5em';

  var icon = _react["default"].createElement(_Glyph["default"], {
    cssStyles: classes.glyph,
    color: glyphColor,
    name: glyph,
    size: glyphSize,
    style: glyphStyles
  });

  return _react["default"].createElement(_FormField["default"], _extends({
    cssStyles: classes.wrapper
  }, props), isLeft && icon, children, isRight && icon);
}

; // For props "glyph", "glyphColor", and "glyphSize":
// prop type validation will occur within the Glyph component, no need to
// duplicate, just pass it through.

GlyphField.propTypes = {
  glyph: _react.PropTypes.string,
  glyphColor: _react.PropTypes.string,
  glyphSize: _react.PropTypes.string,
  position: _react.PropTypes.oneOf(['left', 'right'])
};
GlyphField.defaultProps = {
  position: 'left'
};
var classes = {
  wrapper: {
    alignItems: 'center',
    display: 'flex'
  },
  glyph: {
    display: 'inline-block',
    marginTop: '-0.125em',
    // fix icon alignment
    verticalAlign: 'middle'
  }
};
module.exports = GlyphField;

},{"../FormField":27,"../Glyph":39,"react":undefined}],45:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Col", {
  enumerable: true,
  get: function get() {
    return _GridCol["default"];
  }
});
Object.defineProperty(exports, "Row", {
  enumerable: true,
  get: function get() {
    return _GridRow["default"];
  }
});

var _GridCol = _interopRequireDefault(require("../GridCol"));

var _GridRow = _interopRequireDefault(require("../GridRow"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

},{"../GridCol":46,"../GridRow":47}],46:[function(require,module,exports){
"use strict";

var _react = _interopRequireWildcard(require("react"));

var _glamor = require("glamor");

var _theme = _interopRequireDefault(require("../../../theme"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var WIDTHS = {
  'one-whole': '100%',
  'one-half': '50%',
  'one-third': '33.33%',
  'two-thirds': '66.66%',
  'one-quarter': '25%',
  'three-quarters': '75%',
  'one-fifth': '20%',
  'two-fifths': '40%',
  'three-fifths': '60%',
  'four-fifths': '80%',
  'one-sixth': '16.66%',
  'five-sixths': '83.33%'
};

var GridCol = function GridCol(props, context) {
  var gutter = props.gutter || context.gutter;
  var xsmall = props.xsmall || context.xsmall;
  var small = props.small || context.small;
  var medium = props.medium || context.medium;
  var large = props.large || context.large;
  var className = (0, _glamor.css)(classes['xsmall-' + xsmall], classes['small-' + small], classes['medium-' + medium], classes['large-' + large]);
  var componentClassName = "".concat(className).concat(props.className ? ' ' + props.className : '');
  var componentStyles = gutter ? {
    paddingLeft: gutter / 2,
    paddingRight: gutter / 2
  } : {};
  return _react["default"].createElement("div", {
    className: componentClassName,
    style: componentStyles
  }, props.children);
};

GridCol.contextTypes = {
  gutter: _react.PropTypes.number,
  large: _react.PropTypes.string,
  medium: _react.PropTypes.string,
  small: _react.PropTypes.string,
  xsmall: _react.PropTypes.string
};
GridCol.propTypes = {
  gutter: _react.PropTypes.number,
  large: _react.PropTypes.string,
  medium: _react.PropTypes.string,
  small: _react.PropTypes.string,
  xsmall: _react.PropTypes.string
};

var classes = _objectSpread({}, prepareWidths('xsmall', WIDTHS), prepareWidths('small', WIDTHS), prepareWidths('medium', WIDTHS), prepareWidths('large', WIDTHS));
/* eslint-disable guard-for-in */


function prepareWidths(prefix, obj) {
  var classes = {};

  switch (prefix) {
    case 'small':
      for (var prop in obj) {
        classes[prefix + '-' + prop] = _defineProperty({}, "@media (min-width: ".concat(_theme["default"].breakpoint.tabletPortraitMin, ")"), {
          width: obj[prop]
        });
      }

      break;

    case 'medium':
      for (var _prop in obj) {
        classes[prefix + '-' + _prop] = _defineProperty({}, "@media (min-width: ".concat(_theme["default"].breakpoint.tabletLandscapeMin, ")"), {
          width: obj[_prop]
        });
      }

      break;

    case 'large':
      for (var _prop2 in obj) {
        classes[prefix + '-' + _prop2] = _defineProperty({}, "@media (min-width: ".concat(_theme["default"].breakpoint.desktopMin, ")"), {
          width: obj[_prop2]
        });
      }

      break;

    default:
      for (var _prop3 in obj) {
        classes[prefix + '-' + _prop3] = {
          width: obj[_prop3]
        };
      }

  }

  return classes;
}

;
module.exports = GridCol;

},{"../../../theme":149,"glamor":undefined,"react":undefined}],47:[function(require,module,exports){
"use strict";

var _react = _interopRequireWildcard(require("react"));

var _glamor = require("glamor");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var GridRow =
/*#__PURE__*/
function (_Component) {
  _inherits(GridRow, _Component);

  function GridRow() {
    _classCallCheck(this, GridRow);

    return _possibleConstructorReturn(this, _getPrototypeOf(GridRow).apply(this, arguments));
  }

  _createClass(GridRow, [{
    key: "getChildContext",
    value: function getChildContext() {
      return {
        gutter: this.props.gutter,
        xsmall: this.props.xsmall,
        small: this.props.small,
        medium: this.props.medium,
        large: this.props.large
      };
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          className = _this$props.className,
          gutter = _this$props.gutter,
          _this$props$styles = _this$props.styles,
          styles = _this$props$styles === void 0 ? {} : _this$props$styles;
      var componentClassName = "".concat((0, _glamor.css)(classes.grid)).concat(className ? ' ' + className : '');
      var componentStyles = Object.assign(styles, {
        marginLeft: gutter / -2,
        marginRight: gutter / -2
      });
      return _react["default"].createElement("div", {
        className: componentClassName,
        style: componentStyles
      }, children);
    }
  }]);

  return GridRow;
}(_react.Component);

;
GridRow.childContextTypes = {
  gutter: _react.PropTypes.number,
  xsmall: _react.PropTypes.string,
  small: _react.PropTypes.string,
  medium: _react.PropTypes.string,
  large: _react.PropTypes.string
};
GridRow.propTypes = {
  gutter: _react.PropTypes.number,
  large: _react.PropTypes.string,
  medium: _react.PropTypes.string,
  small: _react.PropTypes.string,
  xsmall: _react.PropTypes.string
};
GridRow.defaultProps = {
  gutter: 0,
  xsmall: 'one-whole'
};
var classes = {
  grid: {
    display: 'flex',
    flexWrap: 'wrap'
  }
};
module.exports = GridRow;

},{"glamor":undefined,"react":undefined}],48:[function(require,module,exports){
"use strict";

var _glamor = require("glamor");

var _react = _interopRequireWildcard(require("react"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

// NOTE: only accepts InlineGroupSection as a single child
function InlineGroup(_ref) {
  var cssStyles = _ref.cssStyles,
      block = _ref.block,
      children = _ref.children,
      className = _ref.className,
      Component = _ref.component,
      contiguous = _ref.contiguous,
      props = _objectWithoutProperties(_ref, ["cssStyles", "block", "children", "className", "component", "contiguous"]);

  // prepare group className
  props.className = (0, _glamor.css)(classes.group, !!block && classes.block, cssStyles);

  if (className) {
    props.className += ' ' + className;
  } // convert children to an array and filter out falsey values


  var buttons = _react.Children.toArray(children).filter(function (i) {
    return i;
  }); // normalize the count


  var count = buttons.length - 1; // clone children and apply classNames that glamor can target

  props.children = buttons.map(function (c, idx) {
    if (!c) return null;
    var isOnlyChild = !count;
    var isFirstChild = !isOnlyChild && idx === 0;
    var isLastChild = !isOnlyChild && idx === count;
    var isMiddleChild = !isOnlyChild && !isFirstChild && !isLastChild;
    var position;
    if (isOnlyChild) position = 'only';
    if (isFirstChild) position = 'first';
    if (isLastChild) position = 'last';
    if (isMiddleChild) position = 'middle';
    return (0, _react.cloneElement)(c, {
      contiguous: contiguous,
      position: position
    });
  });
  return _react["default"].createElement(Component, props);
}

;
InlineGroup.propTypes = {
  block: _react.PropTypes.bool,
  component: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.string]),
  contiguous: _react.PropTypes.bool,
  cssStyles: _react.PropTypes.shape({
    _definition: _react.PropTypes.object,
    _name: _react.PropTypes.string
  })
};
InlineGroup.defaultProps = {
  component: 'div'
};
var classes = {
  group: {
    display: 'inline-flex'
  },
  block: {
    display: 'flex'
  }
};
module.exports = InlineGroup;

},{"glamor":undefined,"react":undefined}],49:[function(require,module,exports){
"use strict";

var _glamor = require("glamor");

var _react = _interopRequireWildcard(require("react"));

var _styles = _interopRequireDefault(require("./styles"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

// NOTE: Inline Group Section accepts a single child
function InlineGroupSection(_ref) {
  var active = _ref.active,
      cssStyles = _ref.cssStyles,
      children = _ref.children,
      className = _ref.className,
      contiguous = _ref.contiguous,
      grow = _ref.grow,
      position = _ref.position,
      props = _objectWithoutProperties(_ref, ["active", "cssStyles", "children", "className", "contiguous", "grow", "position"]);

  // evaluate position
  var separate = position === 'last' || position === 'middle'; // A `contiguous` section must manipulate it's child directly
  // A separate (default) section just wraps the child

  return contiguous ? (0, _react.cloneElement)(children, _objectSpread({
    cssStyles: [_styles["default"].contiguous, _styles["default"]['contiguous__' + position], active ? _styles["default"].active : null, grow ? _styles["default"].grow : null, cssStyles]
  }, props)) : _react["default"].createElement("div", _extends({
    className: (0, _glamor.css)(!!grow && _styles["default"].grow, !!separate && _styles["default"].separate, cssStyles)
  }, props), children);
}

;
InlineGroupSection.propTypes = {
  active: _react.PropTypes.bool,
  // buttons only
  children: _react.PropTypes.element.isRequired,
  contiguous: _react.PropTypes.bool,
  grow: _react.PropTypes.bool,
  position: _react.PropTypes.oneOf(['first', 'last', 'middle', 'only'])
};
module.exports = InlineGroupSection;

},{"./styles":50,"glamor":undefined,"react":undefined}],50:[function(require,module,exports){
"use strict";

var _theme = _interopRequireDefault(require("../../../theme"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// ==============================
// Inline Group: Section
// ==============================
// Takes only FormInput and Button as children, rendering them as a
// tidy inline array
module.exports = {
  // pull active elements up
  active: {
    position: 'relative'
  },
  // stretch to fill available width
  grow: {
    flex: '1 1 0'
  },
  // separate applicable non-contiguous elements
  separate: {
    paddingLeft: '0.75em'
  },
  // Contiguous: manipulate children directly
  // pull focused contiguous elements up
  contiguous: {
    ':focus': {
      position: 'relative',
      zIndex: 1
    }
  },
  // position
  contiguous__middle: {
    borderRadius: 0,
    marginLeft: _theme["default"].button.borderWidth * -1
  },
  contiguous__first: {
    borderBottomRightRadius: '0 !important',
    borderTopRightRadius: '0 !important'
  },
  contiguous__last: {
    borderBottomLeftRadius: '0 !important',
    borderTopLeftRadius: '0 !important',
    marginLeft: _theme["default"].button.borderWidth * -1
  }
};

},{"../../../theme":149}],51:[function(require,module,exports){
"use strict";

var _glamor = require("glamor");

var _react = _interopRequireWildcard(require("react"));

var _styles = _interopRequireDefault(require("./styles"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function LabelledControl(_ref) {
  var className = _ref.className,
      inline = _ref.inline,
      label = _ref.label,
      title = _ref.title,
      props = _objectWithoutProperties(_ref, ["className", "inline", "label", "title"]);

  var labelClassName = (0, _glamor.css)(_styles["default"].wrapper, inline && _styles["default"].wrapper__inline, className);
  return _react["default"].createElement("label", {
    title: title,
    className: labelClassName
  }, _react["default"].createElement("input", _extends({}, props, {
    className: (0, _glamor.css)(_styles["default"].control)
  })), _react["default"].createElement("span", {
    className: (0, _glamor.css)(_styles["default"].label)
  }, label));
}

;
LabelledControl.propTypes = {
  inline: _react.PropTypes.bool,
  title: _react.PropTypes.string,
  type: _react.PropTypes.oneOf(['checkbox', 'radio']).isRequired
};
module.exports = LabelledControl;

},{"./styles":52,"glamor":undefined,"react":undefined}],52:[function(require,module,exports){
"use strict";

var _theme = _interopRequireDefault(require("../../../theme"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// ==============================
// Alert
// ==============================

/* eslint quote-props: ["error", "as-needed"] */
module.exports = {
  wrapper: {
    display: 'block',
    height: _theme["default"].input.height,
    lineHeight: _theme["default"].input.lineHeight
  },
  wrapper__inline: {
    display: 'inline'
  },
  // checkbox or radio
  control: {
    marginRight: '0.5em'
  }
};

},{"../../../theme":149}],53:[function(require,module,exports){
"use strict";

var _react = _interopRequireWildcard(require("react"));

var _glamor = require("glamor");

var _Button = _interopRequireDefault(require("../Button"));

var _Spinner = _interopRequireDefault(require("../Spinner"));

var _theme = _interopRequireDefault(require("../../../theme"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function LoadingButton(_ref) {
  var children = _ref.children,
      loading = _ref.loading,
      props = _objectWithoutProperties(_ref, ["children", "loading"]);

  // determine the correct variant for the spinner,
  // fill is the default variant on Button
  var variant = props.variant || 'fill'; // determine the correct color for the spinner,
  // cancel and delete alias to "danger"

  var color;
  if (props.color === 'cancel' || props.color === 'delete') color = 'danger'; // merge all the variant/color together

  var formattedColor = variant === 'fill' && props.color !== 'default' ? 'inverted' : color; // render the spinner if required

  var spinner = loading && _react["default"].createElement(_Spinner["default"], {
    size: "small",
    color: formattedColor
  }); // slide the spinner in and out of view


  var spinnerStyles = {
    width: loading ? _theme["default"].spinner.size.small * 5 + _theme["default"].spacing.small : 0
  }; // render everything

  return _react["default"].createElement(_Button["default"], props, _react["default"].createElement("span", {
    className: (0, _glamor.css)(classes.spinner),
    style: spinnerStyles
  }, spinner), children);
}

;
LoadingButton.propTypes = {
  loading: _react.PropTypes.bool
};
LoadingButton.defaultProps = {
  loading: false
};
var classes = {
  spinner: {
    display: 'inline-block',
    overflow: 'hidden',
    textAlign: 'left',
    transition: 'width 200ms ease-out',
    verticalAlign: 'middle'
  }
};
module.exports = LoadingButton;

},{"../../../theme":149,"../Button":14,"../Spinner":70,"glamor":undefined,"react":undefined}],54:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _glamor = require("glamor");

var _theme = _interopRequireDefault(require("../../../theme"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ModalBody(_ref) {
  var className = _ref.className,
      props = _objectWithoutProperties(_ref, ["className"]);

  return _react["default"].createElement("div", _extends({
    className: (0, _glamor.css)(classes.body, className)
  }, props));
}

;
var classes = {
  body: {
    paddingBottom: _theme["default"].modal.padding.body.vertical,
    paddingLeft: _theme["default"].modal.padding.body.horizontal,
    paddingRight: _theme["default"].modal.padding.body.horizontal,
    paddingTop: _theme["default"].modal.padding.body.vertical
  }
};
module.exports = ModalBody;

},{"../../../theme":149,"glamor":undefined,"react":undefined}],55:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _glamor = require("glamor");

var _ScrollLock = _interopRequireDefault(require("../ScrollLock"));

var _Portal = _interopRequireDefault(require("../Portal"));

var _theme = _interopRequireDefault(require("../../../theme"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var canUseDom = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

var ModalDialog =
/*#__PURE__*/
function (_Component) {
  _inherits(ModalDialog, _Component);

  function ModalDialog() {
    var _this;

    _classCallCheck(this, ModalDialog);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ModalDialog).call(this));
    _this.handleBackdropClick = _this.handleBackdropClick.bind(_assertThisInitialized(_this));
    _this.handleKeyboardInput = _this.handleKeyboardInput.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(ModalDialog, [{
    key: "getChildContext",
    value: function getChildContext() {
      return {
        onClose: this.props.onClose
      };
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (!canUseDom) return; // add event listeners

      if (nextProps.isOpen && nextProps.enableKeyboardInput) {
        window.addEventListener('keydown', this.handleKeyboardInput);
      }

      if (!nextProps.isOpen && nextProps.enableKeyboardInput) {
        window.removeEventListener('keydown', this.handleKeyboardInput);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.props.enableKeyboardInput) {
        window.removeEventListener('keydown', this.handleKeyboardInput);
      }
    } // ==============================
    // Methods
    // ==============================

  }, {
    key: "handleKeyboardInput",
    value: function handleKeyboardInput(event) {
      if (event.keyCode === 27) this.props.onClose();
      return false;
    }
  }, {
    key: "handleBackdropClick",
    value: function handleBackdropClick(e) {
      if (e.target !== this.refs.container) return;
      this.props.onClose();
    } // ==============================
    // Renderers
    // ==============================

  }, {
    key: "renderDialog",
    value: function renderDialog() {
      var _this$props = this.props,
          backdropClosesModal = _this$props.backdropClosesModal,
          children = _this$props.children,
          isOpen = _this$props.isOpen,
          width = _this$props.width;
      if (!isOpen) return _react["default"].createElement("span", {
        key: "closed"
      });
      return _react["default"].createElement("div", {
        className: (0, _glamor.css)(classes.container),
        key: "open",
        ref: "container",
        onClick: !!backdropClosesModal && this.handleBackdropClick,
        onTouchEnd: !!backdropClosesModal && this.handleBackdropClick
      }, _react["default"].createElement("div", {
        className: (0, _glamor.css)(classes.dialog),
        style: {
          width: width
        },
        "data-screen-id": "modal-dialog"
      }, children), _react["default"].createElement(_ScrollLock["default"], null));
    }
  }, {
    key: "render",
    value: function render() {
      return _react["default"].createElement(_Portal["default"], null, this.renderDialog());
    }
  }]);

  return ModalDialog;
}(_react.Component);

;
ModalDialog.propTypes = {
  backdropClosesModal: _react.PropTypes.bool,
  enableKeyboardInput: _react.PropTypes.bool,
  isOpen: _react.PropTypes.bool,
  onClose: _react.PropTypes.func.isRequired,
  width: _react.PropTypes.number
};
ModalDialog.defaultProps = {
  enableKeyboardInput: true,
  width: 768
};
ModalDialog.childContextTypes = {
  onClose: _react.PropTypes.func.isRequired
};
var classes = {
  container: {
    alignItems: 'center',
    backgroundColor: _theme["default"].modal.background,
    boxSizing: 'border-box',
    display: 'flex',
    height: '100%',
    justifyContent: 'center',
    left: 0,
    position: 'fixed',
    top: 0,
    width: '100%',
    zIndex: _theme["default"].modal.zIndex
  },
  dialog: {
    backgroundColor: 'white',
    borderRadius: _theme["default"].borderRadius["default"],
    maxHeight: '90%',
    overflowY: 'auto',
    paddingBottom: _theme["default"].modal.padding.dialog.vertical,
    paddingLeft: _theme["default"].modal.padding.dialog.horizontal,
    paddingRight: _theme["default"].modal.padding.dialog.horizontal,
    paddingTop: _theme["default"].modal.padding.dialog.vertical,
    position: 'relative'
  }
};
var _default = ModalDialog;
exports["default"] = _default;

},{"../../../theme":149,"../Portal":62,"../ScrollLock":65,"glamor":undefined,"react":undefined}],56:[function(require,module,exports){
"use strict";

var _react = _interopRequireWildcard(require("react"));

var _glamor = require("glamor");

var _theme = _interopRequireDefault(require("../../../theme"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ModalFooter(_ref) {
  var align = _ref.align,
      className = _ref.className,
      props = _objectWithoutProperties(_ref, ["align", "className"]);

  return _react["default"].createElement("div", _extends({}, props, {
    className: (0, _glamor.css)(classes.footer, classes['align__' + align], className)
  }));
}

;
ModalFooter.propTypes = {
  align: _react.PropTypes.oneOf(['center', 'left', 'right']),
  children: _react.PropTypes.node,
  onClose: _react.PropTypes.func,
  showCloseButton: _react.PropTypes.bool,
  text: _react.PropTypes.string
};
ModalFooter.defaultProps = {
  align: 'left'
};
var classes = {
  footer: {
    borderTop: "2px solid ".concat(_theme["default"].color.gray10),
    display: 'flex',
    paddingBottom: _theme["default"].modal.padding.footer.vertical,
    paddingLeft: _theme["default"].modal.padding.footer.horizontal,
    paddingRight: _theme["default"].modal.padding.footer.horizontal,
    paddingTop: _theme["default"].modal.padding.footer.vertical
  },
  // alignment
  align__left: {
    justifyContent: 'flex-start'
  },
  align__center: {
    justifyContent: 'center'
  },
  align__right: {
    justifyContent: 'flex-end'
  }
};
module.exports = ModalFooter;

},{"../../../theme":149,"glamor":undefined,"react":undefined}],57:[function(require,module,exports){
"use strict";

var _react = _interopRequireWildcard(require("react"));

var _glamor = require("glamor");

var _GlyphButton = _interopRequireDefault(require("../GlyphButton"));

var _theme = _interopRequireDefault(require("../../../theme"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ModalHeader(_ref, _ref2) {
  var children = _ref.children,
      className = _ref.className,
      showCloseButton = _ref.showCloseButton,
      text = _ref.text,
      props = _objectWithoutProperties(_ref, ["children", "className", "showCloseButton", "text"]);

  var onClose = _ref2.onClose;

  // Property Violation
  if (children && text) {
    console.error('Warning: ModalHeader cannot render `children` and `text`. You must provide one or the other.');
  }

  return _react["default"].createElement("div", _extends({}, props, {
    className: (0, _glamor.css)(classes.header, className)
  }), _react["default"].createElement("div", {
    className: (0, _glamor.css)(classes.grow)
  }, text ? _react["default"].createElement("h4", {
    className: (0, _glamor.css)(classes.text)
  }, text) : children), !!onClose && showCloseButton && _react["default"].createElement(_GlyphButton["default"], {
    cssStyles: classes.close,
    color: "cancel",
    glyph: "x",
    onClick: onClose,
    variant: "link"
  }));
}

;
ModalHeader.propTypes = {
  children: _react.PropTypes.node,
  onClose: _react.PropTypes.func,
  showCloseButton: _react.PropTypes.bool,
  text: _react.PropTypes.string
};
ModalHeader.contextTypes = {
  onClose: _react.PropTypes.func.isRequired
};
var classes = {
  header: {
    alignItems: 'center',
    borderBottom: "2px solid ".concat(_theme["default"].color.gray10),
    display: 'flex',
    paddingBottom: _theme["default"].modal.padding.header.vertical,
    paddingLeft: _theme["default"].modal.padding.header.horizontal,
    paddingRight: _theme["default"].modal.padding.header.horizontal,
    paddingTop: _theme["default"].modal.padding.header.vertical
  },
  // fill space to push the close button right
  grow: {
    flexGrow: 1
  },
  // title text
  text: {
    color: 'inherit',
    fontSize: 18,
    fontWeight: 500,
    lineHeight: 1,
    margin: 0
  }
};
module.exports = ModalHeader;

},{"../../../theme":149,"../GlyphButton":43,"glamor":undefined,"react":undefined}],58:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Body", {
  enumerable: true,
  get: function get() {
    return _body["default"];
  }
});
Object.defineProperty(exports, "Dialog", {
  enumerable: true,
  get: function get() {
    return _dialog["default"];
  }
});
Object.defineProperty(exports, "Footer", {
  enumerable: true,
  get: function get() {
    return _footer["default"];
  }
});
Object.defineProperty(exports, "Header", {
  enumerable: true,
  get: function get() {
    return _header["default"];
  }
});

var _body = _interopRequireDefault(require("./body"));

var _dialog = _interopRequireDefault(require("./dialog"));

var _footer = _interopRequireDefault(require("./footer"));

var _header = _interopRequireDefault(require("./header"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

},{"./body":54,"./dialog":55,"./footer":56,"./header":57}],59:[function(require,module,exports){
"use strict";

var _glamor = require("glamor");

var _react = _interopRequireWildcard(require("react"));

var _page = _interopRequireDefault(require("./page"));

var _theme = _interopRequireDefault(require("../../../theme"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Pagination =
/*#__PURE__*/
function (_Component) {
  _inherits(Pagination, _Component);

  function Pagination() {
    _classCallCheck(this, Pagination);

    return _possibleConstructorReturn(this, _getPrototypeOf(Pagination).apply(this, arguments));
  }

  _createClass(Pagination, [{
    key: "renderCount",
    value: function renderCount() {
      var count = '';
      var _this$props = this.props,
          currentPage = _this$props.currentPage,
          pageSize = _this$props.pageSize,
          plural = _this$props.plural,
          singular = _this$props.singular,
          total = _this$props.total;

      if (!total) {
        count = 'No ' + (plural || 'records');
      } else if (total > pageSize) {
        var start = pageSize * (currentPage - 1) + 1;
        var end = Math.min(start + pageSize - 1, total);
        count = "Showing ".concat(start, " to ").concat(end, " of ").concat(total);
      } else {
        count = 'Showing ' + total;

        if (total > 1 && plural) {
          count += ' ' + plural;
        } else if (total === 1 && singular) {
          count += ' ' + singular;
        }
      }

      return _react["default"].createElement("div", {
        className: (0, _glamor.css)(classes.count),
        "data-e2e-pagination-count": true
      }, count);
    }
  }, {
    key: "renderPages",
    value: function renderPages() {
      var _this$props2 = this.props,
          currentPage = _this$props2.currentPage,
          limit = _this$props2.limit,
          onPageSelect = _this$props2.onPageSelect,
          pageSize = _this$props2.pageSize,
          total = _this$props2.total;
      if (total <= pageSize) return null;
      var pages = [];
      var totalPages = Math.ceil(total / pageSize);
      var minPage = 1;
      var maxPage = totalPages;

      if (limit && limit < totalPages) {
        var rightLimit = Math.floor(limit / 2);
        var leftLimit = rightLimit + limit % 2 - 1;
        minPage = currentPage - leftLimit;
        maxPage = currentPage + rightLimit;

        if (minPage < 1) {
          maxPage = limit;
          minPage = 1;
        }

        if (maxPage > totalPages) {
          minPage = totalPages - limit + 1;
          maxPage = totalPages;
        }
      }

      if (minPage > 1) {
        pages.push(_react["default"].createElement(_page["default"], {
          key: "page_start",
          onClick: function onClick() {
            return onPageSelect(1);
          }
        }, "..."));
      }

      var _loop = function _loop(page) {
        var selected = page === currentPage;
        /* eslint-disable no-loop-func */

        pages.push(_react["default"].createElement(_page["default"], {
          key: 'page_' + page,
          selected: selected,
          onClick: function onClick() {
            return onPageSelect(page);
          }
        }, page));
        /* eslint-enable */
      };

      for (var page = minPage; page <= maxPage; page++) {
        _loop(page);
      }

      if (maxPage < totalPages) {
        pages.push(_react["default"].createElement(_page["default"], {
          key: "page_end",
          onClick: function onClick() {
            return onPageSelect(totalPages);
          }
        }, "..."));
      }

      return _react["default"].createElement("div", {
        className: (0, _glamor.css)(classes.list)
      }, pages);
    }
  }, {
    key: "render",
    value: function render() {
      var className = (0, _glamor.css)(classes.container, this.props.className);
      return _react["default"].createElement("div", {
        className: className,
        style: this.props.style
      }, this.renderCount(), this.renderPages());
    }
  }]);

  return Pagination;
}(_react.Component);

;
var classes = {
  container: {
    display: 'block',
    lineHeight: _theme["default"].component.lineHeight,
    marginBottom: '2em'
  },
  count: {
    display: 'inline-block',
    marginRight: '1em',
    verticalAlign: 'middle'
  },
  list: {
    display: 'inline-block',
    verticalAlign: 'middle'
  }
};
Pagination.propTypes = {
  className: _react.PropTypes.string,
  currentPage: _react.PropTypes.number.isRequired,
  limit: _react.PropTypes.number,
  onPageSelect: _react.PropTypes.func,
  pageSize: _react.PropTypes.number.isRequired,
  plural: _react.PropTypes.string,
  singular: _react.PropTypes.string,
  style: _react.PropTypes.object,
  total: _react.PropTypes.number.isRequired
};
module.exports = Pagination;

},{"../../../theme":149,"./page":60,"glamor":undefined,"react":undefined}],60:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _glamor = require("glamor");

var _react = _interopRequireWildcard(require("react"));

var _theme = _interopRequireDefault(require("../../../theme"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function Page(_ref) {
  var disabled = _ref.disabled,
      selected = _ref.selected,
      props = _objectWithoutProperties(_ref, ["disabled", "selected"]);

  props.className = (0, _glamor.css)(classes.page, !!disabled && classes.disabled, !!selected && classes.selected);
  return _react["default"].createElement("button", props);
}

;
Page.propTypes = {
  disabled: _react.PropTypes.bool,
  onClick: _react.PropTypes.func.isRequired,
  selected: _react.PropTypes.bool
};
/* eslint quote-props: ["error", "as-needed"] */

var selectedStyle = {
  backgroundColor: _theme["default"].pagination.selected.background,
  borderColor: _theme["default"].pagination.selected.border,
  color: _theme["default"].pagination.selected.color,
  cursor: 'default',
  zIndex: 2
};
var pseudoStyle = {
  backgroundColor: _theme["default"].pagination.hover.background,
  borderColor: _theme["default"].pagination.hover.border,
  color: _theme["default"].pagination.hover.color,
  outline: 'none'
};
var classes = {
  page: {
    appearance: 'none',
    background: 'none',
    border: '1px solid transparent',
    borderRadius: _theme["default"].borderRadius["default"],
    color: _theme["default"].pagination.color,
    cursor: 'pointer',
    display: 'inline-block',
    "float": 'left',
    // Collapse white-space
    marginRight: '0.25em',
    padding: '0 .7em',
    position: 'relative',
    textDecoration: 'none',
    // handle hover and focus
    ':hover': pseudoStyle,
    ':focus': pseudoStyle
  },
  // selected page
  selected: _objectSpread({}, selectedStyle, {
    ':hover': selectedStyle,
    ':focus': selectedStyle
  }),
  // disabled page
  disabled: {
    backgroundColor: _theme["default"].pagination.disabled.background,
    borderColor: _theme["default"].pagination.disabled.background,
    color: _theme["default"].pagination.disabled.color,
    cursor: 'default'
  }
};
var _default = Page;
exports["default"] = _default;

},{"../../../theme":149,"glamor":undefined,"react":undefined}],61:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = require("react");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

// Pass the Lightbox context through to the Portal's descendents
// StackOverflow discussion http://goo.gl/oclrJ9
var PassContext =
/*#__PURE__*/
function (_Component) {
  _inherits(PassContext, _Component);

  function PassContext() {
    _classCallCheck(this, PassContext);

    return _possibleConstructorReturn(this, _getPrototypeOf(PassContext).apply(this, arguments));
  }

  _createClass(PassContext, [{
    key: "getChildContext",
    value: function getChildContext() {
      return this.props.context;
    }
  }, {
    key: "render",
    value: function render() {
      return _react.Children.only(this.props.children);
    }
  }]);

  return PassContext;
}(_react.Component);

;
PassContext.propTypes = {
  context: _react.PropTypes.object.isRequired
};
PassContext.childContextTypes = {
  onClose: _react.PropTypes.func
};
var _default = PassContext;
exports["default"] = _default;

},{"react":undefined}],62:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactAddonsCssTransitionGroup = _interopRequireDefault(require("react-addons-css-transition-group"));

var _reactDom = require("react-dom");

var _PassContext = _interopRequireDefault(require("../PassContext"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Portal =
/*#__PURE__*/
function (_Component) {
  _inherits(Portal, _Component);

  function Portal() {
    var _this;

    _classCallCheck(this, Portal);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Portal).call(this));
    _this.portalElement = null;
    return _this;
  }

  _createClass(Portal, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var p = document.createElement('div');
      document.body.appendChild(p);
      this.portalElement = p;
      this.componentDidUpdate();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      // Animate fade on mount/unmount
      var duration = 200;
      var styles = "\n\t\t\t\t.fade-enter { opacity: 0.01; }\n\t\t\t\t.fade-enter.fade-enter-active { opacity: 1; transition: opacity ".concat(duration, "ms; }\n\t\t\t\t.fade-leave { opacity: 1; }\n\t\t\t\t.fade-leave.fade-leave-active { opacity: 0.01; transition: opacity ").concat(duration, "ms; }\n\t\t");
      (0, _reactDom.render)(_react["default"].createElement(_PassContext["default"], {
        context: this.context
      }, _react["default"].createElement("div", null, _react["default"].createElement("style", null, styles), _react["default"].createElement(_reactAddonsCssTransitionGroup["default"], _extends({
        component: "div",
        transitionName: "fade",
        transitionEnterTimeout: duration,
        transitionLeaveTimeout: duration
      }, this.props)))), this.portalElement);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      document.body.removeChild(this.portalElement);
    }
  }, {
    key: "render",
    value: function render() {
      return null;
    }
  }]);

  return Portal;
}(_react.Component);

exports["default"] = Portal;
Portal.contextTypes = {
  onClose: _react.PropTypes.func
};

},{"../PassContext":61,"react":undefined,"react-addons-css-transition-group":undefined,"react-dom":undefined}],63:[function(require,module,exports){
"use strict";

var _react = _interopRequireWildcard(require("react"));

var _theme = _interopRequireDefault(require("../../../theme"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

// Using window.innerWidth and state instead of CSS media breakpoints
// because we want to render null rather than an empty span. Allowing for
// CSS pseudo classes like :only-child to behave as expected.
// Return true if window + document
var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

var ResponsiveText =
/*#__PURE__*/
function (_Component) {
  _inherits(ResponsiveText, _Component);

  function ResponsiveText() {
    var _this;

    _classCallCheck(this, ResponsiveText);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ResponsiveText).call(this));
    _this.handleResize = _this.handleResize.bind(_assertThisInitialized(_this));
    _this.state = {
      windowWidth: canUseDOM ? window.innerWidth : 0
    };
    return _this;
  }

  _createClass(ResponsiveText, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (canUseDOM) {
        window.addEventListener('resize', this.handleResize);
        this.handleResize();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (canUseDOM) {
        window.removeEventListener('resize', this.handleResize);
      }
    }
  }, {
    key: "handleResize",
    value: function handleResize() {
      this.setState({
        windowWidth: canUseDOM ? window.innerWidth : 0
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          Component = _this$props.component,
          hiddenLG = _this$props.hiddenLG,
          hiddenMD = _this$props.hiddenMD,
          hiddenSM = _this$props.hiddenSM,
          hiddenXS = _this$props.hiddenXS,
          visibleLG = _this$props.visibleLG,
          visibleMD = _this$props.visibleMD,
          visibleSM = _this$props.visibleSM,
          visibleXS = _this$props.visibleXS,
          props = _objectWithoutProperties(_this$props, ["component", "hiddenLG", "hiddenMD", "hiddenSM", "hiddenXS", "visibleLG", "visibleMD", "visibleSM", "visibleXS"]);

      var windowWidth = this.state.windowWidth;
      var text; // set text value from breakpoint; attempt XS --> LG

      if (windowWidth < _theme["default"].breakpointNumeric.mobile) {
        text = visibleXS || hiddenSM || hiddenMD || hiddenLG;
      } else if (windowWidth < _theme["default"].breakpointNumeric.tabletPortrait) {
        text = hiddenXS || visibleSM || hiddenMD || hiddenLG;
      } else if (windowWidth < _theme["default"].breakpointNumeric.tabletLandscape) {
        text = hiddenXS || hiddenSM || visibleMD || hiddenLG;
      } else {
        text = hiddenXS || hiddenSM || hiddenMD || visibleLG;
      }

      return text ? _react["default"].createElement(Component, props, text) : null;
    }
  }]);

  return ResponsiveText;
}(_react.Component);

;
ResponsiveText.propTypes = {
  hiddenLG: _react.PropTypes.string,
  hiddenMD: _react.PropTypes.string,
  hiddenSM: _react.PropTypes.string,
  hiddenXS: _react.PropTypes.string,
  visibleLG: _react.PropTypes.string,
  visibleMD: _react.PropTypes.string,
  visibleSM: _react.PropTypes.string,
  visibleXS: _react.PropTypes.string
};
ResponsiveText.defaultProps = {
  component: 'span'
};
module.exports = ResponsiveText;

},{"../../../theme":149,"react":undefined}],64:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _glamor = require("glamor");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ScreenReaderOnly(_ref) {
  var className = _ref.className,
      props = _objectWithoutProperties(_ref, ["className"]);

  props.className = (0, _glamor.css)(classes.srOnly, className);
  return _react["default"].createElement("span", props);
}

;
var classes = {
  srOnly: {
    border: 0,
    clip: 'rect(0,0,0,0)',
    height: 1,
    margin: -1,
    overflow: 'hidden',
    padding: 0,
    position: 'absolute',
    width: 1
  }
};
module.exports = ScreenReaderOnly;

},{"glamor":undefined,"react":undefined}],65:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = require("react");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var ScrollLock =
/*#__PURE__*/
function (_Component) {
  _inherits(ScrollLock, _Component);

  function ScrollLock() {
    var _this;

    _classCallCheck(this, ScrollLock);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ScrollLock).call(this));
    _this.lockCount = 0;
    return _this;
  }

  _createClass(ScrollLock, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      if (typeof window === 'undefined') return;
      this.lockCount++;
      if (this.lockCount > 1) return; //	FIXME iOS ignores overflow on body

      try {
        var scrollBarWidth = window.innerWidth - document.body.clientWidth;
        var target = document.body;
        target.style.paddingRight = scrollBarWidth + 'px';
        target.style.overflowY = 'hidden';
      } catch (err) {
        console.error('Failed to find body element. Err:', err);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (typeof window === 'undefined' || this.lockCount === 0) return;
      this.lockCount--;
      if (this.lockCount > 0) return; // Still locked
      //	FIXME iOS ignores overflow on body

      try {
        var target = document.body;
        target.style.paddingRight = '';
        target.style.overflowY = '';
      } catch (err) {
        console.error('Failed to find body element. Err:', err);
      }
    }
  }, {
    key: "render",
    value: function render() {
      return null;
    }
  }]);

  return ScrollLock;
}(_react.Component);

exports["default"] = ScrollLock;

},{"react":undefined}],66:[function(require,module,exports){
"use strict";

var _theme = _interopRequireDefault(require("../../../theme"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

module.exports = {
  danger: _theme["default"].color.danger,
  "default": _theme["default"].color.gray80,
  error: _theme["default"].color.danger,
  info: _theme["default"].color.info,
  primary: _theme["default"].color.primary,
  success: _theme["default"].color.success,
  warning: _theme["default"].color.warning
};

},{"../../../theme":149}],67:[function(require,module,exports){
"use strict";

var _react = _interopRequireWildcard(require("react"));

var _glamor = require("glamor");

var _styles = _interopRequireDefault(require("./styles"));

var _colors = _interopRequireDefault(require("./colors"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function SegmentedControl(_ref) {
  var className = _ref.className,
      color = _ref.color,
      cropText = _ref.cropText,
      equalWidthSegments = _ref.equalWidthSegments,
      inline = _ref.inline,
      onChange = _ref.onChange,
      options = _ref.options,
      value = _ref.value,
      props = _objectWithoutProperties(_ref, ["className", "color", "cropText", "equalWidthSegments", "inline", "onChange", "options", "value"]);

  props.className = (0, _glamor.css)(_styles["default"].control, inline ? _styles["default"].control__inline : null, className);
  return _react["default"].createElement("div", props, options.map(function (opt) {
    var buttonClassName = (0, _glamor.css)(_styles["default"].button, opt.disabled ? _styles["default"].button__disabled : null, opt.value === value ? _styles["default"]['button__' + color] : null, cropText ? _styles["default"].button__cropText : null, equalWidthSegments ? _styles["default"].button__equalWidth : null);
    return _react["default"].createElement("button", {
      className: buttonClassName,
      key: opt.value,
      onClick: !opt.disabled && function () {
        return onChange(opt.value);
      },
      type: "button",
      title: cropText ? opt.label : null,
      tabIndex: opt.disabled ? '-1' : ''
    }, opt.label);
  }));
}

;
var valuePropShape = [_react.PropTypes.bool, _react.PropTypes.number, _react.PropTypes.string];
SegmentedControl.propTypes = {
  color: _react.PropTypes.oneOf(Object.keys(_colors["default"])),
  cropText: _react.PropTypes.bool,
  // when `inline && equalWidthSegments` crops to the next largest option length
  equalWidthSegments: _react.PropTypes.bool,
  // only relevant when `inline === false`
  inline: _react.PropTypes.bool,
  onChange: _react.PropTypes.func.isRequired,
  options: _react.PropTypes.arrayOf(_react.PropTypes.shape({
    disabled: _react.PropTypes.bool,
    label: _react.PropTypes.string,
    value: _react.PropTypes.oneOfType(valuePropShape)
  })).isRequired,
  value: _react.PropTypes.oneOfType(valuePropShape)
};
SegmentedControl.defaultProps = {
  color: 'default'
};
module.exports = SegmentedControl;

},{"./colors":66,"./styles":68,"glamor":undefined,"react":undefined}],68:[function(require,module,exports){
"use strict";

var _colors = _interopRequireDefault(require("./colors"));

var _theme = _interopRequireDefault(require("../../../theme"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Prepare variants
var colorVariants = {};
Object.keys(_colors["default"]).forEach(function (color) {
  var pseudoStyles = {
    backgroundColor: _colors["default"][color],
    color: 'white'
  };
  colorVariants['button__' + color] = {
    backgroundColor: _colors["default"][color],
    color: 'white',
    ':hover': pseudoStyles,
    ':focus': pseudoStyles,
    ':active': pseudoStyles
  };
});
module.exports = _objectSpread({
  control: {
    borderWidth: 1,
    borderStyle: 'solid',
    borderColor: _theme["default"].input.border.color["default"],
    borderRadius: '0.4em',
    display: 'flex',
    fontSize: _theme["default"].font.size.small,
    paddingLeft: 1,
    paddingRight: 1
  },
  control__inline: {
    display: 'inline-flex'
  },
  // buttons
  button: {
    background: 'none',
    border: 0,
    borderRadius: '0.25em',
    flexGrow: 1,
    margin: '2px 1px',
    padding: '0.3em 0.9em',
    outline: 0,
    ':hover': {
      backgroundColor: 'rgba(0, 0, 0, 0.05)'
    },
    ':focus': {
      backgroundColor: 'rgba(0, 0, 0, 0.05)'
    },
    ':active': {
      backgroundColor: 'rgba(0, 0, 0, 0.1)'
    }
  },
  button__equalWidth: {
    flex: '1 1 0'
  },
  button__cropText: {
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap'
  },
  button__disabled: {
    opacity: 0.6,
    pointerEvents: 'none'
  }
}, colorVariants);

},{"../../../theme":149,"./colors":66}],69:[function(require,module,exports){
"use strict";

module.exports = ['danger', 'default', 'inverted', 'primary', 'success', 'warning'];

},{}],70:[function(require,module,exports){
"use strict";

var _react = _interopRequireWildcard(require("react"));

var _glamor = require("glamor");

var _styles = _interopRequireDefault(require("./styles"));

var _ScreenReaderOnly = _interopRequireDefault(require("../ScreenReaderOnly"));

var _colors = _interopRequireDefault(require("./colors"));

var _sizes = _interopRequireDefault(require("./sizes"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function Spinner(_ref) {
  var className = _ref.className,
      size = _ref.size,
      color = _ref.color,
      props = _objectWithoutProperties(_ref, ["className", "size", "color"]);

  props.className = (0, _glamor.css)(_styles["default"].base, _styles["default"][size], className);
  return _react["default"].createElement("div", props, _react["default"].createElement("span", {
    className: "".concat((0, _glamor.css)(_styles["default"].dot, _styles["default"]['size__' + size], _styles["default"]['color__' + color], _styles["default"].dot__first))
  }), _react["default"].createElement("span", {
    className: "".concat((0, _glamor.css)(_styles["default"].dot, _styles["default"]['size__' + size], _styles["default"]['color__' + color], _styles["default"].dot__second))
  }), _react["default"].createElement("span", {
    className: "".concat((0, _glamor.css)(_styles["default"].dot, _styles["default"]['size__' + size], _styles["default"]['color__' + color], _styles["default"].dot__third))
  }), _react["default"].createElement(_ScreenReaderOnly["default"], null, "Loading..."));
}

;
Spinner.propTypes = {
  color: _react.PropTypes.oneOf(_colors["default"]),
  size: _react.PropTypes.oneOf(_sizes["default"])
};
Spinner.defaultProps = {
  size: 'medium',
  color: 'default'
};
module.exports = Spinner;

},{"../ScreenReaderOnly":64,"./colors":69,"./sizes":71,"./styles":72,"glamor":undefined,"react":undefined}],71:[function(require,module,exports){
"use strict";

module.exports = ['small', 'medium', 'large'];

},{}],72:[function(require,module,exports){
"use strict";

var _glamor = require("glamor");

var _theme = _interopRequireDefault(require("../../../theme"));

var _colors = _interopRequireDefault(require("./colors"));

var _sizes = _interopRequireDefault(require("./sizes"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Prepare variants
var colorVariants = {};

_colors["default"].forEach(function (color) {
  colorVariants["color__".concat(color)] = {
    backgroundColor: _theme["default"].spinner.color[color]
  };
}); // Prepare sizes


var sizeVariants = {};

_sizes["default"].forEach(function (size) {
  sizeVariants["size__".concat(size)] = {
    fontSize: _theme["default"].spinner.size[size]
  };
}); // Declare animation keyframes


var keyframes = _glamor.compose.keyframes('pulse', {
  '0%, 80%, 100%': {
    opacity: 0
  },
  '40%': {
    opacity: 1
  }
});

module.exports = _objectSpread({
  base: {
    display: 'inline-block',
    lineHeight: 1,
    textAlign: 'center',
    verticalAlign: 'middle',
    width: '5em'
  },
  small: {
    fontSize: 4
  },
  medium: {
    fontSize: 8
  },
  large: {
    fontSize: 16
  },
  // text
  text: {
    border: 0,
    clip: 'rect(0,0,0,0)',
    height: 1,
    margin: -1,
    overflow: 'hidden',
    padding: 0,
    position: 'absolute',
    width: 1
  },
  // dots
  dot: {
    animationName: keyframes,
    animationDuration: '1s',
    animationIterationCount: 'infinite',
    borderRadius: '1em',
    display: 'inline-block',
    height: '1em',
    verticalAlign: 'top',
    width: '1em'
  },
  dot__second: {
    animationDelay: '160ms',
    marginLeft: '1em'
  },
  dot__third: {
    animationDelay: '320ms',
    marginLeft: '1em'
  }
}, colorVariants, sizeVariants);

},{"../../../theme":149,"./colors":69,"./sizes":71,"glamor":undefined}],73:[function(require,module,exports){
"use strict";

module.exports = {
  Alert: require('./Alert'),
  BlankState: require('./BlankState'),
  Button: require('./Button'),
  Center: require('./Center'),
  Chip: require('./Chip'),
  Container: require('./Container'),
  DropdownButton: require('./DropdownButton'),
  Form: require('./Form'),
  FormField: require('./FormField'),
  FormInput: require('./FormInput'),
  FormLabel: require('./FormLabel'),
  FormNote: require('./FormNote'),
  FormSelect: require('./FormSelect'),
  Glyph: require('./Glyph'),
  GlyphButton: require('./GlyphButton'),
  GlyphField: require('./GlyphField'),
  Grid: require('./Grid'),
  InlineGroup: require('./InlineGroup'),
  InlineGroupSection: require('./InlineGroupSection'),
  LabelledControl: require('./LabelledControl'),
  LoadingButton: require('./LoadingButton'),
  Modal: require('./Modal'),
  Pagination: require('./Pagination'),
  ResponsiveText: require('./ResponsiveText'),
  ScreenReaderOnly: require('./ScreenReaderOnly'),
  SegmentedControl: require('./SegmentedControl'),
  Spinner: require('./Spinner')
};

},{"./Alert":11,"./BlankState":13,"./Button":14,"./Center":16,"./Chip":19,"./Container":21,"./DropdownButton":24,"./Form":25,"./FormField":27,"./FormInput":29,"./FormLabel":32,"./FormNote":34,"./FormSelect":36,"./Glyph":39,"./GlyphButton":43,"./GlyphField":44,"./Grid":45,"./InlineGroup":48,"./InlineGroupSection":49,"./LabelledControl":51,"./LoadingButton":53,"./Modal":58,"./Pagination":59,"./ResponsiveText":63,"./ScreenReaderOnly":64,"./SegmentedControl":67,"./Spinner":70}],74:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.filtersParser = filtersParser;
exports.filterParser = filterParser;
exports.createFilterObject = createFilterObject;

var _isPlainObject = _interopRequireDefault(require("lodash/isPlainObject"));

var _isArray = _interopRequireDefault(require("lodash/isArray"));

var _isObject = _interopRequireDefault(require("lodash/isObject"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * Returns an array of expanded filter objects,
 * given (a string representation | an array of filters) and a currentList object.
 *
 * @param { String|Array } Either a string representation of an array of filter objects, or an array of filter objects.
 * @param { Object } the current instantiation of the List prototype used for the <List/> scene
 * @return { Array } of { Objects } as an expanded representation of the filters passed in.
 **/
function filtersParser(filters, currentList) {
  if (typeof filters === 'string') {
    try {
      filters = JSON.parse(filters);
    } catch (e) {
      console.warn('Invalid filters provided', filters);
      filters = void 0;
    }
  }

  if (!filters) return [];
  var assembledFilters = filters.map(function (filter) {
    var path = filter.path;
    var value = Object.assign({}, filter);
    delete value.path;
    return createFilterObject(path, value, currentList.fields);
  });
  filters = assembledFilters.filter(function (filter) {
    return filter;
  });
  return filters;
}
/**
 * Returns an array of expanded filter objects,
 * given (a string representation | an array of filters) and a currentList object.
 *
 * @param { Object } Filter object  containing the following key value pairs {path} and {value}.
 * @param { Array } of { Objects } an array of the currently active filters.
 * @param { Object } the current instantiation of the List prototype used for the <List/> scene
 * @return { Object } an expanded representation of the passed in filter { Object }.
 **/


function filterParser(_ref, activeFilters, currentList) {
  var path = _ref.path,
      value = _ref.value;

  if (!activeFilters || !(0, _isArray["default"])(activeFilters)) {
    throw new Error('activeFilters must be an array');
  }

  if (!currentList) {
    throw new Error('No currentList selected');
  }

  if (!(0, _isObject["default"])(currentList) || (0, _isArray["default"])(currentList)) {
    throw new Error('currentList is expected to be an { Object }', currentList);
  }

  var filter = activeFilters.filter(function (i) {
    return i.field.path === path;
  })[0];

  if (filter) {
    filter.value = value;
  } else {
    filter = createFilterObject(path, value, currentList.fields);

    if (!filter) {
      return void 0;
    }
  }

  return filter;
}
/*
* This method is a util, but has such a specific use that it is being left within
* the file that uses it.
*/

/**
 * Returns a filter object
 * given a path, a value, and the fields within an instance of the List prototype.
 *
 * @param { String } filter path
 * @param { Object } of filter values.
 * @param { Object } of fields from the current instance of the List prototype.
 * @return { Object } a filter comprised of the:filters.js
 *	- corresponding field value within the current List,
 *	- and the passed in value { Object }.
 **/


function createFilterObject(path, value, currentListFields) {
  if (!currentListFields || !(0, _isPlainObject["default"])(currentListFields)) {
    console.warn('currentListFields must be a plain object', currentListFields);
    return;
  }

  var field = currentListFields[path];

  if (!field) {
    console.warn('Invalid Filter path specified:', path);
    return;
  }

  return {
    field: field,
    value: value
  };
}

},{"lodash/isArray":542,"lodash/isObject":548,"lodash/isPlainObject":550}],75:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sortParser = sortParser;
exports.columnsParser = columnsParser;
Object.defineProperty(exports, "filtersParser", {
  enumerable: true,
  get: function get() {
    return _filters.filtersParser;
  }
});
Object.defineProperty(exports, "filterParser", {
  enumerable: true,
  get: function get() {
    return _filters.filterParser;
  }
});
Object.defineProperty(exports, "createFilterObject", {
  enumerable: true,
  get: function get() {
    return _filters.createFilterObject;
  }
});

var _filters = require("./filters.js");

/**
 * Returns an array of expanded columns object, given a list of columns and currentList object.
 *
 * @param { String } columns, a string representation of a list of columns.
 * @param { Object } the current instantiation of the List prototype used for the <List/> scene
 * @return { Array } of { Objects } as an expanded representation of the column values passed in.
 */
function columnsParser(columns, currentList) {
  if (!currentList) {
    throw new Error('No currentList selected');
  }

  if (!columns || columns.length === 0) {
    return currentList.expandColumns(currentList.defaultColumns);
  }

  return currentList.expandColumns(columns);
}

;
/**
 * Returns an expanded sort object, given a sort path and currentList object.
 *
 * @param { String } path, a string representation of a list of columns.
 * @param { Object } the current instantiation of the List prototype used for the <List/> scene
 * @return { Object } an expanded representation of the sort path passed in.
 */

function sortParser(path, currentList) {
  if (!currentList) {
    throw new Error('No currentList selected');
  }

  if (!path) return currentList.expandSort(currentList.defaultSort);
  return currentList.expandSort(path);
}

},{"./filters.js":74}],76:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setActiveColumnsSaga = setActiveColumnsSaga;
exports.setActiveSortSaga = setActiveSortSaga;
exports.setActiveFilterSaga = setActiveFilterSaga;
exports["default"] = void 0;

var _reduxSaga = require("redux-saga");

var _effects = require("redux-saga/effects");

var actions = _interopRequireWildcard(require("../screens/List/constants"));

var _queryParamsSagas = require("./queryParamsSagas");

var _parsers = require("../parsers");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

var _marked =
/*#__PURE__*/
regeneratorRuntime.mark(debouncedSearch),
    _marked2 =
/*#__PURE__*/
regeneratorRuntime.mark(setActiveColumnsSaga),
    _marked3 =
/*#__PURE__*/
regeneratorRuntime.mark(setActiveSortSaga),
    _marked4 =
/*#__PURE__*/
regeneratorRuntime.mark(setActiveFilterSaga),
    _marked5 =
/*#__PURE__*/
regeneratorRuntime.mark(rootSaga);

/**
 * Debounce the search loading new items by 500ms
 */
function debouncedSearch() {
  var searchString;
  return regeneratorRuntime.wrap(function debouncedSearch$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return (0, _effects.select)(function (state) {
            return state.active.search;
          });

        case 2:
          searchString = _context.sent;

          if (!searchString) {
            _context.next = 6;
            break;
          }

          _context.next = 6;
          return (0, _reduxSaga.delay)(500);

        case 6:
          _context.next = 8;
          return (0, _effects.call)(_queryParamsSagas.updateParams);

        case 8:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
}

function setActiveColumnsSaga() {
  var _ref, columns, _ref2, currentList, newColumns;

  return regeneratorRuntime.wrap(function setActiveColumnsSaga$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          if (!true) {
            _context2.next = 16;
            break;
          }

          _context2.next = 3;
          return (0, _effects.take)(actions.SELECT_ACTIVE_COLUMNS);

        case 3:
          _ref = _context2.sent;
          columns = _ref.columns;
          _context2.next = 7;
          return (0, _effects.select)(function (state) {
            return state.lists;
          });

        case 7:
          _ref2 = _context2.sent;
          currentList = _ref2.currentList;
          _context2.next = 11;
          return (0, _effects.call)(_parsers.columnsParser, columns, currentList);

        case 11:
          newColumns = _context2.sent;
          _context2.next = 14;
          return (0, _effects.put)({
            type: actions.SET_ACTIVE_COLUMNS,
            columns: newColumns
          });

        case 14:
          _context2.next = 0;
          break;

        case 16:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked2);
}

function setActiveSortSaga() {
  var _ref3, path, _ref4, _currentList, sort;

  return regeneratorRuntime.wrap(function setActiveSortSaga$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          if (!true) {
            _context3.next = 16;
            break;
          }

          _context3.next = 3;
          return (0, _effects.take)(actions.SELECT_ACTIVE_SORT);

        case 3:
          _ref3 = _context3.sent;
          path = _ref3.path;
          _context3.next = 7;
          return (0, _effects.select)(function (state) {
            return state.lists;
          });

        case 7:
          _ref4 = _context3.sent;
          _currentList = _ref4.currentList;
          _context3.next = 11;
          return (0, _effects.call)(_parsers.sortParser, path, _currentList);

        case 11:
          sort = _context3.sent;
          _context3.next = 14;
          return (0, _effects.put)({
            type: actions.SET_ACTIVE_SORT,
            sort: sort
          });

        case 14:
          _context3.next = 0;
          break;

        case 16:
        case "end":
          return _context3.stop();
      }
    }
  }, _marked3);
}

function setActiveFilterSaga() {
  var _ref5, filter, _ref6, _currentList2, activeFilters, updatedFilter;

  return regeneratorRuntime.wrap(function setActiveFilterSaga$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          if (!true) {
            _context4.next = 19;
            break;
          }

          _context4.next = 3;
          return (0, _effects.take)(actions.SELECT_FILTER);

        case 3:
          _ref5 = _context4.sent;
          filter = _ref5.filter;
          _context4.next = 7;
          return (0, _effects.select)(function (state) {
            return state.lists;
          });

        case 7:
          _ref6 = _context4.sent;
          _currentList2 = _ref6.currentList;
          _context4.next = 11;
          return (0, _effects.select)(function (state) {
            return state.active.filters;
          });

        case 11:
          activeFilters = _context4.sent;
          _context4.next = 14;
          return (0, _effects.call)(_parsers.filterParser, filter, activeFilters, _currentList2);

        case 14:
          updatedFilter = _context4.sent;
          _context4.next = 17;
          return (0, _effects.put)({
            type: actions.ADD_FILTER,
            filter: updatedFilter
          });

        case 17:
          _context4.next = 0;
          break;

        case 19:
        case "end":
          return _context4.stop();
      }
    }
  }, _marked4);
}

function rootSaga() {
  return regeneratorRuntime.wrap(function rootSaga$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          _context5.next = 2;
          return (0, _effects.fork)(_reduxSaga.takeLatest, actions.SET_ACTIVE_SEARCH, debouncedSearch);

        case 2:
          _context5.next = 4;
          return (0, _effects.fork)(_reduxSaga.takeLatest, actions.SET_ACTIVE_LIST, _queryParamsSagas.evalQueryParams);

        case 4:
          _context5.next = 6;
          return (0, _effects.fork)(setActiveSortSaga);

        case 6:
          _context5.next = 8;
          return (0, _effects.fork)(setActiveColumnsSaga);

        case 8:
          _context5.next = 10;
          return (0, _effects.fork)(setActiveFilterSaga);

        case 10:
          _context5.next = 12;
          return (0, _effects.fork)(_reduxSaga.takeLatest, [actions.QUERY_HAS_CHANGED, actions.ADD_FILTER, actions.SET_ACTIVE_COLUMNS, actions.SET_ACTIVE_SORT, actions.SET_CURRENT_PAGE, actions.CLEAR_FILTER, actions.CLEAR_ALL_FILTERS], _queryParamsSagas.updateParams);

        case 12:
        case "end":
          return _context5.stop();
      }
    }
  }, _marked5);
}

var _default = rootSaga;
exports["default"] = _default;

},{"../parsers":75,"../screens/List/constants":127,"./queryParamsSagas":77,"redux-saga":undefined,"redux-saga/effects":557}],77:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.urlUpdate = urlUpdate;
exports.updateParams = updateParams;
exports.evalQueryParams = evalQueryParams;
exports.parseQueryParams = parseQueryParams;

var _queryParams = require("../../utils/queryParams");

var _reactRouterRedux = require("react-router-redux");

var _effects = require("redux-saga/effects");

var _blacklist = _interopRequireDefault(require("blacklist"));

var actions = _interopRequireWildcard(require("../screens/List/constants"));

var _actions = require("../screens/List/actions");

var _isEqual = _interopRequireDefault(require("lodash/isEqual"));

var _parsers = require("../parsers");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _marked =
/*#__PURE__*/
regeneratorRuntime.mark(urlUpdate),
    _marked2 =
/*#__PURE__*/
regeneratorRuntime.mark(updateParams),
    _marked3 =
/*#__PURE__*/
regeneratorRuntime.mark(evalQueryParams);

function urlUpdate(query, cache, pathname) {
  var blacklistedField, attenuatedQuery, attenuatedCache;
  return regeneratorRuntime.wrap(function urlUpdate$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          blacklistedField = 'search';
          attenuatedQuery = (0, _blacklist["default"])(query, blacklistedField);
          attenuatedCache = (0, _blacklist["default"])(cache, blacklistedField);

          if ((0, _isEqual["default"])(attenuatedQuery, attenuatedCache)) {
            _context.next = 8;
            break;
          }

          _context.next = 6;
          return (0, _effects.put)((0, _reactRouterRedux.push)({
            pathname: pathname,
            query: query
          }));

        case 6:
          _context.next = 10;
          break;

        case 8:
          _context.next = 10;
          return (0, _effects.put)((0, _reactRouterRedux.replace)({
            pathname: pathname,
            query: query
          }));

        case 10:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
}
/**
 * Update the query params based on the current state
 */


function updateParams() {
  var activeState, currentList, location, _ref, index, sort, page, columns, search, filters, newParams;

  return regeneratorRuntime.wrap(function updateParams$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return (0, _effects.select)(function (state) {
            return state.active;
          });

        case 2:
          activeState = _context2.sent;
          _context2.next = 5;
          return (0, _effects.select)(function (state) {
            return state.lists.currentList;
          });

        case 5:
          currentList = _context2.sent;
          _context2.next = 8;
          return (0, _effects.select)(function (state) {
            return state.routing.locationBeforeTransitions;
          });

        case 8:
          location = _context2.sent;
          _context2.next = 11;
          return (0, _effects.select)(function (state) {
            return state.lists.page;
          });

        case 11:
          _ref = _context2.sent;
          index = _ref.index;
          // Get the data into the right format, set the defaults
          sort = (0, _queryParams.createSortQueryParams)(activeState.sort.rawInput, currentList.defaultSort);
          page = (0, _queryParams.createPageQueryParams)(index, 1);
          columns = (0, _queryParams.stringifyColumns)(activeState.columns, currentList.defaultColumnPaths);
          search = activeState.search;
          filters = (0, _queryParams.parametizeFilters)(activeState.filters);
          newParams = (0, _queryParams.updateQueryParams)({
            page: page,
            columns: columns,
            sort: sort,
            search: search,
            filters: filters
          }, location); // TODO: Starting or clearing a search pushes a new history state, but updating
          // the current search replaces it for nicer history navigation support

          _context2.next = 21;
          return (0, _effects.put)({
            type: actions.REPLACE_CACHED_QUERY,
            cachedQuery: newParams
          });

        case 21:
          return _context2.delegateYield(urlUpdate(newParams, activeState.cachedQuery, location.pathname), "t0", 22);

        case 22:
          _context2.next = 24;
          return (0, _effects.put)((0, _actions.loadItems)());

        case 24:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked2);
}

function evalQueryParams() {
  var _ref2, pathname, query, _ref3, cachedQuery, _ref4, currentList, parsedQuery;

  return regeneratorRuntime.wrap(function evalQueryParams$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return (0, _effects.select)(function (state) {
            return state.routing.locationBeforeTransitions;
          });

        case 2:
          _ref2 = _context3.sent;
          pathname = _ref2.pathname;
          query = _ref2.query;
          _context3.next = 7;
          return (0, _effects.select)(function (state) {
            return state.active;
          });

        case 7:
          _ref3 = _context3.sent;
          cachedQuery = _ref3.cachedQuery;
          _context3.next = 11;
          return (0, _effects.select)(function (state) {
            return state.lists;
          });

        case 11:
          _ref4 = _context3.sent;
          currentList = _ref4.currentList;

          if (!(pathname !== "".concat(Keystone.adminPath, "/").concat(currentList.id))) {
            _context3.next = 15;
            break;
          }

          return _context3.abrupt("return");

        case 15:
          if (!(0, _isEqual["default"])(query, cachedQuery)) {
            _context3.next = 22;
            break;
          }

          _context3.next = 18;
          return (0, _effects.put)({
            type: actions.QUERY_HAS_NOT_CHANGED
          });

        case 18:
          _context3.next = 20;
          return (0, _effects.put)((0, _actions.loadItems)());

        case 20:
          _context3.next = 27;
          break;

        case 22:
          _context3.next = 24;
          return (0, _effects.call)(parseQueryParams, query, currentList);

        case 24:
          parsedQuery = _context3.sent;
          _context3.next = 27;
          return (0, _effects.put)({
            type: actions.QUERY_HAS_CHANGED,
            parsedQuery: parsedQuery
          });

        case 27:
        case "end":
          return _context3.stop();
      }
    }
  }, _marked3);
}

function parseQueryParams(query, currentList) {
  var columns = (0, _parsers.columnsParser)(query.columns, currentList);
  var sort = (0, _parsers.sortParser)(query.sort, currentList);
  var filters = (0, _parsers.filtersParser)(query.filters, currentList);
  var currentPage = query.page || 1;
  var search = query.search || '';
  return {
    columns: columns,
    sort: sort,
    filters: filters,
    currentPage: currentPage,
    search: search
  };
}

},{"../../utils/queryParams":155,"../parsers":75,"../screens/List/actions":105,"../screens/List/constants":127,"blacklist":undefined,"lodash/isEqual":545,"react-router-redux":undefined,"redux-saga/effects":557}],78:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadCounts = loadCounts;
exports.countsLoaded = countsLoaded;
exports.countsLoadingError = countsLoadingError;

var _xhr = _interopRequireDefault(require("xhr"));

var _constants = require("./constants");

var _constants2 = require("../../../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * Load the counts of all lists
 */
function loadCounts() {
  return function (dispatch) {
    dispatch({
      type: _constants.LOAD_COUNTS
    });
    (0, _xhr["default"])({
      url: "".concat(Keystone.adminPath, "/api/counts")
    }, function (err, resp, body) {
      if (err) {
        dispatch(countsLoadingError(err));
        return;
      }

      try {
        body = JSON.parse(body);

        if (body.counts) {
          dispatch(countsLoaded(body.counts));
        }
      } catch (e) {
        console.log('Error parsing results json:', e, body);
        dispatch(countsLoadingError(e));
        return;
      }
    });
  };
}
/**
 * Dispatched when the counts were loaded
 *
 * @param  {Object} counts The counts object as returned by the API
 */


function countsLoaded(counts) {
  return {
    type: _constants.COUNTS_LOADING_SUCCESS,
    counts: counts
  };
}
/**
 * Dispatched when unsuccessfully trying to load the counts, will redispatch
 * loadCounts after NETWORK_ERROR_RETRY_DELAY until we get counts back
 *
 * @param  {object} error The error
 */


function countsLoadingError(error) {
  return function (dispatch, getState) {
    dispatch({
      type: _constants.COUNTS_LOADING_ERROR,
      error: error
    });
    setTimeout(function () {
      dispatch(loadCounts());
    }, _constants2.NETWORK_ERROR_RETRY_DELAY);
  };
}

},{"../../../constants":148,"./constants":82,"xhr":undefined}],79:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactRouter = require("react-router");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/**
 * Displays information about a list and lets you create a new one.
 */
var ListTile = _react["default"].createClass({
  displayName: "ListTile",
  propTypes: {
    count: _react["default"].PropTypes.string,
    hideCreateButton: _react["default"].PropTypes.bool,
    href: _react["default"].PropTypes.string,
    label: _react["default"].PropTypes.string,
    path: _react["default"].PropTypes.string,
    spinner: _react["default"].PropTypes.object
  },
  render: function render() {
    var opts = {
      'data-list-path': this.props.path
    };
    return _react["default"].createElement("div", _extends({
      className: "dashboard-group__list"
    }, opts), _react["default"].createElement("span", {
      className: "dashboard-group__list-inner"
    }, _react["default"].createElement(_reactRouter.Link, {
      to: this.props.href,
      className: "dashboard-group__list-tile"
    }, _react["default"].createElement("div", {
      className: "dashboard-group__list-label"
    }, this.props.label), _react["default"].createElement("div", {
      className: "dashboard-group__list-count"
    }, this.props.spinner || this.props.count)), !this.props.hideCreateButton && _react["default"].createElement(_reactRouter.Link, {
      to: this.props.href + '?create',
      className: "dashboard-group__list-create octicon octicon-plus",
      title: "Create",
      tabIndex: "-1"
    })));
  }
});

module.exports = ListTile;

},{"react":undefined,"react-router":undefined}],80:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.Lists = void 0;

var _react = _interopRequireDefault(require("react"));

var _lodash = _interopRequireDefault(require("lodash"));

var _reactRedux = require("react-redux");

var _string = require("../../../../utils/string");

var _ListTile = _interopRequireDefault(require("./ListTile"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Lists =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Lists, _React$Component);

  function Lists() {
    _classCallCheck(this, Lists);

    return _possibleConstructorReturn(this, _getPrototypeOf(Lists).apply(this, arguments));
  }

  _createClass(Lists, [{
    key: "render",
    value: function render() {
      var _this = this;

      return _react["default"].createElement("div", {
        className: "dashboard-group__lists"
      }, _lodash["default"].map(this.props.lists, function (list, key) {
        // If an object is passed in the key is the index,
        // if an array is passed in the key is at list.key
        var listKey = list.key || key;
        var href = list.external ? list.path : "".concat(Keystone.adminPath, "/").concat(list.path);
        var listData = _this.props.listsData[list.path];
        var isNoCreate = listData ? listData.nocreate : false;
        return _react["default"].createElement(_ListTile["default"], {
          key: list.path,
          path: list.path,
          label: list.label,
          hideCreateButton: isNoCreate,
          href: href,
          count: (0, _string.plural)(_this.props.counts[listKey], '* Item', '* Items'),
          spinner: _this.props.spinner
        });
      }));
    }
  }]);

  return Lists;
}(_react["default"].Component);

exports.Lists = Lists;
Lists.propTypes = {
  counts: _react["default"].PropTypes.object.isRequired,
  lists: _react["default"].PropTypes.oneOfType([_react["default"].PropTypes.array, _react["default"].PropTypes.object]).isRequired,
  spinner: _react["default"].PropTypes.node
};

var _default = (0, _reactRedux.connect)(function (state) {
  return {
    listsData: state.lists.data
  };
})(Lists);

exports["default"] = _default;

},{"../../../../utils/string":156,"./ListTile":79,"lodash":undefined,"react":undefined,"react-redux":undefined}],81:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _getRelatedIconClass = _interopRequireDefault(require("../utils/getRelatedIconClass"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Section =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Section, _React$Component);

  function Section() {
    _classCallCheck(this, Section);

    return _possibleConstructorReturn(this, _getPrototypeOf(Section).apply(this, arguments));
  }

  _createClass(Section, [{
    key: "render",
    value: function render() {
      var iconClass = this.props.icon || (0, _getRelatedIconClass["default"])(this.props.id);
      return _react["default"].createElement("div", {
        className: "dashboard-group",
        "data-section-label": this.props.label
      }, _react["default"].createElement("div", {
        className: "dashboard-group__heading"
      }, _react["default"].createElement("span", {
        className: "dashboard-group__heading-icon ".concat(iconClass)
      }), this.props.label), this.props.children);
    }
  }]);

  return Section;
}(_react["default"].Component);

Section.propTypes = {
  children: _react["default"].PropTypes.element.isRequired,
  icon: _react["default"].PropTypes.string,
  id: _react["default"].PropTypes.string,
  label: _react["default"].PropTypes.string.isRequired
};
var _default = Section;
exports["default"] = _default;

},{"../utils/getRelatedIconClass":85,"react":undefined}],82:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.COUNTS_LOADING_ERROR = exports.COUNTS_LOADING_SUCCESS = exports.LOAD_COUNTS = void 0;
var LOAD_COUNTS = 'app/Home/LOAD_COUNTS';
exports.LOAD_COUNTS = LOAD_COUNTS;
var COUNTS_LOADING_SUCCESS = 'app/Home/COUNTS_LOADING_SUCCESS';
exports.COUNTS_LOADING_SUCCESS = COUNTS_LOADING_SUCCESS;
var COUNTS_LOADING_ERROR = 'app/Home/COUNTS_LOADING_ERROR';
exports.COUNTS_LOADING_ERROR = COUNTS_LOADING_ERROR;

},{}],83:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.HomeView = void 0;

var _react = _interopRequireDefault(require("react"));

var _elemental = require("../../elemental");

var _reactRedux = require("react-redux");

var _Lists = _interopRequireDefault(require("./components/Lists"));

var _Section = _interopRequireDefault(require("./components/Section"));

var _AlertMessages = _interopRequireDefault(require("../../shared/AlertMessages"));

var _actions = require("./actions");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * The Home view is the view one sees at /keystone. It shows a list of all lists,
 * grouped by their section.
 */
var HomeView = _react["default"].createClass({
  displayName: 'HomeView',
  getInitialState: function getInitialState() {
    return {
      modalIsOpen: true
    };
  },
  // When everything is rendered, start loading the item counts of the lists
  // from the API
  componentDidMount: function componentDidMount() {
    this.props.dispatch((0, _actions.loadCounts)());
  },
  getSpinner: function getSpinner() {
    if (this.props.counts && Object.keys(this.props.counts).length === 0 && (this.props.error || this.props.loading)) {
      return _react["default"].createElement(_elemental.Spinner, null);
    }

    return null;
  },
  render: function render() {
    var _this = this;

    var spinner = this.getSpinner();
    return _react["default"].createElement(_elemental.Container, {
      "data-screen-id": "home"
    }, _react["default"].createElement("div", {
      className: "dashboard-header"
    }, _react["default"].createElement("div", {
      className: "dashboard-heading"
    }, Keystone.brand)), _react["default"].createElement("div", {
      className: "dashboard-groups"
    }, this.props.error && _react["default"].createElement(_AlertMessages["default"], {
      alerts: {
        error: {
          error: "There is a problem with the network, we're trying to reconnect..."
        }
      }
    }), Keystone.nav.flat ? _react["default"].createElement(_Lists["default"], {
      counts: this.props.counts,
      lists: Keystone.lists,
      spinner: spinner
    }) : _react["default"].createElement("div", null, Keystone.nav.sections.map(function (navSection) {
      return _react["default"].createElement(_Section["default"], {
        key: navSection.key,
        id: navSection.key,
        label: navSection.label
      }, _react["default"].createElement(_Lists["default"], {
        counts: _this.props.counts,
        lists: navSection.lists,
        spinner: spinner
      }));
    }), Keystone.orphanedLists.length ? _react["default"].createElement(_Section["default"], {
      label: "Other",
      icon: "octicon-database"
    }, _react["default"].createElement(_Lists["default"], {
      counts: this.props.counts,
      lists: Keystone.orphanedLists,
      spinner: spinner
    })) : null)));
  }
});

exports.HomeView = HomeView;

var _default = (0, _reactRedux.connect)(function (state) {
  return {
    counts: state.home.counts,
    loading: state.home.loading,
    error: state.home.error
  };
})(HomeView);

exports["default"] = _default;

},{"../../elemental":73,"../../shared/AlertMessages":131,"./actions":78,"./components/Lists":80,"./components/Section":81,"react":undefined,"react-redux":undefined}],84:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _objectAssign = _interopRequireDefault(require("object-assign"));

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var initialState = {
  counts: {},
  loading: false,
  error: null
};

function home() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action.type) {
    case _constants.LOAD_COUNTS:
      return (0, _objectAssign["default"])({}, state, {
        loading: true
      });

    case _constants.COUNTS_LOADING_SUCCESS:
      return (0, _objectAssign["default"])({}, state, {
        loading: false,
        counts: action.counts,
        error: null
      });

    case _constants.COUNTS_LOADING_ERROR:
      return (0, _objectAssign["default"])({}, state, {
        loading: false,
        error: action.error
      });

    default:
      return state;
  }
}

var _default = home;
exports["default"] = _default;

},{"./constants":82,"object-assign":555}],85:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = getRelatedIconClass;

/**
 * Gets a related icon for a string, returned as a classname to be applied to a span. If no related
 * icon is found, returns a classname for a dot icon
 *
 * @param  [String] string
 * @return [String]        The classname of the icon
 */
function getRelatedIconClass(string) {
  var icons = [{
    icon: 'book',
    sections: ['books', 'posts', 'blog', 'blog-posts', 'stories', 'news-stories', 'content']
  }, {
    icon: 'briefcase',
    sections: ['businesses', 'companies', 'listings', 'organizations', 'partners']
  }, {
    icon: 'calendar',
    sections: ['events', 'dates']
  }, {
    icon: 'clock',
    sections: ['classes', 'hours', 'times']
  }, {
    icon: 'file-media',
    sections: ['gallery', 'galleries', 'images', 'photos', 'pictures']
  }, {
    icon: 'file-text',
    sections: ['attachments', 'docs', 'documents', 'files']
  }, {
    icon: 'location',
    sections: ['locations', 'markers', 'places']
  }, {
    icon: 'mail',
    sections: ['emails', 'enquiries']
  }, {
    icon: 'megaphone',
    sections: ['broadcasts', 'jobs', 'talks']
  }, {
    icon: 'organization',
    sections: ['contacts', 'customers', 'groups', 'members', 'people', 'speakers', 'teams', 'users']
  }, {
    icon: 'package',
    sections: ['boxes', 'items', 'packages', 'parcels']
  }, {
    icon: 'tag',
    sections: ['tags']
  }];
  var classes = icons.filter(function (obj) {
    return obj.sections.indexOf(string) !== -1;
  }).map(function (obj) {
    return "octicon octicon-".concat(obj.icon);
  });

  if (!classes.length) {
    classes.push('octicon octicon-primitive-dot');
  }

  return classes.join(' ');
}

},{}],86:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.selectItem = selectItem;
exports.loadItemData = loadItemData;
exports.loadRelationshipItemData = loadRelationshipItemData;
exports.dataLoaded = dataLoaded;
exports.relationshipDataLoaded = relationshipDataLoaded;
exports.dataLoadingError = dataLoadingError;
exports.deleteItem = deleteItem;
exports.reorderItems = reorderItems;
exports.moveItem = moveItem;
exports.resetItems = resetItems;

var _constants = require("./constants");

var _actions = require("../List/actions");

/**
 * Select an item
 *
 * @param  {String} itemId The item ID
 */
function selectItem(itemId) {
  return {
    type: _constants.SELECT_ITEM,
    id: itemId
  };
}
/**
 * Load the item data of the current item
 */


function loadItemData() {
  return function (dispatch, getState) {
    // Hold on to the id of the item we currently want to load.
    // Dispatch this reference to our redux store to hold on to as a 'loadingRef'.
    var currentItemID = getState().item.id;
    dispatch({
      type: _constants.LOAD_DATA
    });
    var state = getState();
    var list = state.lists.currentList; // const itemID = state.item.id;
    // Load a specific item with the utils/List.js helper

    list.loadItem(state.item.id, {
      drilldown: true
    }, function (err, itemData) {
      // Once this async request has fired this callback, check that
      // the item id referenced by thisLoadRef is the same id
      // referenced by loadingRef in the redux store.
      // If it is, then this is the latest request, and it is safe to resolve it normally.
      // If it is not the same id however,
      // this means that this request is NOT the latest fired request,
      // and so we'll bail out of it early.
      if (getState().item.id !== currentItemID) return;

      if (err || !itemData) {
        dispatch(dataLoadingError(err));
      } else {
        dispatch(dataLoaded(itemData));
      }
    });
  };
}

function loadRelationshipItemData(_ref) {
  var columns = _ref.columns,
      refList = _ref.refList,
      relationship = _ref.relationship,
      relatedItemId = _ref.relatedItemId;
  return function (dispatch, getState) {
    refList.loadItems({
      columns: columns,
      filters: [{
        field: refList.fields[relationship.refPath],
        value: {
          value: relatedItemId
        }
      }]
    }, function (err, items) {
      // // TODO: indicate pagination & link to main list view
      // this.setState({ items });
      dispatch(relationshipDataLoaded(relationship.path, items));
    });
  };
}
/**
 * Called when data of the current item is loaded
 *
 * @param  {Object} data The item data
 */


function dataLoaded(data) {
  return {
    type: _constants.DATA_LOADING_SUCCESS,
    loadingRef: null,
    data: data
  };
}

function relationshipDataLoaded(path, data) {
  return {
    type: _constants.LOAD_RELATIONSHIP_DATA,
    relationshipPath: path,
    data: data
  };
}

;
/**
 * Called when there was an error during the loading of the current item data,
 * will retry loading the data ever NETWORK_ERROR_RETRY_DELAY milliseconds
 *
 * @param  {Object} error The error
 */

function dataLoadingError(err) {
  return {
    type: _constants.DATA_LOADING_ERROR,
    loadingRef: null,
    error: err
  };
}
/**
 * Deletes an item and optionally redirects to the current list URL
 *
 * @param  {String} id     The ID of the item we want to delete
 * @param  {Object} router A react-router router object. If this is passed, we
 *                         redirect to Keystone.adminPath/currentList.path!
 */


function deleteItem(id, router) {
  return function (dispatch, getState) {
    var state = getState();
    var list = state.lists.currentList;
    list.deleteItem(id, function (err) {
      // If a router is passed, redirect to the current list path,
      // otherwise stay where we are
      if (router) {
        var redirectUrl = "".concat(Keystone.adminPath, "/").concat(list.path);

        if (state.lists.page.index && state.lists.page.index > 1) {
          redirectUrl = "".concat(redirectUrl, "?page=").concat(state.lists.page.index);
        }

        router.push(redirectUrl);
      } // TODO Proper error handling


      if (err) {
        alert(err.error || 'Error deleting item, please try again!');
      } else {
        dispatch((0, _actions.loadItems)());
      }
    });
  };
}

function reorderItems(_ref2) {
  var columns = _ref2.columns,
      refList = _ref2.refList,
      relationship = _ref2.relationship,
      relatedItemId = _ref2.relatedItemId,
      item = _ref2.item,
      prevSortOrder = _ref2.prevSortOrder,
      newSortOrder = _ref2.newSortOrder;
  return function (dispatch, getState) {
    // Send the item, previous sortOrder and the new sortOrder
    // we should get the proper list and new page results in return
    refList.reorderItems(item, prevSortOrder, newSortOrder, {
      columns: columns,
      filters: [{
        field: refList.fields[relationship.refPath],
        value: {
          value: relatedItemId
        }
      }]
    }, function (err, items) {
      dispatch(relationshipDataLoaded(relationship.path, items)); // If err, flash the row alert
      // if (err) {
      // 	dispatch(resetItems(item.id));
      // 	// return this.resetItems(this.findItemById[item.id]);
      // } else {
      // 	dispatch(itemsLoaded(items));
      // 	dispatch(setRowAlert({
      // 		success: item.id,
      // 		fail: false,
      // 	}));
      // }
    });
  };
}

function moveItem(_ref3) {
  var prevIndex = _ref3.prevIndex,
      newIndex = _ref3.newIndex,
      relationshipPath = _ref3.relationshipPath,
      newSortOrder = _ref3.newSortOrder;
  return {
    type: _constants.DRAG_MOVE_ITEM,
    prevIndex: prevIndex,
    newIndex: newIndex,
    relationshipPath: relationshipPath,
    newSortOrder: newSortOrder
  };
}

function resetItems() {
  return {
    type: _constants.DRAG_RESET_ITEMS
  };
}

},{"../List/actions":105,"./constants":100}],87:[function(require,module,exports){
"use strict";

var _react = _interopRequireWildcard(require("react"));

var _vkey = _interopRequireDefault(require("vkey"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var AltText =
/*#__PURE__*/
function (_Component) {
  _inherits(AltText, _Component);

  function AltText() {
    var _this;

    _classCallCheck(this, AltText);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(AltText).call(this));
    _this.handleKeyDown = _this.handleKeyDown.bind(_assertThisInitialized(_this));
    _this.handleKeyUp = _this.handleKeyUp.bind(_assertThisInitialized(_this));
    _this.state = {
      modified: false
    };
    return _this;
  }

  _createClass(AltText, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      document.body.addEventListener('keydown', this.handleKeyDown, false);
      document.body.addEventListener('keyup', this.handleKeyUp, false);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      document.body.removeEventListener('keydown', this.handleKeyDown);
      document.body.removeEventListener('keyup', this.handleKeyUp);
    }
  }, {
    key: "handleKeyDown",
    value: function handleKeyDown(e) {
      if (_vkey["default"][e.keyCode] !== this.props.modifier) return;
      this.setState({
        modified: true
      });
    }
  }, {
    key: "handleKeyUp",
    value: function handleKeyUp(e) {
      if (_vkey["default"][e.keyCode] !== this.props.modifier) return;
      this.setState({
        modified: false
      });
    }
  }, {
    key: "render",
    value: function render() {
      // NOTE `modifier` is declared to remove it from `props`, though never used
      var _this$props = this.props,
          Component = _this$props.component,
          modified = _this$props.modified,
          modifier = _this$props.modifier,
          normal = _this$props.normal,
          props = _objectWithoutProperties(_this$props, ["component", "modified", "modifier", "normal"]);

      props.children = this.state.modified ? modified : normal;
      return _react["default"].createElement(Component, props);
    }
  }]);

  return AltText;
}(_react.Component);

;
var SUPPORTED_KEYS = ['<alt>', '<control>', '<meta>', '<shift>'];
AltText.propTypes = {
  component: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.string]),
  modified: _react.PropTypes.oneOfType([_react.PropTypes.element, _react.PropTypes.string]),
  modifier: _react.PropTypes.oneOf(SUPPORTED_KEYS),
  normal: _react.PropTypes.oneOfType([_react.PropTypes.element, _react.PropTypes.string])
};
AltText.defaultProps = {
  component: 'span',
  modifier: '<alt>'
};
module.exports = AltText;

},{"react":undefined,"vkey":undefined}],88:[function(require,module,exports){
"use strict";

var _glamor = require("glamor");

var _react = _interopRequireWildcard(require("react"));

var _DrilldownItem = _interopRequireDefault(require("./DrilldownItem"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function Drilldown(_ref) {
  var className = _ref.className,
      items = _ref.items,
      props = _objectWithoutProperties(_ref, ["className", "items"]);

  props.className = (0, _glamor.css)(classes.drilldown, className);
  return _react["default"].createElement("ul", props, items.map(function (item, idx) {
    return _react["default"].createElement(_DrilldownItem["default"], {
      href: item.href,
      key: idx,
      label: item.label,
      separate: idx < items.length - 1
    });
  }));
}

;
Drilldown.propTypes = {
  items: _react.PropTypes.arrayOf(_react.PropTypes.shape({
    href: _react.PropTypes.string.isRequired,
    label: _react.PropTypes.string.isRequired,
    separate: _react.PropTypes.bool // FIXME verb; could be better

  })).isRequired
};
var classes = {
  drilldown: {
    display: 'inline-block',
    listStyle: 'none',
    margin: 0,
    padding: 0
  }
};
module.exports = Drilldown;

},{"./DrilldownItem":89,"glamor":undefined,"react":undefined}],89:[function(require,module,exports){
"use strict";

var _glamor = require("glamor");

var _react = _interopRequireWildcard(require("react"));

var _reactRouter = require("react-router");

var _elemental = require("../../../elemental");

var _theme = _interopRequireDefault(require("../../../../theme"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function DrilldownItem(_ref) {
  var className = _ref.className,
      href = _ref.href,
      label = _ref.label,
      separate = _ref.separate,
      separator = _ref.separator,
      style = _ref.style,
      props = _objectWithoutProperties(_ref, ["className", "href", "label", "separate", "separator", "style"]);

  props.className = (0, _glamor.css)(classes.item, className); // remove horizontal padding

  var styles = _objectSpread({
    paddingLeft: 0,
    paddingRight: 0
  }, style);

  return _react["default"].createElement("li", props, _react["default"].createElement(_elemental.Button, {
    component: _reactRouter.Link,
    style: styles,
    to: href,
    variant: "link"
  }, label), separate && _react["default"].createElement("span", {
    className: (0, _glamor.css)(classes.separator)
  }, separator));
}

;
DrilldownItem.propTypes = {
  href: _react.PropTypes.string.isRequired,
  label: _react.PropTypes.string.isRequired,
  separate: _react.PropTypes.bool,
  // FIXME verb; could be better
  separator: _react.PropTypes.oneOfType([_react.PropTypes.element, _react.PropTypes.string])
};
DrilldownItem.defaultProps = {
  separator: _react["default"].createElement(_elemental.Glyph, {
    name: "chevron-right"
  })
};
var classes = {
  item: {
    display: 'inline-block',
    margin: 0,
    padding: 0,
    verticalAlign: 'middle'
  },
  separator: {
    color: _theme["default"].color.gray40,
    marginLeft: '0.5em',
    marginRight: '0.5em'
  }
};
module.exports = DrilldownItem;

},{"../../../../theme":149,"../../../elemental":73,"glamor":undefined,"react":undefined,"react-router":undefined}],90:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _moment = _interopRequireDefault(require("moment"));

var _objectAssign = _interopRequireDefault(require("object-assign"));

var _elemental = require("../../../elemental");

var _FieldTypes = require("FieldTypes");

var _color = require("../../../../utils/color");

var _theme = _interopRequireDefault(require("../../../../theme"));

var _AlertMessages = _interopRequireDefault(require("../../../shared/AlertMessages"));

var _ConfirmationDialog = _interopRequireDefault(require("../../../shared/ConfirmationDialog"));

var _FormHeading = _interopRequireDefault(require("./FormHeading"));

var _AltText = _interopRequireDefault(require("./AltText"));

var _FooterBar = _interopRequireDefault(require("./FooterBar"));

var _InvalidFieldType = _interopRequireDefault(require("../../../shared/InvalidFieldType"));

var _actions = require("../actions");

var _string = require("../../../../utils/string");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function getNameFromData(data) {
  if (_typeof(data) === 'object') {
    if (typeof data.first === 'string' && typeof data.last === 'string') {
      return data.first + ' ' + data.last;
    } else if (data.id) {
      return data.id;
    }
  }

  return data;
}

function smoothScrollTop() {
  var position = window.scrollY || window.pageYOffset;
  var speed = position / 10;

  if (position > 1) {
    var newPosition = position - speed;
    window.scrollTo(0, newPosition);
    window.requestAnimationFrame(smoothScrollTop);
  } else {
    window.scrollTo(0, 0);
  }
}

var EditForm = _react["default"].createClass({
  displayName: 'EditForm',
  propTypes: {
    data: _react["default"].PropTypes.object,
    list: _react["default"].PropTypes.object
  },
  getInitialState: function getInitialState() {
    return {
      values: (0, _objectAssign["default"])({}, this.props.data.fields),
      confirmationDialog: null,
      loading: false,
      lastValues: null,
      // used for resetting
      focusFirstField: !this.props.list.nameField && !this.props.list.nameFieldIsFormHeader
    };
  },
  componentDidMount: function componentDidMount() {
    this.__isMounted = true;
  },
  componentWillUnmount: function componentWillUnmount() {
    this.__isMounted = false;
  },
  getFieldProps: function getFieldProps(field) {
    var props = (0, _objectAssign["default"])({}, field);
    var alerts = this.state.alerts; // Display validation errors inline

    if (alerts && alerts.error && alerts.error.error === 'validation errors') {
      if (alerts.error.detail[field.path]) {
        // NOTE: This won't work yet, as ElementalUI doesn't allow
        // passed in isValid, only invalidates via internal state.
        // PR to fix that: https://github.com/elementalui/elemental/pull/149
        props.isValid = false;
      }
    }

    props.value = this.state.values[field.path] === undefined ? field.defaultValue : this.state.values[field.path];
    props.values = this.state.values;
    props.onChange = this.handleChange;
    props.mode = 'edit';
    return props;
  },
  handleChange: function handleChange(event) {
    var values = (0, _objectAssign["default"])({}, this.state.values);
    values[event.path] = event.value;
    this.setState({
      values: values
    });
  },
  toggleDeleteDialog: function toggleDeleteDialog() {
    this.setState({
      deleteDialogIsOpen: !this.state.deleteDialogIsOpen
    });
  },
  toggleResetDialog: function toggleResetDialog() {
    this.setState({
      resetDialogIsOpen: !this.state.resetDialogIsOpen
    });
  },
  handleReset: function handleReset() {
    this.setState({
      values: (0, _objectAssign["default"])({}, this.state.lastValues || this.props.data.fields),
      resetDialogIsOpen: false
    });
  },
  handleDelete: function handleDelete() {
    var data = this.props.data;
    this.props.dispatch((0, _actions.deleteItem)(data.id, this.props.router));
  },
  handleKeyFocus: function handleKeyFocus() {
    var input = this.refs.keyOrIdInput;
    input.select();
  },
  removeConfirmationDialog: function removeConfirmationDialog() {
    this.setState({
      confirmationDialog: null
    });
  },
  updateItem: function updateItem() {
    var _this = this;

    var _this$props = this.props,
        data = _this$props.data,
        list = _this$props.list;
    var editForm = this.refs.editForm; // Fix for Safari where XHR form submission fails when input[type=file] is empty
    // https://stackoverflow.com/questions/49614091/safari-11-1-ajax-xhr-form-submission-fails-when-inputtype-file-is-empty

    $(editForm).find("input[type='file']").each(function () {
      if ($(this).get(0).files.length === 0) {
        $(this).prop('disabled', true);
      }
    });
    var formData = new FormData(editForm);
    $(editForm).find("input[type='file']").each(function () {
      if ($(this).get(0).files.length === 0) {
        $(this).prop('disabled', false);
      }
    }); // Show loading indicator

    this.setState({
      loading: true
    });
    list.updateItem(data.id, formData, function (err, data) {
      smoothScrollTop();

      if (err) {
        _this.setState({
          alerts: {
            error: err
          },
          loading: false
        });
      } else {
        // Success, display success flash messages, replace values
        // TODO: Update key value
        _this.setState({
          alerts: {
            success: {
              success: 'Your changes have been saved successfully'
            }
          },
          lastValues: _this.state.values,
          values: data.fields,
          loading: false
        });
      }
    });
  },
  renderKeyOrId: function renderKeyOrId() {
    var className = 'EditForm__key-or-id';
    var list = this.props.list;

    if (list.nameField && list.autokey && this.props.data[list.autokey.path]) {
      return _react["default"].createElement("div", {
        className: className
      }, _react["default"].createElement(_AltText["default"], {
        modified: "ID:",
        normal: "".concat((0, _string.upcase)(list.autokey.path), ": "),
        title: "Press <alt> to reveal the ID",
        className: "EditForm__key-or-id__label"
      }), _react["default"].createElement(_AltText["default"], {
        modified: _react["default"].createElement("input", {
          ref: "keyOrIdInput",
          onFocus: this.handleKeyFocus,
          value: this.props.data.id,
          className: "EditForm__key-or-id__input",
          readOnly: true
        }),
        normal: _react["default"].createElement("input", {
          ref: "keyOrIdInput",
          onFocus: this.handleKeyFocus,
          value: this.props.data[list.autokey.path],
          className: "EditForm__key-or-id__input",
          readOnly: true
        }),
        title: "Press <alt> to reveal the ID",
        className: "EditForm__key-or-id__field"
      }));
    } else if (list.autokey && this.props.data[list.autokey.path]) {
      return _react["default"].createElement("div", {
        className: className
      }, _react["default"].createElement("span", {
        className: "EditForm__key-or-id__label"
      }, list.autokey.path, ": "), _react["default"].createElement("div", {
        className: "EditForm__key-or-id__field"
      }, _react["default"].createElement("input", {
        ref: "keyOrIdInput",
        onFocus: this.handleKeyFocus,
        value: this.props.data[list.autokey.path],
        className: "EditForm__key-or-id__input",
        readOnly: true
      })));
    } else if (list.nameField) {
      return _react["default"].createElement("div", {
        className: className
      }, _react["default"].createElement("span", {
        className: "EditForm__key-or-id__label"
      }, "ID: "), _react["default"].createElement("div", {
        className: "EditForm__key-or-id__field"
      }, _react["default"].createElement("input", {
        ref: "keyOrIdInput",
        onFocus: this.handleKeyFocus,
        value: this.props.data.id,
        className: "EditForm__key-or-id__input",
        readOnly: true
      })));
    }
  },
  renderNameField: function renderNameField() {
    var nameField = this.props.list.nameField;
    var nameFieldIsFormHeader = this.props.list.nameFieldIsFormHeader;

    var wrapNameField = function wrapNameField(field) {
      return _react["default"].createElement("div", {
        className: "EditForm__name-field"
      }, field);
    };

    if (nameFieldIsFormHeader) {
      var nameFieldProps = this.getFieldProps(nameField);
      nameFieldProps.label = null;
      nameFieldProps.size = 'full';
      nameFieldProps.autoFocus = true;
      nameFieldProps.inputProps = {
        className: 'item-name-field',
        placeholder: nameField.label,
        size: 'large'
      };
      return wrapNameField(_react["default"].createElement(_FieldTypes.Fields[nameField.type], nameFieldProps));
    } else {
      return wrapNameField(_react["default"].createElement("h2", null, this.props.data.name || '(no name)'));
    }
  },
  renderFormElements: function renderFormElements() {
    var _this2 = this;

    var headings = 0;
    return this.props.list.uiElements.map(function (el, index) {
      // Don't render the name field if it is the header since it'll be rendered in BIG above
      // the list. (see renderNameField method, this is the reverse check of the one it does)
      if (_this2.props.list.nameField && el.field === _this2.props.list.nameField.path && _this2.props.list.nameFieldIsFormHeader) return;

      if (el.type === 'heading') {
        headings++;
        el.options.values = _this2.state.values;
        el.key = 'h-' + headings;
        return _react["default"].createElement(_FormHeading["default"], el);
      }

      if (el.type === 'field') {
        var field = _this2.props.list.fields[el.field];

        var props = _this2.getFieldProps(field);

        if (typeof _FieldTypes.Fields[field.type] !== 'function') {
          return _react["default"].createElement(_InvalidFieldType["default"], {
            type: field.type,
            path: field.path,
            key: field.path
          });
        }

        props.key = field.path;

        if (index === 0 && _this2.state.focusFirstField) {
          props.autoFocus = true;
        }

        return _react["default"].createElement(_FieldTypes.Fields[field.type], props);
      }
    }, this);
  },
  renderFooterBar: function renderFooterBar() {
    if (this.props.list.noedit && this.props.list.nodelete) {
      return null;
    }

    var loading = this.state.loading;
    var loadingButtonText = loading ? 'Saving' : 'Save'; // Padding must be applied inline so the FooterBar can determine its
    // innerHeight at runtime. Aphrodite's styling comes later...

    return _react["default"].createElement(_FooterBar["default"], {
      style: styles.footerbar
    }, _react["default"].createElement("div", {
      style: styles.footerbarInner
    }, !this.props.list.noedit && _react["default"].createElement(_elemental.LoadingButton, {
      color: "primary",
      disabled: loading,
      loading: loading,
      onClick: this.updateItem,
      "data-button": "update"
    }, loadingButtonText), !this.props.list.noedit && _react["default"].createElement(_elemental.Button, {
      disabled: loading,
      onClick: this.toggleResetDialog,
      variant: "link",
      color: "cancel",
      "data-button": "reset"
    }, _react["default"].createElement(_elemental.ResponsiveText, {
      hiddenXS: "reset changes",
      visibleXS: "reset"
    })), !this.props.list.nodelete && _react["default"].createElement(_elemental.Button, {
      disabled: loading,
      onClick: this.toggleDeleteDialog,
      variant: "link",
      color: "delete",
      style: styles.deleteButton,
      "data-button": "delete"
    }, _react["default"].createElement(_elemental.ResponsiveText, {
      hiddenXS: "delete ".concat(this.props.list.singular.toLowerCase()),
      visibleXS: "delete"
    }))));
  },
  renderTrackingMeta: function renderTrackingMeta() {
    // TODO: These fields are visible now, so we don't want this. We may revisit
    // it when we have more granular control over hiding fields in certain
    // contexts, so I'm leaving this code here as a reference for now - JW
    if (true) return null; // if (true) prevents unreachable code linter errpr

    if (!this.props.list.tracking) return null;
    var elements = [];
    var data = {};

    if (this.props.list.tracking.createdAt) {
      data.createdAt = this.props.data.fields[this.props.list.tracking.createdAt];

      if (data.createdAt) {
        elements.push(_react["default"].createElement(_elemental.FormField, {
          key: "createdAt",
          label: "Created on"
        }, _react["default"].createElement(_elemental.FormInput, {
          noedit: true,
          title: (0, _moment["default"])(data.createdAt).format('DD/MM/YYYY h:mm:ssa')
        }, (0, _moment["default"])(data.createdAt).format('Do MMM YYYY'))));
      }
    }

    if (this.props.list.tracking.createdBy) {
      data.createdBy = this.props.data.fields[this.props.list.tracking.createdBy];

      if (data.createdBy && data.createdBy.name) {
        var createdByName = getNameFromData(data.createdBy.name);

        if (createdByName) {
          elements.push(_react["default"].createElement(_elemental.FormField, {
            key: "createdBy",
            label: "Created by"
          }, _react["default"].createElement(_elemental.FormInput, {
            noedit: true
          }, data.createdBy.name.first, " ", data.createdBy.name.last)));
        }
      }
    }

    if (this.props.list.tracking.updatedAt) {
      data.updatedAt = this.props.data.fields[this.props.list.tracking.updatedAt];

      if (data.updatedAt && (!data.createdAt || data.createdAt !== data.updatedAt)) {
        elements.push(_react["default"].createElement(_elemental.FormField, {
          key: "updatedAt",
          label: "Updated on"
        }, _react["default"].createElement(_elemental.FormInput, {
          noedit: true,
          title: (0, _moment["default"])(data.updatedAt).format('DD/MM/YYYY h:mm:ssa')
        }, (0, _moment["default"])(data.updatedAt).format('Do MMM YYYY'))));
      }
    }

    if (this.props.list.tracking.updatedBy) {
      data.updatedBy = this.props.data.fields[this.props.list.tracking.updatedBy];

      if (data.updatedBy && data.updatedBy.name) {
        var updatedByName = getNameFromData(data.updatedBy.name);

        if (updatedByName) {
          elements.push(_react["default"].createElement(_elemental.FormField, {
            key: "updatedBy",
            label: "Updated by"
          }, _react["default"].createElement(_elemental.FormInput, {
            noedit: true
          }, data.updatedBy.name.first, " ", data.updatedBy.name.last)));
        }
      }
    }

    return Object.keys(elements).length ? _react["default"].createElement("div", {
      className: "EditForm__meta"
    }, _react["default"].createElement("h3", {
      className: "form-heading"
    }, "Meta"), elements) : null;
  },
  render: function render() {
    return _react["default"].createElement("form", {
      ref: "editForm",
      className: "EditForm-container"
    }, this.state.alerts ? _react["default"].createElement(_AlertMessages["default"], {
      alerts: this.state.alerts
    }) : null, _react["default"].createElement(_elemental.Grid.Row, null, _react["default"].createElement(_elemental.Grid.Col, {
      large: "three-quarters"
    }, _react["default"].createElement(_elemental.Form, {
      layout: "horizontal",
      component: "div"
    }, this.renderNameField(), this.renderKeyOrId(), this.renderFormElements(), this.renderTrackingMeta())), _react["default"].createElement(_elemental.Grid.Col, {
      large: "one-quarter"
    }, _react["default"].createElement("span", null))), this.renderFooterBar(), _react["default"].createElement(_ConfirmationDialog["default"], {
      confirmationLabel: "Reset",
      isOpen: this.state.resetDialogIsOpen,
      onCancel: this.toggleResetDialog,
      onConfirmation: this.handleReset
    }, _react["default"].createElement("p", null, "Reset your changes to ", _react["default"].createElement("strong", null, this.props.data.name), "?")), _react["default"].createElement(_ConfirmationDialog["default"], {
      confirmationLabel: "Delete",
      isOpen: this.state.deleteDialogIsOpen,
      onCancel: this.toggleDeleteDialog,
      onConfirmation: this.handleDelete
    }, "Are you sure you want to delete ", _react["default"].createElement("strong", null, this.props.data.name, "?"), _react["default"].createElement("br", null), _react["default"].createElement("br", null), "This cannot be undone."));
  }
});

var styles = {
  footerbar: {
    backgroundColor: (0, _color.fade)(_theme["default"].color.body, 93),
    boxShadow: '0 -2px 0 rgba(0, 0, 0, 0.1)',
    paddingBottom: 20,
    paddingTop: 20,
    zIndex: 99
  },
  footerbarInner: {
    height: _theme["default"].component.height // FIXME aphrodite bug

  },
  deleteButton: {
    "float": 'right'
  }
};
module.exports = EditForm;

},{"../../../../theme":149,"../../../../utils/color":151,"../../../../utils/string":156,"../../../elemental":73,"../../../shared/AlertMessages":131,"../../../shared/ConfirmationDialog":132,"../../../shared/InvalidFieldType":136,"../actions":86,"./AltText":87,"./FooterBar":93,"./FormHeading":94,"FieldTypes":undefined,"moment":undefined,"object-assign":555,"react":undefined}],91:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.EditFormHeader = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactDom = require("react-dom");

var _reactRedux = require("react-redux");

var _Toolbar = _interopRequireDefault(require("./Toolbar"));

var _ToolbarSection = _interopRequireDefault(require("./Toolbar/ToolbarSection"));

var _EditFormHeaderSearch = _interopRequireDefault(require("./EditFormHeaderSearch"));

var _reactRouter = require("react-router");

var _Drilldown = _interopRequireDefault(require("./Drilldown"));

var _elemental = require("../../../elemental");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var EditFormHeader = _react["default"].createClass({
  displayName: 'EditFormHeader',
  propTypes: {
    data: _react["default"].PropTypes.object,
    list: _react["default"].PropTypes.object,
    toggleCreate: _react["default"].PropTypes.func
  },
  getInitialState: function getInitialState() {
    return {
      searchString: ''
    };
  },
  toggleCreate: function toggleCreate(visible) {
    this.props.toggleCreate(visible);
  },
  searchStringChanged: function searchStringChanged(event) {
    this.setState({
      searchString: event.target.value
    });
  },
  handleEscapeKey: function handleEscapeKey(event) {
    var escapeKeyCode = 27;

    if (event.which === escapeKeyCode) {
      (0, _reactDom.findDOMNode)(this.refs.searchField).blur();
    }
  },
  renderDrilldown: function renderDrilldown() {
    return _react["default"].createElement(_ToolbarSection["default"], {
      left: true
    }, this.renderDrilldownItems(), this.renderSearch());
  },
  renderDrilldownItems: function renderDrilldownItems() {
    var _this$props = this.props,
        data = _this$props.data,
        list = _this$props.list;
    var items = data.drilldown ? data.drilldown.items : [];
    var backPath = "".concat(Keystone.adminPath, "/").concat(list.path);
    var backStyles = {
      paddingLeft: 0,
      paddingRight: 0
    }; // Link to the list page the user came from

    if (this.props.listActivePage && this.props.listActivePage > 1) {
      backPath = "".concat(backPath, "?page=").concat(this.props.listActivePage);
    } // return a single back button when no drilldown exists


    if (!items.length) {
      return _react["default"].createElement(_elemental.GlyphButton, {
        component: _reactRouter.Link,
        "data-e2e-editform-header-back": true,
        glyph: "chevron-left",
        position: "left",
        style: backStyles,
        to: backPath,
        variant: "link"
      }, list.plural);
    } // prepare the drilldown elements


    var drilldown = [];
    items.forEach(function (item, idx) {
      // FIXME @jedwatson
      // we used to support relationships of type MANY where items were
      // represented as siblings inside a single list item; this got a
      // bit messy...
      item.items.forEach(function (link) {
        drilldown.push({
          href: link.href,
          label: link.label,
          title: item.list.singular
        });
      });
    }); // add the current list to the drilldown

    drilldown.push({
      href: backPath,
      label: list.plural
    });
    return _react["default"].createElement(_Drilldown["default"], {
      items: drilldown
    });
  },
  renderSearch: function renderSearch() {
    var list = this.props.list;
    return _react["default"].createElement("form", {
      action: "".concat(Keystone.adminPath, "/").concat(list.path),
      className: "EditForm__header__search"
    }, _react["default"].createElement(_EditFormHeaderSearch["default"], {
      value: this.state.searchString,
      onChange: this.searchStringChanged,
      onKeyUp: this.handleEscapeKey
    }));
  },
  renderInfo: function renderInfo() {
    return _react["default"].createElement(_ToolbarSection["default"], {
      right: true
    }, this.renderCreateButton());
  },
  renderCreateButton: function renderCreateButton() {
    var _this = this;

    var _this$props$list = this.props.list,
        nocreate = _this$props$list.nocreate,
        autocreate = _this$props$list.autocreate,
        singular = _this$props$list.singular;
    if (nocreate) return null;
    var props = {};

    if (autocreate) {
      props.href = '?new' + Keystone.csrf.query;
    } else {
      props.onClick = function () {
        _this.toggleCreate(true);
      };
    }

    return _react["default"].createElement(_elemental.GlyphButton, _extends({
      "data-e2e-item-create-button": "true",
      color: "success",
      glyph: "plus",
      position: "left"
    }, props), _react["default"].createElement(_elemental.ResponsiveText, {
      hiddenXS: "New ".concat(singular),
      visibleXS: "Create"
    }));
  },
  render: function render() {
    return _react["default"].createElement(_Toolbar["default"], null, this.renderDrilldown(), this.renderInfo());
  }
});

exports.EditFormHeader = EditFormHeader;

var _default = (0, _reactRedux.connect)(function (state) {
  return {
    listActivePage: state.lists.page.index
  };
})(EditFormHeader);

exports["default"] = _default;

},{"../../../elemental":73,"./Drilldown":88,"./EditFormHeaderSearch":92,"./Toolbar":99,"./Toolbar/ToolbarSection":98,"react":undefined,"react-dom":undefined,"react-redux":undefined,"react-router":undefined}],92:[function(require,module,exports){
"use strict";

var _react = _interopRequireWildcard(require("react"));

var _reactDom = require("react-dom");

var _glamor = require("glamor");

var _elemental = require("../../../elemental");

var _theme = _interopRequireDefault(require("../../../../theme"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var EditFormHeaderSearch =
/*#__PURE__*/
function (_Component) {
  _inherits(EditFormHeaderSearch, _Component);

  function EditFormHeaderSearch() {
    var _this;

    _classCallCheck(this, EditFormHeaderSearch);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(EditFormHeaderSearch).call(this));
    _this.focusField = _this.focusField.bind(_assertThisInitialized(_this));
    _this.state = {
      focused: false
    };
    return _this;
  }

  _createClass(EditFormHeaderSearch, [{
    key: "focusField",
    value: function focusField() {
      var _this2 = this;

      this.setState({
        focused: true
      }, function () {
        (0, _reactDom.findDOMNode)(_this2.refs.target).focus();
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var focused = this.state.focused;

      var _this$props = this.props,
          onChange = _this$props.onChange,
          onKeyUp = _this$props.onKeyUp,
          value = _this$props.value,
          props = _objectWithoutProperties(_this$props, ["onChange", "onKeyUp", "value"]);

      return focused ? _react["default"].createElement("div", {
        className: (0, _glamor.css)(classes.wrapper)
      }, _react["default"].createElement(_elemental.Glyph, {
        cssStyles: classes.glyph,
        color: _theme["default"].color.gray40,
        name: "search",
        "data-e2e-search-icon": true
      }), _react["default"].createElement(_elemental.FormInput, _extends({
        cssStyles: classes.input,
        name: "search",
        onBlur: function onBlur() {
          return _this3.setState({
            focused: false
          });
        },
        onChange: onChange,
        onKeyUp: onKeyUp,
        placeholder: "Search",
        ref: "target",
        type: "search",
        value: value
      }, props))) : _react["default"].createElement(_elemental.GlyphButton, {
        color: "primary",
        glyph: "search",
        glyphStyle: {
          marginRight: '0.4em'
        },
        onClick: this.focusField,
        onFocus: this.focusField,
        position: "left",
        variant: "link",
        style: {
          paddingLeft: '0.7em'
        },
        "data-e2e-search-icon": true
      }, "Search");
    }
  }]);

  return EditFormHeaderSearch;
}(_react.Component);

; // For props "glyph", "glyphColor", and "glyphSize":
// prop type validation will occur within the Glyph component, no need to
// duplicate, just pass it through.

EditFormHeaderSearch.propTypes = {
  onChange: _react.PropTypes.func.isRequired,
  value: _react.PropTypes.string
};
var classes = {
  wrapper: {
    display: 'inline-block',
    position: 'relative',
    verticalAlign: 'middle'
  },
  // input
  input: {
    paddingLeft: '2.2em',
    // opacity: 0,
    transition: 'all 240ms',
    width: 100,
    ':focus': {
      // opacity: 1,
      width: 240
    }
  },
  // glyph
  glyph: {
    alignItems: 'center',
    display: 'flex',
    height: '100%',
    justifyContent: 'center',
    position: 'absolute',
    width: '2.2em'
  }
};
module.exports = EditFormHeaderSearch; // Search
// ------------------------------
// .EditForm__header__search {
// 	display: inline-block;
// 	margin-left: 1em;
// }
// .EditForm__header__search-field {
// 	margin-bottom: 0;
//
// 	.IconField__icon {
// 		color: @app-primary;
// 	}
// }
//
// // make the input appear as a button link until focused
// .EditForm__header__search-input {
// 	// override elemental's transition to catch the width or it looks weird
// 	.transition( all 0.15s ease-in-out );
// 	.placeholder(@link-color);
// 	background: transparent;
// 	border-color: transparent;
// 	box-shadow: none;
// 	display: inline-block;
//
// 	// set the width to only be as long as if it were a button initially
// 	// this is updated on focus to a more comfortable typing length
// 	width: 100px;
//
// 	// decorate the input as a link
// 	&:hover {
// 		.placeholder(@link-hover-color);
// 		border-color: transparent;
// 		cursor: pointer;
//
// 		// handle placeholder text
// 		&::-moz-placeholder { text-decoration: underline; }
// 		&:-ms-input-placeholder { text-decoration: underline; }
// 		&::-webkit-input-placeholder  { text-decoration: underline; }
//
// 		+ .IconField__icon {
// 			color: @link-hover-color;
// 		}
// 	}
//
// 	// return the input to it's natural appearance on focus
// 	&:focus {
// 		.placeholder(@input-placeholder-color);
// 		background: white;
// 		border-color: @input-border-color-focus;
// 		box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 0 3px fade(@input-border-color-focus, 10%);
// 		cursor: auto;
// 		outline: 0;
// 		width: 240px;
//
// 		// handle placeholder text
// 		&::-moz-placeholder { text-decoration: none; }
// 		&:-ms-input-placeholder { text-decoration: none; }
// 		&::-webkit-input-placeholder  { text-decoration: none; }
//
// 		+ .IconField__icon {
// 			color: @input-placeholder-color;
// 		}
// 	}
// }
// // hide the search field on small devices
// @media (max-width: 480px) {
// 	.EditForm__header__search {
// 		display: none;
// 	}
// }

},{"../../../../theme":149,"../../../elemental":73,"glamor":undefined,"react":undefined,"react-dom":undefined}],93:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _blacklist = _interopRequireDefault(require("blacklist"));

var _objectAssign = _interopRequireDefault(require("object-assign"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var FooterBar = _react["default"].createClass({
  displayName: "FooterBar",
  propTypes: {
    style: _react["default"].PropTypes.object
  },
  getDefaultProps: function getDefaultProps() {
    return {
      style: {}
    };
  },
  getInitialState: function getInitialState() {
    return {
      position: 'relative',
      width: 'auto',
      height: 'auto',
      top: 0
    };
  },
  componentDidMount: function componentDidMount() {
    // Bail in IE8 because React doesn't support the onScroll event in that browser
    // Conveniently (!) IE8 doesn't have window.getComputedStyle which we also use here
    if (!window.getComputedStyle) return;
    var footer = this.refs.footer;
    this.windowSize = this.getWindowSize();
    var footerStyle = window.getComputedStyle(footer);
    this.footerSize = {
      x: footer.offsetWidth,
      y: footer.offsetHeight + parseInt(footerStyle.marginTop || '0')
    };
    window.addEventListener('scroll', this.recalcPosition, false);
    window.addEventListener('resize', this.recalcPosition, false);
    this.recalcPosition();
  },
  componentWillUnmount: function componentWillUnmount() {
    window.removeEventListener('scroll', this.recalcPosition, false);
    window.removeEventListener('resize', this.recalcPosition, false);
  },
  getWindowSize: function getWindowSize() {
    return {
      x: window.innerWidth,
      y: window.innerHeight
    };
  },
  recalcPosition: function recalcPosition() {
    var wrapper = this.refs.wrapper;
    this.footerSize.x = wrapper.offsetWidth;
    var offsetTop = 0;
    var offsetEl = wrapper;

    while (offsetEl) {
      offsetTop += offsetEl.offsetTop;
      offsetEl = offsetEl.offsetParent;
    }

    var maxY = offsetTop + this.footerSize.y;
    var viewY = window.scrollY + window.innerHeight;
    var newSize = this.getWindowSize();
    var sizeChanged = newSize.x !== this.windowSize.x || newSize.y !== this.windowSize.y;
    this.windowSize = newSize;
    var newState = {
      width: this.footerSize.x,
      height: this.footerSize.y
    };

    if (viewY > maxY && (sizeChanged || this.mode !== 'inline')) {
      this.mode = 'inline';
      newState.top = 0;
      newState.position = 'absolute';
      this.setState(newState);
    } else if (viewY <= maxY && (sizeChanged || this.mode !== 'fixed')) {
      this.mode = 'fixed';
      newState.top = window.innerHeight - this.footerSize.y;
      newState.position = 'fixed';
      this.setState(newState);
    }
  },
  render: function render() {
    var wrapperStyle = {
      height: this.state.height,
      marginTop: 60,
      position: 'relative'
    };
    var footerProps = (0, _blacklist["default"])(this.props, 'children', 'style');
    var footerStyle = (0, _objectAssign["default"])({}, this.props.style, {
      position: this.state.position,
      top: this.state.top,
      width: this.state.width,
      height: this.state.height
    });
    return _react["default"].createElement("div", {
      ref: "wrapper",
      style: wrapperStyle
    }, _react["default"].createElement("div", _extends({
      ref: "footer",
      style: footerStyle
    }, footerProps), this.props.children));
  }
});

module.exports = FooterBar;

},{"blacklist":undefined,"object-assign":555,"react":undefined}],94:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _evalDependsOn = _interopRequireDefault(require("../../../../../../fields/utils/evalDependsOn"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

module.exports = _react["default"].createClass({
  displayName: 'FormHeading',
  propTypes: {
    options: _react["default"].PropTypes.object
  },
  render: function render() {
    if (!(0, _evalDependsOn["default"])(this.props.options.dependsOn, this.props.options.values)) {
      return null;
    }

    return _react["default"].createElement("h3", {
      className: "form-heading"
    }, this.props.content);
  }
});

},{"../../../../../../fields/utils/evalDependsOn":157,"react":undefined}],95:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactRouter = require("react-router");

var _elemental = require("../../../../elemental");

var _RelatedItemsListDragDrop = _interopRequireDefault(require("./RelatedItemsListDragDrop"));

var _RelatedItemsListRow = _interopRequireDefault(require("./RelatedItemsListRow"));

var _actions = require("../../actions");

var _constants = require("../../../../../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var RelatedItemsList = _react["default"].createClass({
  displayName: "RelatedItemsList",
  propTypes: {
    dispatch: _react["default"].PropTypes.func.isRequired,
    dragNewSortOrder: _react["default"].PropTypes.number,
    items: _react["default"].PropTypes.array,
    list: _react["default"].PropTypes.object.isRequired,
    refList: _react["default"].PropTypes.object.isRequired,
    relatedItemId: _react["default"].PropTypes.string.isRequired,
    relationship: _react["default"].PropTypes.object.isRequired
  },
  getInitialState: function getInitialState() {
    return {
      columns: this.getColumns(),
      err: null,
      items: null
    };
  },
  componentDidMount: function componentDidMount() {
    this.__isMounted = true;
    this.loadItems();
  },
  componentWillUnmount: function componentWillUnmount() {
    this.__isMounted = false;
  },
  isSortable: function isSortable() {
    // Check if the related items should be sortable. The referenced list has to
    //   be sortable and it has to set the current list as it's sortContext.
    var _this$props = this.props,
        refList = _this$props.refList,
        list = _this$props.list,
        relationship = _this$props.relationship;
    var sortContext = refList.sortContext;

    if (refList.sortable && sortContext) {
      var parts = sortContext.split(':');

      if (parts[0] === list.key && parts[1] === relationship.path) {
        return true;
      }
    }

    return false;
  },
  getColumns: function getColumns() {
    var _this$props2 = this.props,
        relationship = _this$props2.relationship,
        refList = _this$props2.refList;
    var columns = refList.expandColumns(refList.defaultColumns);
    return columns.filter(function (i) {
      return i.path !== relationship.refPath;
    });
  },
  loadItems: function loadItems() {
    var _this$props3 = this.props,
        refList = _this$props3.refList,
        relatedItemId = _this$props3.relatedItemId,
        relationship = _this$props3.relationship;
    var columns = this.state.columns; // TODO: Move error to redux store

    if (!refList.fields[relationship.refPath]) {
      var err = _react["default"].createElement(_elemental.Alert, {
        color: "danger"
      }, _react["default"].createElement("strong", null, "Error:"), " Related List ", _react["default"].createElement("strong", null, refList.label), " has no field ", _react["default"].createElement("strong", null, relationship.refPath));

      return this.setState({
        err: err
      });
    }

    this.props.dispatch((0, _actions.loadRelationshipItemData)({
      columns: columns,
      refList: refList,
      relatedItemId: relatedItemId,
      relationship: relationship
    }));
  },
  renderItems: function renderItems() {
    var _this = this;

    var tableBody = this.isSortable() ? _react["default"].createElement(_RelatedItemsListDragDrop["default"], _extends({
      columns: this.state.columns,
      items: this.props.items
    }, this.props)) : _react["default"].createElement("tbody", null, this.props.items.results.map(function (item) {
      return _react["default"].createElement(_RelatedItemsListRow["default"], {
        key: item.id,
        columns: _this.state.columns,
        item: item,
        refList: _this.props.refList
      });
    }));
    return this.props.items.results.length ? _react["default"].createElement("div", {
      className: "ItemList-wrapper"
    }, _react["default"].createElement("table", {
      cellPadding: "0",
      cellSpacing: "0",
      className: "Table ItemList"
    }, this.renderTableCols(), this.renderTableHeaders(), tableBody)) : _react["default"].createElement(_elemental.BlankState, {
      heading: "No related ".concat(this.props.refList.plural.toLowerCase(), "..."),
      style: {
        marginBottom: '3em'
      }
    });
  },
  renderTableCols: function renderTableCols() {
    var cols = this.state.columns.map(function (col) {
      return _react["default"].createElement("col", {
        width: col.width,
        key: col.path
      });
    });
    return _react["default"].createElement("colgroup", null, cols);
  },
  renderTableHeaders: function renderTableHeaders() {
    var cells = this.state.columns.map(function (col) {
      return _react["default"].createElement("th", {
        key: col.path
      }, col.label);
    }); // add sort col when available

    if (this.isSortable()) {
      cells.unshift(_react["default"].createElement("th", {
        width: _constants.TABLE_CONTROL_COLUMN_WIDTH,
        key: "sortable"
      }));
    }

    return _react["default"].createElement("thead", null, _react["default"].createElement("tr", null, cells));
  },
  render: function render() {
    if (this.state.err) {
      return _react["default"].createElement("div", {
        className: "Relationship"
      }, this.state.err);
    }

    var listHref = "".concat(Keystone.adminPath, "/").concat(this.props.refList.path);

    var loadingElement = _react["default"].createElement(_elemental.Center, {
      height: 100
    }, _react["default"].createElement(_elemental.Spinner, null));

    return _react["default"].createElement("div", {
      className: "Relationship"
    }, _react["default"].createElement("h3", {
      className: "Relationship__link"
    }, _react["default"].createElement(_reactRouter.Link, {
      to: listHref
    }, this.props.refList.label)), this.props.items ? this.renderItems() : loadingElement);
  }
});

module.exports = RelatedItemsList;

},{"../../../../../constants":148,"../../../../elemental":73,"../../actions":86,"./RelatedItemsListDragDrop":96,"./RelatedItemsListRow":97,"react":undefined,"react-router":undefined}],96:[function(require,module,exports){
"use strict";

var _react = _interopRequireWildcard(require("react"));

var _reactDnd = require("react-dnd");

var _reactDndHtml5Backend = _interopRequireDefault(require("react-dnd-html5-backend"));

var _RelatedItemsListRow = require("./RelatedItemsListRow");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var RelatedItemsListDragDrop =
/*#__PURE__*/
function (_Component) {
  _inherits(RelatedItemsListDragDrop, _Component);

  function RelatedItemsListDragDrop() {
    _classCallCheck(this, RelatedItemsListDragDrop);

    return _possibleConstructorReturn(this, _getPrototypeOf(RelatedItemsListDragDrop).apply(this, arguments));
  }

  _createClass(RelatedItemsListDragDrop, [{
    key: "render",
    value: function render() {
      var _this = this;

      var items = this.props.items;
      return _react["default"].createElement("tbody", null, items.results.map(function (item, i) {
        return _react["default"].createElement(_RelatedItemsListRow.Sortable, _extends({
          key: item.id,
          index: i,
          item: item
        }, _this.props));
      }));
    }
  }]);

  return RelatedItemsListDragDrop;
}(_react.Component);

;
RelatedItemsListDragDrop.propTypes = {
  columns: _react.PropTypes.array.isRequired,
  dispatch: _react["default"].PropTypes.func.isRequired,
  dragNewSortOrder: _react["default"].PropTypes.number,
  items: _react.PropTypes.array.isRequired,
  list: _react.PropTypes.object.isRequired,
  refList: _react.PropTypes.object.isRequired,
  relatedItemId: _react.PropTypes.string.isRequired,
  relationship: _react.PropTypes.object.isRequired
};
module.exports = (0, _reactDnd.DragDropContext)(_reactDndHtml5Backend["default"])(RelatedItemsListDragDrop);

},{"./RelatedItemsListRow":97,"react":undefined,"react-dnd":undefined,"react-dnd-html5-backend":undefined}],97:[function(require,module,exports){
"use strict";

var _react = _interopRequireWildcard(require("react"));

var _reactDnd = require("react-dnd");

var _FieldTypes = require("FieldTypes");

var _actions = require("../../actions");

var _ListControl = _interopRequireDefault(require("../../../List/components/ListControl"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var RelatedItemsListRow =
/*#__PURE__*/
function (_Component) {
  _inherits(RelatedItemsListRow, _Component);

  function RelatedItemsListRow() {
    _classCallCheck(this, RelatedItemsListRow);

    return _possibleConstructorReturn(this, _getPrototypeOf(RelatedItemsListRow).apply(this, arguments));
  }

  _createClass(RelatedItemsListRow, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          columns = _this$props.columns,
          item = _this$props.item,
          connectDragSource = _this$props.connectDragSource,
          connectDropTarget = _this$props.connectDropTarget,
          refList = _this$props.refList;
      var cells = columns.map(function (col, i) {
        var ColumnType = _FieldTypes.Columns[col.type] || _FieldTypes.Columns.__unrecognised__;
        var linkTo = !i ? "".concat(Keystone.adminPath, "/").concat(refList.path, "/").concat(item.id) : undefined;
        return _react["default"].createElement(ColumnType, {
          key: col.path,
          list: refList,
          col: col,
          data: item,
          linkTo: linkTo
        });
      }); // add sortable icon when applicable

      if (connectDragSource) {
        cells.unshift(_react["default"].createElement(_ListControl["default"], {
          key: "_sort",
          type: "sortable",
          dragSource: connectDragSource
        }));
      }

      var row = _react["default"].createElement("tr", {
        key: 'i' + item.id
      }, cells);

      if (connectDropTarget) {
        return connectDropTarget(row);
      } else {
        return row;
      }
    }
  }]);

  return RelatedItemsListRow;
}(_react.Component);

RelatedItemsListRow.propTypes = {
  columns: _react.PropTypes.array.isRequired,
  dispatch: _react.PropTypes.func.isRequired,
  dragNewSortOrder: _react["default"].PropTypes.number,
  index: _react.PropTypes.number,
  item: _react.PropTypes.object.isRequired,
  refList: _react.PropTypes.object.isRequired,
  relatedItemId: _react.PropTypes.string.isRequired,
  relationship: _react.PropTypes.object.isRequired,
  // Injected by React DnD:
  isDragging: _react.PropTypes.bool,
  // eslint-disable-line react/sort-prop-types
  connectDragSource: _react.PropTypes.func,
  // eslint-disable-line react/sort-prop-types
  connectDropTarget: _react.PropTypes.func,
  // eslint-disable-line react/sort-prop-types
  connectDragPreview: _react.PropTypes.func // eslint-disable-line react/sort-prop-types

};
module.exports = exports = RelatedItemsListRow; // Expose Sortable

/**
 * Implements drag source.
 */

var dragItem = {
  beginDrag: function beginDrag(props) {
    var send = _objectSpread({}, props); // props.dispatch(setDragBase(props.item, props.index));


    return _objectSpread({}, send);
  },
  endDrag: function endDrag(props, monitor, component) {
    // Dropped outside of the drop target, reset rows
    if (!monitor.didDrop()) {
      props.dispatch((0, _actions.resetItems)());
      return;
    }

    var draggedItem = props.item;
    var prevSortOrder = draggedItem.sortOrder;
    var newSortOrder = props.dragNewSortOrder; // Dropping on self

    if (prevSortOrder === newSortOrder) {
      props.dispatch((0, _actions.resetItems)());
      return;
    } // dropped on a target


    var columns = props.columns,
        refList = props.refList,
        relationship = props.relationship,
        relatedItemId = props.relatedItemId,
        item = props.item;
    props.dispatch((0, _actions.reorderItems)({
      columns: columns,
      refList: refList,
      relationship: relationship,
      relatedItemId: relatedItemId,
      item: item,
      prevSortOrder: prevSortOrder,
      newSortOrder: newSortOrder
    }));
  }
};
/**
 * Implements drag target.
 */

var dropItem = {
  drop: function drop(props, monitor, component) {
    return _objectSpread({}, props);
  },
  hover: function hover(props, monitor, component) {
    // reset row alerts
    // if (props.rowAlert.success || props.rowAlert.fail) {
    // 	props.dispatch(setRowAlert({
    // 		reset: true,
    // 	}));
    // }
    var dragged = monitor.getItem().index;
    var over = props.index; // self

    if (dragged === over) {
      return;
    } // Since the items are moved on hover, we need to store the new sort order from the dragged over item so we can use it to reorder when the item is dropped.


    props.dispatch((0, _actions.moveItem)({
      prevIndex: dragged,
      newIndex: over,
      relationshipPath: props.relationship.path,
      newSortOrder: props.item.sortOrder
    }));
    monitor.getItem().index = over;
  }
};
/**
 * Specifies the props to inject into your component.
 */

function dragProps(connect, monitor) {
  return {
    connectDragSource: connect.dragSource(),
    isDragging: monitor.isDragging(),
    connectDragPreview: connect.dragPreview()
  };
}

function dropProps(connect) {
  return {
    connectDropTarget: connect.dropTarget()
  };
}

; // exports.Sortable = RelatedItemsListRow;

exports.Sortable = (0, _reactDnd.DragSource)('item', dragItem, dragProps)((0, _reactDnd.DropTarget)('item', dropItem, dropProps)(RelatedItemsListRow));

},{"../../../List/components/ListControl":118,"../../actions":86,"FieldTypes":undefined,"react":undefined,"react-dnd":undefined}],98:[function(require,module,exports){
"use strict";

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ToolbarSection(_ref) {
  var className = _ref.className,
      left = _ref.left,
      right = _ref.right,
      props = _objectWithoutProperties(_ref, ["className", "left", "right"]);

  props.className = (0, _classnames["default"])('Toolbar__section', {
    'Toolbar__section--left': left,
    'Toolbar__section--right': right
  }, className);
  return _react["default"].createElement("div", props);
}

;
ToolbarSection.propTypes = {
  left: _react.PropTypes.bool,
  right: _react.PropTypes.bool
};
module.exports = ToolbarSection;

},{"classnames":undefined,"react":undefined}],99:[function(require,module,exports){
"use strict";

var _react = _interopRequireWildcard(require("react"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var Toolbar = function Toolbar(props) {
  return _react["default"].createElement("div", _extends({}, props, {
    className: "Toolbar"
  }));
};

Toolbar.displayName = 'Toolbar';
Toolbar.propTypes = {
  children: _react.PropTypes.node.isRequired
};
module.exports = Toolbar;

},{"react":undefined}],100:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LOAD_RELATIONSHIP_DATA = exports.DRAG_RESET_ITEMS = exports.DRAG_MOVE_ITEM = exports.DATA_LOADING_ERROR = exports.DATA_LOADING_SUCCESS = exports.LOAD_DATA = exports.SELECT_ITEM = void 0;
var SELECT_ITEM = 'app/Item/SELECT_ITEM';
exports.SELECT_ITEM = SELECT_ITEM;
var LOAD_DATA = 'app/Item/LOAD_DATA';
exports.LOAD_DATA = LOAD_DATA;
var DATA_LOADING_SUCCESS = 'app/Item/DATA_LOADING_SUCCESS';
exports.DATA_LOADING_SUCCESS = DATA_LOADING_SUCCESS;
var DATA_LOADING_ERROR = 'app/Item/DATA_LOADING_ERROR';
exports.DATA_LOADING_ERROR = DATA_LOADING_ERROR;
var DRAG_MOVE_ITEM = 'app/Item/DRAG_MOVE_ITEM';
exports.DRAG_MOVE_ITEM = DRAG_MOVE_ITEM;
var DRAG_RESET_ITEMS = 'app/Item/DRAG_RESET_ITEMS';
exports.DRAG_RESET_ITEMS = DRAG_RESET_ITEMS;
var LOAD_RELATIONSHIP_DATA = 'app/Item/LOAD_RELATIONSHIP_DATA';
exports.LOAD_RELATIONSHIP_DATA = LOAD_RELATIONSHIP_DATA;

},{}],101:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _elemental = require("../../elemental");

var _reactRedux = require("react-redux");

var _reactRouter = require("react-router");

var _lists = require("../../../utils/lists");

var _CreateForm = _interopRequireDefault(require("../../shared/CreateForm"));

var _Alert = _interopRequireDefault(require("../../elemental/Alert"));

var _EditForm = _interopRequireDefault(require("./components/EditForm"));

var _EditFormHeader = _interopRequireDefault(require("./components/EditFormHeader"));

var _RelatedItemsList = _interopRequireDefault(require("./components/RelatedItemsList/RelatedItemsList"));

var _actions = require("./actions");

var _actions2 = require("../List/actions");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * Item View
 *
 * This is the item view, it is rendered when users visit a page of a specific
 * item. This mainly renders the form to edit the item content in.
 */
// import FlashMessages from '../../shared/FlashMessages';
var ItemView = _react["default"].createClass({
  displayName: 'ItemView',
  contextTypes: {
    router: _react["default"].PropTypes.object.isRequired
  },
  getInitialState: function getInitialState() {
    return {
      createIsOpen: false
    };
  },
  componentDidMount: function componentDidMount() {
    // When we directly navigate to an item without coming from another client
    // side routed page before, we need to select the list before initializing the item
    // We also need to update when the list id has changed
    if (!this.props.currentList || this.props.currentList.id !== this.props.params.listId) {
      this.props.dispatch((0, _actions2.selectList)(this.props.params.listId));
    }

    this.initializeItem(this.props.params.itemId);
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    // We've opened a new item from the client side routing, so initialize
    // again with the new item id
    if (nextProps.params.itemId !== this.props.params.itemId) {
      this.props.dispatch((0, _actions2.selectList)(nextProps.params.listId));
      this.initializeItem(nextProps.params.itemId);
    }
  },
  // Initialize an item
  initializeItem: function initializeItem(itemId) {
    this.props.dispatch((0, _actions.selectItem)(itemId));
    this.props.dispatch((0, _actions.loadItemData)());
  },
  // Called when a new item is created
  onCreate: function onCreate(item) {
    // Hide the create form
    this.toggleCreateModal(false); // Redirect to newly created item path

    var list = this.props.currentList;
    this.context.router.push("".concat(Keystone.adminPath, "/").concat(list.path, "/").concat(item.id));
  },
  // Open and close the create new item modal
  toggleCreateModal: function toggleCreateModal(visible) {
    this.setState({
      createIsOpen: visible
    });
  },
  // Render this items relationships
  renderRelationships: function renderRelationships() {
    var _this = this;

    var relationships = this.props.currentList.relationships;
    var keys = Object.keys(relationships);
    if (!keys.length) return;
    return _react["default"].createElement("div", {
      className: "Relationships"
    }, _react["default"].createElement(_elemental.Container, null, _react["default"].createElement("h2", null, "Relationships"), keys.map(function (key) {
      var relationship = relationships[key];
      var refList = _lists.listsByKey[relationship.ref];
      var _this$props = _this.props,
          currentList = _this$props.currentList,
          params = _this$props.params,
          relationshipData = _this$props.relationshipData,
          drag = _this$props.drag;
      return _react["default"].createElement(_RelatedItemsList["default"], {
        key: relationship.path,
        list: currentList,
        refList: refList,
        relatedItemId: params.itemId,
        relationship: relationship,
        items: relationshipData[relationship.path],
        dragNewSortOrder: drag.newSortOrder,
        dispatch: _this.props.dispatch
      });
    })));
  },
  // Handle errors
  handleError: function handleError(error) {
    var detail = error.detail;

    if (detail) {
      // Item not found
      if (detail.name === 'CastError' && detail.path === '_id') {
        return _react["default"].createElement(_elemental.Container, null, _react["default"].createElement(_Alert["default"], {
          color: "danger",
          style: {
            marginTop: '2em'
          }
        }, "No item matching id \"", this.props.routeParams.itemId, "\".\xA0", _react["default"].createElement(_reactRouter.Link, {
          to: "".concat(Keystone.adminPath, "/").concat(this.props.routeParams.listId)
        }, "Go back to ", this.props.routeParams.listId, "?")));
      }
    }

    if (error.message) {
      // Server down + possibly other errors
      if (error.message === 'Internal XMLHttpRequest Error') {
        return _react["default"].createElement(_elemental.Container, null, _react["default"].createElement(_Alert["default"], {
          color: "danger",
          style: {
            marginTop: '2em'
          }
        }, "We encountered some network problems, please refresh."));
      }
    }

    return _react["default"].createElement(_elemental.Container, null, _react["default"].createElement(_Alert["default"], {
      color: "danger",
      style: {
        marginTop: '2em'
      }
    }, "An unknown error has ocurred, please refresh."));
  },
  render: function render() {
    var _this2 = this;

    // If we don't have any data yet, show the loading indicator
    if (!this.props.ready) {
      return _react["default"].createElement(_elemental.Center, {
        height: "50vh",
        "data-screen-id": "item"
      }, _react["default"].createElement(_elemental.Spinner, null));
    } // When we have the data, render the item view with it


    return _react["default"].createElement("div", {
      "data-screen-id": "item"
    }, this.props.error ? this.handleError(this.props.error) : _react["default"].createElement("div", null, _react["default"].createElement(_elemental.Container, null, _react["default"].createElement(_EditFormHeader["default"], {
      list: this.props.currentList,
      data: this.props.data,
      toggleCreate: this.toggleCreateModal
    }), _react["default"].createElement(_CreateForm["default"], {
      list: this.props.currentList,
      isOpen: this.state.createIsOpen,
      onCancel: function onCancel() {
        return _this2.toggleCreateModal(false);
      },
      onCreate: function onCreate(item) {
        return _this2.onCreate(item);
      }
    }), _react["default"].createElement(_EditForm["default"], {
      list: this.props.currentList,
      data: this.props.data,
      dispatch: this.props.dispatch,
      router: this.context.router
    })), this.renderRelationships()));
  }
});

module.exports = (0, _reactRedux.connect)(function (state) {
  return {
    data: state.item.data,
    loading: state.item.loading,
    ready: state.item.ready,
    error: state.item.error,
    currentList: state.lists.currentList,
    relationshipData: state.item.relationshipData,
    drag: state.item.drag
  };
})(ItemView);

},{"../../../utils/lists":154,"../../elemental":73,"../../elemental/Alert":11,"../../shared/CreateForm":133,"../List/actions":105,"./actions":86,"./components/EditForm":90,"./components/EditFormHeader":91,"./components/RelatedItemsList/RelatedItemsList":95,"react":undefined,"react-redux":undefined,"react-router":undefined}],102:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _objectAssign = _interopRequireDefault(require("object-assign"));

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var initialState = {
  data: null,
  id: null,
  loading: false,
  ready: false,
  error: null,
  relationshipData: {},
  drag: {
    clonedItems: false,
    newSortOrder: null,
    relationshipPath: false
  }
};

function item() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action.type) {
    case _constants.SELECT_ITEM:
      return (0, _objectAssign["default"])({}, state, {
        ready: false,
        id: action.id,
        data: null
      });

    case _constants.LOAD_DATA:
      return (0, _objectAssign["default"])({}, state, {
        loading: true
      });

    case _constants.DATA_LOADING_SUCCESS:
      Keystone.item = action.data; // Fix keystone filter

      return (0, _objectAssign["default"])({}, state, {
        data: action.data,
        loading: false,
        ready: true,
        error: null
      });

    case _constants.DATA_LOADING_ERROR:
      return (0, _objectAssign["default"])({}, state, {
        data: null,
        loading: false,
        ready: true,
        error: action.error
      });

    case _constants.DRAG_MOVE_ITEM:
      var currentItems = state.relationshipData[action.relationshipPath].results; // Cache a copy of the current items to reset the items when dismissing a drag and drop if a cached copy doesn't already exist

      var clonedItems = state.drag.clonedItems || currentItems;
      var _item = currentItems[action.prevIndex]; // Remove item at prevIndex from array and save that array in
      // itemsWithoutItem

      var itemsWithoutItem = currentItems.slice(0, action.prevIndex).concat(currentItems.slice(action.prevIndex + 1, currentItems.length)); // Add item back in at new index

      itemsWithoutItem.splice(action.newIndex, 0, _item);
      var newRelationshipData = (0, _objectAssign["default"])({}, state.relationshipData[action.relationshipPath], {
        results: itemsWithoutItem
      });
      return (0, _objectAssign["default"])({}, state, {
        drag: {
          newSortOrder: action.newSortOrder,
          clonedItems: clonedItems,
          relationshipPath: action.relationshipPath
        },
        relationshipData: _objectSpread({}, state.relationshipData, _defineProperty({}, action.relationshipPath, newRelationshipData))
      });

    case _constants.DRAG_RESET_ITEMS:
      var originalRelationshipData = (0, _objectAssign["default"])({}, state.relationshipData[state.drag.relationshipPath], {
        results: state.drag.clonedItems
      });
      return (0, _objectAssign["default"])({}, state, {
        drag: {
          newSortOrder: null,
          clonedItems: false,
          relationshipPath: false
        },
        relationshipData: _objectSpread({}, state.relationshipData, _defineProperty({}, state.drag.relationshipPath, originalRelationshipData))
      });

    case _constants.LOAD_RELATIONSHIP_DATA:
      return (0, _objectAssign["default"])({}, state, {
        // Reset drag and drop when relationship data is loaded
        drag: {
          newSortOrder: null,
          clonedItems: false,
          relationshipPath: false
        },
        relationshipData: _objectSpread({}, state.relationshipData, _defineProperty({}, action.relationshipPath, action.data))
      });

    default:
      return state;
  }
}

var _default = item;
exports["default"] = _default;

},{"./constants":100,"object-assign":555}],103:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setActiveSearch = setActiveSearch;
exports.setActiveSort = setActiveSort;
exports.setActiveColumns = setActiveColumns;
exports.setActiveList = setActiveList;
exports.clearFilter = clearFilter;
exports.clearAllFilters = clearAllFilters;
exports.setFilter = setFilter;
exports.clearCachedQuery = clearCachedQuery;

var _constants = require("../constants");

/**
 * Active actions
 */
function setActiveSearch(searchString) {
  return {
    type: _constants.SET_ACTIVE_SEARCH,
    searchString: searchString
  };
}

function setActiveSort(path) {
  return {
    type: _constants.SELECT_ACTIVE_SORT,
    path: path
  };
}

function setActiveColumns(columns) {
  return {
    type: _constants.SELECT_ACTIVE_COLUMNS,
    columns: columns
  };
}

function setActiveList(list, id) {
  return {
    type: _constants.SET_ACTIVE_LIST,
    list: list,
    id: id
  };
}
/**
 * Filtering actions
 */


function clearFilter(path) {
  return {
    type: _constants.CLEAR_FILTER,
    path: path
  };
}

function clearAllFilters() {
  return {
    type: _constants.CLEAR_ALL_FILTERS
  };
}

function setFilter(path, value) {
  return {
    type: _constants.SELECT_FILTER,
    filter: {
      path: path,
      value: value
    }
  };
}

function clearCachedQuery() {
  return {
    type: _constants.CLEAR_CACHED_QUERY
  };
}

},{"../constants":127}],104:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setDragBase = setDragBase;
exports.resetDragPage = resetDragPage;
exports.resetDragItems = resetDragItems;
exports.setDragItem = setDragItem;
exports.setDragIndex = setDragIndex;
exports.setRowAlert = setRowAlert;
exports.moveItem = moveItem;
exports.reorderItems = reorderItems;
exports.resetItems = resetItems;

var _constants = require("../constants");

var _actions = require("../actions");

function setDragBase(item, index) {
  return function (dispatch) {
    dispatch(resetDragPage());
    dispatch(resetDragItems());

    if (item) {
      dispatch(setDragItem(item));

      if (index) {
        dispatch(setDragIndex(index));
      }
    }
  };
}

;

function resetDragPage() {
  return {
    type: _constants.RESET_DRAG_PAGE
  };
}

function resetDragItems() {
  return {
    type: _constants.RESET_DRAG_ITEMS
  };
}

function setDragItem(item) {
  return {
    type: _constants.SET_DRAG_ITEM,
    item: item
  };
}

function setDragIndex(index) {
  return {
    type: _constants.SET_DRAG_INDEX,
    index: index
  };
}

function setRowAlert(data) {
  return {
    type: _constants.SET_ROW_ALERT,
    data: data
  };
}

function moveItem(prevIndex, newIndex, options) {
  return {
    type: _constants.DRAG_MOVE_ITEM,
    prevIndex: prevIndex,
    newIndex: newIndex,
    options: options
  };
}

function reorderItems(item, prevSortOrder, newSortOrder, goToPage) {
  // // reset drag
  // defaultDrag();
  return function (dispatch, getState) {
    if (goToPage) {
      // TODO FIGURE OUT IF THIS IS A RACE CONDITION
      dispatch((0, _actions.setCurrentPage)(goToPage));
    }

    var state = getState();
    var list = state.lists.currentList; // Send the item, previous sortOrder and the new sortOrder
    // we should get the proper list and new page results in return

    list.reorderItems(item, prevSortOrder, newSortOrder, {
      search: state.active.search,
      filters: state.active.filters,
      sort: state.active.sort,
      columns: state.active.columns,
      page: state.lists.page
    }, function (err, items) {
      // If err, flash the row alert
      if (err) {
        dispatch(resetItems(item.id)); // return this.resetItems(this.findItemById[item.id]);
      } else {
        dispatch((0, _actions.itemsLoaded)(items));
        dispatch(setRowAlert({
          success: item.id,
          fail: false
        }));
      }
    });
  };
}

function resetItems(itemId) {
  return function (dispatch, getState) {
    var state = getState();
    var _state$lists = state.lists,
        page = _state$lists.page,
        drag = _state$lists.drag;

    if (page.index !== drag.page) {
      // We are not on the original page so we need to move back to it
      dispatch((0, _actions.setCurrentPage)(drag.page));
      dispatch((0, _actions.loadItems)({
        fail: true,
        id: itemId
      })); // reset drag
      // return defaultDrag();
    } // Reset the list if dragout or error


    dispatch(setRowAlert({
      success: false,
      fail: itemId
    })); // we use the cached clone since this is the same page
    // the clone contains the proper index numbers which get overwritten on drag
    // _items.results = drag.clonedItems;
    // defaultDrag();
    // this.notifyChange();
  };
}

},{"../actions":105,"../constants":127}],105:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.selectList = selectList;
exports.loadInitialItems = loadInitialItems;
exports.setCurrentPage = setCurrentPage;
Object.defineProperty(exports, "setFilter", {
  enumerable: true,
  get: function get() {
    return _active.setFilter;
  }
});
Object.defineProperty(exports, "clearFilter", {
  enumerable: true,
  get: function get() {
    return _active.clearFilter;
  }
});
Object.defineProperty(exports, "clearAllFilters", {
  enumerable: true,
  get: function get() {
    return _active.clearAllFilters;
  }
});
Object.defineProperty(exports, "setActiveFilters", {
  enumerable: true,
  get: function get() {
    return _active.setActiveFilters;
  }
});
Object.defineProperty(exports, "setActiveSearch", {
  enumerable: true,
  get: function get() {
    return _active.setActiveSearch;
  }
});
Object.defineProperty(exports, "setActiveColumns", {
  enumerable: true,
  get: function get() {
    return _active.setActiveColumns;
  }
});
Object.defineProperty(exports, "clearCachedQuery", {
  enumerable: true,
  get: function get() {
    return _active.clearCachedQuery;
  }
});
Object.defineProperty(exports, "setActiveSort", {
  enumerable: true,
  get: function get() {
    return _active.setActiveSort;
  }
});
Object.defineProperty(exports, "loadItems", {
  enumerable: true,
  get: function get() {
    return _items.loadItems;
  }
});
Object.defineProperty(exports, "itemsLoaded", {
  enumerable: true,
  get: function get() {
    return _items.itemsLoaded;
  }
});
Object.defineProperty(exports, "itemLoadingError", {
  enumerable: true,
  get: function get() {
    return _items.itemLoadingError;
  }
});
Object.defineProperty(exports, "deleteItems", {
  enumerable: true,
  get: function get() {
    return _items.deleteItems;
  }
});
Object.defineProperty(exports, "downloadItems", {
  enumerable: true,
  get: function get() {
    return _items.downloadItems;
  }
});
Object.defineProperty(exports, "setDragBase", {
  enumerable: true,
  get: function get() {
    return _dragdrop.setDragBase;
  }
});
Object.defineProperty(exports, "resetItems", {
  enumerable: true,
  get: function get() {
    return _dragdrop.resetItems;
  }
});
Object.defineProperty(exports, "reorderItems", {
  enumerable: true,
  get: function get() {
    return _dragdrop.reorderItems;
  }
});
Object.defineProperty(exports, "setRowAlert", {
  enumerable: true,
  get: function get() {
    return _dragdrop.setRowAlert;
  }
});
Object.defineProperty(exports, "moveItem", {
  enumerable: true,
  get: function get() {
    return _dragdrop.moveItem;
  }
});

var _constants = require("../constants");

var _active = require("./active");

var _items = require("./items");

var _dragdrop = require("./dragdrop");

/**
 * Select a list, and set it as the active list. Called whenever the main
 * List component mounts or the list changes.
 *
 * @param  {String} id The list ID, passed via this.props.params.listId
 */
function selectList(id) {
  return function (dispatch, getState) {
    dispatch({
      type: _constants.SELECT_LIST,
      id: id
    });
    dispatch((0, _active.setActiveList)(getState().lists.data[id], id));
  };
}

function loadInitialItems() {
  return {
    type: _constants.INITIAL_LIST_LOAD
  };
}
/**
 * Set the current page
 *
 * @param {Number} index The page number we want to be on
 */


function setCurrentPage(index) {
  return {
    type: _constants.SET_CURRENT_PAGE,
    index: parseInt(index)
  };
} // Export all actions from here again for easier usability, that they're split up
// should be an implementation detail of List

},{"../constants":127,"./active":103,"./dragdrop":104,"./items":106}],106:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadItems = loadItems;
exports.downloadItems = downloadItems;
exports.itemsLoaded = itemsLoaded;
exports.itemLoadingError = itemLoadingError;
exports.deleteItems = deleteItems;

var _constants = require("../constants");

var _constants2 = require("../../../../constants");

function loadItems() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return function (dispatch, getState) {
    var currentLoadCounter = getState().lists.loadCounter + 1;
    dispatch({
      type: _constants.LOAD_ITEMS,
      loadCounter: currentLoadCounter
    }); // Take a snapshot of the current redux state.

    var state = getState(); // Hold a reference to the currentList in state.

    var currentList = state.lists.currentList;
    currentList.loadItems({
      search: state.active.search,
      filters: state.active.filters,
      sort: state.active.sort,
      columns: state.active.columns,
      page: state.lists.page
    }, function (err, items) {
      // Create a new state snapshot and compare the current active list id
      // to the id of the currentList referenced above.
      // If they are the same, then this is the latest fetch request, we may resolve this normally.
      // If these are not the same, then it means that this is not the latest fetch request.
      // BAIL OUT!
      if (getState().active.id !== currentList.id) return;
      if (getState().lists.loadCounter > currentLoadCounter) return;

      if (items) {
        // if (page.index !== drag.page && drag.item) {
        // 	// add the dragging item
        // 	if (page.index > drag.page) {
        // 		_items.results.unshift(drag.item);
        // 	} else {
        // 		_items.results.push(drag.item);
        // 	}
        // }
        // _itemsResultsClone = items.results.slice(0);
        //
        // TODO Reenable this
        // if (options.success && options.id) {
        // 	// flashes a success background on the row
        // 	_rowAlert.success = options.id;
        // }
        // if (options.fail && options.id) {
        // 	// flashes a failure background on the row
        // 	_rowAlert.fail = options.id;
        // }
        // Successfully resolve this request in redux and set the loadCounter back to zero.
        dispatch(itemsLoaded(items));
      } else {
        // Catch this error in redux and set the loadCounter back to zero.
        dispatch(itemLoadingError(err));
      }
    });
  };
}

function downloadItems(format, columns) {
  return function (dispatch, getState) {
    var state = getState();
    var active = state.active;
    var currentList = state.lists.currentList;
    var url = currentList.getDownloadURL({
      search: active.search,
      filters: active.filters,
      sort: active.sort,
      columns: columns ? currentList.expandColumns(columns) : active.columns,
      format: format
    });
    window.open(url);
  };
}

function itemsLoaded(items) {
  return {
    type: _constants.ITEMS_LOADED,
    items: items
  };
}
/**
 * Dispatched when unsuccessfully trying to load the items, will redispatch
 * loadItems after NETWORK_ERROR_RETRY_DELAY milliseconds until we get items back
 */


function itemLoadingError() {
  return function (dispatch) {
    dispatch({
      type: _constants.ITEM_LOADING_ERROR,
      err: 'Network request failed'
    });
    setTimeout(function () {
      dispatch(loadItems());
    }, _constants2.NETWORK_ERROR_RETRY_DELAY);
  };
}

function deleteItems(ids) {
  return function (dispatch, getState) {
    var list = getState().lists.currentList;
    list.deleteItems(ids, function (err, data) {
      // TODO ERROR HANDLING
      dispatch(loadItems());
    });
  };
}

},{"../../../../constants":148,"../constants":127}],107:[function(require,module,exports){
"use strict";

var _react = _interopRequireWildcard(require("react"));

var _FieldTypes = require("FieldTypes");

var _elemental = require("../../../../elemental");

var _Popout = _interopRequireDefault(require("../../../../shared/Popout"));

var _actions = require("../../actions");

var _getFilterLabel = _interopRequireDefault(require("./getFilterLabel"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Filter =
/*#__PURE__*/
function (_Component) {
  _inherits(Filter, _Component);

  function Filter() {
    var _this;

    _classCallCheck(this, Filter);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Filter).call(this));
    _this.open = _this.open.bind(_assertThisInitialized(_this));
    _this.close = _this.close.bind(_assertThisInitialized(_this));
    _this.updateValue = _this.updateValue.bind(_assertThisInitialized(_this));
    _this.updateFilter = _this.updateFilter.bind(_assertThisInitialized(_this));
    _this.removeFilter = _this.removeFilter.bind(_assertThisInitialized(_this));
    _this.state = {
      isOpen: false
    };
    return _this;
  }

  _createClass(Filter, [{
    key: "open",
    value: function open() {
      this.setState({
        isOpen: true,
        filterValue: this.props.filter.value
      });
    }
  }, {
    key: "close",
    value: function close() {
      this.setState({
        isOpen: false
      });
    }
  }, {
    key: "updateValue",
    value: function updateValue(filterValue) {
      this.setState({
        filterValue: filterValue
      });
    }
  }, {
    key: "updateFilter",
    value: function updateFilter(e) {
      var _this$props = this.props,
          dispatch = _this$props.dispatch,
          filter = _this$props.filter;
      dispatch((0, _actions.setFilter)(filter.field.path, this.state.filterValue));
      this.close();
      e.preventDefault();
    }
  }, {
    key: "removeFilter",
    value: function removeFilter() {
      this.props.dispatch((0, _actions.clearFilter)(this.props.filter.field.path));
    }
  }, {
    key: "render",
    value: function render() {
      var filter = this.props.filter;
      var filterId = "activeFilter__".concat(filter.field.path);
      var FilterComponent = _FieldTypes.Filters[filter.field.type];
      return _react["default"].createElement("span", null, _react["default"].createElement(_elemental.Chip, {
        label: (0, _getFilterLabel["default"])(filter.field, filter.value),
        onClick: this.open,
        onClear: this.removeFilter,
        color: "primary",
        id: filterId
      }), _react["default"].createElement(_Popout["default"], {
        isOpen: this.state.isOpen,
        onCancel: this.close,
        relativeToID: filterId
      }, _react["default"].createElement("form", {
        onSubmit: this.updateFilter
      }, _react["default"].createElement(_Popout["default"].Header, {
        title: "Edit Filter"
      }), _react["default"].createElement(_Popout["default"].Body, null, _react["default"].createElement(FilterComponent, {
        field: filter.field,
        filter: this.state.filterValue,
        onChange: this.updateValue
      })), _react["default"].createElement(_Popout["default"].Footer, {
        ref: "footer",
        primaryButtonIsSubmit: true,
        primaryButtonLabel: "Apply",
        secondaryButtonAction: this.close,
        secondaryButtonLabel: "Cancel"
      }))));
    }
  }]);

  return Filter;
}(_react.Component);

;
Filter.propTypes = {
  dispatch: _react.PropTypes.func.isRequired,
  filter: _react.PropTypes.shape({
    field: _react.PropTypes.object.isRequired,
    value: _react.PropTypes.object.isRequired
  }).isRequired
};
module.exports = Filter;

},{"../../../../elemental":73,"../../../../shared/Popout":145,"../../actions":105,"./getFilterLabel":111,"FieldTypes":undefined,"react":undefined}],108:[function(require,module,exports){
"use strict";

var _react = _interopRequireWildcard(require("react"));

var _elemental = require("../../../../elemental");

var _Filter = _interopRequireDefault(require("./Filter"));

var _actions = require("../../actions");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

var ListFilters = function ListFilters(_ref) {
  var dispatch = _ref.dispatch,
      filters = _ref.filters;
  if (!filters.length) return _react["default"].createElement("div", null);

  var dispatchClearAllFilters = function dispatchClearAllFilters() {
    dispatch((0, _actions.clearAllFilters)());
  }; // Generate the list of filter pills


  var currentFilters = filters.map(function (filter, i) {
    return _react["default"].createElement(_Filter["default"], {
      key: 'f' + i,
      filter: filter,
      dispatch: dispatch
    });
  }); // When more than 1, append the clear button

  if (currentFilters.length > 1) {
    currentFilters.push(_react["default"].createElement(_elemental.Chip, {
      key: "listFilters__clear",
      label: "Clear All",
      onClick: dispatchClearAllFilters
    }));
  }

  var styles = {
    marginBottom: '1em',
    marginTop: '1em'
  };
  return _react["default"].createElement("div", {
    style: styles
  }, currentFilters);
};

ListFilters.propTypes = {
  dispatch: _react.PropTypes.func.isRequired,
  filters: _react.PropTypes.array.isRequired
};
module.exports = ListFilters;

},{"../../../../elemental":73,"../../actions":105,"./Filter":107,"react":undefined}],109:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactDom = require("react-dom");

var _reactAddonsCssTransitionGroup = _interopRequireDefault(require("react-addons-css-transition-group"));

var _classnames = _interopRequireDefault(require("classnames"));

var _ListFiltersAddForm = _interopRequireDefault(require("./ListFiltersAddForm"));

var _Popout = _interopRequireDefault(require("../../../../shared/Popout"));

var _PopoutList = _interopRequireDefault(require("../../../../shared/Popout/PopoutList"));

var _elemental = require("../../../../elemental");

var _ListHeaderButton = _interopRequireDefault(require("../ListHeaderButton"));

var _actions = require("../../actions");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var ListFiltersAdd = _react["default"].createClass({
  displayName: 'ListFiltersAdd',
  propTypes: {
    maxHeight: _react["default"].PropTypes.number
  },
  getDefaultProps: function getDefaultProps() {
    return {
      maxHeight: 360
    };
  },
  getInitialState: function getInitialState() {
    return {
      innerHeight: 0,
      isOpen: false,
      searchString: '',
      selectedField: false
    };
  },
  updateSearch: function updateSearch(e) {
    this.setState({
      searchString: e.target.value
    });
  },
  openPopout: function openPopout() {
    this.setState({
      isOpen: true
    }, this.focusSearch);
  },
  closePopout: function closePopout() {
    this.setState({
      innerHeight: 0,
      isOpen: false,
      searchString: '',
      selectedField: false
    });
  },
  setPopoutHeight: function setPopoutHeight(height) {
    this.setState({
      innerHeight: Math.min(this.props.maxHeight, height)
    });
  },
  navigateBack: function navigateBack() {
    this.setState({
      selectedField: false,
      searchString: '',
      innerHeight: 0
    }, this.focusSearch);
  },
  focusSearch: function focusSearch() {
    (0, _reactDom.findDOMNode)(this.refs.search).focus();
  },
  selectField: function selectField(field) {
    this.setState({
      selectedField: field
    });
  },
  applyFilter: function applyFilter(value) {
    this.props.dispatch((0, _actions.setFilter)(this.state.selectedField.path, value));
    this.closePopout();
  },
  renderList: function renderList() {
    var _this = this;

    var activeFilterFields = this.props.activeFilters.map(function (obj) {
      return obj.field;
    });
    var activeFilterPaths = activeFilterFields.map(function (obj) {
      return obj.path;
    });
    var searchString = this.state.searchString;
    var filteredFilters = this.props.availableFilters;

    if (searchString) {
      filteredFilters = filteredFilters.filter(function (filter) {
        return filter.type !== 'heading';
      }).filter(function (filter) {
        return new RegExp(searchString).test(filter.field.label.toLowerCase());
      });
    }

    var popoutList = filteredFilters.map(function (el, i) {
      if (el.type === 'heading') {
        return _react["default"].createElement(_PopoutList["default"].Heading, {
          key: 'heading_' + i
        }, el.content);
      }

      var filterIsActive = activeFilterPaths.length && activeFilterPaths.indexOf(el.field.path) > -1;
      return _react["default"].createElement(_PopoutList["default"].Item, {
        key: 'item_' + el.field.path,
        icon: filterIsActive ? 'check' : 'chevron-right',
        iconHover: filterIsActive ? 'check' : 'chevron-right',
        isSelected: !!filterIsActive,
        label: el.field.label,
        onClick: function onClick() {
          _this.selectField(el.field);
        }
      });
    });
    var formFieldStyles = {
      borderBottom: '1px dashed rgba(0, 0, 0, 0.1)',
      marginBottom: '1em',
      paddingBottom: '1em'
    };
    return _react["default"].createElement(_Popout["default"].Pane, {
      onLayout: this.setPopoutHeight,
      key: "list"
    }, _react["default"].createElement(_Popout["default"].Body, null, _react["default"].createElement("div", {
      style: formFieldStyles
    }, _react["default"].createElement(_elemental.FormInput, {
      onChange: this.updateSearch,
      placeholder: "Find a filter...",
      ref: "search",
      value: this.state.searchString
    })), popoutList));
  },
  renderForm: function renderForm() {
    return _react["default"].createElement(_Popout["default"].Pane, {
      onLayout: this.setPopoutHeight,
      key: "form"
    }, _react["default"].createElement(_ListFiltersAddForm["default"], {
      activeFilters: this.props.activeFilters,
      field: this.state.selectedField,
      onApply: this.applyFilter,
      onCancel: this.closePopout,
      onBack: this.navigateBack,
      maxHeight: this.props.maxHeight,
      onHeightChange: this.setPopoutHeight,
      dispatch: this.props.dispatch
    }));
  },
  render: function render() {
    var _this$state = this.state,
        isOpen = _this$state.isOpen,
        selectedField = _this$state.selectedField;
    var popoutBodyStyle = this.state.innerHeight ? {
      height: this.state.innerHeight
    } : null;
    var popoutPanesClassname = (0, _classnames["default"])('Popout__panes', {
      'Popout__scrollable-area': !selectedField
    });
    return _react["default"].createElement("div", null, _react["default"].createElement(_ListHeaderButton["default"], {
      active: isOpen,
      glyph: "eye",
      id: "listHeaderFilterButton",
      label: "Filter",
      onClick: isOpen ? this.closePopout : this.openPopout
    }), _react["default"].createElement(_Popout["default"], {
      isOpen: isOpen,
      onCancel: this.closePopout,
      relativeToID: "listHeaderFilterButton"
    }, _react["default"].createElement(_Popout["default"].Header, {
      leftAction: selectedField ? this.navigateBack : null,
      leftIcon: selectedField ? 'chevron-left' : null,
      title: selectedField ? selectedField.label : 'Filter',
      transitionDirection: selectedField ? 'next' : 'prev'
    }), _react["default"].createElement(_reactAddonsCssTransitionGroup["default"], {
      className: popoutPanesClassname,
      component: "div",
      style: popoutBodyStyle,
      transitionName: selectedField ? 'Popout__pane-next' : 'Popout__pane-prev',
      transitionEnterTimeout: 360,
      transitionLeaveTimeout: 360
    }, selectedField ? this.renderForm() : this.renderList())));
  }
});

module.exports = ListFiltersAdd;

},{"../../../../elemental":73,"../../../../shared/Popout":145,"../../../../shared/Popout/PopoutList":141,"../../actions":105,"../ListHeaderButton":120,"./ListFiltersAddForm":110,"classnames":undefined,"react":undefined,"react-addons-css-transition-group":undefined,"react-dom":undefined}],110:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactDom = require("react-dom");

var _Popout = _interopRequireDefault(require("../../../../shared/Popout"));

var _FieldTypes = require("FieldTypes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var ListFiltersAddForm = _react["default"].createClass({
  displayName: "ListFiltersAddForm",
  propTypes: {
    field: _react["default"].PropTypes.object.isRequired,
    maxHeight: _react["default"].PropTypes.number,
    onApply: _react["default"].PropTypes.func,
    onCancel: _react["default"].PropTypes.func,
    onHeightChange: _react["default"].PropTypes.func
  },
  getInitialState: function getInitialState() {
    var _this = this;

    var filterComponent = _FieldTypes.Filters[this.props.field.type];
    var filterValue = this.props.activeFilters.filter(function (i) {
      return i.field.path === _this.props.field.path;
    })[0];

    if (filterValue) {
      filterValue = filterValue.value;
    } else {
      filterValue = filterComponent && filterComponent.getDefaultValue ? filterComponent.getDefaultValue() : {};
    }

    return {
      filterComponent: filterComponent,
      filterValue: filterValue
    };
  },
  updateHeight: function updateHeight(bodyHeight) {
    var _this2 = this;

    bodyHeight += 40; // TODO: remove magic number, currently accounts for padding

    var footerHeight = (0, _reactDom.findDOMNode)(this.refs.footer).offsetHeight;
    var maxBodyHeight = this.props.maxHeight - footerHeight;
    var newHeight = bodyHeight + footerHeight; // console.log(bodyHeight, maxBodyHeight, '|', newHeight, this.props.maxHeight);

    this.setState({
      bodyHeight: Math.min(bodyHeight, maxBodyHeight)
    }, function () {
      _this2.props.onHeightChange(Math.min(newHeight, _this2.props.maxHeight));
    });
  },
  updateValue: function updateValue(filterValue) {
    this.setState({
      filterValue: filterValue
    });
  },
  handleFormSubmit: function handleFormSubmit(e) {
    e.preventDefault();
    this.props.onApply(this.state.filterValue);
  },
  renderInvalidFilter: function renderInvalidFilter() {
    return _react["default"].createElement("div", null, "Error: type ", this.props.field.type, " has no filter UI.");
  },
  render: function render() {
    var FilterComponent = this.state.filterComponent;
    return _react["default"].createElement("form", {
      onSubmit: this.handleFormSubmit
    }, _react["default"].createElement(_Popout["default"].Body, {
      ref: "body",
      scrollable: true,
      style: {
        height: this.state.bodyHeight
      }
    }, FilterComponent ? _react["default"].createElement(FilterComponent, {
      field: this.props.field,
      filter: this.state.filterValue,
      onChange: this.updateValue,
      onHeightChange: this.updateHeight
    }) : this.renderInvalidFilter()), _react["default"].createElement(_Popout["default"].Footer, {
      ref: "footer",
      primaryButtonIsSubmit: true,
      primaryButtonLabel: "Apply",
      secondaryButtonAction: this.props.onCancel,
      secondaryButtonLabel: "Cancel"
    }));
  }
});

module.exports = ListFiltersAddForm;

},{"../../../../shared/Popout":145,"FieldTypes":undefined,"react":undefined,"react-dom":undefined}],111:[function(require,module,exports){
"use strict";

var _moment = _interopRequireDefault(require("moment"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var DATE_FORMAT = 'MMM D YYYY';
var DATETIME_FORMAT = 'MMM D YYYY h:mm:ss';

function getFilterLabel(field, value) {
  var label = field.label;

  switch (field.type) {
    // BOOLEAN
    case 'boolean':
      {
        return value.value ? label : "NOT ".concat(label);
      }
    // DATE

    case 'date':
      {
        return "".concat(label, " ").concat(resolveDateFormat(value, DATE_FORMAT));
      }
    // DATE ARRAY

    case 'datearray':
      {
        var presence = value.presence === 'some' ? 'Some' : 'No';
        return "".concat(presence, " ").concat(label, " ").concat(resolveDateFormat(value, DATETIME_FORMAT, 'are'));
      }
    // DATETIME

    case 'datetime':
      {
        return "".concat(label, " ").concat(resolveDateFormat(value, DATETIME_FORMAT));
      }
    // GEOPOINT
    // TODO distance needs a qualifier, currently defaults to "km"?

    case 'geopoint':
      {
        var mode = value.distance.mode === 'max' ? 'is within' : 'is at least';
        var distance = "".concat(value.distance.value, "km");
        var conjunction = value.distance.mode === 'max' ? 'of' : 'from';
        var latlong = "".concat(value.lat, ", ").concat(value.lon);
        return "".concat(label, " ").concat(mode, " ").concat(distance, " ").concat(conjunction, " ").concat(latlong);
      }
    // LOCATION

    case 'location':
      {
        var joiner = value.inverted ? 'does NOT match' : 'matches'; // Remove undefined values before rendering the template literal

        var formattedValue = [value.street, value.city, value.state, value.code, value.country].join(' ').trim();
        return "".concat(label, " ").concat(joiner, " \"").concat(formattedValue, "\"");
      }
    // NUMBER & MONEY

    case 'number':
    case 'money':
      {
        return "".concat(label, " ").concat(resolveNumberFormat(value));
      }
    // NUMBER ARRAY

    case 'numberarray':
      {
        var _presence = value.presence === 'some' ? 'Some' : 'No';

        return "".concat(_presence, " ").concat(label, " ").concat(resolveNumberFormat(value, 'are'));
      }
    // PASSWORD

    case 'password':
      {
        return value.exists ? "".concat(label, " is set") : "".concat(label, " is NOT set");
      }
    // RELATIONSHIP
    // TODO populate relationship, currently rendering an ID

    case 'relationship':
      {
        var _joiner = value.inverted ? 'is NOT' : 'is';

        var _formattedValue = value.value.length > 1 ? value.value.join(', or ') : value.value[0];

        return "".concat(label, " ").concat(_joiner, " ").concat(_formattedValue);
      }
    // SELECT

    case 'select':
      {
        var _joiner2 = value.inverted ? 'is NOT' : 'is';

        var _formattedValue2 = value.value.length > 1 ? value.value.join(', or ') : value.value[0];

        return "".concat(label, " ").concat(_joiner2, " ").concat(_formattedValue2);
      }
    // TEXT-LIKE

    case 'code':
    case 'color':
    case 'email':
    case 'html':
    case 'key':
    case 'markdown':
    case 'name':
    case 'text':
    case 'textarea':
    case 'url':
      {
        var _mode = '';

        if (value.mode === 'beginsWith') {
          _mode = value.inverted ? 'does NOT begin with' : 'begins with';
        } else if (value.mode === 'endsWith') {
          _mode = value.inverted ? 'does NOT end with' : 'ends with';
        } else if (value.mode === 'exactly') {
          _mode = value.inverted ? 'is NOT exactly' : 'is exactly';
        } else if (value.mode === 'contains') {
          _mode = value.inverted ? 'does NOT contain' : 'contains';
        }

        return "".concat(label, " ").concat(_mode, " \"").concat(value.value, "\"");
      }
    // TEXTARRAY

    case 'textarray':
      {
        var _presence2 = value.presence === 'some' ? 'Some' : 'No';

        var _mode2 = '';

        if (value.mode === 'beginsWith') {
          _mode2 = value.inverted ? 'do NOT begin with' : 'begin with';
        } else if (value.mode === 'endsWith') {
          _mode2 = value.inverted ? 'do NOT end with' : 'end with';
        } else if (value.mode === 'exactly') {
          _mode2 = value.inverted ? 'are NOT exactly' : 'are exactly';
        } else if (value.mode === 'contains') {
          _mode2 = value.inverted ? 'do NOT contain' : 'contain';
        }

        return "".concat(_presence2, " ").concat(label, " ").concat(_mode2, " \"").concat(value.value, "\"");
      }
    // CATCHALL

    default:
      {
        return "".concat(label, " \"").concat(value.value, "\"");
      }
  }
}

;

function resolveNumberFormat(value) {
  var conjunction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'is';
  var mode = '';
  if (value.mode === 'equals') mode = conjunction;else if (value.mode === 'gt') mode = "".concat(conjunction, " greater than");else if (value.mode === 'lt') mode = "".concat(conjunction, " less than");
  var formattedValue = value.mode === 'between' ? "is between ".concat(value.value.min, " and ").concat(value.value.max) : value.value;
  return "".concat(mode, " ").concat(formattedValue);
}

function resolveDateFormat(value, format) {
  var conjunction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'is';
  var joiner = value.inverted ? "".concat(conjunction, " NOT") : conjunction;
  var mode = value.mode === 'on' ? '' : value.mode;
  var formattedValue = value.mode === 'between' ? "".concat((0, _moment["default"])(value.after).format(format), " and ").concat((0, _moment["default"])(value.before).format(format)) : (0, _moment["default"])(value.value).format(format);
  return "".concat(joiner, " ").concat(mode, " ").concat(formattedValue);
}

module.exports = getFilterLabel;

},{"moment":undefined}],112:[function(require,module,exports){
"use strict";

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _ItemsTableRow = _interopRequireDefault(require("./ItemsTableRow"));

var _ItemsTableDragDrop = _interopRequireDefault(require("./ItemsTableDragDrop"));

var _constants = require("../../../../../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var ItemsTable = _react["default"].createClass({
  displayName: "ItemsTable",
  propTypes: {
    checkedItems: _react.PropTypes.object.isRequired,
    columns: _react.PropTypes.array.isRequired,
    deleteTableItem: _react.PropTypes.func.isRequired,
    handleSortSelect: _react.PropTypes.func.isRequired,
    items: _react.PropTypes.object.isRequired,
    list: _react.PropTypes.object.isRequired,
    manageMode: _react.PropTypes.bool.isRequired,
    rowAlert: _react.PropTypes.object.isRequired
  },
  renderCols: function renderCols() {
    var cols = this.props.columns.map(function (col) {
      return _react["default"].createElement("col", {
        key: col.path,
        width: col.width
      });
    }); // add delete col when available

    if (!this.props.list.nodelete) {
      cols.unshift(_react["default"].createElement("col", {
        width: _constants.TABLE_CONTROL_COLUMN_WIDTH,
        key: "delete"
      }));
    } // add sort col when available


    if (this.props.list.sortable) {
      cols.unshift(_react["default"].createElement("col", {
        width: _constants.TABLE_CONTROL_COLUMN_WIDTH,
        key: "sortable"
      }));
    }

    return _react["default"].createElement("colgroup", null, cols);
  },
  renderHeaders: function renderHeaders() {
    var _this = this;

    var listControlCount = 0;
    if (this.props.list.sortable) listControlCount++;
    if (!this.props.list.nodelete) listControlCount++; // set active sort

    var activeSortPath = this.props.activeSort.paths[0]; // pad first col when controls are available

    var cellPad = listControlCount ? _react["default"].createElement("th", {
      colSpan: listControlCount
    }) : null; // map each heading column

    var cellMap = this.props.columns.map(function (col) {
      var isSelected = activeSortPath && activeSortPath.path === col.path;
      var isInverted = isSelected && activeSortPath.invert;
      var buttonTitle = "Sort by ".concat(col.label).concat(isSelected && !isInverted ? ' (desc)' : '');
      var colClassName = (0, _classnames["default"])('ItemList__sort-button th-sort', {
        'th-sort--asc': isSelected && !isInverted,
        'th-sort--desc': isInverted
      });
      return _react["default"].createElement("th", {
        key: col.path,
        colSpan: "1"
      }, _react["default"].createElement("button", {
        className: colClassName,
        onClick: function onClick() {
          _this.props.handleSortSelect(col.path, isSelected && !isInverted);
        },
        title: buttonTitle
      }, col.label, _react["default"].createElement("span", {
        className: "th-sort__icon"
      })));
    });
    return _react["default"].createElement("thead", null, _react["default"].createElement("tr", null, cellPad, cellMap));
  },
  render: function render() {
    var _this2 = this;

    var items = this.props.items;
    if (!items.results.length) return null;
    var tableBody = this.props.list.sortable ? _react["default"].createElement(_ItemsTableDragDrop["default"], this.props) : _react["default"].createElement("tbody", null, items.results.map(function (item, i) {
      return _react["default"].createElement(_ItemsTableRow["default"], _extends({
        key: item.id,
        deleteTableItem: _this2.props.deleteTableItem,
        index: i,
        sortOrder: item.sortOrder || 0,
        id: item.id,
        item: item
      }, _this2.props));
    }));
    return _react["default"].createElement("div", {
      className: "ItemList-wrapper"
    }, _react["default"].createElement("table", {
      cellPadding: "0",
      cellSpacing: "0",
      className: "Table ItemList"
    }, this.renderCols(), this.renderHeaders(), tableBody));
  }
});

module.exports = exports = ItemsTable;

},{"../../../../../constants":148,"./ItemsTableDragDrop":113,"./ItemsTableRow":116,"classnames":undefined,"react":undefined}],113:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactDnd = require("react-dnd");

var _reactDndHtml5Backend = _interopRequireDefault(require("react-dnd-html5-backend"));

var _ItemsTableRow = require("./ItemsTableRow");

var _ItemsTableDragDropZone = _interopRequireDefault(require("./ItemsTableDragDropZone"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var ItemsTableDragDrop = _react["default"].createClass({
  displayName: 'ItemsTableDragDrop',
  propTypes: {
    columns: _react["default"].PropTypes.array,
    id: _react["default"].PropTypes.any,
    index: _react["default"].PropTypes.number,
    items: _react["default"].PropTypes.object,
    list: _react["default"].PropTypes.object
  },
  render: function render() {
    var _this = this;

    return _react["default"].createElement("tbody", null, this.props.items.results.map(function (item, i) {
      return _react["default"].createElement(_ItemsTableRow.Sortable, _extends({
        key: item.id,
        index: i,
        sortOrder: item.sortOrder || 0,
        id: item.id,
        item: item
      }, _this.props));
    }), _react["default"].createElement(_ItemsTableDragDropZone["default"], this.props));
  }
});

module.exports = (0, _reactDnd.DragDropContext)(_reactDndHtml5Backend["default"])(ItemsTableDragDrop);

},{"./ItemsTableDragDropZone":114,"./ItemsTableRow":116,"react":undefined,"react-dnd":undefined,"react-dnd-html5-backend":undefined}],114:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _ItemsTableDragDropZoneTarget = _interopRequireDefault(require("./ItemsTableDragDropZoneTarget"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * THIS IS ORPHANED AND ISN'T RENDERED AT THE MOMENT
 * THIS WAS DONE TO FINISH THE REDUX INTEGRATION, WILL REWRITE SOON
 * - @mxstbr
 */
var ItemsTableDragDropZone = _react["default"].createClass({
  displayName: 'ItemsTableDragDropZone',
  propTypes: {
    columns: _react["default"].PropTypes.array,
    connectDropTarget: _react["default"].PropTypes.func,
    items: _react["default"].PropTypes.object,
    list: _react["default"].PropTypes.object
  },
  renderPageDrops: function renderPageDrops() {
    var _this$props = this.props,
        items = _this$props.items,
        currentPage = _this$props.currentPage,
        pageSize = _this$props.pageSize;
    var totalPages = Math.ceil(items.count / pageSize);
    var style = {
      display: totalPages > 1 ? null : 'none'
    };
    var pages = [];

    for (var i = 0; i < totalPages; i++) {
      var page = i + 1;
      var pageItems = '' + (page * pageSize - (pageSize - 1)) + ' - ' + page * pageSize;
      var current = page === currentPage;
      var className = (0, _classnames["default"])('ItemList__dropzone--page', {
        'is-active': current
      });
      pages.push(_react["default"].createElement(_ItemsTableDragDropZoneTarget["default"], {
        key: 'page_' + page,
        page: page,
        className: className,
        pageItems: pageItems,
        pageSize: pageSize,
        currentPage: currentPage,
        drag: this.props.drag,
        dispatch: this.props.dispatch
      }));
    }

    var cols = this.props.columns.length;
    if (this.props.list.sortable) cols++;
    if (!this.props.list.nodelete) cols++;
    return _react["default"].createElement("tr", {
      style: style
    }, _react["default"].createElement("td", {
      colSpan: cols
    }, _react["default"].createElement("div", {
      className: "ItemList__dropzone"
    }, pages, _react["default"].createElement("div", {
      className: "clearfix"
    }))));
  },
  render: function render() {
    return this.renderPageDrops();
  }
});

module.exports = ItemsTableDragDropZone;

},{"./ItemsTableDragDropZoneTarget":115,"classnames":undefined,"react":undefined}],115:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactDnd = require("react-dnd");

var _actions = require("../../actions");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * THIS IS ORPHANED AND ISN'T RENDERED AT THE MOMENT
 * THIS WAS DONE TO FINISH THE REDUX INTEGRATION, WILL REWRITE SOON
 * - @mxstbr
 */
var timeoutID = false; // drop target

var ItemsTableDragDropZoneTarget = _react["default"].createClass({
  displayName: 'ItemsTableDragDropZoneTarget',
  propTypes: {
    className: _react["default"].PropTypes.string,
    connectDropTarget: _react["default"].PropTypes.func,
    isOver: _react["default"].PropTypes.bool,
    pageItems: _react["default"].PropTypes.string
  },
  componentDidUpdate: function componentDidUpdate() {
    if (timeoutID && !this.props.isOver) {
      clearTimeout(timeoutID);
      timeoutID = false;
    }
  },
  render: function render() {
    var _this$props = this.props,
        pageItems = _this$props.pageItems,
        page = _this$props.page,
        isOver = _this$props.isOver,
        dispatch = _this$props.dispatch;
    var className = this.props.className;

    if (isOver) {
      className += page === this.props.currentPage ? ' is-available ' : ' is-waiting ';
    }

    return this.props.connectDropTarget(_react["default"].createElement("div", {
      className: className,
      onClick: function onClick(e) {
        dispatch((0, _actions.setCurrentPage)(page));
      }
    }, pageItems));
  }
});
/**
 * Implements drag target.
 */


var dropTarget = {
  drop: function drop(props, monitor, component) {
    // we send manual data to endDrag to send this item to the correct page
    var page = props.drag.page;
    var targetPage = props.page;
    var pageSize = props.pageSize;
    var item = monitor.getItem();
    item.goToPage = props.page;
    item.prevSortOrder = item.sortOrder; // Work out the new sort order. If the new page is greater, we'll put it at the start of the page, and
    // if it's smaller we'll put it at the end of the page.

    item.newSortOrder = targetPage < page ? targetPage * pageSize : targetPage * pageSize - (pageSize - 1);
    return item;
  }
};
/**
 * Specifies the props to inject into your component.
 */

function dropProps(connect, monitor) {
  return {
    connectDropTarget: connect.dropTarget(),
    isOver: monitor.isOver()
  };
}

;
module.exports = (0, _reactDnd.DropTarget)('item', dropTarget, dropProps)(ItemsTableDragDropZoneTarget);

},{"../../actions":105,"react":undefined,"react-dnd":undefined}],116:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _ListControl = _interopRequireDefault(require("../ListControl"));

var _FieldTypes = require("FieldTypes");

var _reactDnd = require("react-dnd");

var _actions = require("../../actions");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ItemsRow = _react["default"].createClass({
  displayName: "ItemsRow",
  propTypes: {
    columns: _react["default"].PropTypes.array,
    id: _react["default"].PropTypes.any,
    index: _react["default"].PropTypes.number,
    items: _react["default"].PropTypes.object,
    list: _react["default"].PropTypes.object,
    // Injected by React DnD:
    isDragging: _react["default"].PropTypes.bool,
    // eslint-disable-line react/sort-prop-types
    connectDragSource: _react["default"].PropTypes.func,
    // eslint-disable-line react/sort-prop-types
    connectDropTarget: _react["default"].PropTypes.func,
    // eslint-disable-line react/sort-prop-types
    connectDragPreview: _react["default"].PropTypes.func // eslint-disable-line react/sort-prop-types

  },
  renderRow: function renderRow(item) {
    var _this = this;

    var itemId = item.id;
    var rowClassname = (0, _classnames["default"])({
      'ItemList__row--dragging': this.props.isDragging,
      'ItemList__row--selected': this.props.checkedItems[itemId],
      'ItemList__row--manage': this.props.manageMode,
      'ItemList__row--success': this.props.rowAlert.success === itemId,
      'ItemList__row--failure': this.props.rowAlert.fail === itemId
    }); // item fields

    var cells = this.props.columns.map(function (col, i) {
      var ColumnType = _FieldTypes.Columns[col.type] || _FieldTypes.Columns.__unrecognised__;
      var linkTo = !i ? "".concat(Keystone.adminPath, "/").concat(_this.props.list.path, "/").concat(itemId) : undefined;
      return _react["default"].createElement(ColumnType, {
        key: col.path,
        list: _this.props.list,
        col: col,
        data: item,
        linkTo: linkTo
      });
    }); // add sortable icon when applicable

    if (this.props.list.sortable) {
      cells.unshift(_react["default"].createElement(_ListControl["default"], {
        key: "_sort",
        type: "sortable",
        dragSource: this.props.connectDragSource
      }));
    } // add delete/check icon when applicable


    if (!this.props.list.nodelete) {
      cells.unshift(this.props.manageMode ? _react["default"].createElement(_ListControl["default"], {
        key: "_check",
        type: "check",
        active: this.props.checkedItems[itemId]
      }) : _react["default"].createElement(_ListControl["default"], {
        key: "_delete",
        onClick: function onClick(e) {
          return _this.props.deleteTableItem(item, e);
        },
        type: "delete"
      }));
    }

    var addRow = _react["default"].createElement("tr", {
      key: 'i' + item.id,
      onClick: this.props.manageMode ? function (e) {
        return _this.props.checkTableItem(item, e);
      } : null,
      className: rowClassname
    }, cells);

    if (this.props.list.sortable) {
      return (// we could add a preview container/image
        // this.props.connectDragPreview(this.props.connectDropTarget(addRow))
        this.props.connectDropTarget(addRow)
      );
    } else {
      return addRow;
    }
  },
  render: function render() {
    return this.renderRow(this.props.item);
  }
});

module.exports = exports = ItemsRow; // Expose Sortable

/**
 * Implements drag source.
 */

var dragItem = {
  beginDrag: function beginDrag(props) {
    var send = _objectSpread({}, props);

    props.dispatch((0, _actions.setDragBase)(props.item, props.index));
    return _objectSpread({}, send);
  },
  endDrag: function endDrag(props, monitor, component) {
    if (!monitor.didDrop()) {
      props.dispatch((0, _actions.resetItems)(props.id));
      return;
    }

    var page = props.currentPage;
    var pageSize = props.pageSize; // If we were dropped onto a page change target, then droppedOn.prevSortOrder etc will be
    // set by that target, and we should use those values. If we were just dropped onto a new row
    // then we need to calculate these values ourselves.

    var droppedOn = monitor.getDropResult();
    var prevSortOrder = droppedOn.prevSortOrder || props.sortOrder; // To explain the following line, suppose we are on page 3 and there are 10 items per page.
    // Previous to this page, there are (3 - 1)*10 = 20 items before us. If we have index 6
    // on this page, then we're the 7th item to display (index starts from 0), and so we
    // want to update the display order to 20 + 7 = 27.

    var newSortOrder = droppedOn.newSortOrder || (page - 1) * pageSize + droppedOn.index + 1; // If we were dropped on a page change target, then droppedOn.gotToPage will be set, and we should
    // pass this to reorderItems, which will then change the page for the user.

    props.dispatch((0, _actions.reorderItems)(props.item, prevSortOrder, newSortOrder, Number(droppedOn.goToPage)));
  }
};
/**
 * Implements drag target.
 */

var dropItem = {
  drop: function drop(props, monitor, component) {
    return _objectSpread({}, props);
  },
  hover: function hover(props, monitor, component) {
    // reset row alerts
    if (props.rowAlert.success || props.rowAlert.fail) {
      props.dispatch((0, _actions.setRowAlert)({
        reset: true
      }));
    }

    var dragged = monitor.getItem().index;
    var over = props.index; // self

    if (dragged === over) {
      return;
    }

    props.dispatch((0, _actions.moveItem)(dragged, over, props));
    monitor.getItem().index = over;
  }
};
/**
 * Specifies the props to inject into your component.
 */

function dragProps(connect, monitor) {
  return {
    connectDragSource: connect.dragSource(),
    isDragging: monitor.isDragging(),
    connectDragPreview: connect.dragPreview()
  };
}

function dropProps(connect) {
  return {
    connectDropTarget: connect.dropTarget()
  };
}

;
exports.Sortable = (0, _reactDnd.DragSource)('item', dragItem, dragProps)((0, _reactDnd.DropTarget)('item', dropItem, dropProps)(ItemsRow));

},{"../../actions":105,"../ListControl":118,"FieldTypes":undefined,"classnames":undefined,"react":undefined,"react-dnd":undefined}],117:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _objectAssign = _interopRequireDefault(require("object-assign"));

var _Popout = _interopRequireDefault(require("../../../shared/Popout"));

var _PopoutList = _interopRequireDefault(require("../../../shared/Popout/PopoutList"));

var _elemental = require("../../../elemental");

var _ListHeaderButton = _interopRequireDefault(require("./ListHeaderButton"));

var _actions = require("../actions");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var ListColumnsForm = _react["default"].createClass({
  displayName: 'ListColumnsForm',
  getInitialState: function getInitialState() {
    return {
      selectedColumns: {},
      searchString: ''
    };
  },
  getSelectedColumnsFromStore: function getSelectedColumnsFromStore() {
    var selectedColumns = {};
    this.props.activeColumns.forEach(function (col) {
      selectedColumns[col.path] = true;
    });
    return selectedColumns;
  },
  togglePopout: function togglePopout(visible) {
    this.setState({
      selectedColumns: this.getSelectedColumnsFromStore(),
      isOpen: visible,
      searchString: ''
    });
  },
  toggleColumn: function toggleColumn(path, value) {
    var newColumns = (0, _objectAssign["default"])({}, this.state.selectedColumns);

    if (value) {
      newColumns[path] = value;
    } else {
      delete newColumns[path];
    }

    this.setState({
      selectedColumns: newColumns
    });
  },
  applyColumns: function applyColumns() {
    this.props.dispatch((0, _actions.setActiveColumns)(Object.keys(this.state.selectedColumns)));
    this.togglePopout(false);
  },
  updateSearch: function updateSearch(e) {
    this.setState({
      searchString: e.target.value
    });
  },
  renderColumns: function renderColumns() {
    var _this = this;

    var availableColumns = this.props.availableColumns;
    var searchString = this.state.searchString;
    var filteredColumns = availableColumns;

    if (searchString) {
      filteredColumns = filteredColumns.filter(function (column) {
        return column.type !== 'heading';
      }).filter(function (column) {
        return new RegExp(searchString).test(column.field.label.toLowerCase());
      });
    }

    return filteredColumns.map(function (el, i) {
      if (el.type === 'heading') {
        return _react["default"].createElement(_PopoutList["default"].Heading, {
          key: 'heading_' + i
        }, el.content);
      }

      var path = el.field.path;
      var selected = _this.state.selectedColumns[path];
      return _react["default"].createElement(_PopoutList["default"].Item, {
        key: 'column_' + el.field.path,
        icon: selected ? 'check' : 'dash',
        iconHover: selected ? 'dash' : 'check',
        isSelected: !!selected,
        label: el.field.label,
        onClick: function onClick() {
          _this.toggleColumn(path, !selected);
        }
      });
    });
  },
  render: function render() {
    var _this2 = this;

    var formFieldStyles = {
      borderBottom: '1px dashed rgba(0,0,0,0.1)',
      marginBottom: '1em',
      paddingBottom: '1em'
    };
    return _react["default"].createElement("div", null, _react["default"].createElement(_ListHeaderButton["default"], {
      active: this.state.isOpen,
      id: "listHeaderColumnButton",
      glyph: "list-unordered",
      label: "Columns",
      onClick: function onClick() {
        return _this2.togglePopout(!_this2.state.isOpen);
      }
    }), _react["default"].createElement(_Popout["default"], {
      isOpen: this.state.isOpen,
      onCancel: function onCancel() {
        return _this2.togglePopout(false);
      },
      relativeToID: "listHeaderColumnButton"
    }, _react["default"].createElement(_Popout["default"].Header, {
      title: "Columns"
    }), _react["default"].createElement(_Popout["default"].Body, {
      scrollable: true
    }, _react["default"].createElement("div", {
      style: formFieldStyles
    }, _react["default"].createElement(_elemental.FormInput, {
      autoFocus: true,
      onChange: this.updateSearch,
      placeholder: "Find a column...",
      value: this.state.searchString
    })), _react["default"].createElement(_PopoutList["default"], null, this.renderColumns())), _react["default"].createElement(_Popout["default"].Footer, {
      primaryButtonAction: this.applyColumns,
      primaryButtonLabel: "Apply",
      secondaryButtonAction: function secondaryButtonAction() {
        return _this2.togglePopout(false);
      },
      secondaryButtonLabel: "Cancel"
    })));
  }
});

module.exports = ListColumnsForm;

},{"../../../elemental":73,"../../../shared/Popout":145,"../../../shared/Popout/PopoutList":141,"../actions":105,"./ListHeaderButton":120,"object-assign":555,"react":undefined}],118:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var ListControl = _react["default"].createClass({
  displayName: "ListControl",
  propTypes: {
    dragSource: _react["default"].PropTypes.func,
    onClick: _react["default"].PropTypes.func,
    type: _react["default"].PropTypes.oneOf(['check', 'delete', 'sortable']).isRequired
  },
  renderControl: function renderControl() {
    var icon = 'octicon octicon-';
    var className = (0, _classnames["default"])('ItemList__control ItemList__control--' + this.props.type, {
      'is-active': this.props.active
    });
    var tabindex = this.props.type === 'sortable' ? -1 : null;

    if (this.props.type === 'check') {
      icon += 'check';
    }

    if (this.props.type === 'delete') {
      icon += 'trashcan';
    }

    if (this.props.type === 'sortable') {
      icon += 'three-bars';
    }

    var renderButton = _react["default"].createElement("button", {
      type: "button",
      onClick: this.props.onClick,
      className: className,
      tabIndex: tabindex
    }, _react["default"].createElement("span", {
      className: icon
    }));

    if (this.props.dragSource) {
      return this.props.dragSource(renderButton);
    } else {
      return renderButton;
    }
  },
  render: function render() {
    var className = 'ItemList__col--control ItemList__col--' + this.props.type;
    return _react["default"].createElement("td", {
      className: className
    }, this.renderControl());
  }
});

module.exports = ListControl;

},{"classnames":undefined,"react":undefined}],119:[function(require,module,exports){
"use strict";

var _react = _interopRequireWildcard(require("react"));

var _objectAssign = _interopRequireDefault(require("object-assign"));

var _Popout = _interopRequireDefault(require("../../../shared/Popout"));

var _PopoutList = _interopRequireDefault(require("../../../shared/Popout/PopoutList"));

var _ListHeaderButton = _interopRequireDefault(require("./ListHeaderButton"));

var _elemental = require("../../../elemental");

var _actions = require("../actions");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

var FORMAT_OPTIONS = [{
  label: 'CSV',
  value: 'csv'
}, {
  label: 'JSON',
  value: 'json'
}];

var ListDownloadForm = _react["default"].createClass({
  displayName: "ListDownloadForm",
  propTypes: {
    activeColumns: _react.PropTypes.array,
    dispatch: _react.PropTypes.func.isRequired,
    list: _react.PropTypes.object
  },
  getInitialState: function getInitialState() {
    return {
      format: FORMAT_OPTIONS[0].value,
      isOpen: false,
      useCurrentColumns: true,
      selectedColumns: this.getDefaultSelectedColumns()
    };
  },
  getDefaultSelectedColumns: function getDefaultSelectedColumns() {
    var selectedColumns = {};
    this.props.activeColumns.forEach(function (col) {
      selectedColumns[col.path] = true;
    });
    return selectedColumns;
  },
  getListUIElements: function getListUIElements() {
    var _this = this;

    return this.props.list.uiElements.map(function (el) {
      return el.type === 'field' ? {
        type: 'field',
        field: _this.props.list.fields[el.field]
      } : el;
    });
  },
  allColumnsSelected: function allColumnsSelected() {
    var selectedColumns = Object.keys(this.state.selectedColumns).length;
    var columnAmount = this.getListUIElements().filter(function (el) {
      return el.type !== 'heading';
    }).length;
    return selectedColumns === columnAmount;
  },
  togglePopout: function togglePopout(visible) {
    this.setState({
      isOpen: visible
    });
  },
  toggleColumn: function toggleColumn(column, value) {
    var newColumns = (0, _objectAssign["default"])({}, this.state.selectedColumns);

    if (value) {
      newColumns[column] = value;
    } else {
      delete newColumns[column];
    }

    this.setState({
      selectedColumns: newColumns
    });
  },
  changeFormat: function changeFormat(value) {
    this.setState({
      format: value
    });
  },
  toggleCurrentlySelectedColumns: function toggleCurrentlySelectedColumns(e) {
    var newState = {
      useCurrentColumns: e.target.checked,
      selectedColumns: this.getDefaultSelectedColumns()
    };
    this.setState(newState);
  },
  clickSelectAll: function clickSelectAll() {
    if (this.allColumnsSelected()) {
      this.selectNoColumns();
    } else {
      this.selectAllColumns();
    }
  },
  selectAllColumns: function selectAllColumns() {
    var newColumns = {};
    this.getListUIElements().map(function (el) {
      if (el.type !== 'heading') {
        newColumns[el.field.path] = true;
      }
    });
    this.setState({
      selectedColumns: newColumns
    });
  },
  selectNoColumns: function selectNoColumns() {
    this.setState({
      selectedColumns: {}
    });
  },
  handleDownloadRequest: function handleDownloadRequest() {
    this.props.dispatch((0, _actions.downloadItems)(this.state.format, Object.keys(this.state.selectedColumns)));
    this.togglePopout(false);
  },
  renderColumnSelect: function renderColumnSelect() {
    var _this2 = this;

    if (this.state.useCurrentColumns) return null;
    var possibleColumns = this.getListUIElements().map(function (el, i) {
      if (el.type === 'heading') {
        return _react["default"].createElement(_PopoutList["default"].Heading, {
          key: 'heading_' + i
        }, el.content);
      }

      var columnKey = el.field.path;
      var columnValue = _this2.state.selectedColumns[columnKey];
      return _react["default"].createElement(_PopoutList["default"].Item, {
        key: 'item_' + el.field.path,
        icon: columnValue ? 'check' : 'dash',
        iconHover: columnValue ? 'dash' : 'check',
        isSelected: columnValue,
        label: el.field.label,
        onClick: function onClick() {
          return _this2.toggleColumn(columnKey, !columnValue);
        }
      });
    });
    var allColumnsSelected = this.allColumnsSelected();
    var checkboxLabel = allColumnsSelected ? 'Select None' : 'Select All';
    return _react["default"].createElement("div", null, _react["default"].createElement(_elemental.FormField, {
      offsetAbsentLabel: true
    }, _react["default"].createElement(_elemental.LabelledControl, {
      checked: allColumnsSelected,
      label: checkboxLabel,
      onChange: this.clickSelectAll,
      type: "checkbox",
      value: true
    })), _react["default"].createElement("div", {
      style: {
        borderTop: '1px dashed rgba(0,0,0,0.1)',
        marginTop: '1em',
        paddingTop: '1em'
      }
    }, possibleColumns));
  },
  render: function render() {
    var _this3 = this;

    var useCurrentColumns = this.state.useCurrentColumns;
    return _react["default"].createElement("div", null, _react["default"].createElement(_ListHeaderButton["default"], {
      active: this.state.isOpen,
      id: "listHeaderDownloadButton",
      glyph: "cloud-download",
      label: "Download",
      onClick: function onClick() {
        return _this3.togglePopout(!_this3.state.isOpen);
      }
    }), _react["default"].createElement(_Popout["default"], {
      isOpen: this.state.isOpen,
      onCancel: function onCancel() {
        return _this3.togglePopout(false);
      },
      relativeToID: "listHeaderDownloadButton"
    }, _react["default"].createElement(_Popout["default"].Header, {
      title: "Download"
    }), _react["default"].createElement(_Popout["default"].Body, {
      scrollable: true
    }, _react["default"].createElement(_elemental.Form, {
      layout: "horizontal",
      labelWidth: 100,
      component: "div"
    }, _react["default"].createElement(_elemental.FormField, {
      label: "File format:"
    }, _react["default"].createElement(_elemental.SegmentedControl, {
      equalWidthSegments: true,
      onChange: this.changeFormat,
      options: FORMAT_OPTIONS,
      value: this.state.format
    })), _react["default"].createElement(_elemental.FormField, {
      label: "Columns:",
      style: {
        marginBottom: 0
      }
    }, _react["default"].createElement(_elemental.LabelledControl, {
      autoFocus: true,
      checked: useCurrentColumns,
      label: "Use currently selected",
      onChange: this.toggleCurrentlySelectedColumns,
      type: "checkbox",
      value: true
    })), this.renderColumnSelect())), _react["default"].createElement(_Popout["default"].Footer, {
      primaryButtonAction: this.handleDownloadRequest,
      primaryButtonLabel: "Download",
      secondaryButtonAction: function secondaryButtonAction() {
        return _this3.togglePopout(false);
      },
      secondaryButtonLabel: "Cancel"
    })));
  }
});

module.exports = ListDownloadForm;

},{"../../../elemental":73,"../../../shared/Popout":145,"../../../shared/Popout/PopoutList":141,"../actions":105,"./ListHeaderButton":120,"object-assign":555,"react":undefined}],120:[function(require,module,exports){
"use strict";

var _glamor = require("glamor");

var _react = _interopRequireWildcard(require("react"));

var _elemental = require("../../../elemental");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ListHeaderButton(_ref) {
  var className = _ref.className,
      label = _ref.label,
      glyph = _ref.glyph,
      props = _objectWithoutProperties(_ref, ["className", "label", "glyph"]);

  return _react["default"].createElement(_elemental.DropdownButton, _extends({
    block: true
  }, props), _react["default"].createElement(_elemental.Glyph, {
    name: glyph,
    cssStyles: classes.glyph
  }), _react["default"].createElement("span", {
    className: (0, _glamor.css)(classes.label)
  }, label));
}

;
ListHeaderButton.propTypes = {
  glyph: _react.PropTypes.string.isRequired
}; // show an icon on small screens where real estate is precious
// otherwise render the label

var classes = {
  glyph: {
    'display': 'none',
    '@media (max-width: 500px)': {
      display: 'inline-block'
    }
  },
  label: {
    'display': 'inline-block',
    '@media (max-width: 500px)': {
      display: 'none'
    }
  }
};
module.exports = ListHeaderButton;

},{"../../../elemental":73,"glamor":undefined,"react":undefined}],121:[function(require,module,exports){
"use strict";

var _glamor = require("glamor");

var _react = _interopRequireWildcard(require("react"));

var _theme = _interopRequireDefault(require("../../../../theme"));

var _color = require("../../../../utils/color");

var _elemental = require("../../../elemental");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ListHeaderSearch(_ref) {
  var focusInput = _ref.focusInput,
      handleChange = _ref.handleChange,
      handleClear = _ref.handleClear,
      handleKeyup = _ref.handleKeyup,
      value = _ref.value,
      props = _objectWithoutProperties(_ref, ["focusInput", "handleChange", "handleClear", "handleKeyup", "value"]);

  return _react["default"].createElement("div", _extends({}, props, {
    className: (0, _glamor.css)(classes.wrapper)
  }), _react["default"].createElement(_elemental.FormInput, {
    "data-search-input-field": true,
    onChange: handleChange,
    onKeyUp: handleKeyup,
    placeholder: "Search",
    value: value
  }), _react["default"].createElement("button", {
    className: (0, _glamor.css)(classes.icon, !!value.length && classes.iconWhenClear),
    "data-search-input-field-clear-icon": true,
    disabled: !value.length,
    onClick: value.length && handleClear,
    title: "Clear search query",
    type: "button"
  }, _react["default"].createElement(_elemental.Glyph, {
    name: value.length ? 'x' : 'search'
  })));
}

;
ListHeaderSearch.propTypes = {
  focusInput: _react.PropTypes.bool,
  handleChange: _react.PropTypes.func.isRequired,
  handleClear: _react.PropTypes.func.isRequired,
  handleKeyup: _react.PropTypes.func.isRequired,
  value: _react.PropTypes.string
};
var clearHoverAndFocusStyles = {
  color: _theme["default"].color.danger,
  outline: 0,
  textDecoration: 'none'
};
var classes = {
  wrapper: {
    position: 'relative'
  },
  icon: {
    background: 'none',
    border: 'none',
    color: _theme["default"].color.gray40,
    height: '100%',
    position: 'absolute',
    right: 0,
    textAlign: 'center',
    top: 0,
    width: '2.2em',
    zIndex: 2 // above the form field on focus

  },
  iconWhenClear: {
    ':hover': clearHoverAndFocusStyles,
    ':focus': clearHoverAndFocusStyles,
    ':active': {
      color: (0, _color.darken)(_theme["default"].color.danger, 10)
    }
  }
};
module.exports = ListHeaderSearch;

},{"../../../../theme":149,"../../../../utils/color":151,"../../../elemental":73,"glamor":undefined,"react":undefined}],122:[function(require,module,exports){
"use strict";

var _glamor = require("glamor");

var _react = _interopRequireWildcard(require("react"));

var _theme = _interopRequireDefault(require("../../../../theme"));

var _ListSort = _interopRequireDefault(require("./ListSort"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ListHeaderTitle(_ref) {
  var activeSort = _ref.activeSort,
      availableColumns = _ref.availableColumns,
      handleSortSelect = _ref.handleSortSelect,
      title = _ref.title,
      props = _objectWithoutProperties(_ref, ["activeSort", "availableColumns", "handleSortSelect", "title"]);

  return _react["default"].createElement("h2", _extends({
    className: (0, _glamor.css)(classes.heading)
  }, props), title, _react["default"].createElement(_ListSort["default"], {
    activeSort: activeSort,
    availableColumns: availableColumns,
    handleSortSelect: handleSortSelect
  }));
}

;
ListHeaderTitle.propTypes = {
  activeSort: _react.PropTypes.object,
  availableColumns: _react.PropTypes.arrayOf(_react.PropTypes.object),
  handleSortSelect: _react.PropTypes.func.isRequired,
  title: _react.PropTypes.string
};
var classes = {
  heading: _defineProperty({}, "@media (max-width: ".concat(_theme["default"].breakpoint.mobileMax, ")"), {
    fontSize: '1.25em',
    fontWeight: 500
  })
};
module.exports = ListHeaderTitle;

},{"../../../../theme":149,"./ListSort":125,"glamor":undefined,"react":undefined}],123:[function(require,module,exports){
"use strict";

var _react = _interopRequireWildcard(require("react"));

var _elemental = require("../../../elemental");

var _theme = _interopRequireDefault(require("../../../../theme"));

var _ListColumnsForm = _interopRequireDefault(require("./ListColumnsForm"));

var _ListDownloadForm = _interopRequireDefault(require("./ListDownloadForm"));

var _ListHeaderSearch = _interopRequireDefault(require("./ListHeaderSearch"));

var _ListFiltersAdd = _interopRequireDefault(require("./Filtering/ListFiltersAdd"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ButtonDivider(_ref) {
  var style = _ref.style,
      props = _objectWithoutProperties(_ref, ["style"]);

  props.style = _objectSpread({
    borderLeft: '1px solid rgba(0, 0, 0, 0.1)',
    paddingLeft: '0.75em'
  }, style);
  return _react["default"].createElement("div", props);
}

;

function CreateButton(_ref2) {
  var listName = _ref2.listName,
      onClick = _ref2.onClick,
      props = _objectWithoutProperties(_ref2, ["listName", "onClick"]);

  return _react["default"].createElement(_elemental.GlyphButton, _extends({
    block: true,
    color: "success",
    "data-e2e-list-create-button": "header",
    glyph: "plus",
    onClick: onClick,
    position: "left",
    title: "Create ".concat(listName)
  }, props), _react["default"].createElement(_elemental.ResponsiveText, {
    visibleSM: "Create",
    visibleMD: "Create",
    visibleLG: "Create ".concat(listName)
  }));
}

;

function ListHeaderToolbar(_ref3) {
  var dispatch = _ref3.dispatch,
      list = _ref3.list,
      expandIsActive = _ref3.expandIsActive,
      expandOnClick = _ref3.expandOnClick,
      createIsAvailable = _ref3.createIsAvailable,
      createListName = _ref3.createListName,
      createOnClick = _ref3.createOnClick,
      searchHandleChange = _ref3.searchHandleChange,
      searchHandleClear = _ref3.searchHandleClear,
      searchHandleKeyup = _ref3.searchHandleKeyup,
      searchValue = _ref3.searchValue,
      filtersActive = _ref3.filtersActive,
      filtersAvailable = _ref3.filtersAvailable,
      columnsAvailable = _ref3.columnsAvailable,
      columnsActive = _ref3.columnsActive,
      props = _objectWithoutProperties(_ref3, ["dispatch", "list", "expandIsActive", "expandOnClick", "createIsAvailable", "createListName", "createOnClick", "searchHandleChange", "searchHandleClear", "searchHandleKeyup", "searchValue", "filtersActive", "filtersAvailable", "columnsAvailable", "columnsActive"]);

  return _react["default"].createElement(_elemental.InlineGroup, {
    block: true,
    cssStyles: classes.wrapper
  }, _react["default"].createElement(_elemental.InlineGroupSection, {
    grow: true,
    cssStyles: classes.search
  }, _react["default"].createElement(_ListHeaderSearch["default"], {
    handleChange: searchHandleChange,
    handleClear: searchHandleClear,
    handleKeyup: searchHandleKeyup,
    value: searchValue
  })), _react["default"].createElement(_elemental.InlineGroupSection, {
    grow: true,
    cssStyles: classes.buttons
  }, _react["default"].createElement(_elemental.InlineGroup, {
    block: true
  }, _react["default"].createElement(_elemental.InlineGroupSection, {
    cssStyles: classes.filter
  }, _react["default"].createElement(_ListFiltersAdd["default"], {
    dispatch: dispatch,
    activeFilters: filtersActive,
    availableFilters: filtersAvailable
  })), _react["default"].createElement(_elemental.InlineGroupSection, {
    cssStyles: classes.columns
  }, _react["default"].createElement(_ListColumnsForm["default"], {
    availableColumns: columnsAvailable,
    activeColumns: columnsActive,
    dispatch: dispatch
  })), _react["default"].createElement(_elemental.InlineGroupSection, {
    cssStyles: classes.download
  }, _react["default"].createElement(_ListDownloadForm["default"], {
    activeColumns: columnsActive,
    dispatch: dispatch,
    list: list
  })), _react["default"].createElement(_elemental.InlineGroupSection, {
    cssStyles: classes.expand
  }, _react["default"].createElement(ButtonDivider, null, _react["default"].createElement(_elemental.GlyphButton, {
    active: expandIsActive,
    glyph: "mirror",
    onClick: expandOnClick,
    title: "Expand table width"
  }))), createIsAvailable && _react["default"].createElement(_elemental.InlineGroupSection, {
    cssStyles: classes.create
  }, _react["default"].createElement(ButtonDivider, null, _react["default"].createElement(CreateButton, {
    listName: createListName,
    onClick: createOnClick
  }))))));
}

;
ListHeaderToolbar.propTypes = {
  columnsActive: _react.PropTypes.array,
  columnsAvailable: _react.PropTypes.array,
  createIsAvailable: _react.PropTypes.bool,
  createListName: _react.PropTypes.string,
  createOnClick: _react.PropTypes.func.isRequired,
  dispatch: _react.PropTypes.func.isRequired,
  expandIsActive: _react.PropTypes.bool,
  expandOnClick: _react.PropTypes.func.isRequired,
  filtersActive: _react.PropTypes.array,
  filtersAvailable: _react.PropTypes.array,
  list: _react.PropTypes.object,
  searchHandleChange: _react.PropTypes.func.isRequired,
  searchHandleClear: _react.PropTypes.func.isRequired,
  searchHandleKeyup: _react.PropTypes.func.isRequired,
  searchValue: _react.PropTypes.string
};

var tabletGrowStyles = _defineProperty({}, "@media (max-width: ".concat(_theme["default"].breakpoint.tabletPortraitMax, ")"), {
  flexGrow: 1
});

var classes = {
  // main wrapper
  wrapper: _defineProperty({}, "@media (max-width: ".concat(_theme["default"].breakpoint.tabletPortraitMax, ")"), {
    flexWrap: 'wrap'
  }),
  // button wrapper
  buttons: _defineProperty({}, "@media (max-width: ".concat(_theme["default"].breakpoint.tabletPortraitMax, ")"), {
    paddingLeft: 0
  }),
  // cols
  expand: _defineProperty({}, "@media (max-width: ".concat(_theme["default"].breakpoint.desktopMax, ")"), {
    display: 'none'
  }),
  filter: _defineProperty({}, "@media (max-width: ".concat(_theme["default"].breakpoint.tabletPortraitMax, ")"), {
    paddingLeft: 0,
    flexGrow: 1
  }),
  columns: tabletGrowStyles,
  create: tabletGrowStyles,
  download: tabletGrowStyles,
  search: _defineProperty({}, "@media (max-width: ".concat(_theme["default"].breakpoint.tabletPortraitMax, ")"), {
    marginBottom: '0.75em',
    minWidth: '100%'
  })
};
module.exports = ListHeaderToolbar;

},{"../../../../theme":149,"../../../elemental":73,"./Filtering/ListFiltersAdd":109,"./ListColumnsForm":117,"./ListDownloadForm":119,"./ListHeaderSearch":121,"react":undefined}],124:[function(require,module,exports){
"use strict";

var _react = _interopRequireWildcard(require("react"));

var _elemental = require("../../../elemental");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ListManagement(_ref) {
  var checkedItemCount = _ref.checkedItemCount,
      handleDelete = _ref.handleDelete,
      handleSelect = _ref.handleSelect,
      handleToggle = _ref.handleToggle,
      isOpen = _ref.isOpen,
      itemCount = _ref.itemCount,
      itemsPerPage = _ref.itemsPerPage,
      nodelete = _ref.nodelete,
      noedit = _ref.noedit,
      selectAllItemsLoading = _ref.selectAllItemsLoading,
      props = _objectWithoutProperties(_ref, ["checkedItemCount", "handleDelete", "handleSelect", "handleToggle", "isOpen", "itemCount", "itemsPerPage", "nodelete", "noedit", "selectAllItemsLoading"]);

  // do not render if there's no results
  // or if edit/delete unavailable on the list
  if (!itemCount || nodelete && noedit) return null;
  var buttonNoteStyles = {
    color: '#999',
    fontWeight: 'normal'
  }; // delete button

  var actionButtons = isOpen && _react["default"].createElement(_elemental.InlineGroupSection, null, _react["default"].createElement(_elemental.GlyphButton, {
    color: "cancel",
    disabled: !checkedItemCount,
    glyph: "trashcan",
    onClick: handleDelete,
    position: "left",
    variant: "link",
    alt: "delete"
  }, "Delete")); // select buttons


  var allVisibleButtonIsActive = checkedItemCount === itemCount;
  var pageVisibleButtonIsActive = checkedItemCount === itemsPerPage;
  var noneButtonIsActive = !checkedItemCount;

  var selectAllButton = itemCount > itemsPerPage && _react["default"].createElement(_elemental.InlineGroupSection, null, _react["default"].createElement(_elemental.Button, {
    active: allVisibleButtonIsActive,
    onClick: function onClick() {
      return handleSelect('all');
    },
    title: "Select all rows (including those not visible)"
  }, selectAllItemsLoading ? _react["default"].createElement(_elemental.Spinner, null) : 'All', " ", _react["default"].createElement("small", {
    style: buttonNoteStyles
  }, "(", itemCount, ")")));

  var selectButtons = isOpen ? _react["default"].createElement(_elemental.InlineGroupSection, null, _react["default"].createElement(_elemental.InlineGroup, {
    contiguous: true
  }, selectAllButton, _react["default"].createElement(_elemental.InlineGroupSection, null, _react["default"].createElement(_elemental.Button, {
    active: pageVisibleButtonIsActive,
    onClick: function onClick() {
      return handleSelect('visible');
    },
    title: "Select all rows"
  }, itemCount > itemsPerPage ? 'Page ' : 'All ', _react["default"].createElement("small", {
    style: buttonNoteStyles
  }, "(", itemCount > itemsPerPage ? itemsPerPage : itemCount, ")"))), _react["default"].createElement(_elemental.InlineGroupSection, null, _react["default"].createElement(_elemental.Button, {
    active: noneButtonIsActive,
    onClick: function onClick() {
      return handleSelect('none');
    },
    title: "Deselect all rows"
  }, "None")))) : null; // selected count text

  var selectedCountText = isOpen ? _react["default"].createElement(_elemental.InlineGroupSection, null, _react["default"].createElement("span", {
    style: {
      color: '#666',
      display: 'inline-block',
      lineHeight: '2.4em',
      margin: 1
    }
  }, checkedItemCount, " selected")) : null; // put it all together

  return _react["default"].createElement("div", null, _react["default"].createElement(_elemental.InlineGroup, {
    style: {
      "float": 'left',
      marginRight: '.75em',
      marginBottom: 0
    }
  }, _react["default"].createElement(_elemental.InlineGroupSection, null, _react["default"].createElement(_elemental.Button, {
    active: isOpen,
    onClick: function onClick() {
      return handleToggle(!isOpen);
    }
  }, "Manage")), selectButtons, actionButtons, selectedCountText));
}

;
ListManagement.propTypes = {
  checkedItems: _react.PropTypes.number,
  handleDelete: _react.PropTypes.func.isRequired,
  handleSelect: _react.PropTypes.func.isRequired,
  handleToggle: _react.PropTypes.func.isRequired,
  isOpen: _react.PropTypes.bool,
  itemCount: _react.PropTypes.number,
  itemsPerPage: _react.PropTypes.number,
  nodelete: _react.PropTypes.bool,
  noedit: _react.PropTypes.bool,
  selectAllItemsLoading: _react.PropTypes.bool
};
module.exports = ListManagement;

},{"../../../elemental":73,"react":undefined}],125:[function(require,module,exports){
"use strict";

var _elemental = require("../../../elemental");

var _react = _interopRequireWildcard(require("react"));

var _vkey = _interopRequireDefault(require("vkey"));

var _Kbd = _interopRequireDefault(require("../../../shared/Kbd"));

var _Popout = _interopRequireDefault(require("../../../shared/Popout"));

var _PopoutList = _interopRequireDefault(require("../../../shared/Popout/PopoutList"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

var ListSort = _react["default"].createClass({
  displayName: 'ListSort',
  propTypes: {
    handleSortSelect: _react.PropTypes.func.isRequired
  },
  getInitialState: function getInitialState() {
    return {
      altDown: false,
      popoutIsOpen: false,
      searchString: ''
    };
  },
  componentDidMount: function componentDidMount() {
    document.body.addEventListener('keydown', this.handleKeyDown, false);
    document.body.addEventListener('keyup', this.handleKeyUp, false);
  },
  componentWillUnmount: function componentWillUnmount() {
    document.body.removeEventListener('keydown', this.handleKeyDown);
    document.body.removeEventListener('keyup', this.handleKeyUp);
  },
  handleKeyDown: function handleKeyDown(e) {
    if (_vkey["default"][e.keyCode] !== '<alt>') return;
    this.setState({
      altDown: true
    });
  },
  handleKeyUp: function handleKeyUp(e) {
    if (_vkey["default"][e.keyCode] !== '<alt>') return;
    this.setState({
      altDown: false
    });
  },
  handleSortSelect: function handleSortSelect(path, inverted) {
    if (this.state.altDown) inverted = true;
    this.props.handleSortSelect(path, inverted);
    this.closePopout();
  },
  openPopout: function openPopout() {
    this.setState({
      popoutIsOpen: true
    });
  },
  closePopout: function closePopout() {
    this.setState({
      popoutIsOpen: false,
      searchString: ''
    });
  },
  updateSearch: function updateSearch(e) {
    this.setState({
      searchString: e.target.value
    });
  },
  renderSortOptions: function renderSortOptions() {
    var _this = this;

    // TODO: Handle multiple sort paths
    var activeSortPath = this.props.activeSort.paths[0];
    var availibleColumns = this.props.availableColumns;
    var searchString = this.state.searchString;
    var filteredColumns = availibleColumns;

    if (searchString) {
      filteredColumns = filteredColumns.filter(function (column) {
        return column.type !== 'heading';
      }).filter(function (column) {
        return new RegExp(searchString).test(column.field.label.toLowerCase());
      });
    }

    return filteredColumns.map(function (el, i) {
      if (el.type === 'heading') {
        return _react["default"].createElement(_PopoutList["default"].Heading, {
          key: 'heading_' + i
        }, el.content);
      }

      var path = el.field.path;
      var isSelected = activeSortPath && activeSortPath.path === path;
      var isInverted = isSelected && activeSortPath.invert;
      var icon = _this.state.altDown || isSelected && !isInverted ? 'chevron-up' : 'chevron-down';
      return _react["default"].createElement(_PopoutList["default"].Item, {
        key: 'column_' + el.field.path,
        icon: icon,
        isSelected: isSelected,
        label: el.field.label,
        onClick: function onClick() {
          _this.handleSortSelect(path, isSelected && !isInverted);
        }
      });
    });
  },
  render: function render() {
    // TODO: Handle multiple sort paths
    var activeSortPath = this.props.activeSort.paths[0];
    var formFieldStyles = {
      borderBottom: '1px dashed rgba(0,0,0,0.1)',
      paddingBottom: '1em'
    };
    return _react["default"].createElement("span", null, activeSortPath && _react["default"].createElement("span", null, _react["default"].createElement("span", {
      style: {
        color: '#999'
      }
    }, " sorted by "), _react["default"].createElement("a", {
      id: "listHeaderSortButton",
      href: "javascript:;",
      onClick: this.openPopout
    }, activeSortPath.label.toLowerCase(), activeSortPath.invert ? ' (descending)' : '', _react["default"].createElement("span", {
      className: "disclosure-arrow"
    }))), _react["default"].createElement(_Popout["default"], {
      isOpen: this.state.popoutIsOpen,
      onCancel: this.closePopout,
      relativeToID: "listHeaderSortButton"
    }, _react["default"].createElement(_Popout["default"].Header, {
      title: "Sort"
    }), _react["default"].createElement(_Popout["default"].Body, {
      scrollable: true
    }, _react["default"].createElement(_elemental.FormField, {
      style: formFieldStyles
    }, _react["default"].createElement(_elemental.FormInput, {
      autoFocus: true,
      value: this.state.searchString,
      onChange: this.updateSearch,
      placeholder: "Find a field..."
    })), _react["default"].createElement(_PopoutList["default"], null, this.renderSortOptions())), _react["default"].createElement(_Popout["default"].Footer, null, _react["default"].createElement(_elemental.FormNote, null, "Hold ", _react["default"].createElement(_Kbd["default"], null, "alt"), " to toggle ascending/descending"))));
  }
});

module.exports = ListSort;

},{"../../../elemental":73,"../../../shared/Kbd":137,"../../../shared/Popout":145,"../../../shared/Popout/PopoutList":141,"react":undefined,"vkey":undefined}],126:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactSelect = _interopRequireDefault(require("react-select"));

var _reactDom = require("react-dom");

var _objectAssign = _interopRequireDefault(require("object-assign"));

var _FieldTypes = require("FieldTypes");

var _InvalidFieldType = _interopRequireDefault(require("../../../shared/InvalidFieldType"));

var _string = require("../../../../utils/string");

var _elemental = require("../../../elemental");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var UpdateForm = _react["default"].createClass({
  displayName: 'UpdateForm',
  propTypes: {
    isOpen: _react["default"].PropTypes.bool,
    itemIds: _react["default"].PropTypes.array,
    list: _react["default"].PropTypes.object,
    onCancel: _react["default"].PropTypes.func
  },
  getDefaultProps: function getDefaultProps() {
    return {
      isOpen: false
    };
  },
  getInitialState: function getInitialState() {
    return {
      fields: []
    };
  },
  componentDidMount: function componentDidMount() {
    this.doFocus();
  },
  componentDidUpdate: function componentDidUpdate() {
    this.doFocus();
  },
  doFocus: function doFocus() {
    if (this.refs.focusTarget) {
      (0, _reactDom.findDOMNode)(this.refs.focusTarget).focus();
    }
  },
  getOptions: function getOptions() {
    var fields = this.props.list.fields;
    return Object.keys(fields).map(function (key) {
      return {
        value: fields[key].path,
        label: fields[key].label
      };
    });
  },
  getFieldProps: function getFieldProps(field) {
    var props = (0, _objectAssign["default"])({}, field);
    props.value = this.state.fields[field.path];
    props.values = this.state.fields;
    props.onChange = this.handleChange;
    props.mode = 'create';
    props.key = field.path;
    return props;
  },
  updateOptions: function updateOptions(fields) {
    this.setState({
      fields: fields
    }, this.doFocus);
  },
  handleChange: function handleChange(value) {
    console.log('handleChange:', value);
  },
  handleClose: function handleClose() {
    this.setState({
      fields: []
    });
    this.props.onCancel();
  },
  renderFields: function renderFields() {
    var _this = this;

    var list = this.props.list;
    var fields = this.state.fields;
    var formFields = [];
    var focusRef;
    fields.forEach(function (fieldOption) {
      var field = list.fields[fieldOption.value];

      if (typeof _FieldTypes.Fields[field.type] !== 'function') {
        formFields.push(_react["default"].createElement(_InvalidFieldType["default"], {
          type: field.type,
          path: field.path,
          key: field.path
        }));
        return;
      }

      var fieldProps = _this.getFieldProps(field);

      if (!focusRef) {
        fieldProps.ref = focusRef = 'focusTarget';
      }

      formFields.push(_react["default"].createElement(_FieldTypes.Fields[field.type], fieldProps));
    });
    var fieldsUI = formFields.length ? formFields : _react["default"].createElement(_elemental.BlankState, {
      heading: "Choose a field above to begin",
      style: {
        padding: '3em 2em'
      }
    });
    return _react["default"].createElement("div", {
      style: {
        borderTop: '1px dashed rgba(0,0,0,0.1)',
        marginTop: 20,
        paddingTop: 20
      }
    }, fieldsUI);
  },
  renderForm: function renderForm() {
    var _this$props = this.props,
        itemIds = _this$props.itemIds,
        list = _this$props.list;
    var itemCount = (0, _string.plural)(itemIds, '* ' + list.singular, '* ' + list.plural);
    var formAction = "".concat(Keystone.adminPath, "/").concat(list.path);
    return _react["default"].createElement(_elemental.Form, {
      layout: "horizontal",
      action: formAction,
      noValidate: "true"
    }, _react["default"].createElement(_elemental.Modal.Header, {
      onClose: this.handleClose,
      showCloseButton: true,
      text: 'Update ' + itemCount
    }), _react["default"].createElement(_elemental.Modal.Body, null, _react["default"].createElement(_reactSelect["default"], {
      key: "field-select",
      multi: true,
      onChange: this.updateOptions,
      options: this.getOptions(),
      ref: "initialFocusTarget",
      value: this.state.fields
    }), this.renderFields()), _react["default"].createElement(_elemental.Modal.Footer, null, _react["default"].createElement(_elemental.Button, {
      color: "primary",
      submit: true
    }, "Update"), _react["default"].createElement(_elemental.Button, {
      color: "cancel",
      variant: "link",
      onClick: this.handleClose
    }, "Cancel")));
  },
  render: function render() {
    return _react["default"].createElement(_elemental.Modal.Dialog, {
      isOpen: this.props.isOpen,
      onClose: this.handleClose,
      backdropClosesModal: true
    }, this.renderForm());
  }
});

module.exports = UpdateForm;

},{"../../../../utils/string":156,"../../../elemental":73,"../../../shared/InvalidFieldType":136,"FieldTypes":undefined,"object-assign":555,"react":undefined,"react-dom":undefined,"react-select":undefined}],127:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DRAG_MOVE_ITEM = exports.SET_DRAG_INDEX = exports.SET_DRAG_ITEM = exports.RESET_DRAG_ITEMS = exports.RESET_DRAG_PAGE = exports.SET_ROW_ALERT = exports.SET_FILTERS = exports.CLEAR_ALL_FILTERS = exports.CLEAR_FILTER = exports.ADD_FILTER = exports.CLEAR_CACHED_QUERY = exports.REPLACE_CACHED_QUERY = exports.QUERY_HAS_NOT_CHANGED = exports.QUERY_HAS_CHANGED = exports.SET_ACTIVE_LIST = exports.SET_ACTIVE_COLUMNS = exports.SET_ACTIVE_SORT = exports.SET_ACTIVE_SEARCH = exports.SELECT_FILTER = exports.SELECT_ACTIVE_COLUMNS = exports.SELECT_ACTIVE_SORT = exports.ITEM_LOADING_ERROR = exports.ITEMS_LOADED = exports.LOADING_ITEMS = exports.LOAD_ITEMS = exports.INITIAL_LIST_LOAD = exports.SET_CURRENT_PAGE = exports.SELECT_LIST = void 0;
// General
var SELECT_LIST = 'app/List/SELECT_LIST';
exports.SELECT_LIST = SELECT_LIST;
var SET_CURRENT_PAGE = 'app/List/SET_CURRENT_PAGE';
exports.SET_CURRENT_PAGE = SET_CURRENT_PAGE;
var INITIAL_LIST_LOAD = 'app/List/INITIAL_LIST_LOAD'; // Items

exports.INITIAL_LIST_LOAD = INITIAL_LIST_LOAD;
var LOAD_ITEMS = 'app/List/LOAD_ITEMS';
exports.LOAD_ITEMS = LOAD_ITEMS;
var LOADING_ITEMS = 'app/List/LOADING_ITEMS';
exports.LOADING_ITEMS = LOADING_ITEMS;
var ITEMS_LOADED = 'app/List/ITEMS_LOADED';
exports.ITEMS_LOADED = ITEMS_LOADED;
var ITEM_LOADING_ERROR = 'app/List/ITEM_LOADING_ERROR'; // Active

exports.ITEM_LOADING_ERROR = ITEM_LOADING_ERROR;
var SELECT_ACTIVE_SORT = 'app/List/SELECT_ACTIVE_SORT';
exports.SELECT_ACTIVE_SORT = SELECT_ACTIVE_SORT;
var SELECT_ACTIVE_COLUMNS = 'app/List/SELECT_ACTIVE_COLUMNS';
exports.SELECT_ACTIVE_COLUMNS = SELECT_ACTIVE_COLUMNS;
var SELECT_FILTER = 'app/List/SELECT_FILTER';
exports.SELECT_FILTER = SELECT_FILTER;
var SET_ACTIVE_SEARCH = 'app/List/SET_ACTIVE_SEARCH';
exports.SET_ACTIVE_SEARCH = SET_ACTIVE_SEARCH;
var SET_ACTIVE_SORT = 'app/List/SET_ACTIVE_SORT';
exports.SET_ACTIVE_SORT = SET_ACTIVE_SORT;
var SET_ACTIVE_COLUMNS = 'app/List/SET_ACTIVE_COLUMNS';
exports.SET_ACTIVE_COLUMNS = SET_ACTIVE_COLUMNS;
var SET_ACTIVE_LIST = 'app/List/SET_ACTIVE_LIST'; // Query Params

exports.SET_ACTIVE_LIST = SET_ACTIVE_LIST;
var QUERY_HAS_CHANGED = 'app/List/QUERY_HAS_CHANGED';
exports.QUERY_HAS_CHANGED = QUERY_HAS_CHANGED;
var QUERY_HAS_NOT_CHANGED = 'app/List/QUERY_HAS_NOT_CHANGED';
exports.QUERY_HAS_NOT_CHANGED = QUERY_HAS_NOT_CHANGED;
var REPLACE_CACHED_QUERY = 'app/List/REPLACE_CACHED_QUERY';
exports.REPLACE_CACHED_QUERY = REPLACE_CACHED_QUERY;
var CLEAR_CACHED_QUERY = 'app/List/CLEAR_CACHED_QUERY'; // Filtering

exports.CLEAR_CACHED_QUERY = CLEAR_CACHED_QUERY;
var ADD_FILTER = 'app/List/ADD_FILTER';
exports.ADD_FILTER = ADD_FILTER;
var CLEAR_FILTER = 'app/List/CLEAR_FILTER';
exports.CLEAR_FILTER = CLEAR_FILTER;
var CLEAR_ALL_FILTERS = 'app/List/CLEAR_ALL_FILTERS';
exports.CLEAR_ALL_FILTERS = CLEAR_ALL_FILTERS;
var SET_FILTERS = 'app/List/SET_FILTERS'; // Drag

exports.SET_FILTERS = SET_FILTERS;
var SET_ROW_ALERT = 'app/List/SET_ROW_ALERT';
exports.SET_ROW_ALERT = SET_ROW_ALERT;
var RESET_DRAG_PAGE = 'app/List/RESET_DRAG_PAGE';
exports.RESET_DRAG_PAGE = RESET_DRAG_PAGE;
var RESET_DRAG_ITEMS = 'app/List/RESET_DRAG_ITEMS';
exports.RESET_DRAG_ITEMS = RESET_DRAG_ITEMS;
var SET_DRAG_ITEM = 'app/List/SET_DRAG_ITEM';
exports.SET_DRAG_ITEM = SET_DRAG_ITEM;
var SET_DRAG_INDEX = 'app/List/SET_DRAG_INDEX';
exports.SET_DRAG_INDEX = SET_DRAG_INDEX;
var DRAG_MOVE_ITEM = 'app/List/DRAG_MOVE_ITEM';
exports.DRAG_MOVE_ITEM = DRAG_MOVE_ITEM;

},{}],128:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _numeral = _interopRequireDefault(require("numeral"));

var _reactRedux = require("react-redux");

var _elemental = require("../../elemental");

var _ListFilters = _interopRequireDefault(require("./components/Filtering/ListFilters"));

var _ListHeaderTitle = _interopRequireDefault(require("./components/ListHeaderTitle"));

var _ListHeaderToolbar = _interopRequireDefault(require("./components/ListHeaderToolbar"));

var _ListManagement = _interopRequireDefault(require("./components/ListManagement"));

var _ConfirmationDialog = _interopRequireDefault(require("../../shared/ConfirmationDialog"));

var _CreateForm = _interopRequireDefault(require("../../shared/CreateForm"));

var _FlashMessages = _interopRequireDefault(require("../../shared/FlashMessages"));

var _ItemsTable = _interopRequireDefault(require("./components/ItemsTable/ItemsTable"));

var _UpdateForm = _interopRequireDefault(require("./components/UpdateForm"));

var _string = require("../../../utils/string");

var _lists = require("../../../utils/lists");

var _queryParams = require("../../../utils/queryParams");

var _actions = require("./actions");

var _actions2 = require("../Item/actions");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ESC_KEY_CODE = 27;

var ListView = _react["default"].createClass({
  displayName: "ListView",
  contextTypes: {
    router: _react["default"].PropTypes.object.isRequired
  },
  getInitialState: function getInitialState() {
    return {
      confirmationDialog: {
        isOpen: false
      },
      checkedItems: {},
      constrainTableWidth: true,
      manageMode: false,
      showCreateForm: false,
      showUpdateForm: false
    };
  },
  componentWillMount: function componentWillMount() {
    // When we directly navigate to a list without coming from another client
    // side routed page before, we need to initialize the list and parse
    // possibly specified query parameters
    this.props.dispatch((0, _actions.selectList)(this.props.params.listId));
    var isNoCreate = this.props.lists.data[this.props.params.listId].nocreate;
    var shouldOpenCreate = this.props.location.search === '?create';
    this.setState({
      showCreateForm: shouldOpenCreate && !isNoCreate || Keystone.createFormErrors
    });
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    // We've opened a new list from the client side routing, so initialize
    // again with the new list id
    var isReady = this.props.lists.ready && nextProps.lists.ready;

    if (isReady && (0, _queryParams.checkForQueryChange)(nextProps, this.props)) {
      this.props.dispatch((0, _actions.selectList)(nextProps.params.listId));
    }
  },
  componentWillUnmount: function componentWillUnmount() {
    this.props.dispatch((0, _actions.clearCachedQuery)());
  },
  // ==============================
  // HEADER
  // ==============================
  // Called when a new item is created
  onCreate: function onCreate(item) {
    // Hide the create form
    this.toggleCreateModal(false); // Redirect to newly created item path

    var list = this.props.currentList;
    this.context.router.push("".concat(Keystone.adminPath, "/").concat(list.path, "/").concat(item.id));
  },
  createAutocreate: function createAutocreate() {
    var _this = this;

    var list = this.props.currentList;
    list.createItem(null, function (err, data) {
      if (err) {
        // TODO Proper error handling
        alert('Something went wrong, please try again!');
        console.log(err);
      } else {
        _this.context.router.push("".concat(Keystone.adminPath, "/").concat(list.path, "/").concat(data.id));
      }
    });
  },
  updateSearch: function updateSearch(e) {
    this.props.dispatch((0, _actions.setActiveSearch)(e.target.value));
  },
  handleSearchClear: function handleSearchClear() {
    this.props.dispatch((0, _actions.setActiveSearch)('')); // TODO re-implement focus when ready
    // findDOMNode(this.refs.listSearchInput).focus();
  },
  handleSearchKey: function handleSearchKey(e) {
    // clear on esc
    if (e.which === ESC_KEY_CODE) {
      this.handleSearchClear();
    }
  },
  handlePageSelect: function handlePageSelect(i) {
    // If the current page index is the same as the index we are intending to pass to redux, bail out.
    if (i === this.props.lists.page.index) return;
    return this.props.dispatch((0, _actions.setCurrentPage)(i));
  },
  toggleManageMode: function toggleManageMode() {
    var filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this.state.manageMode;
    this.setState({
      manageMode: filter,
      checkedItems: {}
    });
  },
  toggleUpdateModal: function toggleUpdateModal() {
    var filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this.state.showUpdateForm;
    this.setState({
      showUpdateForm: filter
    });
  },
  massUpdate: function massUpdate() {
    // TODO: Implement update multi-item
    console.log('Update ALL the things!');
  },
  massDelete: function massDelete() {
    var _this2 = this;

    var checkedItems = this.state.checkedItems;
    var list = this.props.currentList;
    var itemCount = (0, _string.plural)(checkedItems, '* ' + list.singular.toLowerCase(), '* ' + list.plural.toLowerCase());
    var itemIds = Object.keys(checkedItems);
    this.setState({
      confirmationDialog: {
        isOpen: true,
        label: 'Delete',
        body: _react["default"].createElement("div", null, "Are you sure you want to delete ", itemCount, "?", _react["default"].createElement("br", null), _react["default"].createElement("br", null), "This cannot be undone."),
        onConfirmation: function onConfirmation() {
          _this2.props.dispatch((0, _actions.deleteItems)(itemIds));

          _this2.toggleManageMode();

          _this2.removeConfirmationDialog();
        }
      }
    });
  },
  handleManagementSelect: function handleManagementSelect(selection) {
    if (selection === 'all') this.checkAllItems();
    if (selection === 'none') this.uncheckAllTableItems();
    if (selection === 'visible') this.checkAllTableItems();
    return false;
  },
  renderConfirmationDialog: function renderConfirmationDialog() {
    var props = this.state.confirmationDialog;
    return _react["default"].createElement(_ConfirmationDialog["default"], {
      confirmationLabel: props.label,
      isOpen: props.isOpen,
      onCancel: this.removeConfirmationDialog,
      onConfirmation: props.onConfirmation
    }, props.body);
  },
  renderManagement: function renderManagement() {
    var _this3 = this;

    var _this$state = this.state,
        checkedItems = _this$state.checkedItems,
        manageMode = _this$state.manageMode,
        selectAllItemsLoading = _this$state.selectAllItemsLoading;
    var currentList = this.props.currentList;
    return _react["default"].createElement(_ListManagement["default"], {
      checkedItemCount: Object.keys(checkedItems).length,
      handleDelete: this.massDelete,
      handleSelect: this.handleManagementSelect,
      handleToggle: function handleToggle() {
        return _this3.toggleManageMode(!manageMode);
      },
      isOpen: manageMode,
      itemCount: this.props.items.count,
      itemsPerPage: this.props.lists.page.size,
      nodelete: currentList.nodelete,
      noedit: currentList.noedit,
      selectAllItemsLoading: selectAllItemsLoading
    });
  },
  renderPagination: function renderPagination() {
    var items = this.props.items;
    if (this.state.manageMode || !items.count) return;
    var list = this.props.currentList;
    var currentPage = this.props.lists.page.index;
    var pageSize = this.props.lists.page.size;
    return _react["default"].createElement(_elemental.Pagination, {
      currentPage: currentPage,
      onPageSelect: this.handlePageSelect,
      pageSize: pageSize,
      plural: list.plural,
      singular: list.singular,
      style: {
        marginBottom: 0
      },
      total: items.count,
      limit: 10
    });
  },
  renderHeader: function renderHeader() {
    var items = this.props.items;
    var _this$props$currentLi = this.props.currentList,
        autocreate = _this$props$currentLi.autocreate,
        nocreate = _this$props$currentLi.nocreate,
        plural = _this$props$currentLi.plural,
        singular = _this$props$currentLi.singular;
    return _react["default"].createElement(_elemental.Container, {
      style: {
        paddingTop: '2em'
      }
    }, _react["default"].createElement(_ListHeaderTitle["default"], {
      activeSort: this.props.active.sort,
      availableColumns: this.props.currentList.columns,
      handleSortSelect: this.handleSortSelect,
      title: "\n\t\t\t\t\t\t".concat((0, _numeral["default"])(items.count).format(), "\n\t\t\t\t\t\t").concat((0, _string.plural)(items.count, ' ' + singular, ' ' + plural), "\n\t\t\t\t\t")
    }), _react["default"].createElement(_ListHeaderToolbar["default"] // common
    , {
      dispatch: this.props.dispatch,
      list: _lists.listsByPath[this.props.params.listId] // expand
      ,
      expandIsActive: !this.state.constrainTableWidth,
      expandOnClick: this.toggleTableWidth // create
      ,
      createIsAvailable: !nocreate,
      createListName: singular,
      createOnClick: autocreate ? this.createAutocreate : this.openCreateModal // search
      ,
      searchHandleChange: this.updateSearch,
      searchHandleClear: this.handleSearchClear,
      searchHandleKeyup: this.handleSearchKey,
      searchValue: this.props.active.search // filters
      ,
      filtersActive: this.props.active.filters,
      filtersAvailable: this.props.currentList.columns.filter(function (col) {
        return col.field && col.field.hasFilterMethod || col.type === 'heading';
      }) // columns
      ,
      columnsActive: this.props.active.columns,
      columnsAvailable: this.props.currentList.columns
    }), _react["default"].createElement(_ListFilters["default"], {
      dispatch: this.props.dispatch,
      filters: this.props.active.filters
    }));
  },
  // ==============================
  // TABLE
  // ==============================
  checkTableItem: function checkTableItem(item, e) {
    e.preventDefault();

    var newCheckedItems = _objectSpread({}, this.state.checkedItems);

    var itemId = item.id;

    if (this.state.checkedItems[itemId]) {
      delete newCheckedItems[itemId];
    } else {
      newCheckedItems[itemId] = true;
    }

    this.setState({
      checkedItems: newCheckedItems
    });
  },
  checkAllTableItems: function checkAllTableItems() {
    var checkedItems = {};
    this.props.items.results.forEach(function (item) {
      checkedItems[item.id] = true;
    });
    this.setState({
      checkedItems: checkedItems
    });
  },
  checkAllItems: function checkAllItems() {
    var checkedItems = _objectSpread({}, this.state.checkedItems); // Just in case this API call takes a long time, we'll update the select all button with
    // a spinner.


    this.setState({
      selectAllItemsLoading: true
    });
    var self = this;
    this.props.currentList.loadItems({
      expandRelationshipFilters: false,
      filters: {}
    }, function (err, data) {
      data.results.forEach(function (item) {
        checkedItems[item.id] = true;
      });
      self.setState({
        checkedItems: checkedItems,
        selectAllItemsLoading: false
      });
    });
  },
  uncheckAllTableItems: function uncheckAllTableItems() {
    this.setState({
      checkedItems: {}
    });
  },
  deleteTableItem: function deleteTableItem(item, e) {
    var _this4 = this;

    if (e.altKey) {
      this.props.dispatch((0, _actions2.deleteItem)(item.id));
      return;
    }

    e.preventDefault();
    this.setState({
      confirmationDialog: {
        isOpen: true,
        label: 'Delete',
        body: _react["default"].createElement("div", null, "Are you sure you want to delete ", _react["default"].createElement("strong", null, item.name), "?", _react["default"].createElement("br", null), _react["default"].createElement("br", null), "This cannot be undone."),
        onConfirmation: function onConfirmation() {
          _this4.props.dispatch((0, _actions2.deleteItem)(item.id));

          _this4.removeConfirmationDialog();
        }
      }
    });
  },
  removeConfirmationDialog: function removeConfirmationDialog() {
    this.setState({
      confirmationDialog: {
        isOpen: false
      }
    });
  },
  toggleTableWidth: function toggleTableWidth() {
    this.setState({
      constrainTableWidth: !this.state.constrainTableWidth
    });
  },
  // ==============================
  // COMMON
  // ==============================
  handleSortSelect: function handleSortSelect(path, inverted) {
    if (inverted) path = '-' + path;
    this.props.dispatch((0, _actions.setActiveSort)(path));
  },
  toggleCreateModal: function toggleCreateModal(visible) {
    this.setState({
      showCreateForm: visible
    });
  },
  openCreateModal: function openCreateModal() {
    this.toggleCreateModal(true);
  },
  closeCreateModal: function closeCreateModal() {
    this.toggleCreateModal(false);
  },
  showBlankState: function showBlankState() {
    return !this.props.loading && !this.props.items.results.length && !this.props.active.search && !this.props.active.filters.length;
  },
  renderBlankState: function renderBlankState() {
    var currentList = this.props.currentList;
    if (!this.showBlankState()) return null; // create and nav directly to the item view, or open the create modal

    var onClick = currentList.autocreate ? this.createAutocreate : this.openCreateModal; // display the button if create allowed

    var button = !currentList.nocreate ? _react["default"].createElement(_elemental.GlyphButton, {
      color: "success",
      glyph: "plus",
      position: "left",
      onClick: onClick,
      "data-e2e-list-create-button": "no-results"
    }, "Create ", currentList.singular) : null;
    return _react["default"].createElement(_elemental.Container, null, this.props.error ? _react["default"].createElement(_FlashMessages["default"], {
      messages: {
        error: [{
          title: "There is a problem with the network, we're trying to reconnect..."
        }]
      }
    }) : null, _react["default"].createElement(_elemental.BlankState, {
      heading: "No ".concat(this.props.currentList.plural.toLowerCase(), " found..."),
      style: {
        marginTop: 40
      }
    }, button));
  },
  renderActiveState: function renderActiveState() {
    if (this.showBlankState()) return null;
    var containerStyle = {
      transition: 'max-width 160ms ease-out',
      msTransition: 'max-width 160ms ease-out',
      MozTransition: 'max-width 160ms ease-out',
      WebkitTransition: 'max-width 160ms ease-out'
    };

    if (!this.state.constrainTableWidth) {
      containerStyle.maxWidth = '100%';
    }

    return _react["default"].createElement("div", null, this.renderHeader(), _react["default"].createElement(_elemental.Container, null, _react["default"].createElement("div", {
      style: {
        height: 35,
        marginBottom: '1em',
        marginTop: '1em'
      }
    }, this.renderManagement(), this.renderPagination(), _react["default"].createElement("span", {
      style: {
        clear: 'both',
        display: 'table'
      }
    }))), _react["default"].createElement(_elemental.Container, {
      style: containerStyle
    }, this.props.error ? _react["default"].createElement(_FlashMessages["default"], {
      messages: {
        error: [{
          title: "There is a problem with the network, we're trying to reconnect.."
        }]
      }
    }) : null, this.props.loading ? _react["default"].createElement(_elemental.Center, {
      height: "50vh"
    }, _react["default"].createElement(_elemental.Spinner, null)) : _react["default"].createElement("div", null, _react["default"].createElement(_ItemsTable["default"], {
      activeSort: this.props.active.sort,
      checkedItems: this.state.checkedItems,
      checkTableItem: this.checkTableItem,
      columns: this.props.active.columns,
      deleteTableItem: this.deleteTableItem,
      handleSortSelect: this.handleSortSelect,
      items: this.props.items,
      list: this.props.currentList,
      manageMode: this.state.manageMode,
      rowAlert: this.props.rowAlert,
      currentPage: this.props.lists.page.index,
      pageSize: this.props.lists.page.size,
      drag: this.props.lists.drag,
      dispatch: this.props.dispatch
    }), this.renderNoSearchResults())));
  },
  renderNoSearchResults: function renderNoSearchResults() {
    if (this.props.items.results.length) return null;
    var matching = this.props.active.search;

    if (this.props.active.filters.length) {
      matching += (matching ? ' and ' : '') + (0, _string.plural)(this.props.active.filters.length, '* filter', '* filters');
    }

    matching = matching ? ' found matching ' + matching : '.';
    return _react["default"].createElement(_elemental.BlankState, {
      style: {
        marginTop: 20,
        marginBottom: 20
      }
    }, _react["default"].createElement(_elemental.Glyph, {
      name: "search",
      size: "medium",
      style: {
        marginBottom: 20
      }
    }), _react["default"].createElement("h2", {
      style: {
        color: 'inherit'
      }
    }, "No ", this.props.currentList.plural.toLowerCase(), matching));
  },
  render: function render() {
    var _this5 = this;

    if (!this.props.ready) {
      return _react["default"].createElement(_elemental.Center, {
        height: "50vh",
        "data-screen-id": "list"
      }, _react["default"].createElement(_elemental.Spinner, null));
    }

    return _react["default"].createElement("div", {
      "data-screen-id": "list"
    }, this.renderBlankState(), this.renderActiveState(), _react["default"].createElement(_CreateForm["default"], {
      err: Keystone.createFormErrors,
      isOpen: this.state.showCreateForm,
      list: this.props.currentList,
      onCancel: this.closeCreateModal,
      onCreate: this.onCreate
    }), _react["default"].createElement(_UpdateForm["default"], {
      isOpen: this.state.showUpdateForm,
      itemIds: Object.keys(this.state.checkedItems),
      list: this.props.currentList,
      onCancel: function onCancel() {
        return _this5.toggleUpdateModal(false);
      }
    }), this.renderConfirmationDialog());
  }
});

module.exports = (0, _reactRedux.connect)(function (state) {
  return {
    lists: state.lists,
    loading: state.lists.loading,
    error: state.lists.error,
    currentList: state.lists.currentList,
    items: state.lists.items,
    page: state.lists.page,
    ready: state.lists.ready,
    rowAlert: state.lists.rowAlert,
    active: state.active
  };
})(ListView);

},{"../../../utils/lists":154,"../../../utils/queryParams":155,"../../../utils/string":156,"../../elemental":73,"../../shared/ConfirmationDialog":132,"../../shared/CreateForm":133,"../../shared/FlashMessages":135,"../Item/actions":86,"./actions":105,"./components/Filtering/ListFilters":108,"./components/ItemsTable/ItemsTable":112,"./components/ListHeaderTitle":122,"./components/ListHeaderToolbar":123,"./components/ListManagement":124,"./components/UpdateForm":126,"numeral":undefined,"react":undefined,"react-redux":undefined}],129:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _objectAssign = _interopRequireDefault(require("object-assign"));

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var initialState = {
  columns: [],
  filters: [],
  search: '',
  sort: {
    input: '',
    isDefaultSort: false,
    paths: [],
    rawInput: ''
  },
  cachedQuery: {}
};
/**
 * Manage the active state
 */

function active() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action.type) {
    case _constants.SET_ACTIVE_LIST:
      return (0, _objectAssign["default"])({}, state, {
        id: action.id,
        columns: action.list.expandColumns(action.list.defaultColumns),
        filters: [],
        search: '',
        sort: action.list.expandSort(action.list.defaultSort)
      });

    case _constants.SET_ACTIVE_SEARCH:
      return (0, _objectAssign["default"])({}, state, {
        search: action.searchString
      });

    case _constants.SET_ACTIVE_SORT:
      return (0, _objectAssign["default"])({}, state, {
        sort: action.sort
      });

    case _constants.SET_ACTIVE_COLUMNS:
      return (0, _objectAssign["default"])({}, state, {
        columns: action.columns
      });

    case _constants.ADD_FILTER:
      return (0, _objectAssign["default"])({}, state, {
        // Override existing filter with field path,
        // otherwise add to filters array
        filters: _lodash["default"].unionWith([action.filter], state.filters, function (stateFilter, actionFilter) {
          return stateFilter.field.path === actionFilter.field.path;
        })
      });

    case _constants.SET_FILTERS:
      return (0, _objectAssign["default"])({}, state, {
        filters: action.filters
      });

    case _constants.CLEAR_FILTER:
      var newFilters = _lodash["default"].filter(state.filters, function (filter) {
        return filter.field.path !== action.path;
      });

      return (0, _objectAssign["default"])({}, state, {
        filters: newFilters
      });

    case _constants.CLEAR_ALL_FILTERS:
      return (0, _objectAssign["default"])({}, state, {
        filters: []
      });

    case _constants.QUERY_HAS_CHANGED:
      var _action$parsedQuery = action.parsedQuery,
          search = _action$parsedQuery.search,
          sort = _action$parsedQuery.sort,
          filters = _action$parsedQuery.filters,
          columns = _action$parsedQuery.columns;
      return (0, _objectAssign["default"])({}, state, {
        search: search,
        sort: sort || initialState.sort,
        filters: filters || initialState.filters,
        columns: columns || initialState.columns
      });

    case _constants.REPLACE_CACHED_QUERY:
      return (0, _objectAssign["default"])({}, state, {
        cachedQuery: action.cachedQuery
      });

    case _constants.CLEAR_CACHED_QUERY:
      return (0, _objectAssign["default"])({}, state, {
        cachedQuery: {}
      });

    default:
      return state;
  }
}

var _default = active;
exports["default"] = _default;

},{"../constants":127,"lodash":undefined,"object-assign":555}],130:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _objectAssign = _interopRequireDefault(require("object-assign"));

var _List = _interopRequireDefault(require("../../../../utils/List"));

var _constants = require("../constants");

var _constants2 = require("../../Item/constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var initialState = {
  loadingRef: null,
  loadCounter: 0,
  currentList: null,
  loading: false,
  ready: false,
  error: null,
  data: {},
  items: {
    results: [],
    count: null
  },
  page: {
    size: null,
    index: undefined
  },
  rowAlert: {
    success: false,
    fail: false
  },
  drag: {
    page: 1,
    item: false,
    clonedItems: false,
    index: false
  }
}; // Rekey the lists in the state with their paths for easier matching with the
// URL parameters

var initialLists = Keystone.lists;

for (var name in initialLists) {
  if ({}.hasOwnProperty.call(initialLists, name)) {
    var currentList = initialLists[name];
    initialState.data[currentList.path] = new _List["default"](currentList);
    initialState.data[currentList.path].items = {
      results: [],
      count: null
    };
  }
}
/**
 * Manage all lists
 */


function lists() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
  var action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action.type) {
    case _constants.SELECT_LIST:
      var list = state.data[action.id];
      list.id = action.id;
      var items = {
        results: [],
        count: null
      }; // If we have cached items, instead of resetting state.items put the
      // cached items in the state

      if (list.items.count !== null) {
        items = list.items;
      }

      return (0, _objectAssign["default"])({}, state, {
        currentList: list,
        ready: false,
        items: items,
        page: _objectSpread({}, state.page, {
          index: 1,
          size: list.perPage
        })
      });

    case _constants.LOAD_ITEMS:
      var loading = true;
      var ready = state.ready; // If we have cached items ready, don't show a loading indicator
      // while we fetch the new items in the background

      if (state.items.count !== null && loading === false) {
        loading = false;
        ready = true;
      }

      return (0, _objectAssign["default"])({}, state, {
        loading: loading,
        ready: ready,
        loadCounter: action.loadCounter
      });

    case _constants.ITEMS_LOADED:
      // Cache the items in state.data so we can show the already existing
      // items on the next round trip while fetching the new items in the
      // background
      var cachedList = state.data[state.currentList.id];
      cachedList.items = action.items;
      return (0, _objectAssign["default"])({}, state, {
        loading: false,
        ready: true,
        error: null,
        items: action.items,
        data: _objectSpread({}, state.data, _defineProperty({}, state.currentList.id, cachedList)),
        loadCounter: 0
      });

    case _constants.ITEM_LOADING_ERROR:
      return (0, _objectAssign["default"])({}, state, {
        loading: true,
        ready: true,
        error: action.err,
        loadCounter: 0
      });

    case _constants2.DELETE_ITEM:
      var newItems = {
        results: state.items.results.filter(function (el) {
          return el.id !== action.id;
        }),
        count: state.items.count - 1
      };
      var newCachedList = state.data[state.currentList.id];
      newCachedList.items = newItems;
      return (0, _objectAssign["default"])({}, state, {
        items: newItems,
        data: _objectSpread({}, state.data, _defineProperty({}, state.currentList.id, newCachedList))
      });

    case _constants.SET_CURRENT_PAGE:
      console.log(action.index);
      return (0, _objectAssign["default"])({}, state, {
        loading: true,
        page: _objectSpread({}, state.page, {
          index: action.index
        })
      });

    case _constants.SET_ROW_ALERT:
      if (action.data.reset === true) {
        return (0, _objectAssign["default"])({}, state, {
          rowAlert: {
            success: false,
            fail: false
          }
        });
      }

      return (0, _objectAssign["default"])({}, state, {
        rowAlert: _objectSpread({}, state.rowAlert, action.data)
      });

    case _constants.RESET_DRAG_PAGE:
      return (0, _objectAssign["default"])({}, state, {
        drag: _objectSpread({}, state.drag, {
          page: state.page.index
        })
      });

    case _constants.RESET_DRAG_ITEMS:
      return (0, _objectAssign["default"])({}, state, {
        drag: _objectSpread({}, state.drag, {
          clonedItems: state.items
        })
      });

    case _constants.SET_DRAG_ITEM:
      return (0, _objectAssign["default"])({}, state, {
        drag: _objectSpread({}, state.drag, {
          item: action.item
        })
      });

    case _constants.SET_DRAG_INDEX:
      return (0, _objectAssign["default"])({}, state, {
        drag: _objectSpread({}, state.drag, {
          index: action.index
        })
      });

    case _constants.QUERY_HAS_CHANGED:
      var index = parseInt(action.parsedQuery.currentPage) || 1;
      return (0, _objectAssign["default"])({}, state, {
        loading: true,
        page: _objectSpread({}, state.page, {
          index: index
        })
      });

    case _constants.DRAG_MOVE_ITEM:
      // TODO: option to use manageMode for sortOrder
      var currentItems = state.items.results;
      var item = currentItems[action.prevIndex]; // Remove item at prevIndex from array and save that array in
      // itemsWithoutItem

      var itemsWithoutItem = currentItems.slice(0, action.prevIndex).concat(currentItems.slice(action.prevIndex + 1, currentItems.length)); // Add item back in at new index

      itemsWithoutItem.splice(action.newIndex, 0, item);
      return (0, _objectAssign["default"])({}, state, {
        items: _objectSpread({}, state.items, {
          results: itemsWithoutItem
        })
      });

    default:
      return state;
  }
}

var _default = lists;
exports["default"] = _default;

},{"../../../../utils/List":150,"../../Item/constants":100,"../constants":127,"object-assign":555}],131:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _elemental = require("../elemental");

var _string = require("../../utils/string");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * This renders alerts for API success and error responses.
 *   Error format: {
 *     error: 'validation errors' // The unique error type identifier
 *     detail: { ... } // Optional details specific to that error type
 *   }
 *   Success format: {
 *     success: 'item updated', // The unique success type identifier
 *     details: { ... } // Optional details specific to that success type
 *   }
 *   Eventually success and error responses should be handled individually
 *   based on their type. For example: validation errors should be displayed next
 *   to each invalid field and signin errors should promt the user to sign in.
 */
var AlertMessages = _react["default"].createClass({
  displayName: 'AlertMessages',
  propTypes: {
    alerts: _react["default"].PropTypes.shape({
      error: _react["default"].PropTypes.Object,
      success: _react["default"].PropTypes.Object
    })
  },
  getDefaultProps: function getDefaultProps() {
    return {
      alerts: {}
    };
  },
  renderValidationErrors: function renderValidationErrors() {
    var errors = this.props.alerts.error.detail;

    if (errors.name === 'ValidationError') {
      errors = errors.errors;
    }

    var errorCount = Object.keys(errors).length;
    var alertContent;
    var messages = Object.keys(errors).map(function (path) {
      if (errorCount > 1) {
        return _react["default"].createElement("li", {
          key: path
        }, (0, _string.upcase)(errors[path].error || errors[path].message));
      } else {
        return _react["default"].createElement("div", {
          key: path
        }, (0, _string.upcase)(errors[path].error || errors[path].message));
      }
    });

    if (errorCount > 1) {
      alertContent = _react["default"].createElement("div", null, _react["default"].createElement("h4", null, "There were ", errorCount, " errors creating the new item:"), _react["default"].createElement("ul", null, messages));
    } else {
      alertContent = messages;
    }

    return _react["default"].createElement(_elemental.Alert, {
      color: "danger"
    }, alertContent);
  },
  render: function render() {
    var _this$props$alerts = this.props.alerts,
        error = _this$props$alerts.error,
        success = _this$props$alerts.success;

    if (error) {
      // Render error alerts
      switch (error.error) {
        case 'validation errors':
          return this.renderValidationErrors();

        case 'error':
          if (error.detail.name === 'ValidationError') {
            return this.renderValidationErrors();
          } else {
            return _react["default"].createElement(_elemental.Alert, {
              color: "danger"
            }, (0, _string.upcase)(error.error));
          }

        default:
          return _react["default"].createElement(_elemental.Alert, {
            color: "danger"
          }, (0, _string.upcase)(error.error));
      }
    }

    if (success) {
      // Render success alerts
      return _react["default"].createElement(_elemental.Alert, {
        color: "success"
      }, (0, _string.upcase)(success.success));
    }

    return null; // No alerts, render nothing
  }
});

module.exports = AlertMessages;

},{"../../utils/string":156,"../elemental":73,"react":undefined}],132:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _elemental = require("../elemental");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ConfirmationDialog(_ref) {
  var cancelLabel = _ref.cancelLabel,
      children = _ref.children,
      confirmationLabel = _ref.confirmationLabel,
      confirmationType = _ref.confirmationType,
      html = _ref.html,
      isOpen = _ref.isOpen,
      onCancel = _ref.onCancel,
      onConfirmation = _ref.onConfirmation,
      props = _objectWithoutProperties(_ref, ["cancelLabel", "children", "confirmationLabel", "confirmationType", "html", "isOpen", "onCancel", "onConfirmation"]);

  // Property Violation
  if (children && html) {
    console.error('Warning: FormNote cannot render `children` and `html`. You must provide one or the other.');
  }

  return _react["default"].createElement(_elemental.Modal.Dialog, {
    backdropClosesModal: true,
    isOpen: isOpen,
    onClose: onCancel,
    width: 400
  }, html ? _react["default"].createElement(_elemental.Modal.Body, _extends({}, props, {
    dangerouslySetInnerHTML: {
      __html: html
    }
  })) : _react["default"].createElement(_elemental.Modal.Body, props, children), _react["default"].createElement(_elemental.Modal.Footer, null, _react["default"].createElement(_elemental.Button, {
    autoFocus: true,
    size: "small",
    "data-button-type": "confirm",
    color: confirmationType,
    onClick: onConfirmation
  }, confirmationLabel), _react["default"].createElement(_elemental.Button, {
    size: "small",
    "data-button-type": "cancel",
    variant: "link",
    color: "cancel",
    onClick: onCancel
  }, cancelLabel)));
}

;
ConfirmationDialog.propTypes = {
  body: _react.PropTypes.string,
  cancelLabel: _react.PropTypes.string,
  confirmationLabel: _react.PropTypes.string,
  confirmationType: _react.PropTypes.oneOf(['danger', 'primary', 'success', 'warning']),
  onCancel: _react.PropTypes.func,
  onConfirmation: _react.PropTypes.func
};
ConfirmationDialog.defaultProps = {
  cancelLabel: 'Cancel',
  confirmationLabel: 'Okay',
  confirmationType: 'danger',
  isOpen: false
};
var _default = ConfirmationDialog;
exports["default"] = _default;

},{"../elemental":73,"react":undefined}],133:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _objectAssign = _interopRequireDefault(require("object-assign"));

var _vkey = _interopRequireDefault(require("vkey"));

var _AlertMessages = _interopRequireDefault(require("./AlertMessages"));

var _FieldTypes = require("FieldTypes");

var _InvalidFieldType = _interopRequireDefault(require("./InvalidFieldType"));

var _elemental = require("../elemental");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * The form that's visible when "Create <ItemName>" is clicked on either the
 * List screen or the Item screen
 */
var CreateForm = _react["default"].createClass({
  displayName: 'CreateForm',
  propTypes: {
    err: _react["default"].PropTypes.object,
    isOpen: _react["default"].PropTypes.bool,
    list: _react["default"].PropTypes.object,
    onCancel: _react["default"].PropTypes.func,
    onCreate: _react["default"].PropTypes.func
  },
  getDefaultProps: function getDefaultProps() {
    return {
      err: null,
      isOpen: false
    };
  },
  getInitialState: function getInitialState() {
    var _this = this;

    // Set the field values to their default values when first rendering the
    // form. (If they have a default value, that is)
    var values = {};
    Object.keys(this.props.list.fields).forEach(function (key) {
      var field = _this.props.list.fields[key];
      var FieldComponent = _FieldTypes.Fields[field.type];
      values[field.path] = FieldComponent.getDefaultValue(field);
    });
    return {
      values: values,
      alerts: {}
    };
  },
  componentDidMount: function componentDidMount() {
    document.body.addEventListener('keyup', this.handleKeyPress, false);
  },
  componentWillUnmount: function componentWillUnmount() {
    document.body.removeEventListener('keyup', this.handleKeyPress, false);
  },
  handleKeyPress: function handleKeyPress(evt) {
    if (_vkey["default"][evt.keyCode] === '<escape>') {
      this.props.onCancel();
    }
  },
  // Handle input change events
  handleChange: function handleChange(event) {
    var values = (0, _objectAssign["default"])({}, this.state.values);
    values[event.path] = event.value;
    this.setState({
      values: values
    });
  },
  // Set the props of a field
  getFieldProps: function getFieldProps(field) {
    var props = (0, _objectAssign["default"])({}, field);
    props.value = this.state.values[field.path];
    props.values = this.state.values;
    props.onChange = this.handleChange;
    props.mode = 'create';
    props.key = field.path;
    return props;
  },
  // Create a new item when the form is submitted
  submitForm: function submitForm(event) {
    var _this2 = this;

    event.preventDefault();
    var createForm = event.target;
    var formData = new FormData(createForm);
    this.props.list.createItem(formData, function (err, data) {
      if (data) {
        if (_this2.props.onCreate) {
          _this2.props.onCreate(data);
        } else {
          // Clear form
          _this2.setState({
            values: {},
            alerts: {
              success: {
                success: 'Item created'
              }
            }
          });
        }
      } else {
        if (!err) {
          err = {
            error: 'connection error'
          };
        } // If we get a database error, show the database error message
        // instead of only saying "Database error"


        if (err.error === 'database error') {
          err.error = err.detail.errmsg;
        }

        _this2.setState({
          alerts: {
            error: err
          }
        });
      }
    });
  },
  // Render the form itself
  renderForm: function renderForm() {
    var _this3 = this;

    if (!this.props.isOpen) return;
    var form = [];
    var list = this.props.list;
    var nameField = this.props.list.nameField;
    var focusWasSet; // If the name field is an initial one, we need to render a proper
    // input for it

    if (list.nameIsInitial) {
      var nameFieldProps = this.getFieldProps(nameField);
      nameFieldProps.autoFocus = focusWasSet = true;

      if (nameField.type === 'text') {
        nameFieldProps.className = 'item-name-field';
        nameFieldProps.placeholder = nameField.label;
        nameFieldProps.label = '';
      }

      form.push(_react["default"].createElement(_FieldTypes.Fields[nameField.type], nameFieldProps));
    } // Render inputs for all initial fields


    Object.keys(list.initialFields).forEach(function (key) {
      var field = list.fields[list.initialFields[key]]; // If there's something weird passed in as field type, render the
      // invalid field type component

      if (typeof _FieldTypes.Fields[field.type] !== 'function') {
        form.push(_react["default"].createElement(_InvalidFieldType["default"], {
          type: field.type,
          path: field.path,
          key: field.path
        }));
        return;
      } // Get the props for the input field


      var fieldProps = _this3.getFieldProps(field); // If there was no focusRef set previously, set the current field to
      // be the one to be focussed. Generally the first input field, if
      // there's an initial name field that takes precedence.


      if (!focusWasSet) {
        fieldProps.autoFocus = focusWasSet = true;
      }

      form.push(_react["default"].createElement(_FieldTypes.Fields[field.type], fieldProps));
    });
    return _react["default"].createElement(_elemental.Form, {
      layout: "horizontal",
      onSubmit: this.submitForm
    }, _react["default"].createElement(_elemental.Modal.Header, {
      text: 'Create a new ' + list.singular,
      showCloseButton: true
    }), _react["default"].createElement(_elemental.Modal.Body, null, _react["default"].createElement(_AlertMessages["default"], {
      alerts: this.state.alerts
    }), form), _react["default"].createElement(_elemental.Modal.Footer, null, _react["default"].createElement(_elemental.Button, {
      color: "success",
      type: "submit",
      "data-button-type": "submit"
    }, "Create"), _react["default"].createElement(_elemental.Button, {
      variant: "link",
      color: "cancel",
      "data-button-type": "cancel",
      onClick: this.props.onCancel
    }, "Cancel")));
  },
  render: function render() {
    return _react["default"].createElement(_elemental.Modal.Dialog, {
      isOpen: this.props.isOpen,
      onClose: this.props.onCancel,
      backdropClosesModal: true
    }, this.renderForm());
  }
});

module.exports = CreateForm;

},{"../elemental":73,"./AlertMessages":131,"./InvalidFieldType":136,"FieldTypes":undefined,"object-assign":555,"react":undefined,"vkey":undefined}],134:[function(require,module,exports){
"use strict";

var _react = _interopRequireWildcard(require("react"));

var _elemental = require("../elemental");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

/**
 * A single flash message component. Used by FlashMessages.js
 */
var FlashMessage = _react["default"].createClass({
  displayName: "FlashMessage",
  propTypes: {
    message: _react.PropTypes.oneOfType([_react.PropTypes.object, _react.PropTypes.string]).isRequired,
    type: _react.PropTypes.string
  },
  // Render the message
  renderMessage: function renderMessage(message) {
    // If the message is only a string, render the string
    if (typeof message === 'string') {
      return _react["default"].createElement("span", null, message);
    } // Get the title and the detail of the message


    var title = message.title ? _react["default"].createElement("h4", null, message.title) : null;
    var detail = message.detail ? _react["default"].createElement("p", null, message.detail) : null; // If the message has a list attached, render a <ul>

    var list = message.list ? _react["default"].createElement("ul", {
      style: {
        marginBottom: 0
      }
    }, message.list.map(function (item, i) {
      return _react["default"].createElement("li", {
        key: "i".concat(i)
      }, item);
    })) : null;
    return _react["default"].createElement("span", null, title, detail, list);
  },
  render: function render() {
    var _this$props = this.props,
        message = _this$props.message,
        type = _this$props.type;
    return _react["default"].createElement(_elemental.Alert, {
      color: type
    }, this.renderMessage(message));
  }
});

module.exports = FlashMessage;

},{"../elemental":73,"react":undefined}],135:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _lodash = _interopRequireDefault(require("lodash"));

var _FlashMessage = _interopRequireDefault(require("./FlashMessage"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * Render a few flash messages, e.g. errors, success messages, warnings,...
 *
 * Use like this:
 * <FlashMessages
 *   messages={{
 *	   error: [{
 *	     title: 'There is a network problem',
 *	     detail: 'Please try again later...',
 *	   }],
 *   }}
 * />
 *
 * Instead of error, it can also be hilight, info, success or warning
 */
var FlashMessages = _react["default"].createClass({
  displayName: 'FlashMessages',
  propTypes: {
    messages: _react["default"].PropTypes.oneOfType([_react["default"].PropTypes.bool, _react["default"].PropTypes.shape({
      error: _react["default"].PropTypes.array,
      hilight: _react["default"].PropTypes.array,
      info: _react["default"].PropTypes.array,
      success: _react["default"].PropTypes.array,
      warning: _react["default"].PropTypes.array
    })])
  },
  // Render messages by their type
  renderMessages: function renderMessages(messages, type) {
    if (!messages || !messages.length) return null;
    return messages.map(function (message, i) {
      return _react["default"].createElement(_FlashMessage["default"], {
        message: message,
        type: type,
        key: "i".concat(i)
      });
    });
  },
  // Render the individual messages based on their type
  renderTypes: function renderTypes(types) {
    var _this = this;

    return Object.keys(types).map(function (type) {
      return _this.renderMessages(types[type], type);
    });
  },
  render: function render() {
    if (!this.props.messages) return null;
    return _react["default"].createElement("div", {
      className: "flash-messages"
    }, _lodash["default"].isPlainObject(this.props.messages) && this.renderTypes(this.props.messages));
  }
});

module.exports = FlashMessages;

},{"./FlashMessage":134,"lodash":undefined,"react":undefined}],136:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * Renders an "Invalid Field Type" error
 */
var InvalidFieldType = function InvalidFieldType(props) {
  return _react["default"].createElement("div", {
    className: "alert alert-danger"
  }, "Invalid field type ", _react["default"].createElement("strong", null, props.type), " at path ", _react["default"].createElement("strong", null, props.path));
};

InvalidFieldType.propTypes = {
  path: _react["default"].PropTypes.string,
  type: _react["default"].PropTypes.string
};
module.exports = InvalidFieldType;

},{"react":undefined}],137:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _glamor = require("glamor");

var _theme = _interopRequireDefault(require("../../theme"));

var _color = require("../../utils/color");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function Kbd(_ref) {
  var className = _ref.className,
      props = _objectWithoutProperties(_ref, ["className"]);

  props.className = (0, _glamor.css)(classes.kbd);
  return _react["default"].createElement("kbd", props);
}

;
var classes = {
  kbd: {
    backgroundColor: _theme["default"].color.body,
    borderRadius: 3,
    border: "1px solid #ccc",
    borderBottomColor: (0, _color.darken)('#ccc', 4),
    borderTopColor: (0, _color.lighten)('#ccc', 4),
    boxShadow: "0 1px 1px rgba(0, 0, 0, 0.12), 0 2px 0 0 rgba(255, 255, 255, 0.7) inset",
    display: 'inline-block',
    fontFamily: 'Consolas, "Liberation Mono", Courier, monospace',
    fontSize: '0.85em',
    fontWeight: 700,
    lineHeight: 'inherit',
    padding: '1px 4px',
    whiteSpace: 'nowrap',
    // little hack to tweak "visual-middle" alignment
    position: 'relative',
    top: -1
  }
};
module.exports = Kbd;

},{"../../theme":149,"../../utils/color":151,"glamor":undefined,"react":undefined}],138:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _blacklist = _interopRequireDefault(require("blacklist"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var PopoutBody = _react["default"].createClass({
  displayName: 'PopoutBody',
  propTypes: {
    children: _react["default"].PropTypes.node.isRequired,
    className: _react["default"].PropTypes.string,
    scrollable: _react["default"].PropTypes.bool
  },
  render: function render() {
    var className = (0, _classnames["default"])('Popout__body', {
      'Popout__scrollable-area': this.props.scrollable
    }, this.props.className);
    var props = (0, _blacklist["default"])(this.props, 'className', 'scrollable');
    return _react["default"].createElement("div", _extends({
      className: className
    }, props));
  }
});

module.exports = PopoutBody;

},{"blacklist":undefined,"classnames":undefined,"react":undefined}],139:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * Render a footer for a popout
 */
var BUTTON_BASE_CLASSNAME = 'Popout__footer__button Popout__footer__button--';

var PopoutFooter = _react["default"].createClass({
  displayName: 'PopoutFooter',
  propTypes: {
    children: _react["default"].PropTypes.node,
    primaryButtonAction: _react["default"].PropTypes.func,
    primaryButtonIsSubmit: _react["default"].PropTypes.bool,
    primaryButtonLabel: _react["default"].PropTypes.string,
    secondaryButtonAction: _react["default"].PropTypes.func,
    secondaryButtonLabel: _react["default"].PropTypes.string
  },
  // Render a primary button
  renderPrimaryButton: function renderPrimaryButton() {
    if (!this.props.primaryButtonLabel) return null;
    return _react["default"].createElement("button", {
      type: this.props.primaryButtonIsSubmit ? 'submit' : 'button',
      className: BUTTON_BASE_CLASSNAME + 'primary',
      onClick: this.props.primaryButtonAction
    }, this.props.primaryButtonLabel);
  },
  // Render a secondary button
  renderSecondaryButton: function renderSecondaryButton() {
    if (!this.props.secondaryButtonAction || !this.props.secondaryButtonLabel) return null;
    return _react["default"].createElement("button", {
      type: "button",
      className: BUTTON_BASE_CLASSNAME + 'secondary',
      onClick: this.props.secondaryButtonAction
    }, this.props.secondaryButtonLabel);
  },
  render: function render() {
    return _react["default"].createElement("div", {
      className: "Popout__footer"
    }, this.renderPrimaryButton(), this.renderSecondaryButton(), this.props.children);
  }
});

module.exports = PopoutFooter;

},{"react":undefined}],140:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactAddonsCssTransitionGroup = _interopRequireDefault(require("react-addons-css-transition-group"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * Render a header for a popout
 */
var PopoutHeader = _react["default"].createClass({
  displayName: 'PopoutHeader',
  propTypes: {
    leftAction: _react["default"].PropTypes.func,
    leftIcon: _react["default"].PropTypes.string,
    title: _react["default"].PropTypes.string.isRequired,
    transitionDirection: _react["default"].PropTypes.oneOf(['next', 'prev'])
  },
  render: function render() {
    // If we have a left action and a left icon, render a header button
    var headerButton = this.props.leftAction && this.props.leftIcon ? _react["default"].createElement("button", {
      key: 'button_' + this.props.transitionDirection,
      type: "button",
      className: 'Popout__header__button octicon octicon-' + this.props.leftIcon,
      onClick: this.props.leftAction
    }) : null; // If we have a title, render it

    var headerTitle = this.props.title ? _react["default"].createElement("span", {
      key: 'title_' + this.props.transitionDirection,
      className: "Popout__header__label"
    }, this.props.title) : null;
    return _react["default"].createElement("div", {
      className: "Popout__header"
    }, _react["default"].createElement(_reactAddonsCssTransitionGroup["default"], {
      transitionName: "Popout__header__button",
      transitionEnterTimeout: 200,
      transitionLeaveTimeout: 200
    }, headerButton), _react["default"].createElement(_reactAddonsCssTransitionGroup["default"], {
      transitionName: 'Popout__pane-' + this.props.transitionDirection,
      transitionEnterTimeout: 360,
      transitionLeaveTimeout: 360
    }, headerTitle));
  }
});

module.exports = PopoutHeader;

},{"react":undefined,"react-addons-css-transition-group":undefined}],141:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _blacklist = _interopRequireDefault(require("blacklist"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var PopoutList = _react["default"].createClass({
  displayName: 'PopoutList',
  propTypes: {
    children: _react["default"].PropTypes.node.isRequired,
    className: _react["default"].PropTypes.string
  },
  render: function render() {
    var className = (0, _classnames["default"])('PopoutList', this.props.className);
    var props = (0, _blacklist["default"])(this.props, 'className');
    return _react["default"].createElement("div", _extends({
      className: className
    }, props));
  }
});

module.exports = PopoutList; // expose the child to the top level export

module.exports.Item = require('./PopoutListItem');
module.exports.Heading = require('./PopoutListHeading');

},{"./PopoutListHeading":142,"./PopoutListItem":143,"blacklist":undefined,"classnames":undefined,"react":undefined}],142:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _blacklist = _interopRequireDefault(require("blacklist"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var PopoutListHeading = _react["default"].createClass({
  displayName: 'PopoutListHeading',
  propTypes: {
    children: _react["default"].PropTypes.node.isRequired,
    className: _react["default"].PropTypes.string
  },
  render: function render() {
    var className = (0, _classnames["default"])('PopoutList__heading', this.props.className);
    var props = (0, _blacklist["default"])(this.props, 'className');
    return _react["default"].createElement("div", _extends({
      className: className
    }, props));
  }
});

module.exports = PopoutListHeading;

},{"blacklist":undefined,"classnames":undefined,"react":undefined}],143:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _blacklist = _interopRequireDefault(require("blacklist"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var PopoutListItem = _react["default"].createClass({
  displayName: 'PopoutListItem',
  propTypes: {
    icon: _react["default"].PropTypes.string,
    iconHover: _react["default"].PropTypes.string,
    isSelected: _react["default"].PropTypes.bool,
    label: _react["default"].PropTypes.string.isRequired,
    onClick: _react["default"].PropTypes.func
  },
  getInitialState: function getInitialState() {
    return {
      hover: false
    };
  },
  hover: function hover() {
    this.setState({
      hover: true
    });
  },
  unhover: function unhover() {
    this.setState({
      hover: false
    });
  },
  // Render an icon
  renderIcon: function renderIcon() {
    if (!this.props.icon) return null;
    var icon = this.state.hover && this.props.iconHover ? this.props.iconHover : this.props.icon;
    var iconClassname = (0, _classnames["default"])('PopoutList__item__icon octicon', 'octicon-' + icon);
    return _react["default"].createElement("span", {
      className: iconClassname
    });
  },
  render: function render() {
    var itemClassname = (0, _classnames["default"])('PopoutList__item', {
      'is-selected': this.props.isSelected
    });
    var props = (0, _blacklist["default"])(this.props, 'className', 'icon', 'iconHover', 'isSelected', 'label');
    return _react["default"].createElement("button", _extends({
      type: "button",
      title: this.props.label,
      className: itemClassname,
      onFocus: this.hover,
      onBlur: this.unhover,
      onMouseOver: this.hover,
      onMouseOut: this.unhover
    }, props), this.renderIcon(), _react["default"].createElement("span", {
      className: "PopoutList__item__label"
    }, this.props.label));
  }
});

module.exports = PopoutListItem;

},{"blacklist":undefined,"classnames":undefined,"react":undefined}],144:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _blacklist = _interopRequireDefault(require("blacklist"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var PopoutPane = _react["default"].createClass({
  displayName: 'PopoutPane',
  propTypes: {
    children: _react["default"].PropTypes.node.isRequired,
    className: _react["default"].PropTypes.string,
    onLayout: _react["default"].PropTypes.func
  },
  getDefaultProps: function getDefaultProps() {
    return {
      onLayout: function onLayout() {}
    };
  },
  componentDidMount: function componentDidMount() {
    this.props.onLayout(this.refs.el.offsetHeight);
  },
  render: function render() {
    var className = (0, _classnames["default"])('Popout__pane', this.props.className);
    var props = (0, _blacklist["default"])(this.props, 'className', 'onLayout');
    return _react["default"].createElement("div", _extends({
      ref: "el",
      className: className
    }, props));
  }
});

module.exports = PopoutPane;

},{"blacklist":undefined,"classnames":undefined,"react":undefined}],145:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _Portal = _interopRequireDefault(require("../Portal"));

var _reactAddonsCssTransitionGroup = _interopRequireDefault(require("react-addons-css-transition-group"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * A Popout component.
 * One can also add a Header (Popout/Header), a Footer
 * (Popout/Footer), a Body (Popout/Body) and a Pan (Popout/Pane).
 */
var SIZES = {
  arrowHeight: 12,
  arrowWidth: 16,
  horizontalMargin: 20
};

var Popout = _react["default"].createClass({
  displayName: 'Popout',
  propTypes: {
    isOpen: _react["default"].PropTypes.bool,
    onCancel: _react["default"].PropTypes.func,
    onSubmit: _react["default"].PropTypes.func,
    relativeToID: _react["default"].PropTypes.string.isRequired,
    width: _react["default"].PropTypes.number
  },
  getDefaultProps: function getDefaultProps() {
    return {
      width: 320
    };
  },
  getInitialState: function getInitialState() {
    return {};
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (!this.props.isOpen && nextProps.isOpen) {
      window.addEventListener('resize', this.calculatePosition);
      this.calculatePosition(nextProps.isOpen);
    } else if (this.props.isOpen && !nextProps.isOpen) {
      window.removeEventListener('resize', this.calculatePosition);
    }
  },
  getPortalDOMNode: function getPortalDOMNode() {
    return this.refs.portal.getPortalDOMNode();
  },
  calculatePosition: function calculatePosition(isOpen) {
    if (!isOpen) return;
    var posNode = document.getElementById(this.props.relativeToID);
    var pos = {
      top: 0,
      left: 0,
      width: posNode.offsetWidth,
      height: posNode.offsetHeight
    };

    while (posNode.offsetParent) {
      pos.top += posNode.offsetTop;
      pos.left += posNode.offsetLeft;
      posNode = posNode.offsetParent;
    }

    var leftOffset = Math.max(pos.left + pos.width / 2 - this.props.width / 2, SIZES.horizontalMargin);
    var topOffset = pos.top + pos.height + SIZES.arrowHeight;
    var spaceOnRight = window.innerWidth - (leftOffset + this.props.width + SIZES.horizontalMargin);

    if (spaceOnRight < 0) {
      leftOffset = leftOffset + spaceOnRight;
    }

    var arrowLeftOffset = leftOffset === SIZES.horizontalMargin ? pos.left + pos.width / 2 - SIZES.arrowWidth / 2 - SIZES.horizontalMargin : null;
    var newStateAvaliable = this.state.leftOffset !== leftOffset || this.state.topOffset !== topOffset || this.state.arrowLeftOffset !== arrowLeftOffset;

    if (newStateAvaliable) {
      this.setState({
        leftOffset: leftOffset,
        topOffset: topOffset,
        arrowLeftOffset: arrowLeftOffset
      });
    }
  },
  renderPopout: function renderPopout() {
    if (!this.props.isOpen) return null;
    var width = this.props.width;
    var _this$state = this.state,
        arrowLeftOffset = _this$state.arrowLeftOffset,
        left = _this$state.leftOffset,
        top = _this$state.topOffset;
    var arrowStyles = arrowLeftOffset ? {
      left: 0,
      marginLeft: arrowLeftOffset
    } : null;
    return _react["default"].createElement("div", {
      className: "Popout",
      style: {
        left: left,
        top: top,
        width: width
      }
    }, _react["default"].createElement("span", {
      className: "Popout__arrow",
      style: arrowStyles
    }), _react["default"].createElement("div", {
      className: "Popout__inner"
    }, this.props.children));
  },
  renderBlockout: function renderBlockout() {
    if (!this.props.isOpen) return;
    return _react["default"].createElement("div", {
      className: "blockout",
      onClick: this.props.onCancel
    });
  },
  render: function render() {
    return _react["default"].createElement(_Portal["default"], {
      className: "Popout-wrapper",
      ref: "portal"
    }, _react["default"].createElement(_reactAddonsCssTransitionGroup["default"], {
      transitionEnterTimeout: 200,
      transitionLeaveTimeout: 200,
      transitionName: "Popout"
    }, this.renderPopout()), this.renderBlockout());
  }
});

module.exports = Popout; // expose the child to the top level export

module.exports.Header = require('./PopoutHeader');
module.exports.Body = require('./PopoutBody');
module.exports.Footer = require('./PopoutFooter');
module.exports.Pane = require('./PopoutPane');

},{"../Portal":146,"./PopoutBody":138,"./PopoutFooter":139,"./PopoutHeader":140,"./PopoutPane":144,"react":undefined,"react-addons-css-transition-group":undefined}],146:[function(require,module,exports){
"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * Used by the Popout component and the Lightbox component of the fields for
 * popouts. Renders a non-react DOM node.
 */
module.exports = _react["default"].createClass({
  displayName: 'Portal',
  portalElement: null,
  // eslint-disable-line react/sort-comp
  componentDidMount: function componentDidMount() {
    var el = document.createElement('div');
    document.body.appendChild(el);
    this.portalElement = el;
    this.componentDidUpdate();
  },
  componentWillUnmount: function componentWillUnmount() {
    document.body.removeChild(this.portalElement);
  },
  componentDidUpdate: function componentDidUpdate() {
    _reactDom["default"].render(_react["default"].createElement("div", this.props), this.portalElement);
  },
  getPortalDOMNode: function getPortalDOMNode() {
    return this.portalElement;
  },
  render: function render() {
    return null;
  }
});

},{"react":undefined,"react-dom":undefined}],147:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _reactRouterRedux = require("react-router-redux");

var _redux = require("redux");

var _reactRouter = require("react-router");

var _reduxThunk = _interopRequireDefault(require("redux-thunk"));

var _reduxSaga = _interopRequireDefault(require("redux-saga"));

var _main = _interopRequireDefault(require("./screens/List/reducers/main"));

var _active = _interopRequireDefault(require("./screens/List/reducers/active"));

var _reducer = _interopRequireDefault(require("./screens/Item/reducer"));

var _reducer2 = _interopRequireDefault(require("./screens/Home/reducer"));

var _sagas = _interopRequireDefault(require("./sagas"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// Combine the reducers to one state
var reducers = (0, _redux.combineReducers)({
  lists: _main["default"],
  active: _active["default"],
  item: _reducer["default"],
  home: _reducer2["default"],
  routing: _reactRouterRedux.routerReducer
});
var sagaMiddleware = (0, _reduxSaga["default"])(); // Create the store

var store = (0, _redux.createStore)(reducers, (0, _redux.compose)((0, _redux.applyMiddleware)( // Support thunked actions and react-router-redux
_reduxThunk["default"], (0, _reactRouterRedux.routerMiddleware)(_reactRouter.browserHistory), sagaMiddleware), // Support the Chrome DevTools extension
window.devToolsExtension ? window.devToolsExtension() : function (f) {
  return f;
}));
sagaMiddleware.run(_sagas["default"]);
var _default = store;
exports["default"] = _default;

},{"./sagas":76,"./screens/Home/reducer":84,"./screens/Item/reducer":102,"./screens/List/reducers/active":129,"./screens/List/reducers/main":130,"react-router":undefined,"react-router-redux":undefined,"redux":undefined,"redux-saga":undefined,"redux-thunk":undefined}],148:[function(require,module,exports){
"use strict";

/**
 * Constants
 */
// breakpoints
exports.breakpoint = {
  xs: 480,
  sm: 768,
  md: 992,
  lg: 1200
}; // border radii

exports.borderRadius = {
  xs: 2,
  sm: 4,
  md: 8,
  lg: 16,
  xl: 32
}; // color

exports.color = {
  appDanger: '#d64242',
  appInfo: '#56cdfc',
  appPrimary: '#1385e5',
  appSuccess: '#34c240',
  appWarning: '#fa9f47'
}; // spacing

exports.spacing = {
  xs: 5,
  sm: 10,
  md: 20,
  lg: 40,
  xl: 80
}; // table constants

exports.TABLE_CONTROL_COLUMN_WIDTH = 26; // icon + padding

exports.NETWORK_ERROR_RETRY_DELAY = 500; // in ms

},{}],149:[function(require,module,exports){
"use strict";

/* eslint-disable key-spacing */
var theme = {};

var _require = require('./utils/color'),
    blend = _require.blend,
    darken = _require.darken,
    fade = _require.fade,
    lighten = _require.lighten; // ==============================
// COMMON
// ==============================
// breakpoint


theme.breakpointNumeric = {
  mobile: 480,
  tabletPortrait: 768,
  tabletLandscape: 992,
  desktop: 1200
};
theme.breakpoint = {
  tabletPortraitMin: theme.breakpointNumeric.mobile + 1 + 'px',
  tabletLandscapeMin: theme.breakpointNumeric.tabletPortrait + 1 + 'px',
  desktopMin: theme.breakpointNumeric.tabletLandscape + 1 + 'px',
  desktopLargeMin: theme.breakpointNumeric.desktop + 1 + 'px',
  mobileMax: theme.breakpointNumeric.mobile + 'px',
  tabletPortraitMax: theme.breakpointNumeric.tabletPortrait + 'px',
  tabletLandscapeMax: theme.breakpointNumeric.tabletLandscape + 'px',
  desktopMax: theme.breakpointNumeric.desktop + 'px'
}; // container

theme.container = {
  gutter: 20,
  size: {
    small: 750,
    medium: 970,
    large: 1170
  }
}; // color

theme.color = {
  body: '#fafafa',
  link: '#1385e5',
  linkHover: lighten('#1385e5', 10),
  text: '#1A1A1A',
  // contextual
  success: '#34c240',
  create: '#34c240',
  // alias for success
  primary: '#1385e5',
  info: '#1385e5',
  // alias for primary
  warning: '#FA3',
  danger: '#d64242',
  error: '#d64242',
  // alias for danger
  // neutrals
  gray90: '#1A1A1A',
  gray80: '#333',
  gray70: '#4D4D4D',
  gray60: '#666',
  gray50: '#7F7F7F',
  gray40: '#999',
  gray30: '#B3B3B3',
  gray20: '#CCC',
  gray15: '#D9D9D9',
  gray10: '#E5E5E5',
  gray05: '#F2F2F2',
  // social
  facebook: '#3B5998',
  google: '#DC4E41',
  instagram: '#3f729b',
  pinterest: '#bd081c',
  tumblr: '#35465c',
  twitter: '#55ACEE',
  youtube: '#cd201f',
  vimeo: '#1ab7ea'
}; // border radii

theme.borderRadius = {
  small: '0.125rem',
  "default": '0.3rem',
  large: '0.5rem'
}; // spacing

theme.spacing = {
  xsmall: 5,
  small: 10,
  "default": 20,
  large: 30,
  xlarge: 40,
  xxlarge: 60
}; // ==============================
// ELEMENTAL SPECIFIC
// ==============================
// button

theme.button = {
  borderRadius: theme.borderRadius["default"],
  borderWidth: 1,
  font: {
    weight: 500
  },
  paddingHorizontal: '1em',
  "default": {
    bgColor: theme.color.primary,
    borderColor: blend(theme.color.primary, theme.color.body, 60),
    textColor: theme.color.primary
  },
  primary: {
    bgColor: theme.color.primary,
    borderColor: blend(theme.color.primary, theme.color.body, 60),
    textColor: theme.color.primary
  },
  success: {
    bgColor: theme.color.success,
    borderColor: blend(theme.color.success, theme.color.body, 60),
    textColor: theme.color.success
  },
  warning: {
    bgColor: theme.color.warning,
    borderColor: blend(theme.color.warning, theme.color.body, 60),
    textColor: theme.color.warning
  },
  danger: {
    bgColor: theme.color.danger,
    borderColor: blend(theme.color.danger, theme.color.body, 60),
    textColor: theme.color.danger
  }
}; // blank state

theme.blankstate = {
  background: darken(theme.color.body, 4),
  borderRadius: theme.borderRadius["default"],
  color: theme.color.gray40,
  paddingHorizontal: '2em',
  paddingVertical: '4em'
}; // font

theme.font = {
  family: {
    mono: 'Menlo, Monaco, Consolas, "Courier New", monospace',
    sansSerif: '"Helvetica Neue", Helvetica, Arial, sans-serif',
    serif: 'Georgia, Times New Roman, Times, serif'
  },
  size: {
    xxsmall: '0.65rem',
    xsmall: '0.75rem',
    small: '0.85rem',
    "default": '1rem',
    medium: '1.2rem',
    large: '1.6rem',
    xlarge: '2.4rem',
    xxlarge: '3.2rem'
  }
}; // form

theme.form = {
  label: {
    color: theme.color.gray50,
    fontSize: '1rem',
    fontWeight: 'normal',
    width: 180
  },
  note: {
    color: theme.color.gray40,
    fontSize: '0.9em'
  }
}; // component

theme.component = {
  lineHeight: '2.3em',
  height: '2.4em',
  padding: '1em'
}; // input

theme.input = {
  background: {
    "default": 'white',
    disabled: '#fafafa',
    noedit: darken(theme.color.body, 2)
  },
  placeholderColor: '#aaa',
  lineHeight: theme.component.lineHeight,
  height: theme.component.height,
  border: {
    color: {
      "default": '#ccc',
      focus: theme.color.info,
      hover: '#bbb',
      noedit: darken(theme.color.body, 8)
    },
    radius: theme.borderRadius["default"],
    width: 1
  },
  boxShadow: 'inset 0 1px 1px rgba(0, 0, 0, 0.075)',
  boxShadowFocus: "inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 0 3px ".concat(fade(theme.color.info, 10)),
  paddingHorizontal: '.75em'
}; // select

theme.select = {
  boxShadow: '0 1px 1px rgba(0, 0, 0, 0.075)'
}; // alert

theme.alert = {
  padding: '0.75em  1em',
  margin: '0 0 1em',
  borderWidth: 1,
  borderRadius: theme.borderRadius["default"],
  color: {
    danger: {
      background: fade(theme.color.danger, 10),
      border: fade(theme.color.danger, 10),
      text: theme.color.danger
    },
    info: {
      background: fade(theme.color.primary, 10),
      border: fade(theme.color.primary, 10),
      text: theme.color.primary
    },
    success: {
      background: fade(theme.color.success, 10),
      border: fade(theme.color.success, 10),
      text: theme.color.success
    },
    warning: {
      background: fade(theme.color.warning, 10),
      border: fade(theme.color.warning, 10),
      text: theme.color.warning
    }
  }
}; // glyph

theme.glyph = {
  color: {
    danger: theme.color.danger,
    inherit: 'inherit',
    inverted: 'white',
    primary: theme.color.primary,
    success: theme.color.success,
    warning: theme.color.warning
  },
  size: {
    small: 16,
    medium: 32,
    large: 64
  }
}; // modal

theme.modal = {
  background: 'rgba(0, 0, 0, 0.8)',
  zIndex: 100,
  padding: {
    dialog: {
      horizontal: '1em',
      vertical: 0
    },
    body: {
      horizontal: 0,
      vertical: '1em'
    },
    footer: {
      horizontal: 0,
      vertical: '1em'
    },
    header: {
      horizontal: 0,
      vertical: '0.6em'
    }
  }
}; // pagination

theme.pagination = {
  color: theme.color.gray60,
  hover: {
    background: 'white',
    border: 'rgba(0, 0, 0, 0.1)',
    color: theme.color.gray60
  },
  selected: {
    background: 'rgba(0, 0, 0, 0.05)',
    border: 'transparent',
    color: theme.color.gray60
  },
  disabled: {
    background: 'transparent',
    color: theme.color.gray40
  }
}; // spinner

theme.spinner = {
  color: {
    danger: theme.color.danger,
    "default": theme.color.gray40,
    inverted: 'white',
    primary: theme.color.primary,
    success: theme.color.success,
    warning: theme.color.warning
  },
  size: {
    small: 4,
    medium: 8,
    large: 16
  }
};
module.exports = theme;

},{"./utils/color":151}],150:[function(require,module,exports){
"use strict";

/**
 * Helper method to handle List operations, e.g. creating items, deleting items,
 * getting information about those lists, etc.
 */
var listToArray = require('list-to-array');

var qs = require('qs');

var xhr = require('xhr');

var assign = require('object-assign'); // Filters for truthy elements in an array


var truthy = function truthy(i) {
  return i;
};
/**
 * Get the columns of a list, structured by fields and headings
 *
 * @param  {Object} list The list we want the columns of
 *
 * @return {Array}       The columns
 */


function getColumns(list) {
  return list.uiElements.map(function (col) {
    if (col.type === 'heading') {
      return {
        type: 'heading',
        content: col.content
      };
    } else {
      var field = list.fields[col.field];
      return field ? {
        type: 'field',
        field: field,
        title: field.label,
        path: field.path
      } : null;
    }
  }).filter(truthy);
}
/**
 * Make an array of filters an object keyed by the filtering path
 *
 * @param  {Array} filterArray The array of filters
 *
 * @return {Object}            The corrected filters, keyed by path
 */


function getFilters(filterArray) {
  var filters = {};
  filterArray.forEach(function (filter) {
    filters[filter.field.path] = filter.value;
  });
  return filters;
}

;
/**
 * Get the sorting string for the URI
 *
 * @param  {Array} sort.paths The paths we want to sort
 *
 * @return {String}           All the sorting queries we want as a string
 */

function getSortString(sort) {
  return sort.paths.map(function (i) {
    // If we want to sort inverted, we prefix a "-" before the sort path
    return i.invert ? '-' + i.path : i.path;
  }).filter(truthy).join(',');
}

;
/**
 * Build a query string from a bunch of options
 */

function buildQueryString(options) {
  var query = {};
  if (options.search) query.search = options.search;
  if (options.filters.length) query.filters = JSON.stringify(getFilters(options.filters));
  if (options.columns) query.fields = options.columns.map(function (i) {
    return i.path;
  }).join(',');
  if (options.page && options.page.size) query.limit = options.page.size;
  if (options.page && options.page.index > 1) query.skip = (options.page.index - 1) * options.page.size;
  if (options.sort) query.sort = getSortString(options.sort);
  query.expandRelationshipFields = true;
  return '?' + qs.stringify(query);
}

;
/**
 * The main list helper class
 *
 * @param {Object} options
 */

var List = function List(options) {
  // TODO these options are possibly unused
  assign(this, options);
  this.columns = getColumns(this);
  this.expandedDefaultColumns = this.expandColumns(this.defaultColumns);
  this.defaultColumnPaths = this.expandedDefaultColumns.map(function (i) {
    return i.path;
  }).join(',');
};
/**
 * Create an item via the API
 *
 * @param  {FormData} formData The submitted form data
 * @param  {Function} callback Called after the API call
 */


List.prototype.createItem = function (formData, callback) {
  xhr({
    url: "".concat(Keystone.adminPath, "/api/").concat(this.path, "/create"),
    responseType: 'json',
    method: 'POST',
    headers: assign({}, Keystone.csrf.header),
    body: formData
  }, function (err, resp, data) {
    if (err) callback(err);

    if (resp.statusCode === 200) {
      callback(null, data);
    } else {
      // NOTE: xhr callback will be called with an Error if
      //  there is an error in the browser that prevents
      //  sending the request. A HTTP 500 response is not
      //  going to cause an error to be returned.
      callback(data, null);
    }
  });
};
/**
 * Update a specific item
 *
 * @param  {String}   id       The id of the item we want to update
 * @param  {FormData} formData The submitted form data
 * @param  {Function} callback Called after the API call
 */


List.prototype.updateItem = function (id, formData, callback) {
  xhr({
    url: "".concat(Keystone.adminPath, "/api/").concat(this.path, "/").concat(id),
    responseType: 'json',
    method: 'POST',
    headers: assign({}, Keystone.csrf.header),
    body: formData
  }, function (err, resp, data) {
    if (err) return callback(err);

    if (resp.statusCode === 200) {
      callback(null, data);
    } else {
      callback(data);
    }
  });
};

List.prototype.expandColumns = function (input) {
  var _this = this;

  var nameIncluded = false;
  var cols = listToArray(input).map(function (i) {
    var split = i.split('|');
    var path = split[0];
    var width = split[1];

    if (path === '__name__') {
      path = _this.namePath;
    }

    var field = _this.fields[path];

    if (!field) {
      // TODO: Support arbitary document paths
      if (!_this.hidden) {
        if (path === _this.namePath) {
          console.warn("List ".concat(_this.key, " did not specify any default columns or a name field"));
        } else {
          console.warn("List ".concat(_this.key, " specified an invalid default column: ").concat(path));
        }
      }

      return;
    }

    if (path === _this.namePath) {
      nameIncluded = true;
    }

    return {
      field: field,
      label: field.label,
      path: field.path,
      type: field.type,
      width: width
    };
  }).filter(truthy);

  if (!nameIncluded) {
    cols.unshift({
      type: 'id',
      label: 'ID',
      path: 'id'
    });
  }

  return cols;
};

List.prototype.expandSort = function (input) {
  var _this2 = this;

  var sort = {
    rawInput: input || this.defaultSort,
    isDefaultSort: false
  };
  sort.input = sort.rawInput;

  if (sort.input === '__default__') {
    sort.isDefaultSort = true;
    sort.input = this.sortable ? 'sortOrder' : this.namePath;
  }

  sort.paths = listToArray(sort.input).map(function (path) {
    var invert = false;

    if (path.charAt(0) === '-') {
      invert = true;
      path = path.substr(1);
    } else if (path.charAt(0) === '+') {
      path = path.substr(1);
    }

    var field = _this2.fields[path];

    if (!field) {
      // TODO: Support arbitary document paths
      console.warn('Invalid Sort specified:', path);
      return;
    }

    return {
      field: field,
      type: field.type,
      label: field.label,
      path: field.path,
      invert: invert
    };
  }).filter(truthy);
  return sort;
};
/**
 * Load a specific item via the API
 *
 * @param  {String}   itemId   The id of the item we want to load
 * @param  {Object}   options
 * @param  {Function} callback
 */


List.prototype.loadItem = function (itemId, options, callback) {
  if (arguments.length === 2 && typeof options === 'function') {
    callback = options;
    options = null;
  }

  var url = Keystone.adminPath + '/api/' + this.path + '/' + itemId;
  var query = qs.stringify(options);
  if (query.length) url += '?' + query;
  xhr({
    url: url,
    responseType: 'json'
  }, function (err, resp, data) {
    if (err) return callback(err); // Pass the data as result or error, depending on the statusCode

    if (resp.statusCode === 200) {
      callback(null, data);
    } else {
      callback(data);
    }
  });
};
/**
 * Load all items of a list, optionally passing objects to build a query string
 * for sorting or searching
 *
 * @param  {Object}   options
 * @param  {Function} callback
 */


List.prototype.loadItems = function (options, callback) {
  var url = Keystone.adminPath + '/api/' + this.path + buildQueryString(options);
  xhr({
    url: url,
    responseType: 'json'
  }, function (err, resp, data) {
    if (err) callback(err); // Pass the data as result or error, depending on the statusCode

    if (resp.statusCode === 200) {
      callback(null, data);
    } else {
      callback(data);
    }
  });
};
/**
 * Constructs a download URL to download a list with the current sorting, filtering,
 * selection and searching options
 *
 * @param  {Object} options
 *
 * @return {String}         The download URL
 */


List.prototype.getDownloadURL = function (options) {
  var url = Keystone.adminPath + '/api/' + this.path;
  var parts = [];

  if (options.format !== 'json') {
    options.format = 'csv';
  }

  parts.push(options.search ? 'search=' + options.search : '');
  parts.push(options.filters.length ? 'filters=' + JSON.stringify(getFilters(options.filters)) : '');
  parts.push(options.columns ? 'select=' + options.columns.map(function (i) {
    return i.path;
  }).join(',') : '');
  parts.push(options.sort ? 'sort=' + getSortString(options.sort) : '');
  parts.push('expandRelationshipFields=true');
  return url + '/export.' + options.format + '?' + parts.filter(truthy).join('&');
};
/**
 * Delete a specific item via the API
 *
 * @param  {String}   itemId   The id of the item we want to delete
 * @param  {Function} callback
 */


List.prototype.deleteItem = function (itemId, callback) {
  this.deleteItems([itemId], callback);
};
/**
 * Delete multiple items at once via the API
 *
 * @param  {Array}   itemIds  An array of ids of items we want to delete
 * @param  {Function} callback
 */


List.prototype.deleteItems = function (itemIds, callback) {
  var url = Keystone.adminPath + '/api/' + this.path + '/delete';
  xhr({
    url: url,
    method: 'POST',
    headers: assign({}, Keystone.csrf.header),
    json: {
      ids: itemIds
    }
  }, function (err, resp, body) {
    if (err) return callback(err); // Pass the body as result or error, depending on the statusCode

    if (resp.statusCode === 200) {
      callback(null, body);
    } else {
      callback(body);
    }
  });
};

List.prototype.reorderItems = function (item, oldSortOrder, newSortOrder, pageOptions, callback) {
  var url = Keystone.adminPath + '/api/' + this.path + '/' + item.id + '/sortOrder/' + oldSortOrder + '/' + newSortOrder + '/' + buildQueryString(pageOptions);
  xhr({
    url: url,
    method: 'POST',
    headers: assign({}, Keystone.csrf.header)
  }, function (err, resp, body) {
    if (err) return callback(err);

    try {
      body = JSON.parse(body);
    } catch (e) {
      console.log('Error parsing results json:', e, body);
      return callback(e);
    } // Pass the body as result or error, depending on the statusCode


    if (resp.statusCode === 200) {
      callback(null, body);
    } else {
      callback(body);
    }
  });
};

module.exports = List;

},{"list-to-array":undefined,"object-assign":555,"qs":undefined,"xhr":undefined}],151:[function(require,module,exports){
"use strict";

/**
	Validate Hex
	==============================

	@param {String} hex

	1. remove hash if present
	2. convert from 3 to 6 digit color code & ensure valid hex
*/
function validateHex(color) {
  var hex = color.replace('#', '');

  if (hex.length === 3) {
    return hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
  }

  if (hex.length !== 6) {
    throw new Error("Invalid color value provided: \"".concat(color, "\""));
  }

  return hex;
}

;
/**
	Fade Color
	==============================

	Takes a hexidecimal color, converts it to RGB and applies an alpha value.

	@param {String} color
	@param {Number} opacity (0-100)

	1. convert hex to RGB
	2. combine and add alpha channel
*/

function fade(color) {
  var opacity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
  var decimalFraction = opacity / 100;
  var hex = validateHex(color); // 1.

  var r = parseInt(hex.substring(0, 2), 16);
  var g = parseInt(hex.substring(2, 4), 16);
  var b = parseInt(hex.substring(4, 6), 16); // 2.

  var result = 'rgba(' + r + ',' + g + ',' + b + ',' + decimalFraction + ')';
  return result;
}

;
/**
	Shade Color
	==============================

	Takes a hexidecimal color, converts it to RGB and lightens or darkens

	@param {String} color
	@param {Number} opacity (0-100)

	1. do fancy RGB bitwise operations
	2. combine back into a hex value
*/

function shade(color, percent) {
  var decimalFraction = percent / 100;
  var hex = validateHex(color); // 1.

  var f = parseInt(hex, 16);
  var t = decimalFraction < 0 ? 0 : 255;
  var p = decimalFraction < 0 ? decimalFraction * -1 : decimalFraction;
  var R = f >> 16;
  var G = f >> 8 & 0x00FF;
  var B = f & 0x0000FF; // 2.

  return '#' + (0x1000000 + (Math.round((t - R) * p) + R) * 0x10000 + (Math.round((t - G) * p) + G) * 0x100 + (Math.round((t - B) * p) + B)).toString(16).slice(1);
}

; // shade helpers

var lighten = shade;

function darken(color, percent) {
  return shade(color, percent * -1);
}

;
/**
	Blend Color
	==============================

	Takes two hexidecimal colors and blend them together

	@param {String} color1
	@param {String} color2
	@param {Number} percent (0-100)

	1. do fancy RGB bitwise operations
	2. combine back into a hex value
*/

function blend(color1, color2, percent) {
  var decimalFraction = percent / 100;
  var hex1 = validateHex(color1);
  var hex2 = validateHex(color2); // 1.

  var f = parseInt(hex1, 16);
  var t = parseInt(hex2, 16);
  var R1 = f >> 16;
  var G1 = f >> 8 & 0x00FF;
  var B1 = f & 0x0000FF;
  var R2 = t >> 16;
  var G2 = t >> 8 & 0x00FF;
  var B2 = t & 0x0000FF; // 2.

  return '#' + (0x1000000 + (Math.round((R2 - R1) * decimalFraction) + R1) * 0x10000 + (Math.round((G2 - G1) * decimalFraction) + G1) * 0x100 + (Math.round((B2 - B1) * decimalFraction) + B1)).toString(16).slice(1);
}

module.exports = {
  blend: blend,
  darken: darken,
  fade: fade,
  lighten: lighten
};

},{}],152:[function(require,module,exports){
"use strict";

// ======================
// Concatenate Classnames
// ======================
//
// Support className as an array:
// force classname prop into an array (possibly of arrays) then flatten

/*
	// To use spread the new array into glamor's `css` function

	function Component ({ className, ...props }) {
		props.className = css(
			classes.component,
			...concatClassnames(className)
		);

		return <Component {...props} />;
	};
*/
module.exports = function concatClassnames(className) {
  return [className].reduce(function (a, b) {
    return a.concat(b);
  }, []);
};

},{}],153:[function(require,module,exports){
"use strict";

/**
	Linear Gradient
	==============================

	Short-hand helper for adding a linear gradient to your component.

	- @param {String} sideOrCorner
	- @param {String} top
	- @param {String} bottom
	- @param {String} base (optional)
	- @returns {Object} css linear gradient declaration

	Spread the declaration into your component class:
	------------------------------

	myComponentClass: {
		...linearGradient(red, blue),
	}
*/
function linearGradient(direction, top, bottom) {
  var base = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
  return {
    background: "linear-gradient(".concat(direction, ", ").concat(top, " 0%, ").concat(bottom, " 100%) ").concat(base)
  };
} // Vertical Gradient


function gradientVertical(top, bottom, base) {
  return linearGradient('to bottom', top, bottom, base);
} // Horizontal Gradient


function gradientHorizontal(top, bottom, base) {
  return linearGradient('to right', top, bottom, base);
}
/**
	Border Radius
	==============================

	Short-hand helper for border radii
*/
// top


function borderTopRadius(radius) {
  return {
    borderTopLeftRadius: radius,
    borderTopRightRadius: radius
  };
} // right


function borderRightRadius(radius) {
  return {
    borderBottomRightRadius: radius,
    borderTopRightRadius: radius
  };
} // bottom


function borderBottomRadius(radius) {
  return {
    borderBottomLeftRadius: radius,
    borderBottomRightRadius: radius
  };
} // left


function borderLeftRadius(radius) {
  return {
    borderBottomLeftRadius: radius,
    borderTopLeftRadius: radius
  };
} // Return


module.exports = {
  borderTopRadius: borderTopRadius,
  borderRightRadius: borderRightRadius,
  borderBottomRadius: borderBottomRadius,
  borderLeftRadius: borderLeftRadius,
  gradientHorizontal: gradientHorizontal,
  gradientVertical: gradientVertical
};

},{}],154:[function(require,module,exports){
"use strict";

var _List = _interopRequireDefault(require("./List"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * Exports an object of lists, keyed with their key instead of their name and
 * wrapped with the List helper (./List.js)
 */
exports.listsByKey = {};
exports.listsByPath = {};

for (var key in Keystone.lists) {
  // Guard for-ins
  if ({}.hasOwnProperty.call(Keystone.lists, key)) {
    var list = new _List["default"](Keystone.lists[key]);
    exports.listsByKey[key] = list;
    exports.listsByPath[list.path] = list;
  }
}

},{"./List":150}],155:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkForQueryChange = checkForQueryChange;
exports.normaliseValue = normaliseValue;
exports.createSortQueryParams = createSortQueryParams;
exports.createPageQueryParams = createPageQueryParams;
exports.updateQueryParams = updateQueryParams;
exports.stringifyColumns = stringifyColumns;
exports.parametizeFilters = parametizeFilters;

var _objectAssign = _interopRequireDefault(require("object-assign"));

var _blacklist = _interopRequireDefault(require("blacklist"));

var _isEqual = _interopRequireDefault(require("lodash/isEqual"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function checkForQueryChange(nextProps, thisProps) {
  var query = nextProps.location.query;
  var cachedQuery = nextProps.active.cachedQuery;
  var parsedQuery = Object.assign({}, query, {
    page: parseInt(query.page)
  });
  if (!parsedQuery.page) delete parsedQuery.page;
  var attenuatedQuery = (0, _blacklist["default"])(parsedQuery, 'search');
  var attenuatedCache = (0, _blacklist["default"])(cachedQuery, 'search');
  if (nextProps.location.pathname !== thisProps.location.pathname) return true;
  if (!(0, _isEqual["default"])(attenuatedQuery, attenuatedCache)) return true;
  return false;
}

function normaliseValue(value, benchmark) {
  if (value === benchmark) return void 0;
  return value;
}

function createSortQueryParams(rawInput, defaultSort) {
  return normaliseValue(rawInput, defaultSort);
}

function createPageQueryParams(page, defaultValue) {
  return normaliseValue(page, defaultValue);
}
/**
 * Updates the query parameters with the ones passed as the first argument
 *
 * @param  {Object} params         The new parameters to be added
 * @param  {Object} location       The current location object
 */


function updateQueryParams(params, location) {
  if (!location) return;
  var newParams = (0, _objectAssign["default"])({}, location.query); // Stringify nested objects inside the parameters

  Object.keys(params).forEach(function (i) {
    if (params[i]) {
      newParams[i] = params[i];

      if (_typeof(newParams[i]) === 'object') {
        newParams[i] = JSON.stringify(newParams[i]);
      }
    } else {
      delete newParams[i];
    }
  });
  return newParams;
}
/**
 * Stringify the columns array from the state
 *
 * @param  {Array}  columns            The columns from the active state
 * @param  {String} defaultColumnPaths The default column paths of the current list
 *
 * @return {String}                    The column array, stringified
 */


function stringifyColumns(columns, defaultColumnPaths) {
  if (!columns) {
    return;
  } // Turns [{ path: 'someColumn' }, { path: 'someOtherColumn' }]
  // into ['someColumn', 'someOtherColumn']


  var columnString = columns.map(function (column) {
    return column.path;
  }); // Turns that array into 'someColumn,someOtherColumn'

  if (Array.isArray(columnString)) columnString = columnString.join(','); // If that is the same as the default columns, don't set the query param

  if (columnString === defaultColumnPaths) columnString = undefined;
  return columnString;
}
/**
 * Flattens filters from state into the minimum needed object to be used as a url
 * param
 *
 * @param  {Object} filterArray         The array of filters from state
 */


function parametizeFilters(filterArray) {
  if (!filterArray || filterArray.length === 0) {
    return;
  }

  return filterArray.map(function (filter) {
    return Object.assign({
      path: filter.field.path
    }, filter.value);
  });
}

},{"blacklist":undefined,"lodash/isEqual":545,"object-assign":555}],156:[function(require,module,exports){
"use strict";

var _i = _interopRequireDefault(require("i"));

var _lodash = require("lodash");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * A few helper methods for strings
 */

/**
 * Displays the singular or plural of a string based on a number
 * or number of items in an array.
 *
 * If arity is 1, returns the plural form of the word.
 *
 * @param {String} count
 * @param {String} singular string
 * @param {String} plural string
 * @return {String} singular or plural, * is replaced with count
 * @api public
 */
exports.plural = function (count, sn, pl) {
  if (arguments.length === 1) {
    return _i["default"].pluralize(count);
  }

  if (typeof sn !== 'string') sn = '';

  if (!pl) {
    pl = _i["default"].pluralize(sn);
  }

  if (typeof count === 'string') {
    count = Number(count);
  } else if (typeof count !== 'number') {
    count = (0, _lodash.size)(count);
  }

  return (count === 1 ? sn : pl).replace('*', count);
};
/**
 * Converts the first letter in a string to uppercase
 *
 * @param {String} str
 * @return {String} Str
 * @api public
 */


exports.upcase = function (str) {
  if (str && str.toString) str = str.toString();
  if (typeof str !== 'string' || !str.length) return '';
  return str.substr(0, 1).toUpperCase() + str.substr(1);
};
/**
 * Converts the first letter in a string to lowercase
 *
 * @param {String} Str
 * @return {String} str
 * @api public
 */


exports.downcase = function (str) {
  if (str && str.toString) str = str.toString();
  if (typeof str !== 'string' || !str.length) return '';
  return str.substr(0, 1).toLowerCase() + str.substr(1);
};
/**
 * Converts a string to title case
 *
 * @param {String} str
 * @return {String} Title Case form of str
 * @api public
 */


exports.titlecase = function (str) {
  if (str && str.toString) str = str.toString();
  if (typeof str !== 'string' || !str.length) return '';
  str = str.replace(/([a-z])([A-Z])/g, '$1 $2');
  var parts = str.split(/\s|_|\-/);

  for (var i = 0; i < parts.length; i++) {
    if (parts[i] && !/^[A-Z0-9]+$/.test(parts[i])) {
      parts[i] = exports.upcase(parts[i]);
    }
  }

  return (0, _lodash.compact)(parts).join(' ');
};
/**
 * Converts a string to camel case
 *
 * @param {String} str
 * @param {Boolean} lowercaseFirstWord
 * @return {String} camel-case form of str
 * @api public
 */


exports.camelcase = function (str, lc) {
  return _i["default"].camelize(str, !lc);
};

},{"i":undefined,"lodash":undefined}],157:[function(require,module,exports){
"use strict";

var ExMatch = require('expression-match'); // Matches objects with expressions

/**
 * Checks if something is an object
 *
 * @param  {Any} arg   The something we want to check the type of
 * @return {Boolean} If arg is an object or not
 */


function isObject(arg) {
  return Object.prototype.toString.call(arg) === '[object Object]';
}

;
/**
 * Evaluates the visibility of a field based on its dependencies and their values
 *
 * @param  {Object|Any} dependsOn The dependsOn variable we get from the field
 * @param  {Object}		values    The values currently in the fields
 * @return {Boolean}			  If the current field should be displayed based
 *                          	  on it's dependencies and their values
 */

module.exports = function evalDependsOn(dependsOn, values) {
  if (!isObject(dependsOn) || !Object.keys(dependsOn).length) {
    return true;
  } // Checks if the current field should be displayed, based on the values of
  // other fields and the dependsOn configuration of this field


  var Match = new ExMatch(dependsOn, values, false);
  return Match.match();
};

},{"expression-match":undefined}],158:[function(require,module,exports){
"use strict";

require("./noConflict");

var _global = _interopRequireDefault(require("core-js/library/fn/global"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

if (_global.default._babelPolyfill && typeof console !== "undefined" && console.warn) {
  console.warn("@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended " + "and may have consequences if different versions of the polyfills are applied sequentially. " + "If you do need to load the polyfill more than once, use @babel/polyfill/noConflict " + "instead to bypass the warning.");
}

_global.default._babelPolyfill = true;
},{"./noConflict":159,"core-js/library/fn/global":172}],159:[function(require,module,exports){
"use strict";

require("core-js/es6");

require("core-js/fn/array/includes");

require("core-js/fn/array/flat-map");

require("core-js/fn/string/pad-start");

require("core-js/fn/string/pad-end");

require("core-js/fn/string/trim-start");

require("core-js/fn/string/trim-end");

require("core-js/fn/symbol/async-iterator");

require("core-js/fn/object/get-own-property-descriptors");

require("core-js/fn/object/values");

require("core-js/fn/object/entries");

require("core-js/fn/promise/finally");

require("core-js/web");

require("regenerator-runtime/runtime");
},{"core-js/es6":160,"core-js/fn/array/flat-map":161,"core-js/fn/array/includes":162,"core-js/fn/object/entries":163,"core-js/fn/object/get-own-property-descriptors":164,"core-js/fn/object/values":165,"core-js/fn/promise/finally":166,"core-js/fn/string/pad-end":167,"core-js/fn/string/pad-start":168,"core-js/fn/string/trim-end":169,"core-js/fn/string/trim-start":170,"core-js/fn/symbol/async-iterator":171,"core-js/web":463,"regenerator-runtime/runtime":568}],160:[function(require,module,exports){
require('../modules/es6.symbol');
require('../modules/es6.object.create');
require('../modules/es6.object.define-property');
require('../modules/es6.object.define-properties');
require('../modules/es6.object.get-own-property-descriptor');
require('../modules/es6.object.get-prototype-of');
require('../modules/es6.object.keys');
require('../modules/es6.object.get-own-property-names');
require('../modules/es6.object.freeze');
require('../modules/es6.object.seal');
require('../modules/es6.object.prevent-extensions');
require('../modules/es6.object.is-frozen');
require('../modules/es6.object.is-sealed');
require('../modules/es6.object.is-extensible');
require('../modules/es6.object.assign');
require('../modules/es6.object.is');
require('../modules/es6.object.set-prototype-of');
require('../modules/es6.object.to-string');
require('../modules/es6.function.bind');
require('../modules/es6.function.name');
require('../modules/es6.function.has-instance');
require('../modules/es6.parse-int');
require('../modules/es6.parse-float');
require('../modules/es6.number.constructor');
require('../modules/es6.number.to-fixed');
require('../modules/es6.number.to-precision');
require('../modules/es6.number.epsilon');
require('../modules/es6.number.is-finite');
require('../modules/es6.number.is-integer');
require('../modules/es6.number.is-nan');
require('../modules/es6.number.is-safe-integer');
require('../modules/es6.number.max-safe-integer');
require('../modules/es6.number.min-safe-integer');
require('../modules/es6.number.parse-float');
require('../modules/es6.number.parse-int');
require('../modules/es6.math.acosh');
require('../modules/es6.math.asinh');
require('../modules/es6.math.atanh');
require('../modules/es6.math.cbrt');
require('../modules/es6.math.clz32');
require('../modules/es6.math.cosh');
require('../modules/es6.math.expm1');
require('../modules/es6.math.fround');
require('../modules/es6.math.hypot');
require('../modules/es6.math.imul');
require('../modules/es6.math.log10');
require('../modules/es6.math.log1p');
require('../modules/es6.math.log2');
require('../modules/es6.math.sign');
require('../modules/es6.math.sinh');
require('../modules/es6.math.tanh');
require('../modules/es6.math.trunc');
require('../modules/es6.string.from-code-point');
require('../modules/es6.string.raw');
require('../modules/es6.string.trim');
require('../modules/es6.string.iterator');
require('../modules/es6.string.code-point-at');
require('../modules/es6.string.ends-with');
require('../modules/es6.string.includes');
require('../modules/es6.string.repeat');
require('../modules/es6.string.starts-with');
require('../modules/es6.string.anchor');
require('../modules/es6.string.big');
require('../modules/es6.string.blink');
require('../modules/es6.string.bold');
require('../modules/es6.string.fixed');
require('../modules/es6.string.fontcolor');
require('../modules/es6.string.fontsize');
require('../modules/es6.string.italics');
require('../modules/es6.string.link');
require('../modules/es6.string.small');
require('../modules/es6.string.strike');
require('../modules/es6.string.sub');
require('../modules/es6.string.sup');
require('../modules/es6.date.now');
require('../modules/es6.date.to-json');
require('../modules/es6.date.to-iso-string');
require('../modules/es6.date.to-string');
require('../modules/es6.date.to-primitive');
require('../modules/es6.array.is-array');
require('../modules/es6.array.from');
require('../modules/es6.array.of');
require('../modules/es6.array.join');
require('../modules/es6.array.slice');
require('../modules/es6.array.sort');
require('../modules/es6.array.for-each');
require('../modules/es6.array.map');
require('../modules/es6.array.filter');
require('../modules/es6.array.some');
require('../modules/es6.array.every');
require('../modules/es6.array.reduce');
require('../modules/es6.array.reduce-right');
require('../modules/es6.array.index-of');
require('../modules/es6.array.last-index-of');
require('../modules/es6.array.copy-within');
require('../modules/es6.array.fill');
require('../modules/es6.array.find');
require('../modules/es6.array.find-index');
require('../modules/es6.array.species');
require('../modules/es6.array.iterator');
require('../modules/es6.regexp.constructor');
require('../modules/es6.regexp.exec');
require('../modules/es6.regexp.to-string');
require('../modules/es6.regexp.flags');
require('../modules/es6.regexp.match');
require('../modules/es6.regexp.replace');
require('../modules/es6.regexp.search');
require('../modules/es6.regexp.split');
require('../modules/es6.promise');
require('../modules/es6.map');
require('../modules/es6.set');
require('../modules/es6.weak-map');
require('../modules/es6.weak-set');
require('../modules/es6.typed.array-buffer');
require('../modules/es6.typed.data-view');
require('../modules/es6.typed.int8-array');
require('../modules/es6.typed.uint8-array');
require('../modules/es6.typed.uint8-clamped-array');
require('../modules/es6.typed.int16-array');
require('../modules/es6.typed.uint16-array');
require('../modules/es6.typed.int32-array');
require('../modules/es6.typed.uint32-array');
require('../modules/es6.typed.float32-array');
require('../modules/es6.typed.float64-array');
require('../modules/es6.reflect.apply');
require('../modules/es6.reflect.construct');
require('../modules/es6.reflect.define-property');
require('../modules/es6.reflect.delete-property');
require('../modules/es6.reflect.enumerate');
require('../modules/es6.reflect.get');
require('../modules/es6.reflect.get-own-property-descriptor');
require('../modules/es6.reflect.get-prototype-of');
require('../modules/es6.reflect.has');
require('../modules/es6.reflect.is-extensible');
require('../modules/es6.reflect.own-keys');
require('../modules/es6.reflect.prevent-extensions');
require('../modules/es6.reflect.set');
require('../modules/es6.reflect.set-prototype-of');
module.exports = require('../modules/_core');

},{"../modules/_core":209,"../modules/es6.array.copy-within":311,"../modules/es6.array.every":312,"../modules/es6.array.fill":313,"../modules/es6.array.filter":314,"../modules/es6.array.find":316,"../modules/es6.array.find-index":315,"../modules/es6.array.for-each":317,"../modules/es6.array.from":318,"../modules/es6.array.index-of":319,"../modules/es6.array.is-array":320,"../modules/es6.array.iterator":321,"../modules/es6.array.join":322,"../modules/es6.array.last-index-of":323,"../modules/es6.array.map":324,"../modules/es6.array.of":325,"../modules/es6.array.reduce":327,"../modules/es6.array.reduce-right":326,"../modules/es6.array.slice":328,"../modules/es6.array.some":329,"../modules/es6.array.sort":330,"../modules/es6.array.species":331,"../modules/es6.date.now":332,"../modules/es6.date.to-iso-string":333,"../modules/es6.date.to-json":334,"../modules/es6.date.to-primitive":335,"../modules/es6.date.to-string":336,"../modules/es6.function.bind":337,"../modules/es6.function.has-instance":338,"../modules/es6.function.name":339,"../modules/es6.map":340,"../modules/es6.math.acosh":341,"../modules/es6.math.asinh":342,"../modules/es6.math.atanh":343,"../modules/es6.math.cbrt":344,"../modules/es6.math.clz32":345,"../modules/es6.math.cosh":346,"../modules/es6.math.expm1":347,"../modules/es6.math.fround":348,"../modules/es6.math.hypot":349,"../modules/es6.math.imul":350,"../modules/es6.math.log10":351,"../modules/es6.math.log1p":352,"../modules/es6.math.log2":353,"../modules/es6.math.sign":354,"../modules/es6.math.sinh":355,"../modules/es6.math.tanh":356,"../modules/es6.math.trunc":357,"../modules/es6.number.constructor":358,"../modules/es6.number.epsilon":359,"../modules/es6.number.is-finite":360,"../modules/es6.number.is-integer":361,"../modules/es6.number.is-nan":362,"../modules/es6.number.is-safe-integer":363,"../modules/es6.number.max-safe-integer":364,"../modules/es6.number.min-safe-integer":365,"../modules/es6.number.parse-float":366,"../modules/es6.number.parse-int":367,"../modules/es6.number.to-fixed":368,"../modules/es6.number.to-precision":369,"../modules/es6.object.assign":370,"../modules/es6.object.create":371,"../modules/es6.object.define-properties":372,"../modules/es6.object.define-property":373,"../modules/es6.object.freeze":374,"../modules/es6.object.get-own-property-descriptor":375,"../modules/es6.object.get-own-property-names":376,"../modules/es6.object.get-prototype-of":377,"../modules/es6.object.is":381,"../modules/es6.object.is-extensible":378,"../modules/es6.object.is-frozen":379,"../modules/es6.object.is-sealed":380,"../modules/es6.object.keys":382,"../modules/es6.object.prevent-extensions":383,"../modules/es6.object.seal":384,"../modules/es6.object.set-prototype-of":385,"../modules/es6.object.to-string":386,"../modules/es6.parse-float":387,"../modules/es6.parse-int":388,"../modules/es6.promise":389,"../modules/es6.reflect.apply":390,"../modules/es6.reflect.construct":391,"../modules/es6.reflect.define-property":392,"../modules/es6.reflect.delete-property":393,"../modules/es6.reflect.enumerate":394,"../modules/es6.reflect.get":397,"../modules/es6.reflect.get-own-property-descriptor":395,"../modules/es6.reflect.get-prototype-of":396,"../modules/es6.reflect.has":398,"../modules/es6.reflect.is-extensible":399,"../modules/es6.reflect.own-keys":400,"../modules/es6.reflect.prevent-extensions":401,"../modules/es6.reflect.set":403,"../modules/es6.reflect.set-prototype-of":402,"../modules/es6.regexp.constructor":404,"../modules/es6.regexp.exec":405,"../modules/es6.regexp.flags":406,"../modules/es6.regexp.match":407,"../modules/es6.regexp.replace":408,"../modules/es6.regexp.search":409,"../modules/es6.regexp.split":410,"../modules/es6.regexp.to-string":411,"../modules/es6.set":412,"../modules/es6.string.anchor":413,"../modules/es6.string.big":414,"../modules/es6.string.blink":415,"../modules/es6.string.bold":416,"../modules/es6.string.code-point-at":417,"../modules/es6.string.ends-with":418,"../modules/es6.string.fixed":419,"../modules/es6.string.fontcolor":420,"../modules/es6.string.fontsize":421,"../modules/es6.string.from-code-point":422,"../modules/es6.string.includes":423,"../modules/es6.string.italics":424,"../modules/es6.string.iterator":425,"../modules/es6.string.link":426,"../modules/es6.string.raw":427,"../modules/es6.string.repeat":428,"../modules/es6.string.small":429,"../modules/es6.string.starts-with":430,"../modules/es6.string.strike":431,"../modules/es6.string.sub":432,"../modules/es6.string.sup":433,"../modules/es6.string.trim":434,"../modules/es6.symbol":435,"../modules/es6.typed.array-buffer":436,"../modules/es6.typed.data-view":437,"../modules/es6.typed.float32-array":438,"../modules/es6.typed.float64-array":439,"../modules/es6.typed.int16-array":440,"../modules/es6.typed.int32-array":441,"../modules/es6.typed.int8-array":442,"../modules/es6.typed.uint16-array":443,"../modules/es6.typed.uint32-array":444,"../modules/es6.typed.uint8-array":445,"../modules/es6.typed.uint8-clamped-array":446,"../modules/es6.weak-map":447,"../modules/es6.weak-set":448}],161:[function(require,module,exports){
require('../../modules/es7.array.flat-map');
module.exports = require('../../modules/_core').Array.flatMap;

},{"../../modules/_core":209,"../../modules/es7.array.flat-map":449}],162:[function(require,module,exports){
require('../../modules/es7.array.includes');
module.exports = require('../../modules/_core').Array.includes;

},{"../../modules/_core":209,"../../modules/es7.array.includes":450}],163:[function(require,module,exports){
require('../../modules/es7.object.entries');
module.exports = require('../../modules/_core').Object.entries;

},{"../../modules/_core":209,"../../modules/es7.object.entries":451}],164:[function(require,module,exports){
require('../../modules/es7.object.get-own-property-descriptors');
module.exports = require('../../modules/_core').Object.getOwnPropertyDescriptors;

},{"../../modules/_core":209,"../../modules/es7.object.get-own-property-descriptors":452}],165:[function(require,module,exports){
require('../../modules/es7.object.values');
module.exports = require('../../modules/_core').Object.values;

},{"../../modules/_core":209,"../../modules/es7.object.values":453}],166:[function(require,module,exports){
'use strict';
require('../../modules/es6.promise');
require('../../modules/es7.promise.finally');
module.exports = require('../../modules/_core').Promise['finally'];

},{"../../modules/_core":209,"../../modules/es6.promise":389,"../../modules/es7.promise.finally":454}],167:[function(require,module,exports){
require('../../modules/es7.string.pad-end');
module.exports = require('../../modules/_core').String.padEnd;

},{"../../modules/_core":209,"../../modules/es7.string.pad-end":455}],168:[function(require,module,exports){
require('../../modules/es7.string.pad-start');
module.exports = require('../../modules/_core').String.padStart;

},{"../../modules/_core":209,"../../modules/es7.string.pad-start":456}],169:[function(require,module,exports){
require('../../modules/es7.string.trim-right');
module.exports = require('../../modules/_core').String.trimRight;

},{"../../modules/_core":209,"../../modules/es7.string.trim-right":458}],170:[function(require,module,exports){
require('../../modules/es7.string.trim-left');
module.exports = require('../../modules/_core').String.trimLeft;

},{"../../modules/_core":209,"../../modules/es7.string.trim-left":457}],171:[function(require,module,exports){
require('../../modules/es7.symbol.async-iterator');
module.exports = require('../../modules/_wks-ext').f('asyncIterator');

},{"../../modules/_wks-ext":308,"../../modules/es7.symbol.async-iterator":459}],172:[function(require,module,exports){
require('../modules/es7.global');
module.exports = require('../modules/_core').global;

},{"../modules/_core":175,"../modules/es7.global":189}],173:[function(require,module,exports){
module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};

},{}],174:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};

},{"./_is-object":185}],175:[function(require,module,exports){
var core = module.exports = { version: '2.6.5' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

},{}],176:[function(require,module,exports){
// optional / simple context binding
var aFunction = require('./_a-function');
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};

},{"./_a-function":173}],177:[function(require,module,exports){
// Thank's IE8 for his funny defineProperty
module.exports = !require('./_fails')(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_fails":180}],178:[function(require,module,exports){
var isObject = require('./_is-object');
var document = require('./_global').document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};

},{"./_global":181,"./_is-object":185}],179:[function(require,module,exports){
var global = require('./_global');
var core = require('./_core');
var ctx = require('./_ctx');
var hide = require('./_hide');
var has = require('./_has');
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var IS_WRAP = type & $export.W;
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE];
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
  var key, own, out;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if (own && has(exports, key)) continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function (C) {
      var F = function (a, b, c) {
        if (this instanceof C) {
          switch (arguments.length) {
            case 0: return new C();
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if (IS_PROTO) {
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;

},{"./_core":175,"./_ctx":176,"./_global":181,"./_has":182,"./_hide":183}],180:[function(require,module,exports){
module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

},{}],181:[function(require,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

},{}],182:[function(require,module,exports){
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};

},{}],183:[function(require,module,exports){
var dP = require('./_object-dp');
var createDesc = require('./_property-desc');
module.exports = require('./_descriptors') ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

},{"./_descriptors":177,"./_object-dp":186,"./_property-desc":187}],184:[function(require,module,exports){
module.exports = !require('./_descriptors') && !require('./_fails')(function () {
  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_descriptors":177,"./_dom-create":178,"./_fails":180}],185:[function(require,module,exports){
module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

},{}],186:[function(require,module,exports){
var anObject = require('./_an-object');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var toPrimitive = require('./_to-primitive');
var dP = Object.defineProperty;

exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

},{"./_an-object":174,"./_descriptors":177,"./_ie8-dom-define":184,"./_to-primitive":188}],187:[function(require,module,exports){
module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

},{}],188:[function(require,module,exports){
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};

},{"./_is-object":185}],189:[function(require,module,exports){
// https://github.com/tc39/proposal-global
var $export = require('./_export');

$export($export.G, { global: require('./_global') });

},{"./_export":179,"./_global":181}],190:[function(require,module,exports){
arguments[4][173][0].apply(exports,arguments)
},{"dup":173}],191:[function(require,module,exports){
var cof = require('./_cof');
module.exports = function (it, msg) {
  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
  return +it;
};

},{"./_cof":205}],192:[function(require,module,exports){
// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = require('./_wks')('unscopables');
var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) require('./_hide')(ArrayProto, UNSCOPABLES, {});
module.exports = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};

},{"./_hide":229,"./_wks":309}],193:[function(require,module,exports){
'use strict';
var at = require('./_string-at')(true);

 // `AdvanceStringIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-advancestringindex
module.exports = function (S, index, unicode) {
  return index + (unicode ? at(S, index).length : 1);
};

},{"./_string-at":286}],194:[function(require,module,exports){
module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};

},{}],195:[function(require,module,exports){
arguments[4][174][0].apply(exports,arguments)
},{"./_is-object":238,"dup":174}],196:[function(require,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
'use strict';
var toObject = require('./_to-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');

module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
  var O = toObject(this);
  var len = toLength(O.length);
  var to = toAbsoluteIndex(target, len);
  var from = toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;
  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }
  while (count-- > 0) {
    if (from in O) O[to] = O[from];
    else delete O[to];
    to += inc;
    from += inc;
  } return O;
};

},{"./_to-absolute-index":294,"./_to-length":298,"./_to-object":299}],197:[function(require,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
'use strict';
var toObject = require('./_to-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = toLength(O.length);
  var aLen = arguments.length;
  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
  var end = aLen > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};

},{"./_to-absolute-index":294,"./_to-length":298,"./_to-object":299}],198:[function(require,module,exports){
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = require('./_to-iobject');
var toLength = require('./_to-length');
var toAbsoluteIndex = require('./_to-absolute-index');
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

},{"./_to-absolute-index":294,"./_to-iobject":297,"./_to-length":298}],199:[function(require,module,exports){
// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = require('./_ctx');
var IObject = require('./_iobject');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var asc = require('./_array-species-create');
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};

},{"./_array-species-create":202,"./_ctx":211,"./_iobject":234,"./_to-length":298,"./_to-object":299}],200:[function(require,module,exports){
var aFunction = require('./_a-function');
var toObject = require('./_to-object');
var IObject = require('./_iobject');
var toLength = require('./_to-length');

module.exports = function (that, callbackfn, aLen, memo, isRight) {
  aFunction(callbackfn);
  var O = toObject(that);
  var self = IObject(O);
  var length = toLength(O.length);
  var index = isRight ? length - 1 : 0;
  var i = isRight ? -1 : 1;
  if (aLen < 2) for (;;) {
    if (index in self) {
      memo = self[index];
      index += i;
      break;
    }
    index += i;
    if (isRight ? index < 0 : length <= index) {
      throw TypeError('Reduce of empty array with no initial value');
    }
  }
  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {
    memo = callbackfn(memo, self[index], index, O);
  }
  return memo;
};

},{"./_a-function":190,"./_iobject":234,"./_to-length":298,"./_to-object":299}],201:[function(require,module,exports){
var isObject = require('./_is-object');
var isArray = require('./_is-array');
var SPECIES = require('./_wks')('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};

},{"./_is-array":236,"./_is-object":238,"./_wks":309}],202:[function(require,module,exports){
// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = require('./_array-species-constructor');

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};

},{"./_array-species-constructor":201}],203:[function(require,module,exports){
'use strict';
var aFunction = require('./_a-function');
var isObject = require('./_is-object');
var invoke = require('./_invoke');
var arraySlice = [].slice;
var factories = {};

var construct = function (F, len, args) {
  if (!(len in factories)) {
    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
    // eslint-disable-next-line no-new-func
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  } return factories[len](F, args);
};

module.exports = Function.bind || function bind(that /* , ...args */) {
  var fn = aFunction(this);
  var partArgs = arraySlice.call(arguments, 1);
  var bound = function (/* args... */) {
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };
  if (isObject(fn.prototype)) bound.prototype = fn.prototype;
  return bound;
};

},{"./_a-function":190,"./_invoke":233,"./_is-object":238}],204:[function(require,module,exports){
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./_cof');
var TAG = require('./_wks')('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

},{"./_cof":205,"./_wks":309}],205:[function(require,module,exports){
var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};

},{}],206:[function(require,module,exports){
'use strict';
var dP = require('./_object-dp').f;
var create = require('./_object-create');
var redefineAll = require('./_redefine-all');
var ctx = require('./_ctx');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var $iterDefine = require('./_iter-define');
var step = require('./_iter-step');
var setSpecies = require('./_set-species');
var DESCRIPTORS = require('./_descriptors');
var fastKey = require('./_meta').fastKey;
var validate = require('./_validate-collection');
var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;         // collection type
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function () {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target
      this._k = kind;                     // kind
      this._l = undefined;                // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};

},{"./_an-instance":194,"./_ctx":211,"./_descriptors":215,"./_for-of":225,"./_iter-define":242,"./_iter-step":244,"./_meta":251,"./_object-create":255,"./_object-dp":256,"./_redefine-all":274,"./_set-species":280,"./_validate-collection":306}],207:[function(require,module,exports){
'use strict';
var redefineAll = require('./_redefine-all');
var getWeak = require('./_meta').getWeak;
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var createArrayMethod = require('./_array-methods');
var $has = require('./_has');
var validate = require('./_validate-collection');
var arrayFind = createArrayMethod(5);
var arrayFindIndex = createArrayMethod(6);
var id = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function (that) {
  return that._l || (that._l = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function () {
  this.a = [];
};
var findUncaughtFrozen = function (store, key) {
  return arrayFind(store.a, function (it) {
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function (key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function (key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function (key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function (key) {
    var index = arrayFindIndex(this.a, function (it) {
      return it[0] === key;
    });
    if (~index) this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;      // collection type
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function (key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var data = getWeak(anObject(key), true);
    if (data === true) uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};

},{"./_an-instance":194,"./_an-object":195,"./_array-methods":199,"./_for-of":225,"./_has":228,"./_is-object":238,"./_meta":251,"./_redefine-all":274,"./_validate-collection":306}],208:[function(require,module,exports){
'use strict';
var global = require('./_global');
var $export = require('./_export');
var redefine = require('./_redefine');
var redefineAll = require('./_redefine-all');
var meta = require('./_meta');
var forOf = require('./_for-of');
var anInstance = require('./_an-instance');
var isObject = require('./_is-object');
var fails = require('./_fails');
var $iterDetect = require('./_iter-detect');
var setToStringTag = require('./_set-to-string-tag');
var inheritIfRequired = require('./_inherit-if-required');

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  var fixMethod = function (KEY) {
    var fn = proto[KEY];
    redefine(proto, KEY,
      KEY == 'delete' ? function (a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a) {
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance = new C();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new C();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });
    if (!ACCEPT_ITERABLES) {
      C = wrapper(function (target, iterable) {
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base(), target, C);
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
    // weak collections should not contains .clear method
    if (IS_WEAK && proto.clear) delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};

},{"./_an-instance":194,"./_export":219,"./_fails":221,"./_for-of":225,"./_global":227,"./_inherit-if-required":232,"./_is-object":238,"./_iter-detect":243,"./_meta":251,"./_redefine":275,"./_redefine-all":274,"./_set-to-string-tag":281}],209:[function(require,module,exports){
arguments[4][175][0].apply(exports,arguments)
},{"dup":175}],210:[function(require,module,exports){
'use strict';
var $defineProperty = require('./_object-dp');
var createDesc = require('./_property-desc');

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};

},{"./_object-dp":256,"./_property-desc":273}],211:[function(require,module,exports){
arguments[4][176][0].apply(exports,arguments)
},{"./_a-function":190,"dup":176}],212:[function(require,module,exports){
'use strict';
// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var fails = require('./_fails');
var getTime = Date.prototype.getTime;
var $toISOString = Date.prototype.toISOString;

var lz = function (num) {
  return num > 9 ? num : '0' + num;
};

// PhantomJS / old WebKit has a broken implementations
module.exports = (fails(function () {
  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
}) || !fails(function () {
  $toISOString.call(new Date(NaN));
})) ? function toISOString() {
  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
  var d = this;
  var y = d.getUTCFullYear();
  var m = d.getUTCMilliseconds();
  var s = y < 0 ? '-' : y > 9999 ? '+' : '';
  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
} : $toISOString;

},{"./_fails":221}],213:[function(require,module,exports){
'use strict';
var anObject = require('./_an-object');
var toPrimitive = require('./_to-primitive');
var NUMBER = 'number';

module.exports = function (hint) {
  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
  return toPrimitive(anObject(this), hint != NUMBER);
};

},{"./_an-object":195,"./_to-primitive":300}],214:[function(require,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};

},{}],215:[function(require,module,exports){
arguments[4][177][0].apply(exports,arguments)
},{"./_fails":221,"dup":177}],216:[function(require,module,exports){
arguments[4][178][0].apply(exports,arguments)
},{"./_global":227,"./_is-object":238,"dup":178}],217:[function(require,module,exports){
// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');

},{}],218:[function(require,module,exports){
// all enumerable object keys, includes symbols
var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};

},{"./_object-gops":261,"./_object-keys":264,"./_object-pie":265}],219:[function(require,module,exports){
var global = require('./_global');
var core = require('./_core');
var hide = require('./_hide');
var redefine = require('./_redefine');
var ctx = require('./_ctx');
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if (target) redefine(target, key, out, type & $export.U);
    // export
    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;

},{"./_core":209,"./_ctx":211,"./_global":227,"./_hide":229,"./_redefine":275}],220:[function(require,module,exports){
var MATCH = require('./_wks')('match');
module.exports = function (KEY) {
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch (e) {
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch (f) { /* empty */ }
  } return true;
};

},{"./_wks":309}],221:[function(require,module,exports){
arguments[4][180][0].apply(exports,arguments)
},{"dup":180}],222:[function(require,module,exports){
'use strict';
require('./es6.regexp.exec');
var redefine = require('./_redefine');
var hide = require('./_hide');
var fails = require('./_fails');
var defined = require('./_defined');
var wks = require('./_wks');
var regexpExec = require('./_regexp-exec');

var SPECIES = wks('species');

var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  // #replace needs built-in support for named groups.
  // #match works fine because it just return the exec results, even if it has
  // a "grops" property.
  var re = /./;
  re.exec = function () {
    var result = [];
    result.groups = { a: '7' };
    return result;
  };
  return ''.replace(re, '$<a>') !== '7';
});

var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {
  // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
  var re = /(?:)/;
  var originalExec = re.exec;
  re.exec = function () { return originalExec.apply(this, arguments); };
  var result = 'ab'.split(re);
  return result.length === 2 && result[0] === 'a' && result[1] === 'b';
})();

module.exports = function (KEY, length, exec) {
  var SYMBOL = wks(KEY);

  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  });

  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;
    re.exec = function () { execCalled = true; return null; };
    if (KEY === 'split') {
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES] = function () { return re; };
    }
    re[SYMBOL]('');
    return !execCalled;
  }) : undefined;

  if (
    !DELEGATES_TO_SYMBOL ||
    !DELEGATES_TO_EXEC ||
    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||
    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
  ) {
    var nativeRegExpMethod = /./[SYMBOL];
    var fns = exec(
      defined,
      SYMBOL,
      ''[KEY],
      function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {
        if (regexp.exec === regexpExec) {
          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
            // The native String method already delegates to @@method (this
            // polyfilled function), leasing to infinite recursion.
            // We avoid it by directly calling the native @@method method.
            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
          }
          return { done: true, value: nativeMethod.call(str, regexp, arg2) };
        }
        return { done: false };
      }
    );
    var strfn = fns[0];
    var rxfn = fns[1];

    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return rxfn.call(string, this); }
    );
  }
};

},{"./_defined":214,"./_fails":221,"./_hide":229,"./_redefine":275,"./_regexp-exec":277,"./_wks":309,"./es6.regexp.exec":405}],223:[function(require,module,exports){
'use strict';
// 21.2.5.3 get RegExp.prototype.flags
var anObject = require('./_an-object');
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};

},{"./_an-object":195}],224:[function(require,module,exports){
'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
var isArray = require('./_is-array');
var isObject = require('./_is-object');
var toLength = require('./_to-length');
var ctx = require('./_ctx');
var IS_CONCAT_SPREADABLE = require('./_wks')('isConcatSpreadable');

function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
  var targetIndex = start;
  var sourceIndex = 0;
  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
  var element, spreadable;

  while (sourceIndex < sourceLen) {
    if (sourceIndex in source) {
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

      spreadable = false;
      if (isObject(element)) {
        spreadable = element[IS_CONCAT_SPREADABLE];
        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
      }

      if (spreadable && depth > 0) {
        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
      } else {
        if (targetIndex >= 0x1fffffffffffff) throw TypeError();
        target[targetIndex] = element;
      }

      targetIndex++;
    }
    sourceIndex++;
  }
  return targetIndex;
}

module.exports = flattenIntoArray;

},{"./_ctx":211,"./_is-array":236,"./_is-object":238,"./_to-length":298,"./_wks":309}],225:[function(require,module,exports){
var ctx = require('./_ctx');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var anObject = require('./_an-object');
var toLength = require('./_to-length');
var getIterFn = require('./core.get-iterator-method');
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;

},{"./_an-object":195,"./_ctx":211,"./_is-array-iter":235,"./_iter-call":240,"./_to-length":298,"./core.get-iterator-method":310}],226:[function(require,module,exports){
module.exports = require('./_shared')('native-function-to-string', Function.toString);

},{"./_shared":283}],227:[function(require,module,exports){
arguments[4][181][0].apply(exports,arguments)
},{"dup":181}],228:[function(require,module,exports){
arguments[4][182][0].apply(exports,arguments)
},{"dup":182}],229:[function(require,module,exports){
arguments[4][183][0].apply(exports,arguments)
},{"./_descriptors":215,"./_object-dp":256,"./_property-desc":273,"dup":183}],230:[function(require,module,exports){
var document = require('./_global').document;
module.exports = document && document.documentElement;

},{"./_global":227}],231:[function(require,module,exports){
arguments[4][184][0].apply(exports,arguments)
},{"./_descriptors":215,"./_dom-create":216,"./_fails":221,"dup":184}],232:[function(require,module,exports){
var isObject = require('./_is-object');
var setPrototypeOf = require('./_set-proto').set;
module.exports = function (that, target, C) {
  var S = target.constructor;
  var P;
  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  } return that;
};

},{"./_is-object":238,"./_set-proto":279}],233:[function(require,module,exports){
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};

},{}],234:[function(require,module,exports){
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./_cof');
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};

},{"./_cof":205}],235:[function(require,module,exports){
// check on default Array iterator
var Iterators = require('./_iterators');
var ITERATOR = require('./_wks')('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};

},{"./_iterators":245,"./_wks":309}],236:[function(require,module,exports){
// 7.2.2 IsArray(argument)
var cof = require('./_cof');
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};

},{"./_cof":205}],237:[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var isObject = require('./_is-object');
var floor = Math.floor;
module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};

},{"./_is-object":238}],238:[function(require,module,exports){
arguments[4][185][0].apply(exports,arguments)
},{"dup":185}],239:[function(require,module,exports){
// 7.2.8 IsRegExp(argument)
var isObject = require('./_is-object');
var cof = require('./_cof');
var MATCH = require('./_wks')('match');
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};

},{"./_cof":205,"./_is-object":238,"./_wks":309}],240:[function(require,module,exports){
// call something on iterator step with safe closing on error
var anObject = require('./_an-object');
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};

},{"./_an-object":195}],241:[function(require,module,exports){
'use strict';
var create = require('./_object-create');
var descriptor = require('./_property-desc');
var setToStringTag = require('./_set-to-string-tag');
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};

},{"./_hide":229,"./_object-create":255,"./_property-desc":273,"./_set-to-string-tag":281,"./_wks":309}],242:[function(require,module,exports){
'use strict';
var LIBRARY = require('./_library');
var $export = require('./_export');
var redefine = require('./_redefine');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var $iterCreate = require('./_iter-create');
var setToStringTag = require('./_set-to-string-tag');
var getPrototypeOf = require('./_object-gpo');
var ITERATOR = require('./_wks')('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};

},{"./_export":219,"./_hide":229,"./_iter-create":241,"./_iterators":245,"./_library":246,"./_object-gpo":262,"./_redefine":275,"./_set-to-string-tag":281,"./_wks":309}],243:[function(require,module,exports){
var ITERATOR = require('./_wks')('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};

},{"./_wks":309}],244:[function(require,module,exports){
module.exports = function (done, value) {
  return { value: value, done: !!done };
};

},{}],245:[function(require,module,exports){
module.exports = {};

},{}],246:[function(require,module,exports){
module.exports = false;

},{}],247:[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = (!$expm1
  // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || $expm1(-2e-17) != -2e-17
) ? function expm1(x) {
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;

},{}],248:[function(require,module,exports){
// 20.2.2.16 Math.fround(x)
var sign = require('./_math-sign');
var pow = Math.pow;
var EPSILON = pow(2, -52);
var EPSILON32 = pow(2, -23);
var MAX32 = pow(2, 127) * (2 - EPSILON32);
var MIN32 = pow(2, -126);

var roundTiesToEven = function (n) {
  return n + 1 / EPSILON - 1 / EPSILON;
};

module.exports = Math.fround || function fround(x) {
  var $abs = Math.abs(x);
  var $sign = sign(x);
  var a, result;
  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
  a = (1 + EPSILON32 / EPSILON) * $abs;
  result = a - (a - $abs);
  // eslint-disable-next-line no-self-compare
  if (result > MAX32 || result != result) return $sign * Infinity;
  return $sign * result;
};

},{"./_math-sign":250}],249:[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x) {
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};

},{}],250:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};

},{}],251:[function(require,module,exports){
var META = require('./_uid')('meta');
var isObject = require('./_is-object');
var has = require('./_has');
var setDesc = require('./_object-dp').f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !require('./_fails')(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};

},{"./_fails":221,"./_has":228,"./_is-object":238,"./_object-dp":256,"./_uid":304}],252:[function(require,module,exports){
var global = require('./_global');
var macrotask = require('./_task').set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = require('./_cof')(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise.resolve(undefined);
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};

},{"./_cof":205,"./_global":227,"./_task":293}],253:[function(require,module,exports){
'use strict';
// 25.4.1.5 NewPromiseCapability(C)
var aFunction = require('./_a-function');

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};

},{"./_a-function":190}],254:[function(require,module,exports){
'use strict';
// 19.1.2.1 Object.assign(target, source, ...)
var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
var toObject = require('./_to-object');
var IObject = require('./_iobject');
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || require('./_fails')(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
  } return T;
} : $assign;

},{"./_fails":221,"./_iobject":234,"./_object-gops":261,"./_object-keys":264,"./_object-pie":265,"./_to-object":299}],255:[function(require,module,exports){
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = require('./_an-object');
var dPs = require('./_object-dps');
var enumBugKeys = require('./_enum-bug-keys');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = require('./_dom-create')('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  require('./_html').appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};

},{"./_an-object":195,"./_dom-create":216,"./_enum-bug-keys":217,"./_html":230,"./_object-dps":257,"./_shared-key":282}],256:[function(require,module,exports){
arguments[4][186][0].apply(exports,arguments)
},{"./_an-object":195,"./_descriptors":215,"./_ie8-dom-define":231,"./_to-primitive":300,"dup":186}],257:[function(require,module,exports){
var dP = require('./_object-dp');
var anObject = require('./_an-object');
var getKeys = require('./_object-keys');

module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};

},{"./_an-object":195,"./_descriptors":215,"./_object-dp":256,"./_object-keys":264}],258:[function(require,module,exports){
var pIE = require('./_object-pie');
var createDesc = require('./_property-desc');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var has = require('./_has');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};

},{"./_descriptors":215,"./_has":228,"./_ie8-dom-define":231,"./_object-pie":265,"./_property-desc":273,"./_to-iobject":297,"./_to-primitive":300}],259:[function(require,module,exports){
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = require('./_to-iobject');
var gOPN = require('./_object-gopn').f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

},{"./_object-gopn":260,"./_to-iobject":297}],260:[function(require,module,exports){
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = require('./_object-keys-internal');
var hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};

},{"./_enum-bug-keys":217,"./_object-keys-internal":263}],261:[function(require,module,exports){
exports.f = Object.getOwnPropertySymbols;

},{}],262:[function(require,module,exports){
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = require('./_has');
var toObject = require('./_to-object');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};

},{"./_has":228,"./_shared-key":282,"./_to-object":299}],263:[function(require,module,exports){
var has = require('./_has');
var toIObject = require('./_to-iobject');
var arrayIndexOf = require('./_array-includes')(false);
var IE_PROTO = require('./_shared-key')('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};

},{"./_array-includes":198,"./_has":228,"./_shared-key":282,"./_to-iobject":297}],264:[function(require,module,exports){
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = require('./_object-keys-internal');
var enumBugKeys = require('./_enum-bug-keys');

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};

},{"./_enum-bug-keys":217,"./_object-keys-internal":263}],265:[function(require,module,exports){
exports.f = {}.propertyIsEnumerable;

},{}],266:[function(require,module,exports){
// most Object methods by ES6 should accept primitives
var $export = require('./_export');
var core = require('./_core');
var fails = require('./_fails');
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};

},{"./_core":209,"./_export":219,"./_fails":221}],267:[function(require,module,exports){
var getKeys = require('./_object-keys');
var toIObject = require('./_to-iobject');
var isEnum = require('./_object-pie').f;
module.exports = function (isEntries) {
  return function (it) {
    var O = toIObject(it);
    var keys = getKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) if (isEnum.call(O, key = keys[i++])) {
      result.push(isEntries ? [key, O[key]] : O[key]);
    } return result;
  };
};

},{"./_object-keys":264,"./_object-pie":265,"./_to-iobject":297}],268:[function(require,module,exports){
// all object keys, includes non-enumerable and symbols
var gOPN = require('./_object-gopn');
var gOPS = require('./_object-gops');
var anObject = require('./_an-object');
var Reflect = require('./_global').Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
  var keys = gOPN.f(anObject(it));
  var getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};

},{"./_an-object":195,"./_global":227,"./_object-gopn":260,"./_object-gops":261}],269:[function(require,module,exports){
var $parseFloat = require('./_global').parseFloat;
var $trim = require('./_string-trim').trim;

module.exports = 1 / $parseFloat(require('./_string-ws') + '-0') !== -Infinity ? function parseFloat(str) {
  var string = $trim(String(str), 3);
  var result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;

},{"./_global":227,"./_string-trim":291,"./_string-ws":292}],270:[function(require,module,exports){
var $parseInt = require('./_global').parseInt;
var $trim = require('./_string-trim').trim;
var ws = require('./_string-ws');
var hex = /^[-+]?0[xX]/;

module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
  var string = $trim(String(str), 3);
  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
} : $parseInt;

},{"./_global":227,"./_string-trim":291,"./_string-ws":292}],271:[function(require,module,exports){
module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};

},{}],272:[function(require,module,exports){
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var newPromiseCapability = require('./_new-promise-capability');

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

},{"./_an-object":195,"./_is-object":238,"./_new-promise-capability":253}],273:[function(require,module,exports){
arguments[4][187][0].apply(exports,arguments)
},{"dup":187}],274:[function(require,module,exports){
var redefine = require('./_redefine');
module.exports = function (target, src, safe) {
  for (var key in src) redefine(target, key, src[key], safe);
  return target;
};

},{"./_redefine":275}],275:[function(require,module,exports){
var global = require('./_global');
var hide = require('./_hide');
var has = require('./_has');
var SRC = require('./_uid')('src');
var $toString = require('./_function-to-string');
var TO_STRING = 'toString';
var TPL = ('' + $toString).split(TO_STRING);

require('./_core').inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});

},{"./_core":209,"./_function-to-string":226,"./_global":227,"./_has":228,"./_hide":229,"./_uid":304}],276:[function(require,module,exports){
'use strict';

var classof = require('./_classof');
var builtinExec = RegExp.prototype.exec;

 // `RegExpExec` abstract operation
// https://tc39.github.io/ecma262/#sec-regexpexec
module.exports = function (R, S) {
  var exec = R.exec;
  if (typeof exec === 'function') {
    var result = exec.call(R, S);
    if (typeof result !== 'object') {
      throw new TypeError('RegExp exec method returned something other than an Object or null');
    }
    return result;
  }
  if (classof(R) !== 'RegExp') {
    throw new TypeError('RegExp#exec called on incompatible receiver');
  }
  return builtinExec.call(R, S);
};

},{"./_classof":204}],277:[function(require,module,exports){
'use strict';

var regexpFlags = require('./_flags');

var nativeExec = RegExp.prototype.exec;
// This always refers to the native implementation, because the
// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
// which loads this file before patching the method.
var nativeReplace = String.prototype.replace;

var patchedExec = nativeExec;

var LAST_INDEX = 'lastIndex';

var UPDATES_LAST_INDEX_WRONG = (function () {
  var re1 = /a/,
      re2 = /b*/g;
  nativeExec.call(re1, 'a');
  nativeExec.call(re2, 'a');
  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;
})();

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

if (PATCH) {
  patchedExec = function exec(str) {
    var re = this;
    var lastIndex, reCopy, match, i;

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + re.source + '$(?!\\s)', regexpFlags.call(re));
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];

    match = nativeExec.call(re, str);

    if (UPDATES_LAST_INDEX_WRONG && match) {
      re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      // eslint-disable-next-line no-loop-func
      nativeReplace.call(match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    return match;
  };
}

module.exports = patchedExec;

},{"./_flags":223}],278:[function(require,module,exports){
// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};

},{}],279:[function(require,module,exports){
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = require('./_is-object');
var anObject = require('./_an-object');
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};

},{"./_an-object":195,"./_ctx":211,"./_is-object":238,"./_object-gopd":258}],280:[function(require,module,exports){
'use strict';
var global = require('./_global');
var dP = require('./_object-dp');
var DESCRIPTORS = require('./_descriptors');
var SPECIES = require('./_wks')('species');

module.exports = function (KEY) {
  var C = global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};

},{"./_descriptors":215,"./_global":227,"./_object-dp":256,"./_wks":309}],281:[function(require,module,exports){
var def = require('./_object-dp').f;
var has = require('./_has');
var TAG = require('./_wks')('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};

},{"./_has":228,"./_object-dp":256,"./_wks":309}],282:[function(require,module,exports){
var shared = require('./_shared')('keys');
var uid = require('./_uid');
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};

},{"./_shared":283,"./_uid":304}],283:[function(require,module,exports){
var core = require('./_core');
var global = require('./_global');
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: require('./_library') ? 'pure' : 'global',
  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
});

},{"./_core":209,"./_global":227,"./_library":246}],284:[function(require,module,exports){
// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = require('./_an-object');
var aFunction = require('./_a-function');
var SPECIES = require('./_wks')('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};

},{"./_a-function":190,"./_an-object":195,"./_wks":309}],285:[function(require,module,exports){
'use strict';
var fails = require('./_fails');

module.exports = function (method, arg) {
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call
    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);
  });
};

},{"./_fails":221}],286:[function(require,module,exports){
var toInteger = require('./_to-integer');
var defined = require('./_defined');
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

},{"./_defined":214,"./_to-integer":296}],287:[function(require,module,exports){
// helper for String#{startsWith, endsWith, includes}
var isRegExp = require('./_is-regexp');
var defined = require('./_defined');

module.exports = function (that, searchString, NAME) {
  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};

},{"./_defined":214,"./_is-regexp":239}],288:[function(require,module,exports){
var $export = require('./_export');
var fails = require('./_fails');
var defined = require('./_defined');
var quot = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function (string, tag, attribute, value) {
  var S = String(defined(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function (NAME, exec) {
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function () {
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};

},{"./_defined":214,"./_export":219,"./_fails":221}],289:[function(require,module,exports){
// https://github.com/tc39/proposal-string-pad-start-end
var toLength = require('./_to-length');
var repeat = require('./_string-repeat');
var defined = require('./_defined');

module.exports = function (that, maxLength, fillString, left) {
  var S = String(defined(that));
  var stringLength = S.length;
  var fillStr = fillString === undefined ? ' ' : String(fillString);
  var intMaxLength = toLength(maxLength);
  if (intMaxLength <= stringLength || fillStr == '') return S;
  var fillLen = intMaxLength - stringLength;
  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};

},{"./_defined":214,"./_string-repeat":290,"./_to-length":298}],290:[function(require,module,exports){
'use strict';
var toInteger = require('./_to-integer');
var defined = require('./_defined');

module.exports = function repeat(count) {
  var str = String(defined(this));
  var res = '';
  var n = toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
  return res;
};

},{"./_defined":214,"./_to-integer":296}],291:[function(require,module,exports){
var $export = require('./_export');
var defined = require('./_defined');
var fails = require('./_fails');
var spaces = require('./_string-ws');
var space = '[' + spaces + ']';
var non = '\u200b\u0085';
var ltrim = RegExp('^' + space + space + '*');
var rtrim = RegExp(space + space + '*$');

var exporter = function (KEY, exec, ALIAS) {
  var exp = {};
  var FORCE = fails(function () {
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if (ALIAS) exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function (string, TYPE) {
  string = String(defined(string));
  if (TYPE & 1) string = string.replace(ltrim, '');
  if (TYPE & 2) string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;

},{"./_defined":214,"./_export":219,"./_fails":221,"./_string-ws":292}],292:[function(require,module,exports){
module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

},{}],293:[function(require,module,exports){
var ctx = require('./_ctx');
var invoke = require('./_invoke');
var html = require('./_html');
var cel = require('./_dom-create');
var global = require('./_global');
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (require('./_cof')(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};

},{"./_cof":205,"./_ctx":211,"./_dom-create":216,"./_global":227,"./_html":230,"./_invoke":233}],294:[function(require,module,exports){
var toInteger = require('./_to-integer');
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

},{"./_to-integer":296}],295:[function(require,module,exports){
// https://tc39.github.io/ecma262/#sec-toindex
var toInteger = require('./_to-integer');
var toLength = require('./_to-length');
module.exports = function (it) {
  if (it === undefined) return 0;
  var number = toInteger(it);
  var length = toLength(number);
  if (number !== length) throw RangeError('Wrong length!');
  return length;
};

},{"./_to-integer":296,"./_to-length":298}],296:[function(require,module,exports){
// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

},{}],297:[function(require,module,exports){
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./_iobject');
var defined = require('./_defined');
module.exports = function (it) {
  return IObject(defined(it));
};

},{"./_defined":214,"./_iobject":234}],298:[function(require,module,exports){
// 7.1.15 ToLength
var toInteger = require('./_to-integer');
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

},{"./_to-integer":296}],299:[function(require,module,exports){
// 7.1.13 ToObject(argument)
var defined = require('./_defined');
module.exports = function (it) {
  return Object(defined(it));
};

},{"./_defined":214}],300:[function(require,module,exports){
arguments[4][188][0].apply(exports,arguments)
},{"./_is-object":238,"dup":188}],301:[function(require,module,exports){
'use strict';
if (require('./_descriptors')) {
  var LIBRARY = require('./_library');
  var global = require('./_global');
  var fails = require('./_fails');
  var $export = require('./_export');
  var $typed = require('./_typed');
  var $buffer = require('./_typed-buffer');
  var ctx = require('./_ctx');
  var anInstance = require('./_an-instance');
  var propertyDesc = require('./_property-desc');
  var hide = require('./_hide');
  var redefineAll = require('./_redefine-all');
  var toInteger = require('./_to-integer');
  var toLength = require('./_to-length');
  var toIndex = require('./_to-index');
  var toAbsoluteIndex = require('./_to-absolute-index');
  var toPrimitive = require('./_to-primitive');
  var has = require('./_has');
  var classof = require('./_classof');
  var isObject = require('./_is-object');
  var toObject = require('./_to-object');
  var isArrayIter = require('./_is-array-iter');
  var create = require('./_object-create');
  var getPrototypeOf = require('./_object-gpo');
  var gOPN = require('./_object-gopn').f;
  var getIterFn = require('./core.get-iterator-method');
  var uid = require('./_uid');
  var wks = require('./_wks');
  var createArrayMethod = require('./_array-methods');
  var createArrayIncludes = require('./_array-includes');
  var speciesConstructor = require('./_species-constructor');
  var ArrayIterators = require('./es6.array.iterator');
  var Iterators = require('./_iterators');
  var $iterDetect = require('./_iter-detect');
  var setSpecies = require('./_set-species');
  var arrayFill = require('./_array-fill');
  var arrayCopyWithin = require('./_array-copy-within');
  var $DP = require('./_object-dp');
  var $GOPD = require('./_object-gopd');
  var dP = $DP.f;
  var gOPD = $GOPD.f;
  var RangeError = global.RangeError;
  var TypeError = global.TypeError;
  var Uint8Array = global.Uint8Array;
  var ARRAY_BUFFER = 'ArrayBuffer';
  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
  var PROTOTYPE = 'prototype';
  var ArrayProto = Array[PROTOTYPE];
  var $ArrayBuffer = $buffer.ArrayBuffer;
  var $DataView = $buffer.DataView;
  var arrayForEach = createArrayMethod(0);
  var arrayFilter = createArrayMethod(2);
  var arraySome = createArrayMethod(3);
  var arrayEvery = createArrayMethod(4);
  var arrayFind = createArrayMethod(5);
  var arrayFindIndex = createArrayMethod(6);
  var arrayIncludes = createArrayIncludes(true);
  var arrayIndexOf = createArrayIncludes(false);
  var arrayValues = ArrayIterators.values;
  var arrayKeys = ArrayIterators.keys;
  var arrayEntries = ArrayIterators.entries;
  var arrayLastIndexOf = ArrayProto.lastIndexOf;
  var arrayReduce = ArrayProto.reduce;
  var arrayReduceRight = ArrayProto.reduceRight;
  var arrayJoin = ArrayProto.join;
  var arraySort = ArrayProto.sort;
  var arraySlice = ArrayProto.slice;
  var arrayToString = ArrayProto.toString;
  var arrayToLocaleString = ArrayProto.toLocaleString;
  var ITERATOR = wks('iterator');
  var TAG = wks('toStringTag');
  var TYPED_CONSTRUCTOR = uid('typed_constructor');
  var DEF_CONSTRUCTOR = uid('def_constructor');
  var ALL_CONSTRUCTORS = $typed.CONSTR;
  var TYPED_ARRAY = $typed.TYPED;
  var VIEW = $typed.VIEW;
  var WRONG_LENGTH = 'Wrong length!';

  var $map = createArrayMethod(1, function (O, length) {
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });

  var LITTLE_ENDIAN = fails(function () {
    // eslint-disable-next-line no-undef
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });

  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
    new Uint8Array(1).set({});
  });

  var toOffset = function (it, BYTES) {
    var offset = toInteger(it);
    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function (it) {
    if (isObject(it) && TYPED_ARRAY in it) return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function (C, length) {
    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
      throw TypeError('It is not a typed array constructor!');
    } return new C(length);
  };

  var speciesFromList = function (O, list) {
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function (C, list) {
    var index = 0;
    var length = list.length;
    var result = allocate(C, length);
    while (length > index) result[index] = list[index++];
    return result;
  };

  var addGetter = function (it, key, internal) {
    dP(it, key, { get: function () { return this._d[internal]; } });
  };

  var $from = function from(source /* , mapfn, thisArg */) {
    var O = toObject(source);
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var iterFn = getIterFn(O);
    var i, length, values, result, step, iterator;
    if (iterFn != undefined && !isArrayIter(iterFn)) {
      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
        values.push(step.value);
      } O = values;
    }
    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var $of = function of(/* ...items */) {
    var index = 0;
    var length = arguments.length;
    var result = allocate(this, length);
    while (length > index) result[index] = arguments[index++];
    return result;
  };

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });

  var $toLocaleString = function toLocaleString() {
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start /* , end */) {
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn /* , thisArg */) {
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn /* , thisArg */) {
      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
        arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate /* , thisArg */) {
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate /* , thisArg */) {
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn /* , thisArg */) {
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement /* , fromIndex */) {
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement /* , fromIndex */) {
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator) { // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn /* , thisArg */) {
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse() {
      var that = this;
      var length = validate(that).length;
      var middle = Math.floor(length / 2);
      var index = 0;
      var value;
      while (index < middle) {
        value = that[index];
        that[index++] = that[--length];
        that[length] = value;
      } return that;
    },
    some: function some(callbackfn /* , thisArg */) {
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn) {
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end) {
      var O = validate(this);
      var length = O.length;
      var $begin = toAbsoluteIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
        O.buffer,
        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)
      );
    }
  };

  var $slice = function slice(start, end) {
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike /* , offset */) {
    validate(this);
    var offset = toOffset(arguments[1], 1);
    var length = this.length;
    var src = toObject(arrayLike);
    var len = toLength(src.length);
    var index = 0;
    if (len + offset > length) throw RangeError(WRONG_LENGTH);
    while (index < len) this[offset + index] = src[index++];
  };

  var $iterators = {
    entries: function entries() {
      return arrayEntries.call(validate(this));
    },
    keys: function keys() {
      return arrayKeys.call(validate(this));
    },
    values: function values() {
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function (target, key) {
    return isObject(target)
      && target[TYPED_ARRAY]
      && typeof key != 'symbol'
      && key in target
      && String(+key) == String(key);
  };
  var $getDesc = function getOwnPropertyDescriptor(target, key) {
    return isTAIndex(target, key = toPrimitive(key, true))
      ? propertyDesc(2, target[key])
      : gOPD(target, key);
  };
  var $setDesc = function defineProperty(target, key, desc) {
    if (isTAIndex(target, key = toPrimitive(key, true))
      && isObject(desc)
      && has(desc, 'value')
      && !has(desc, 'get')
      && !has(desc, 'set')
      // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable
      && (!has(desc, 'writable') || desc.writable)
      && (!has(desc, 'enumerable') || desc.enumerable)
    ) {
      target[key] = desc.value;
      return target;
    } return dP(target, key, desc);
  };

  if (!ALL_CONSTRUCTORS) {
    $GOPD.f = $getDesc;
    $DP.f = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty: $setDesc
  });

  if (fails(function () { arrayToString.call({}); })) {
    arrayToString = arrayToLocaleString = function toString() {
      return arrayJoin.call(this);
    };
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice: $slice,
    set: $set,
    constructor: function () { /* noop */ },
    toString: arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function () { return this[TYPED_ARRAY]; }
  });

  // eslint-disable-next-line max-statements
  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
    CLAMPED = !!CLAMPED;
    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + KEY;
    var SETTER = 'set' + KEY;
    var TypedArray = global[NAME];
    var Base = TypedArray || {};
    var TAC = TypedArray && getPrototypeOf(TypedArray);
    var FORCED = !TypedArray || !$typed.ABV;
    var O = {};
    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
    var getter = function (that, index) {
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };
    var setter = function (that, index, value) {
      var data = that._d;
      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };
    var addElement = function (that, index) {
      dP(that, index, {
        get: function () {
          return getter(this, index);
        },
        set: function (value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if (FORCED) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME, '_d');
        var index = 0;
        var offset = 0;
        var buffer, byteLength, length, klass;
        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new $ArrayBuffer(byteLength);
        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;
          if ($length === undefined) {
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if (TYPED_ARRAY in data) {
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }
        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });
        while (index < length) addElement(that, index++);
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if (!fails(function () {
      TypedArray(1);
    }) || !fails(function () {
      new TypedArray(-1); // eslint-disable-line no-new
    }) || !$iterDetect(function (iter) {
      new TypedArray(); // eslint-disable-line no-new
      new TypedArray(null); // eslint-disable-line no-new
      new TypedArray(1.5); // eslint-disable-line no-new
      new TypedArray(iter); // eslint-disable-line no-new
    }, true)) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME);
        var klass;
        // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645
        if (!isObject(data)) return new Base(toIndex(data));
        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          return $length !== undefined
            ? new Base(data, toOffset($offset, BYTES), $length)
            : $offset !== undefined
              ? new Base(data, toOffset($offset, BYTES))
              : new Base(data);
        }
        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
    }
    var $nativeIterator = TypedArrayPrototype[ITERATOR];
    var CORRECT_ITER_NAME = !!$nativeIterator
      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
    var $iterator = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
      dP(TypedArrayPrototype, TAG, {
        get: function () { return NAME; }
      });
    }

    O[NAME] = TypedArray;

    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES
    });

    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {
      from: $from,
      of: $of
    });

    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

    $export($export.P, NAME, proto);

    setSpecies(NAME);

    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });

    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;

    $export($export.P + $export.F * fails(function () {
      new TypedArray(1).slice();
    }), NAME, { slice: $slice });

    $export($export.P + $export.F * (fails(function () {
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
    }) || !fails(function () {
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, { toLocaleString: $toLocaleString });

    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function () { /* empty */ };

},{"./_an-instance":194,"./_array-copy-within":196,"./_array-fill":197,"./_array-includes":198,"./_array-methods":199,"./_classof":204,"./_ctx":211,"./_descriptors":215,"./_export":219,"./_fails":221,"./_global":227,"./_has":228,"./_hide":229,"./_is-array-iter":235,"./_is-object":238,"./_iter-detect":243,"./_iterators":245,"./_library":246,"./_object-create":255,"./_object-dp":256,"./_object-gopd":258,"./_object-gopn":260,"./_object-gpo":262,"./_property-desc":273,"./_redefine-all":274,"./_set-species":280,"./_species-constructor":284,"./_to-absolute-index":294,"./_to-index":295,"./_to-integer":296,"./_to-length":298,"./_to-object":299,"./_to-primitive":300,"./_typed":303,"./_typed-buffer":302,"./_uid":304,"./_wks":309,"./core.get-iterator-method":310,"./es6.array.iterator":321}],302:[function(require,module,exports){
'use strict';
var global = require('./_global');
var DESCRIPTORS = require('./_descriptors');
var LIBRARY = require('./_library');
var $typed = require('./_typed');
var hide = require('./_hide');
var redefineAll = require('./_redefine-all');
var fails = require('./_fails');
var anInstance = require('./_an-instance');
var toInteger = require('./_to-integer');
var toLength = require('./_to-length');
var toIndex = require('./_to-index');
var gOPN = require('./_object-gopn').f;
var dP = require('./_object-dp').f;
var arrayFill = require('./_array-fill');
var setToStringTag = require('./_set-to-string-tag');
var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length!';
var WRONG_INDEX = 'Wrong index!';
var $ArrayBuffer = global[ARRAY_BUFFER];
var $DataView = global[DATA_VIEW];
var Math = global.Math;
var RangeError = global.RangeError;
// eslint-disable-next-line no-shadow-restricted-names
var Infinity = global.Infinity;
var BaseBuffer = $ArrayBuffer;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;
var BUFFER = 'buffer';
var BYTE_LENGTH = 'byteLength';
var BYTE_OFFSET = 'byteOffset';
var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
function packIEEE754(value, mLen, nBytes) {
  var buffer = new Array(nBytes);
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var i = 0;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  var e, m, c;
  value = abs(value);
  // eslint-disable-next-line no-self-compare
  if (value != value || value === Infinity) {
    // eslint-disable-next-line no-self-compare
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);
    if (value * (c = pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
  buffer[--i] |= s * 128;
  return buffer;
}
function unpackIEEE754(buffer, mLen, nBytes) {
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = eLen - 7;
  var i = nBytes - 1;
  var s = buffer[i--];
  var e = s & 127;
  var m;
  s >>= 7;
  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  } return (s ? -1 : 1) * m * pow(2, e - mLen);
}

function unpackI32(bytes) {
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
}
function packI8(it) {
  return [it & 0xff];
}
function packI16(it) {
  return [it & 0xff, it >> 8 & 0xff];
}
function packI32(it) {
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
}
function packF64(it) {
  return packIEEE754(it, 52, 8);
}
function packF32(it) {
  return packIEEE754(it, 23, 4);
}

function addGetter(C, key, internal) {
  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });
}

function get(view, bytes, index, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
}
function set(view, bytes, index, conversion, value, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = conversion(+value);
  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
}

if (!$typed.ABV) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
    var byteLength = toIndex(length);
    this._b = arrayFill.call(new Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH];
    var offset = toInteger(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if (DESCRIPTORS) {
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if (!fails(function () {
    $ArrayBuffer(1);
  }) || !fails(function () {
    new $ArrayBuffer(-1); // eslint-disable-line no-new
  }) || fails(function () {
    new $ArrayBuffer(); // eslint-disable-line no-new
    new $ArrayBuffer(1.5); // eslint-disable-line no-new
    new $ArrayBuffer(NaN); // eslint-disable-line no-new
    return $ArrayBuffer.name != ARRAY_BUFFER;
  })) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, $ArrayBuffer);
      return new BaseBuffer(toIndex(length));
    };
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
    }
    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var view = new $DataView(new $ArrayBuffer(2));
  var $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;

},{"./_an-instance":194,"./_array-fill":197,"./_descriptors":215,"./_fails":221,"./_global":227,"./_hide":229,"./_library":246,"./_object-dp":256,"./_object-gopn":260,"./_redefine-all":274,"./_set-to-string-tag":281,"./_to-index":295,"./_to-integer":296,"./_to-length":298,"./_typed":303}],303:[function(require,module,exports){
var global = require('./_global');
var hide = require('./_hide');
var uid = require('./_uid');
var TYPED = uid('typed_array');
var VIEW = uid('view');
var ABV = !!(global.ArrayBuffer && global.DataView);
var CONSTR = ABV;
var i = 0;
var l = 9;
var Typed;

var TypedArrayConstructors = (
  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
).split(',');

while (i < l) {
  if (Typed = global[TypedArrayConstructors[i++]]) {
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV: ABV,
  CONSTR: CONSTR,
  TYPED: TYPED,
  VIEW: VIEW
};

},{"./_global":227,"./_hide":229,"./_uid":304}],304:[function(require,module,exports){
var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

},{}],305:[function(require,module,exports){
var global = require('./_global');
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';

},{"./_global":227}],306:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};

},{"./_is-object":238}],307:[function(require,module,exports){
var global = require('./_global');
var core = require('./_core');
var LIBRARY = require('./_library');
var wksExt = require('./_wks-ext');
var defineProperty = require('./_object-dp').f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};

},{"./_core":209,"./_global":227,"./_library":246,"./_object-dp":256,"./_wks-ext":308}],308:[function(require,module,exports){
exports.f = require('./_wks');

},{"./_wks":309}],309:[function(require,module,exports){
var store = require('./_shared')('wks');
var uid = require('./_uid');
var Symbol = require('./_global').Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

},{"./_global":227,"./_shared":283,"./_uid":304}],310:[function(require,module,exports){
var classof = require('./_classof');
var ITERATOR = require('./_wks')('iterator');
var Iterators = require('./_iterators');
module.exports = require('./_core').getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};

},{"./_classof":204,"./_core":209,"./_iterators":245,"./_wks":309}],311:[function(require,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', { copyWithin: require('./_array-copy-within') });

require('./_add-to-unscopables')('copyWithin');

},{"./_add-to-unscopables":192,"./_array-copy-within":196,"./_export":219}],312:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $every = require('./_array-methods')(4);

$export($export.P + $export.F * !require('./_strict-method')([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn /* , thisArg */) {
    return $every(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":199,"./_export":219,"./_strict-method":285}],313:[function(require,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', { fill: require('./_array-fill') });

require('./_add-to-unscopables')('fill');

},{"./_add-to-unscopables":192,"./_array-fill":197,"./_export":219}],314:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $filter = require('./_array-methods')(2);

$export($export.P + $export.F * !require('./_strict-method')([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":199,"./_export":219,"./_strict-method":285}],315:[function(require,module,exports){
'use strict';
// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var $export = require('./_export');
var $find = require('./_array-methods')(6);
var KEY = 'findIndex';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);

},{"./_add-to-unscopables":192,"./_array-methods":199,"./_export":219}],316:[function(require,module,exports){
'use strict';
// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = require('./_export');
var $find = require('./_array-methods')(5);
var KEY = 'find';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);

},{"./_add-to-unscopables":192,"./_array-methods":199,"./_export":219}],317:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $forEach = require('./_array-methods')(0);
var STRICT = require('./_strict-method')([].forEach, true);

$export($export.P + $export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn /* , thisArg */) {
    return $forEach(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":199,"./_export":219,"./_strict-method":285}],318:[function(require,module,exports){
'use strict';
var ctx = require('./_ctx');
var $export = require('./_export');
var toObject = require('./_to-object');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var toLength = require('./_to-length');
var createProperty = require('./_create-property');
var getIterFn = require('./core.get-iterator-method');

$export($export.S + $export.F * !require('./_iter-detect')(function (iter) { Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});

},{"./_create-property":210,"./_ctx":211,"./_export":219,"./_is-array-iter":235,"./_iter-call":240,"./_iter-detect":243,"./_to-length":298,"./_to-object":299,"./core.get-iterator-method":310}],319:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $indexOf = require('./_array-includes')(false);
var $native = [].indexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? $native.apply(this, arguments) || 0
      : $indexOf(this, searchElement, arguments[1]);
  }
});

},{"./_array-includes":198,"./_export":219,"./_strict-method":285}],320:[function(require,module,exports){
// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
var $export = require('./_export');

$export($export.S, 'Array', { isArray: require('./_is-array') });

},{"./_export":219,"./_is-array":236}],321:[function(require,module,exports){
'use strict';
var addToUnscopables = require('./_add-to-unscopables');
var step = require('./_iter-step');
var Iterators = require('./_iterators');
var toIObject = require('./_to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

},{"./_add-to-unscopables":192,"./_iter-define":242,"./_iter-step":244,"./_iterators":245,"./_to-iobject":297}],322:[function(require,module,exports){
'use strict';
// 22.1.3.13 Array.prototype.join(separator)
var $export = require('./_export');
var toIObject = require('./_to-iobject');
var arrayJoin = [].join;

// fallback for not array-like strings
$export($export.P + $export.F * (require('./_iobject') != Object || !require('./_strict-method')(arrayJoin)), 'Array', {
  join: function join(separator) {
    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
  }
});

},{"./_export":219,"./_iobject":234,"./_strict-method":285,"./_to-iobject":297}],323:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var toIObject = require('./_to-iobject');
var toInteger = require('./_to-integer');
var toLength = require('./_to-length');
var $native = [].lastIndexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
    // convert -0 to +0
    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
    var O = toIObject(this);
    var length = toLength(O.length);
    var index = length - 1;
    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
    if (index < 0) index = length + index;
    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;
    return -1;
  }
});

},{"./_export":219,"./_strict-method":285,"./_to-integer":296,"./_to-iobject":297,"./_to-length":298}],324:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $map = require('./_array-methods')(1);

$export($export.P + $export.F * !require('./_strict-method')([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":199,"./_export":219,"./_strict-method":285}],325:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var createProperty = require('./_create-property');

// WebKit Array.of isn't generic
$export($export.S + $export.F * require('./_fails')(function () {
  function F() { /* empty */ }
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */) {
    var index = 0;
    var aLen = arguments.length;
    var result = new (typeof this == 'function' ? this : Array)(aLen);
    while (aLen > index) createProperty(result, index, arguments[index++]);
    result.length = aLen;
    return result;
  }
});

},{"./_create-property":210,"./_export":219,"./_fails":221}],326:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $reduce = require('./_array-reduce');

$export($export.P + $export.F * !require('./_strict-method')([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});

},{"./_array-reduce":200,"./_export":219,"./_strict-method":285}],327:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $reduce = require('./_array-reduce');

$export($export.P + $export.F * !require('./_strict-method')([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});

},{"./_array-reduce":200,"./_export":219,"./_strict-method":285}],328:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var html = require('./_html');
var cof = require('./_cof');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
var arraySlice = [].slice;

// fallback for not array-like ES3 strings and DOM objects
$export($export.P + $export.F * require('./_fails')(function () {
  if (html) arraySlice.call(html);
}), 'Array', {
  slice: function slice(begin, end) {
    var len = toLength(this.length);
    var klass = cof(this);
    end = end === undefined ? len : end;
    if (klass == 'Array') return arraySlice.call(this, begin, end);
    var start = toAbsoluteIndex(begin, len);
    var upTo = toAbsoluteIndex(end, len);
    var size = toLength(upTo - start);
    var cloned = new Array(size);
    var i = 0;
    for (; i < size; i++) cloned[i] = klass == 'String'
      ? this.charAt(start + i)
      : this[start + i];
    return cloned;
  }
});

},{"./_cof":205,"./_export":219,"./_fails":221,"./_html":230,"./_to-absolute-index":294,"./_to-length":298}],329:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $some = require('./_array-methods')(3);

$export($export.P + $export.F * !require('./_strict-method')([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn /* , thisArg */) {
    return $some(this, callbackfn, arguments[1]);
  }
});

},{"./_array-methods":199,"./_export":219,"./_strict-method":285}],330:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var aFunction = require('./_a-function');
var toObject = require('./_to-object');
var fails = require('./_fails');
var $sort = [].sort;
var test = [1, 2, 3];

$export($export.P + $export.F * (fails(function () {
  // IE8-
  test.sort(undefined);
}) || !fails(function () {
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !require('./_strict-method')($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn) {
    return comparefn === undefined
      ? $sort.call(toObject(this))
      : $sort.call(toObject(this), aFunction(comparefn));
  }
});

},{"./_a-function":190,"./_export":219,"./_fails":221,"./_strict-method":285,"./_to-object":299}],331:[function(require,module,exports){
require('./_set-species')('Array');

},{"./_set-species":280}],332:[function(require,module,exports){
// 20.3.3.1 / 15.9.4.4 Date.now()
var $export = require('./_export');

$export($export.S, 'Date', { now: function () { return new Date().getTime(); } });

},{"./_export":219}],333:[function(require,module,exports){
// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var $export = require('./_export');
var toISOString = require('./_date-to-iso-string');

// PhantomJS / old WebKit has a broken implementations
$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
  toISOString: toISOString
});

},{"./_date-to-iso-string":212,"./_export":219}],334:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var toPrimitive = require('./_to-primitive');

$export($export.P + $export.F * require('./_fails')(function () {
  return new Date(NaN).toJSON() !== null
    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;
}), 'Date', {
  // eslint-disable-next-line no-unused-vars
  toJSON: function toJSON(key) {
    var O = toObject(this);
    var pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});

},{"./_export":219,"./_fails":221,"./_to-object":299,"./_to-primitive":300}],335:[function(require,module,exports){
var TO_PRIMITIVE = require('./_wks')('toPrimitive');
var proto = Date.prototype;

if (!(TO_PRIMITIVE in proto)) require('./_hide')(proto, TO_PRIMITIVE, require('./_date-to-primitive'));

},{"./_date-to-primitive":213,"./_hide":229,"./_wks":309}],336:[function(require,module,exports){
var DateProto = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var $toString = DateProto[TO_STRING];
var getTime = DateProto.getTime;
if (new Date(NaN) + '' != INVALID_DATE) {
  require('./_redefine')(DateProto, TO_STRING, function toString() {
    var value = getTime.call(this);
    // eslint-disable-next-line no-self-compare
    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}

},{"./_redefine":275}],337:[function(require,module,exports){
// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = require('./_export');

$export($export.P, 'Function', { bind: require('./_bind') });

},{"./_bind":203,"./_export":219}],338:[function(require,module,exports){
'use strict';
var isObject = require('./_is-object');
var getPrototypeOf = require('./_object-gpo');
var HAS_INSTANCE = require('./_wks')('hasInstance');
var FunctionProto = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if (!(HAS_INSTANCE in FunctionProto)) require('./_object-dp').f(FunctionProto, HAS_INSTANCE, { value: function (O) {
  if (typeof this != 'function' || !isObject(O)) return false;
  if (!isObject(this.prototype)) return O instanceof this;
  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
  while (O = getPrototypeOf(O)) if (this.prototype === O) return true;
  return false;
} });

},{"./_is-object":238,"./_object-dp":256,"./_object-gpo":262,"./_wks":309}],339:[function(require,module,exports){
var dP = require('./_object-dp').f;
var FProto = Function.prototype;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// 19.2.4.2 name
NAME in FProto || require('./_descriptors') && dP(FProto, NAME, {
  configurable: true,
  get: function () {
    try {
      return ('' + this).match(nameRE)[1];
    } catch (e) {
      return '';
    }
  }
});

},{"./_descriptors":215,"./_object-dp":256}],340:[function(require,module,exports){
'use strict';
var strong = require('./_collection-strong');
var validate = require('./_validate-collection');
var MAP = 'Map';

// 23.1 Map Objects
module.exports = require('./_collection')(MAP, function (get) {
  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);

},{"./_collection":208,"./_collection-strong":206,"./_validate-collection":306}],341:[function(require,module,exports){
// 20.2.2.3 Math.acosh(x)
var $export = require('./_export');
var log1p = require('./_math-log1p');
var sqrt = Math.sqrt;
var $acosh = Math.acosh;

$export($export.S + $export.F * !($acosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN
  && $acosh(Infinity) == Infinity
), 'Math', {
  acosh: function acosh(x) {
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? Math.log(x) + Math.LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});

},{"./_export":219,"./_math-log1p":249}],342:[function(require,module,exports){
// 20.2.2.5 Math.asinh(x)
var $export = require('./_export');
var $asinh = Math.asinh;

function asinh(x) {
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

// Tor Browser bug: Math.asinh(0) -> -0
$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });

},{"./_export":219}],343:[function(require,module,exports){
// 20.2.2.7 Math.atanh(x)
var $export = require('./_export');
var $atanh = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0
$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x) {
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});

},{"./_export":219}],344:[function(require,module,exports){
// 20.2.2.9 Math.cbrt(x)
var $export = require('./_export');
var sign = require('./_math-sign');

$export($export.S, 'Math', {
  cbrt: function cbrt(x) {
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});

},{"./_export":219,"./_math-sign":250}],345:[function(require,module,exports){
// 20.2.2.11 Math.clz32(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  clz32: function clz32(x) {
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});

},{"./_export":219}],346:[function(require,module,exports){
// 20.2.2.12 Math.cosh(x)
var $export = require('./_export');
var exp = Math.exp;

$export($export.S, 'Math', {
  cosh: function cosh(x) {
    return (exp(x = +x) + exp(-x)) / 2;
  }
});

},{"./_export":219}],347:[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
var $export = require('./_export');
var $expm1 = require('./_math-expm1');

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });

},{"./_export":219,"./_math-expm1":247}],348:[function(require,module,exports){
// 20.2.2.16 Math.fround(x)
var $export = require('./_export');

$export($export.S, 'Math', { fround: require('./_math-fround') });

},{"./_export":219,"./_math-fround":248}],349:[function(require,module,exports){
// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export = require('./_export');
var abs = Math.abs;

$export($export.S, 'Math', {
  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;
    while (i < aLen) {
      arg = abs(arguments[i++]);
      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});

},{"./_export":219}],350:[function(require,module,exports){
// 20.2.2.18 Math.imul(x, y)
var $export = require('./_export');
var $imul = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * require('./_fails')(function () {
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y) {
    var UINT16 = 0xffff;
    var xn = +x;
    var yn = +y;
    var xl = UINT16 & xn;
    var yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});

},{"./_export":219,"./_fails":221}],351:[function(require,module,exports){
// 20.2.2.21 Math.log10(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log10: function log10(x) {
    return Math.log(x) * Math.LOG10E;
  }
});

},{"./_export":219}],352:[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
var $export = require('./_export');

$export($export.S, 'Math', { log1p: require('./_math-log1p') });

},{"./_export":219,"./_math-log1p":249}],353:[function(require,module,exports){
// 20.2.2.22 Math.log2(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log2: function log2(x) {
    return Math.log(x) / Math.LN2;
  }
});

},{"./_export":219}],354:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
var $export = require('./_export');

$export($export.S, 'Math', { sign: require('./_math-sign') });

},{"./_export":219,"./_math-sign":250}],355:[function(require,module,exports){
// 20.2.2.30 Math.sinh(x)
var $export = require('./_export');
var expm1 = require('./_math-expm1');
var exp = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * require('./_fails')(function () {
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x) {
    return Math.abs(x = +x) < 1
      ? (expm1(x) - expm1(-x)) / 2
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});

},{"./_export":219,"./_fails":221,"./_math-expm1":247}],356:[function(require,module,exports){
// 20.2.2.33 Math.tanh(x)
var $export = require('./_export');
var expm1 = require('./_math-expm1');
var exp = Math.exp;

$export($export.S, 'Math', {
  tanh: function tanh(x) {
    var a = expm1(x = +x);
    var b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});

},{"./_export":219,"./_math-expm1":247}],357:[function(require,module,exports){
// 20.2.2.34 Math.trunc(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  trunc: function trunc(it) {
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});

},{"./_export":219}],358:[function(require,module,exports){
'use strict';
var global = require('./_global');
var has = require('./_has');
var cof = require('./_cof');
var inheritIfRequired = require('./_inherit-if-required');
var toPrimitive = require('./_to-primitive');
var fails = require('./_fails');
var gOPN = require('./_object-gopn').f;
var gOPD = require('./_object-gopd').f;
var dP = require('./_object-dp').f;
var $trim = require('./_string-trim').trim;
var NUMBER = 'Number';
var $Number = global[NUMBER];
var Base = $Number;
var proto = $Number.prototype;
// Opera ~12 has broken Object#toString
var BROKEN_COF = cof(require('./_object-create')(proto)) == NUMBER;
var TRIM = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function (argument) {
  var it = toPrimitive(argument, false);
  if (typeof it == 'string' && it.length > 2) {
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0);
    var third, radix, maxCode;
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
        default: return +it;
      }
      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
  $Number = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var that = this;
    return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)
        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for (var keys = require('./_descriptors') ? gOPN(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++) {
    if (has(Base, key = keys[j]) && !has($Number, key)) {
      dP($Number, key, gOPD(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  require('./_redefine')(global, NUMBER, $Number);
}

},{"./_cof":205,"./_descriptors":215,"./_fails":221,"./_global":227,"./_has":228,"./_inherit-if-required":232,"./_object-create":255,"./_object-dp":256,"./_object-gopd":258,"./_object-gopn":260,"./_redefine":275,"./_string-trim":291,"./_to-primitive":300}],359:[function(require,module,exports){
// 20.1.2.1 Number.EPSILON
var $export = require('./_export');

$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });

},{"./_export":219}],360:[function(require,module,exports){
// 20.1.2.2 Number.isFinite(number)
var $export = require('./_export');
var _isFinite = require('./_global').isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it) {
    return typeof it == 'number' && _isFinite(it);
  }
});

},{"./_export":219,"./_global":227}],361:[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var $export = require('./_export');

$export($export.S, 'Number', { isInteger: require('./_is-integer') });

},{"./_export":219,"./_is-integer":237}],362:[function(require,module,exports){
// 20.1.2.4 Number.isNaN(number)
var $export = require('./_export');

$export($export.S, 'Number', {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare
    return number != number;
  }
});

},{"./_export":219}],363:[function(require,module,exports){
// 20.1.2.5 Number.isSafeInteger(number)
var $export = require('./_export');
var isInteger = require('./_is-integer');
var abs = Math.abs;

$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number) {
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});

},{"./_export":219,"./_is-integer":237}],364:[function(require,module,exports){
// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });

},{"./_export":219}],365:[function(require,module,exports){
// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });

},{"./_export":219}],366:[function(require,module,exports){
var $export = require('./_export');
var $parseFloat = require('./_parse-float');
// 20.1.2.12 Number.parseFloat(string)
$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });

},{"./_export":219,"./_parse-float":269}],367:[function(require,module,exports){
var $export = require('./_export');
var $parseInt = require('./_parse-int');
// 20.1.2.13 Number.parseInt(string, radix)
$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });

},{"./_export":219,"./_parse-int":270}],368:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var toInteger = require('./_to-integer');
var aNumberValue = require('./_a-number-value');
var repeat = require('./_string-repeat');
var $toFixed = 1.0.toFixed;
var floor = Math.floor;
var data = [0, 0, 0, 0, 0, 0];
var ERROR = 'Number.toFixed: incorrect invocation!';
var ZERO = '0';

var multiply = function (n, c) {
  var i = -1;
  var c2 = c;
  while (++i < 6) {
    c2 += n * data[i];
    data[i] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};
var divide = function (n) {
  var i = 6;
  var c = 0;
  while (--i >= 0) {
    c += data[i];
    data[i] = floor(c / n);
    c = (c % n) * 1e7;
  }
};
var numToString = function () {
  var i = 6;
  var s = '';
  while (--i >= 0) {
    if (s !== '' || i === 0 || data[i] !== 0) {
      var t = String(data[i]);
      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
    }
  } return s;
};
var pow = function (x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};
var log = function (x) {
  var n = 0;
  var x2 = x;
  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }
  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  } return n;
};

$export($export.P + $export.F * (!!$toFixed && (
  0.00008.toFixed(3) !== '0.000' ||
  0.9.toFixed(0) !== '1' ||
  1.255.toFixed(2) !== '1.25' ||
  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
) || !require('./_fails')(function () {
  // V8 ~ Android 4.3-
  $toFixed.call({});
})), 'Number', {
  toFixed: function toFixed(fractionDigits) {
    var x = aNumberValue(this, ERROR);
    var f = toInteger(fractionDigits);
    var s = '';
    var m = ZERO;
    var e, z, j, k;
    if (f < 0 || f > 20) throw RangeError(ERROR);
    // eslint-disable-next-line no-self-compare
    if (x != x) return 'NaN';
    if (x <= -1e21 || x >= 1e21) return String(x);
    if (x < 0) {
      s = '-';
      x = -x;
    }
    if (x > 1e-21) {
      e = log(x * pow(2, 69, 1)) - 69;
      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if (e > 0) {
        multiply(0, z);
        j = f;
        while (j >= 7) {
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while (j >= 23) {
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        m = numToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        m = numToString() + repeat.call(ZERO, f);
      }
    }
    if (f > 0) {
      k = m.length;
      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    } return m;
  }
});

},{"./_a-number-value":191,"./_export":219,"./_fails":221,"./_string-repeat":290,"./_to-integer":296}],369:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $fails = require('./_fails');
var aNumberValue = require('./_a-number-value');
var $toPrecision = 1.0.toPrecision;

$export($export.P + $export.F * ($fails(function () {
  // IE7-
  return $toPrecision.call(1, undefined) !== '1';
}) || !$fails(function () {
  // V8 ~ Android 4.3-
  $toPrecision.call({});
})), 'Number', {
  toPrecision: function toPrecision(precision) {
    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
  }
});

},{"./_a-number-value":191,"./_export":219,"./_fails":221}],370:[function(require,module,exports){
// 19.1.3.1 Object.assign(target, source)
var $export = require('./_export');

$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });

},{"./_export":219,"./_object-assign":254}],371:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: require('./_object-create') });

},{"./_export":219,"./_object-create":255}],372:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperties: require('./_object-dps') });

},{"./_descriptors":215,"./_export":219,"./_object-dps":257}],373:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });

},{"./_descriptors":215,"./_export":219,"./_object-dp":256}],374:[function(require,module,exports){
// 19.1.2.5 Object.freeze(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;

require('./_object-sap')('freeze', function ($freeze) {
  return function freeze(it) {
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});

},{"./_is-object":238,"./_meta":251,"./_object-sap":266}],375:[function(require,module,exports){
// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = require('./_to-iobject');
var $getOwnPropertyDescriptor = require('./_object-gopd').f;

require('./_object-sap')('getOwnPropertyDescriptor', function () {
  return function getOwnPropertyDescriptor(it, key) {
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});

},{"./_object-gopd":258,"./_object-sap":266,"./_to-iobject":297}],376:[function(require,module,exports){
// 19.1.2.7 Object.getOwnPropertyNames(O)
require('./_object-sap')('getOwnPropertyNames', function () {
  return require('./_object-gopn-ext').f;
});

},{"./_object-gopn-ext":259,"./_object-sap":266}],377:[function(require,module,exports){
// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = require('./_to-object');
var $getPrototypeOf = require('./_object-gpo');

require('./_object-sap')('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return $getPrototypeOf(toObject(it));
  };
});

},{"./_object-gpo":262,"./_object-sap":266,"./_to-object":299}],378:[function(require,module,exports){
// 19.1.2.11 Object.isExtensible(O)
var isObject = require('./_is-object');

require('./_object-sap')('isExtensible', function ($isExtensible) {
  return function isExtensible(it) {
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});

},{"./_is-object":238,"./_object-sap":266}],379:[function(require,module,exports){
// 19.1.2.12 Object.isFrozen(O)
var isObject = require('./_is-object');

require('./_object-sap')('isFrozen', function ($isFrozen) {
  return function isFrozen(it) {
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});

},{"./_is-object":238,"./_object-sap":266}],380:[function(require,module,exports){
// 19.1.2.13 Object.isSealed(O)
var isObject = require('./_is-object');

require('./_object-sap')('isSealed', function ($isSealed) {
  return function isSealed(it) {
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});

},{"./_is-object":238,"./_object-sap":266}],381:[function(require,module,exports){
// 19.1.3.10 Object.is(value1, value2)
var $export = require('./_export');
$export($export.S, 'Object', { is: require('./_same-value') });

},{"./_export":219,"./_same-value":278}],382:[function(require,module,exports){
// 19.1.2.14 Object.keys(O)
var toObject = require('./_to-object');
var $keys = require('./_object-keys');

require('./_object-sap')('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});

},{"./_object-keys":264,"./_object-sap":266,"./_to-object":299}],383:[function(require,module,exports){
// 19.1.2.15 Object.preventExtensions(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;

require('./_object-sap')('preventExtensions', function ($preventExtensions) {
  return function preventExtensions(it) {
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});

},{"./_is-object":238,"./_meta":251,"./_object-sap":266}],384:[function(require,module,exports){
// 19.1.2.17 Object.seal(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;

require('./_object-sap')('seal', function ($seal) {
  return function seal(it) {
    return $seal && isObject(it) ? $seal(meta(it)) : it;
  };
});

},{"./_is-object":238,"./_meta":251,"./_object-sap":266}],385:[function(require,module,exports){
// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = require('./_export');
$export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });

},{"./_export":219,"./_set-proto":279}],386:[function(require,module,exports){
'use strict';
// 19.1.3.6 Object.prototype.toString()
var classof = require('./_classof');
var test = {};
test[require('./_wks')('toStringTag')] = 'z';
if (test + '' != '[object z]') {
  require('./_redefine')(Object.prototype, 'toString', function toString() {
    return '[object ' + classof(this) + ']';
  }, true);
}

},{"./_classof":204,"./_redefine":275,"./_wks":309}],387:[function(require,module,exports){
var $export = require('./_export');
var $parseFloat = require('./_parse-float');
// 18.2.4 parseFloat(string)
$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });

},{"./_export":219,"./_parse-float":269}],388:[function(require,module,exports){
var $export = require('./_export');
var $parseInt = require('./_parse-int');
// 18.2.5 parseInt(string, radix)
$export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });

},{"./_export":219,"./_parse-int":270}],389:[function(require,module,exports){
'use strict';
var LIBRARY = require('./_library');
var global = require('./_global');
var ctx = require('./_ctx');
var classof = require('./_classof');
var $export = require('./_export');
var isObject = require('./_is-object');
var aFunction = require('./_a-function');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var speciesConstructor = require('./_species-constructor');
var task = require('./_task').set;
var microtask = require('./_microtask')();
var newPromiseCapabilityModule = require('./_new-promise-capability');
var perform = require('./_perform');
var userAgent = require('./_user-agent');
var promiseResolve = require('./_promise-resolve');
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function')
      && promise.then(empty) instanceof FakePromise
      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      && v8.indexOf('6.6') !== 0
      && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = require('./_redefine-all')($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
require('./_set-to-string-tag')($Promise, PROMISE);
require('./_set-species')(PROMISE);
Wrapper = require('./_core')[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});

},{"./_a-function":190,"./_an-instance":194,"./_classof":204,"./_core":209,"./_ctx":211,"./_export":219,"./_for-of":225,"./_global":227,"./_is-object":238,"./_iter-detect":243,"./_library":246,"./_microtask":252,"./_new-promise-capability":253,"./_perform":271,"./_promise-resolve":272,"./_redefine-all":274,"./_set-species":280,"./_set-to-string-tag":281,"./_species-constructor":284,"./_task":293,"./_user-agent":305,"./_wks":309}],390:[function(require,module,exports){
// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export = require('./_export');
var aFunction = require('./_a-function');
var anObject = require('./_an-object');
var rApply = (require('./_global').Reflect || {}).apply;
var fApply = Function.apply;
// MS Edge argumentsList argument is optional
$export($export.S + $export.F * !require('./_fails')(function () {
  rApply(function () { /* empty */ });
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList) {
    var T = aFunction(target);
    var L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});

},{"./_a-function":190,"./_an-object":195,"./_export":219,"./_fails":221,"./_global":227}],391:[function(require,module,exports){
// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export = require('./_export');
var create = require('./_object-create');
var aFunction = require('./_a-function');
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var fails = require('./_fails');
var bind = require('./_bind');
var rConstruct = (require('./_global').Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function () {
  function F() { /* empty */ }
  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);
});
var ARGS_BUG = !fails(function () {
  rConstruct(function () { /* empty */ });
});

$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /* , newTarget */) {
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0: return new Target();
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args))();
    }
    // with altered newTarget, not support built-in constructors
    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});

},{"./_a-function":190,"./_an-object":195,"./_bind":203,"./_export":219,"./_fails":221,"./_global":227,"./_is-object":238,"./_object-create":255}],392:[function(require,module,exports){
// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP = require('./_object-dp');
var $export = require('./_export');
var anObject = require('./_an-object');
var toPrimitive = require('./_to-primitive');

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * require('./_fails')(function () {
  // eslint-disable-next-line no-undef
  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes) {
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"./_an-object":195,"./_export":219,"./_fails":221,"./_object-dp":256,"./_to-primitive":300}],393:[function(require,module,exports){
// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export = require('./_export');
var gOPD = require('./_object-gopd').f;
var anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey) {
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});

},{"./_an-object":195,"./_export":219,"./_object-gopd":258}],394:[function(require,module,exports){
'use strict';
// 26.1.5 Reflect.enumerate(target)
var $export = require('./_export');
var anObject = require('./_an-object');
var Enumerate = function (iterated) {
  this._t = anObject(iterated); // target
  this._i = 0;                  // next index
  var keys = this._k = [];      // keys
  var key;
  for (key in iterated) keys.push(key);
};
require('./_iter-create')(Enumerate, 'Object', function () {
  var that = this;
  var keys = that._k;
  var key;
  do {
    if (that._i >= keys.length) return { value: undefined, done: true };
  } while (!((key = keys[that._i++]) in that._t));
  return { value: key, done: false };
});

$export($export.S, 'Reflect', {
  enumerate: function enumerate(target) {
    return new Enumerate(target);
  }
});

},{"./_an-object":195,"./_export":219,"./_iter-create":241}],395:[function(require,module,exports){
// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD = require('./_object-gopd');
var $export = require('./_export');
var anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
    return gOPD.f(anObject(target), propertyKey);
  }
});

},{"./_an-object":195,"./_export":219,"./_object-gopd":258}],396:[function(require,module,exports){
// 26.1.8 Reflect.getPrototypeOf(target)
var $export = require('./_export');
var getProto = require('./_object-gpo');
var anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target) {
    return getProto(anObject(target));
  }
});

},{"./_an-object":195,"./_export":219,"./_object-gpo":262}],397:[function(require,module,exports){
// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD = require('./_object-gopd');
var getPrototypeOf = require('./_object-gpo');
var has = require('./_has');
var $export = require('./_export');
var isObject = require('./_is-object');
var anObject = require('./_an-object');

function get(target, propertyKey /* , receiver */) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var desc, proto;
  if (anObject(target) === receiver) return target[propertyKey];
  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')
    ? desc.value
    : desc.get !== undefined
      ? desc.get.call(receiver)
      : undefined;
  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', { get: get });

},{"./_an-object":195,"./_export":219,"./_has":228,"./_is-object":238,"./_object-gopd":258,"./_object-gpo":262}],398:[function(require,module,exports){
// 26.1.9 Reflect.has(target, propertyKey)
var $export = require('./_export');

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey) {
    return propertyKey in target;
  }
});

},{"./_export":219}],399:[function(require,module,exports){
// 26.1.10 Reflect.isExtensible(target)
var $export = require('./_export');
var anObject = require('./_an-object');
var $isExtensible = Object.isExtensible;

$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target) {
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});

},{"./_an-object":195,"./_export":219}],400:[function(require,module,exports){
// 26.1.11 Reflect.ownKeys(target)
var $export = require('./_export');

$export($export.S, 'Reflect', { ownKeys: require('./_own-keys') });

},{"./_export":219,"./_own-keys":268}],401:[function(require,module,exports){
// 26.1.12 Reflect.preventExtensions(target)
var $export = require('./_export');
var anObject = require('./_an-object');
var $preventExtensions = Object.preventExtensions;

$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target) {
    anObject(target);
    try {
      if ($preventExtensions) $preventExtensions(target);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"./_an-object":195,"./_export":219}],402:[function(require,module,exports){
// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export = require('./_export');
var setProto = require('./_set-proto');

if (setProto) $export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto) {
    setProto.check(target, proto);
    try {
      setProto.set(target, proto);
      return true;
    } catch (e) {
      return false;
    }
  }
});

},{"./_export":219,"./_set-proto":279}],403:[function(require,module,exports){
// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP = require('./_object-dp');
var gOPD = require('./_object-gopd');
var getPrototypeOf = require('./_object-gpo');
var has = require('./_has');
var $export = require('./_export');
var createDesc = require('./_property-desc');
var anObject = require('./_an-object');
var isObject = require('./_is-object');

function set(target, propertyKey, V /* , receiver */) {
  var receiver = arguments.length < 4 ? target : arguments[3];
  var ownDesc = gOPD.f(anObject(target), propertyKey);
  var existingDescriptor, proto;
  if (!ownDesc) {
    if (isObject(proto = getPrototypeOf(target))) {
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = createDesc(0);
  }
  if (has(ownDesc, 'value')) {
    if (ownDesc.writable === false || !isObject(receiver)) return false;
    if (existingDescriptor = gOPD.f(receiver, propertyKey)) {
      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
      existingDescriptor.value = V;
      dP.f(receiver, propertyKey, existingDescriptor);
    } else dP.f(receiver, propertyKey, createDesc(0, V));
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', { set: set });

},{"./_an-object":195,"./_export":219,"./_has":228,"./_is-object":238,"./_object-dp":256,"./_object-gopd":258,"./_object-gpo":262,"./_property-desc":273}],404:[function(require,module,exports){
var global = require('./_global');
var inheritIfRequired = require('./_inherit-if-required');
var dP = require('./_object-dp').f;
var gOPN = require('./_object-gopn').f;
var isRegExp = require('./_is-regexp');
var $flags = require('./_flags');
var $RegExp = global.RegExp;
var Base = $RegExp;
var proto = $RegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;
// "new" creates a new object, old webkit buggy here
var CORRECT_NEW = new $RegExp(re1) !== re1;

if (require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function () {
  re2[require('./_wks')('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))) {
  $RegExp = function RegExp(p, f) {
    var tiRE = this instanceof $RegExp;
    var piRE = isRegExp(p);
    var fiU = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
      : inheritIfRequired(CORRECT_NEW
        ? new Base(piRE && !fiU ? p.source : p, f)
        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
      , tiRE ? this : proto, $RegExp);
  };
  var proxy = function (key) {
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function () { return Base[key]; },
      set: function (it) { Base[key] = it; }
    });
  };
  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  require('./_redefine')(global, 'RegExp', $RegExp);
}

require('./_set-species')('RegExp');

},{"./_descriptors":215,"./_fails":221,"./_flags":223,"./_global":227,"./_inherit-if-required":232,"./_is-regexp":239,"./_object-dp":256,"./_object-gopn":260,"./_redefine":275,"./_set-species":280,"./_wks":309}],405:[function(require,module,exports){
'use strict';
var regexpExec = require('./_regexp-exec');
require('./_export')({
  target: 'RegExp',
  proto: true,
  forced: regexpExec !== /./.exec
}, {
  exec: regexpExec
});

},{"./_export":219,"./_regexp-exec":277}],406:[function(require,module,exports){
// 21.2.5.3 get RegExp.prototype.flags()
if (require('./_descriptors') && /./g.flags != 'g') require('./_object-dp').f(RegExp.prototype, 'flags', {
  configurable: true,
  get: require('./_flags')
});

},{"./_descriptors":215,"./_flags":223,"./_object-dp":256}],407:[function(require,module,exports){
'use strict';

var anObject = require('./_an-object');
var toLength = require('./_to-length');
var advanceStringIndex = require('./_advance-string-index');
var regExpExec = require('./_regexp-exec-abstract');

// @@match logic
require('./_fix-re-wks')('match', 1, function (defined, MATCH, $match, maybeCallNative) {
  return [
    // `String.prototype.match` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.match
    function match(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[MATCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
    },
    // `RegExp.prototype[@@match]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
    function (regexp) {
      var res = maybeCallNative($match, regexp, this);
      if (res.done) return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      if (!rx.global) return regExpExec(rx, S);
      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
      var A = [];
      var n = 0;
      var result;
      while ((result = regExpExec(rx, S)) !== null) {
        var matchStr = String(result[0]);
        A[n] = matchStr;
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
        n++;
      }
      return n === 0 ? null : A;
    }
  ];
});

},{"./_advance-string-index":193,"./_an-object":195,"./_fix-re-wks":222,"./_regexp-exec-abstract":276,"./_to-length":298}],408:[function(require,module,exports){
'use strict';

var anObject = require('./_an-object');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var toInteger = require('./_to-integer');
var advanceStringIndex = require('./_advance-string-index');
var regExpExec = require('./_regexp-exec-abstract');
var max = Math.max;
var min = Math.min;
var floor = Math.floor;
var SUBSTITUTION_SYMBOLS = /\$([$&`']|\d\d?|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&`']|\d\d?)/g;

var maybeToString = function (it) {
  return it === undefined ? it : String(it);
};

// @@replace logic
require('./_fix-re-wks')('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {
  return [
    // `String.prototype.replace` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.replace
    function replace(searchValue, replaceValue) {
      var O = defined(this);
      var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
      return fn !== undefined
        ? fn.call(searchValue, O, replaceValue)
        : $replace.call(String(O), searchValue, replaceValue);
    },
    // `RegExp.prototype[@@replace]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
    function (regexp, replaceValue) {
      var res = maybeCallNative($replace, regexp, this, replaceValue);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var functionalReplace = typeof replaceValue === 'function';
      if (!functionalReplace) replaceValue = String(replaceValue);
      var global = rx.global;
      if (global) {
        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
      }
      var results = [];
      while (true) {
        var result = regExpExec(rx, S);
        if (result === null) break;
        results.push(result);
        if (!global) break;
        var matchStr = String(result[0]);
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
      }
      var accumulatedResult = '';
      var nextSourcePosition = 0;
      for (var i = 0; i < results.length; i++) {
        result = results[i];
        var matched = String(result[0]);
        var position = max(min(toInteger(result.index), S.length), 0);
        var captures = [];
        // NOTE: This is equivalent to
        //   captures = result.slice(1).map(maybeToString)
        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
        var namedCaptures = result.groups;
        if (functionalReplace) {
          var replacerArgs = [matched].concat(captures, position, S);
          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
          var replacement = String(replaceValue.apply(undefined, replacerArgs));
        } else {
          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
        }
        if (position >= nextSourcePosition) {
          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
          nextSourcePosition = position + matched.length;
        }
      }
      return accumulatedResult + S.slice(nextSourcePosition);
    }
  ];

    // https://tc39.github.io/ecma262/#sec-getsubstitution
  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
    var tailPos = position + matched.length;
    var m = captures.length;
    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
    if (namedCaptures !== undefined) {
      namedCaptures = toObject(namedCaptures);
      symbols = SUBSTITUTION_SYMBOLS;
    }
    return $replace.call(replacement, symbols, function (match, ch) {
      var capture;
      switch (ch.charAt(0)) {
        case '$': return '$';
        case '&': return matched;
        case '`': return str.slice(0, position);
        case "'": return str.slice(tailPos);
        case '<':
          capture = namedCaptures[ch.slice(1, -1)];
          break;
        default: // \d\d?
          var n = +ch;
          if (n === 0) return match;
          if (n > m) {
            var f = floor(n / 10);
            if (f === 0) return match;
            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
            return match;
          }
          capture = captures[n - 1];
      }
      return capture === undefined ? '' : capture;
    });
  }
});

},{"./_advance-string-index":193,"./_an-object":195,"./_fix-re-wks":222,"./_regexp-exec-abstract":276,"./_to-integer":296,"./_to-length":298,"./_to-object":299}],409:[function(require,module,exports){
'use strict';

var anObject = require('./_an-object');
var sameValue = require('./_same-value');
var regExpExec = require('./_regexp-exec-abstract');

// @@search logic
require('./_fix-re-wks')('search', 1, function (defined, SEARCH, $search, maybeCallNative) {
  return [
    // `String.prototype.search` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.search
    function search(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[SEARCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
    },
    // `RegExp.prototype[@@search]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
    function (regexp) {
      var res = maybeCallNative($search, regexp, this);
      if (res.done) return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      var previousLastIndex = rx.lastIndex;
      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
      var result = regExpExec(rx, S);
      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
      return result === null ? -1 : result.index;
    }
  ];
});

},{"./_an-object":195,"./_fix-re-wks":222,"./_regexp-exec-abstract":276,"./_same-value":278}],410:[function(require,module,exports){
'use strict';

var isRegExp = require('./_is-regexp');
var anObject = require('./_an-object');
var speciesConstructor = require('./_species-constructor');
var advanceStringIndex = require('./_advance-string-index');
var toLength = require('./_to-length');
var callRegExpExec = require('./_regexp-exec-abstract');
var regexpExec = require('./_regexp-exec');
var fails = require('./_fails');
var $min = Math.min;
var $push = [].push;
var $SPLIT = 'split';
var LENGTH = 'length';
var LAST_INDEX = 'lastIndex';
var MAX_UINT32 = 0xffffffff;

// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
var SUPPORTS_Y = !fails(function () { RegExp(MAX_UINT32, 'y'); });

// @@split logic
require('./_fix-re-wks')('split', 2, function (defined, SPLIT, $split, maybeCallNative) {
  var internalSplit;
  if (
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ) {
    // based on es5-shim implementation, need to rework it
    internalSplit = function (separator, limit) {
      var string = String(this);
      if (separator === undefined && limit === 0) return [];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) return $split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var match, lastIndex, lastLength;
      while (match = regexpExec.call(separatorCopy, string)) {
        lastIndex = separatorCopy[LAST_INDEX];
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if (output[LENGTH] >= splitLimit) break;
        }
        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if (lastLastIndex === string[LENGTH]) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
    internalSplit = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);
    };
  } else {
    internalSplit = $split;
  }

  return [
    // `String.prototype.split` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.split
    function split(separator, limit) {
      var O = defined(this);
      var splitter = separator == undefined ? undefined : separator[SPLIT];
      return splitter !== undefined
        ? splitter.call(separator, O, limit)
        : internalSplit.call(String(O), separator, limit);
    },
    // `RegExp.prototype[@@split]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
    //
    // NOTE: This cannot be properly polyfilled in engines that don't support
    // the 'y' flag.
    function (regexp, limit) {
      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var C = speciesConstructor(rx, RegExp);

      var unicodeMatching = rx.unicode;
      var flags = (rx.ignoreCase ? 'i' : '') +
                  (rx.multiline ? 'm' : '') +
                  (rx.unicode ? 'u' : '') +
                  (SUPPORTS_Y ? 'y' : 'g');

      // ^(? + rx + ) is needed, in combination with some S slicing, to
      // simulate the 'y' flag.
      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
      var p = 0;
      var q = 0;
      var A = [];
      while (q < S.length) {
        splitter.lastIndex = SUPPORTS_Y ? q : 0;
        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
        var e;
        if (
          z === null ||
          (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
        ) {
          q = advanceStringIndex(S, q, unicodeMatching);
        } else {
          A.push(S.slice(p, q));
          if (A.length === lim) return A;
          for (var i = 1; i <= z.length - 1; i++) {
            A.push(z[i]);
            if (A.length === lim) return A;
          }
          q = p = e;
        }
      }
      A.push(S.slice(p));
      return A;
    }
  ];
});

},{"./_advance-string-index":193,"./_an-object":195,"./_fails":221,"./_fix-re-wks":222,"./_is-regexp":239,"./_regexp-exec":277,"./_regexp-exec-abstract":276,"./_species-constructor":284,"./_to-length":298}],411:[function(require,module,exports){
'use strict';
require('./es6.regexp.flags');
var anObject = require('./_an-object');
var $flags = require('./_flags');
var DESCRIPTORS = require('./_descriptors');
var TO_STRING = 'toString';
var $toString = /./[TO_STRING];

var define = function (fn) {
  require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if (require('./_fails')(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {
  define(function toString() {
    var R = anObject(this);
    return '/'.concat(R.source, '/',
      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
// FF44- RegExp#toString has a wrong name
} else if ($toString.name != TO_STRING) {
  define(function toString() {
    return $toString.call(this);
  });
}

},{"./_an-object":195,"./_descriptors":215,"./_fails":221,"./_flags":223,"./_redefine":275,"./es6.regexp.flags":406}],412:[function(require,module,exports){
'use strict';
var strong = require('./_collection-strong');
var validate = require('./_validate-collection');
var SET = 'Set';

// 23.2 Set Objects
module.exports = require('./_collection')(SET, function (get) {
  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
  }
}, strong);

},{"./_collection":208,"./_collection-strong":206,"./_validate-collection":306}],413:[function(require,module,exports){
'use strict';
// B.2.3.2 String.prototype.anchor(name)
require('./_string-html')('anchor', function (createHTML) {
  return function anchor(name) {
    return createHTML(this, 'a', 'name', name);
  };
});

},{"./_string-html":288}],414:[function(require,module,exports){
'use strict';
// B.2.3.3 String.prototype.big()
require('./_string-html')('big', function (createHTML) {
  return function big() {
    return createHTML(this, 'big', '', '');
  };
});

},{"./_string-html":288}],415:[function(require,module,exports){
'use strict';
// B.2.3.4 String.prototype.blink()
require('./_string-html')('blink', function (createHTML) {
  return function blink() {
    return createHTML(this, 'blink', '', '');
  };
});

},{"./_string-html":288}],416:[function(require,module,exports){
'use strict';
// B.2.3.5 String.prototype.bold()
require('./_string-html')('bold', function (createHTML) {
  return function bold() {
    return createHTML(this, 'b', '', '');
  };
});

},{"./_string-html":288}],417:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $at = require('./_string-at')(false);
$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos) {
    return $at(this, pos);
  }
});

},{"./_export":219,"./_string-at":286}],418:[function(require,module,exports){
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
'use strict';
var $export = require('./_export');
var toLength = require('./_to-length');
var context = require('./_string-context');
var ENDS_WITH = 'endsWith';
var $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = context(this, searchString, ENDS_WITH);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
    var search = String(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});

},{"./_export":219,"./_fails-is-regexp":220,"./_string-context":287,"./_to-length":298}],419:[function(require,module,exports){
'use strict';
// B.2.3.6 String.prototype.fixed()
require('./_string-html')('fixed', function (createHTML) {
  return function fixed() {
    return createHTML(this, 'tt', '', '');
  };
});

},{"./_string-html":288}],420:[function(require,module,exports){
'use strict';
// B.2.3.7 String.prototype.fontcolor(color)
require('./_string-html')('fontcolor', function (createHTML) {
  return function fontcolor(color) {
    return createHTML(this, 'font', 'color', color);
  };
});

},{"./_string-html":288}],421:[function(require,module,exports){
'use strict';
// B.2.3.8 String.prototype.fontsize(size)
require('./_string-html')('fontsize', function (createHTML) {
  return function fontsize(size) {
    return createHTML(this, 'font', 'size', size);
  };
});

},{"./_string-html":288}],422:[function(require,module,exports){
var $export = require('./_export');
var toAbsoluteIndex = require('./_to-absolute-index');
var fromCharCode = String.fromCharCode;
var $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
    var res = [];
    var aLen = arguments.length;
    var i = 0;
    var code;
    while (aLen > i) {
      code = +arguments[i++];
      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});

},{"./_export":219,"./_to-absolute-index":294}],423:[function(require,module,exports){
// 21.1.3.7 String.prototype.includes(searchString, position = 0)
'use strict';
var $export = require('./_export');
var context = require('./_string-context');
var INCLUDES = 'includes';

$export($export.P + $export.F * require('./_fails-is-regexp')(INCLUDES), 'String', {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~context(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"./_export":219,"./_fails-is-regexp":220,"./_string-context":287}],424:[function(require,module,exports){
'use strict';
// B.2.3.9 String.prototype.italics()
require('./_string-html')('italics', function (createHTML) {
  return function italics() {
    return createHTML(this, 'i', '', '');
  };
});

},{"./_string-html":288}],425:[function(require,module,exports){
'use strict';
var $at = require('./_string-at')(true);

// 21.1.3.27 String.prototype[@@iterator]()
require('./_iter-define')(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});

},{"./_iter-define":242,"./_string-at":286}],426:[function(require,module,exports){
'use strict';
// B.2.3.10 String.prototype.link(url)
require('./_string-html')('link', function (createHTML) {
  return function link(url) {
    return createHTML(this, 'a', 'href', url);
  };
});

},{"./_string-html":288}],427:[function(require,module,exports){
var $export = require('./_export');
var toIObject = require('./_to-iobject');
var toLength = require('./_to-length');

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite) {
    var tpl = toIObject(callSite.raw);
    var len = toLength(tpl.length);
    var aLen = arguments.length;
    var res = [];
    var i = 0;
    while (len > i) {
      res.push(String(tpl[i++]));
      if (i < aLen) res.push(String(arguments[i]));
    } return res.join('');
  }
});

},{"./_export":219,"./_to-iobject":297,"./_to-length":298}],428:[function(require,module,exports){
var $export = require('./_export');

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: require('./_string-repeat')
});

},{"./_export":219,"./_string-repeat":290}],429:[function(require,module,exports){
'use strict';
// B.2.3.11 String.prototype.small()
require('./_string-html')('small', function (createHTML) {
  return function small() {
    return createHTML(this, 'small', '', '');
  };
});

},{"./_string-html":288}],430:[function(require,module,exports){
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
'use strict';
var $export = require('./_export');
var toLength = require('./_to-length');
var context = require('./_string-context');
var STARTS_WITH = 'startsWith';
var $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = context(this, searchString, STARTS_WITH);
    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});

},{"./_export":219,"./_fails-is-regexp":220,"./_string-context":287,"./_to-length":298}],431:[function(require,module,exports){
'use strict';
// B.2.3.12 String.prototype.strike()
require('./_string-html')('strike', function (createHTML) {
  return function strike() {
    return createHTML(this, 'strike', '', '');
  };
});

},{"./_string-html":288}],432:[function(require,module,exports){
'use strict';
// B.2.3.13 String.prototype.sub()
require('./_string-html')('sub', function (createHTML) {
  return function sub() {
    return createHTML(this, 'sub', '', '');
  };
});

},{"./_string-html":288}],433:[function(require,module,exports){
'use strict';
// B.2.3.14 String.prototype.sup()
require('./_string-html')('sup', function (createHTML) {
  return function sup() {
    return createHTML(this, 'sup', '', '');
  };
});

},{"./_string-html":288}],434:[function(require,module,exports){
'use strict';
// 21.1.3.25 String.prototype.trim()
require('./_string-trim')('trim', function ($trim) {
  return function trim() {
    return $trim(this, 3);
  };
});

},{"./_string-trim":291}],435:[function(require,module,exports){
'use strict';
// ECMAScript 6 symbols shim
var global = require('./_global');
var has = require('./_has');
var DESCRIPTORS = require('./_descriptors');
var $export = require('./_export');
var redefine = require('./_redefine');
var META = require('./_meta').KEY;
var $fails = require('./_fails');
var shared = require('./_shared');
var setToStringTag = require('./_set-to-string-tag');
var uid = require('./_uid');
var wks = require('./_wks');
var wksExt = require('./_wks-ext');
var wksDefine = require('./_wks-define');
var enumKeys = require('./_enum-keys');
var isArray = require('./_is-array');
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var createDesc = require('./_property-desc');
var _create = require('./_object-create');
var gOPNExt = require('./_object-gopn-ext');
var $GOPD = require('./_object-gopd');
var $DP = require('./_object-dp');
var $keys = require('./_object-keys');
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function';
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;
  require('./_object-pie').f = $propertyIsEnumerable;
  require('./_object-gops').f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !require('./_library')) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);

},{"./_an-object":195,"./_descriptors":215,"./_enum-keys":218,"./_export":219,"./_fails":221,"./_global":227,"./_has":228,"./_hide":229,"./_is-array":236,"./_is-object":238,"./_library":246,"./_meta":251,"./_object-create":255,"./_object-dp":256,"./_object-gopd":258,"./_object-gopn":260,"./_object-gopn-ext":259,"./_object-gops":261,"./_object-keys":264,"./_object-pie":265,"./_property-desc":273,"./_redefine":275,"./_set-to-string-tag":281,"./_shared":283,"./_to-iobject":297,"./_to-primitive":300,"./_uid":304,"./_wks":309,"./_wks-define":307,"./_wks-ext":308}],436:[function(require,module,exports){
'use strict';
var $export = require('./_export');
var $typed = require('./_typed');
var buffer = require('./_typed-buffer');
var anObject = require('./_an-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
var isObject = require('./_is-object');
var ArrayBuffer = require('./_global').ArrayBuffer;
var speciesConstructor = require('./_species-constructor');
var $ArrayBuffer = buffer.ArrayBuffer;
var $DataView = buffer.DataView;
var $isView = $typed.ABV && ArrayBuffer.isView;
var $slice = $ArrayBuffer.prototype.slice;
var VIEW = $typed.VIEW;
var ARRAY_BUFFER = 'ArrayBuffer';

$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });

$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it) {
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});

$export($export.P + $export.U + $export.F * require('./_fails')(function () {
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end) {
    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
    var len = anObject(this).byteLength;
    var first = toAbsoluteIndex(start, len);
    var fin = toAbsoluteIndex(end === undefined ? len : end, len);
    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));
    var viewS = new $DataView(this);
    var viewT = new $DataView(result);
    var index = 0;
    while (first < fin) {
      viewT.setUint8(index++, viewS.getUint8(first++));
    } return result;
  }
});

require('./_set-species')(ARRAY_BUFFER);

},{"./_an-object":195,"./_export":219,"./_fails":221,"./_global":227,"./_is-object":238,"./_set-species":280,"./_species-constructor":284,"./_to-absolute-index":294,"./_to-length":298,"./_typed":303,"./_typed-buffer":302}],437:[function(require,module,exports){
var $export = require('./_export');
$export($export.G + $export.W + $export.F * !require('./_typed').ABV, {
  DataView: require('./_typed-buffer').DataView
});

},{"./_export":219,"./_typed":303,"./_typed-buffer":302}],438:[function(require,module,exports){
require('./_typed-array')('Float32', 4, function (init) {
  return function Float32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":301}],439:[function(require,module,exports){
require('./_typed-array')('Float64', 8, function (init) {
  return function Float64Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":301}],440:[function(require,module,exports){
require('./_typed-array')('Int16', 2, function (init) {
  return function Int16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":301}],441:[function(require,module,exports){
require('./_typed-array')('Int32', 4, function (init) {
  return function Int32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":301}],442:[function(require,module,exports){
require('./_typed-array')('Int8', 1, function (init) {
  return function Int8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":301}],443:[function(require,module,exports){
require('./_typed-array')('Uint16', 2, function (init) {
  return function Uint16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":301}],444:[function(require,module,exports){
require('./_typed-array')('Uint32', 4, function (init) {
  return function Uint32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":301}],445:[function(require,module,exports){
require('./_typed-array')('Uint8', 1, function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

},{"./_typed-array":301}],446:[function(require,module,exports){
require('./_typed-array')('Uint8', 1, function (init) {
  return function Uint8ClampedArray(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
}, true);

},{"./_typed-array":301}],447:[function(require,module,exports){
'use strict';
var global = require('./_global');
var each = require('./_array-methods')(0);
var redefine = require('./_redefine');
var meta = require('./_meta');
var assign = require('./_object-assign');
var weak = require('./_collection-weak');
var isObject = require('./_is-object');
var validate = require('./_validate-collection');
var NATIVE_WEAK_MAP = require('./_validate-collection');
var IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;
var WEAK_MAP = 'WeakMap';
var getWeak = meta.getWeak;
var isExtensible = Object.isExtensible;
var uncaughtFrozenStore = weak.ufstore;
var InternalMap;

var wrapper = function (get) {
  return function WeakMap() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key) {
    if (isObject(key)) {
      var data = getWeak(key);
      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value) {
    return weak.def(validate(this, WEAK_MAP), key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = require('./_collection')(WEAK_MAP, wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if (NATIVE_WEAK_MAP && IS_IE11) {
  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function (key) {
    var proto = $WeakMap.prototype;
    var method = proto[key];
    redefine(proto, key, function (a, b) {
      // store frozen objects on internal weakmap shim
      if (isObject(a) && !isExtensible(a)) {
        if (!this._f) this._f = new InternalMap();
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}

},{"./_array-methods":199,"./_collection":208,"./_collection-weak":207,"./_global":227,"./_is-object":238,"./_meta":251,"./_object-assign":254,"./_redefine":275,"./_validate-collection":306}],448:[function(require,module,exports){
'use strict';
var weak = require('./_collection-weak');
var validate = require('./_validate-collection');
var WEAK_SET = 'WeakSet';

// 23.4 WeakSet Objects
require('./_collection')(WEAK_SET, function (get) {
  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value) {
    return weak.def(validate(this, WEAK_SET), value, true);
  }
}, weak, false, true);

},{"./_collection":208,"./_collection-weak":207,"./_validate-collection":306}],449:[function(require,module,exports){
'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap
var $export = require('./_export');
var flattenIntoArray = require('./_flatten-into-array');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var aFunction = require('./_a-function');
var arraySpeciesCreate = require('./_array-species-create');

$export($export.P, 'Array', {
  flatMap: function flatMap(callbackfn /* , thisArg */) {
    var O = toObject(this);
    var sourceLen, A;
    aFunction(callbackfn);
    sourceLen = toLength(O.length);
    A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
    return A;
  }
});

require('./_add-to-unscopables')('flatMap');

},{"./_a-function":190,"./_add-to-unscopables":192,"./_array-species-create":202,"./_export":219,"./_flatten-into-array":224,"./_to-length":298,"./_to-object":299}],450:[function(require,module,exports){
'use strict';
// https://github.com/tc39/Array.prototype.includes
var $export = require('./_export');
var $includes = require('./_array-includes')(true);

$export($export.P, 'Array', {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

require('./_add-to-unscopables')('includes');

},{"./_add-to-unscopables":192,"./_array-includes":198,"./_export":219}],451:[function(require,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export = require('./_export');
var $entries = require('./_object-to-array')(true);

$export($export.S, 'Object', {
  entries: function entries(it) {
    return $entries(it);
  }
});

},{"./_export":219,"./_object-to-array":267}],452:[function(require,module,exports){
// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export = require('./_export');
var ownKeys = require('./_own-keys');
var toIObject = require('./_to-iobject');
var gOPD = require('./_object-gopd');
var createProperty = require('./_create-property');

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
    var O = toIObject(object);
    var getDesc = gOPD.f;
    var keys = ownKeys(O);
    var result = {};
    var i = 0;
    var key, desc;
    while (keys.length > i) {
      desc = getDesc(O, key = keys[i++]);
      if (desc !== undefined) createProperty(result, key, desc);
    }
    return result;
  }
});

},{"./_create-property":210,"./_export":219,"./_object-gopd":258,"./_own-keys":268,"./_to-iobject":297}],453:[function(require,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export = require('./_export');
var $values = require('./_object-to-array')(false);

$export($export.S, 'Object', {
  values: function values(it) {
    return $values(it);
  }
});

},{"./_export":219,"./_object-to-array":267}],454:[function(require,module,exports){
// https://github.com/tc39/proposal-promise-finally
'use strict';
var $export = require('./_export');
var core = require('./_core');
var global = require('./_global');
var speciesConstructor = require('./_species-constructor');
var promiseResolve = require('./_promise-resolve');

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });

},{"./_core":209,"./_export":219,"./_global":227,"./_promise-resolve":272,"./_species-constructor":284}],455:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = require('./_export');
var $pad = require('./_string-pad');
var userAgent = require('./_user-agent');

// https://github.com/zloirock/core-js/issues/280
var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);

$export($export.P + $export.F * WEBKIT_BUG, 'String', {
  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});

},{"./_export":219,"./_string-pad":289,"./_user-agent":305}],456:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = require('./_export');
var $pad = require('./_string-pad');
var userAgent = require('./_user-agent');

// https://github.com/zloirock/core-js/issues/280
var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);

$export($export.P + $export.F * WEBKIT_BUG, 'String', {
  padStart: function padStart(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});

},{"./_export":219,"./_string-pad":289,"./_user-agent":305}],457:[function(require,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
require('./_string-trim')('trimLeft', function ($trim) {
  return function trimLeft() {
    return $trim(this, 1);
  };
}, 'trimStart');

},{"./_string-trim":291}],458:[function(require,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
require('./_string-trim')('trimRight', function ($trim) {
  return function trimRight() {
    return $trim(this, 2);
  };
}, 'trimEnd');

},{"./_string-trim":291}],459:[function(require,module,exports){
require('./_wks-define')('asyncIterator');

},{"./_wks-define":307}],460:[function(require,module,exports){
var $iterators = require('./es6.array.iterator');
var getKeys = require('./_object-keys');
var redefine = require('./_redefine');
var global = require('./_global');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var wks = require('./_wks');
var ITERATOR = wks('iterator');
var TO_STRING_TAG = wks('toStringTag');
var ArrayValues = Iterators.Array;

var DOMIterables = {
  CSSRuleList: true, // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true, // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true, // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  var key;
  if (proto) {
    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
  }
}

},{"./_global":227,"./_hide":229,"./_iterators":245,"./_object-keys":264,"./_redefine":275,"./_wks":309,"./es6.array.iterator":321}],461:[function(require,module,exports){
var $export = require('./_export');
var $task = require('./_task');
$export($export.G + $export.B, {
  setImmediate: $task.set,
  clearImmediate: $task.clear
});

},{"./_export":219,"./_task":293}],462:[function(require,module,exports){
// ie9- setTimeout & setInterval additional parameters fix
var global = require('./_global');
var $export = require('./_export');
var userAgent = require('./_user-agent');
var slice = [].slice;
var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check
var wrap = function (set) {
  return function (fn, time /* , ...args */) {
    var boundArgs = arguments.length > 2;
    var args = boundArgs ? slice.call(arguments, 2) : false;
    return set(boundArgs ? function () {
      // eslint-disable-next-line no-new-func
      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
    } : fn, time);
  };
};
$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout: wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});

},{"./_export":219,"./_global":227,"./_user-agent":305}],463:[function(require,module,exports){
require('../modules/web.timers');
require('../modules/web.immediate');
require('../modules/web.dom.iterable');
module.exports = require('../modules/_core');

},{"../modules/_core":209,"../modules/web.dom.iterable":460,"../modules/web.immediate":461,"../modules/web.timers":462}],464:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView');

module.exports = DataView;

},{"./_getNative":499,"./_root":530}],465:[function(require,module,exports){
var hashClear = require('./_hashClear'),
    hashDelete = require('./_hashDelete'),
    hashGet = require('./_hashGet'),
    hashHas = require('./_hashHas'),
    hashSet = require('./_hashSet');

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

module.exports = Hash;

},{"./_hashClear":505,"./_hashDelete":506,"./_hashGet":507,"./_hashHas":508,"./_hashSet":509}],466:[function(require,module,exports){
var listCacheClear = require('./_listCacheClear'),
    listCacheDelete = require('./_listCacheDelete'),
    listCacheGet = require('./_listCacheGet'),
    listCacheHas = require('./_listCacheHas'),
    listCacheSet = require('./_listCacheSet');

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;

},{"./_listCacheClear":514,"./_listCacheDelete":515,"./_listCacheGet":516,"./_listCacheHas":517,"./_listCacheSet":518}],467:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

module.exports = Map;

},{"./_getNative":499,"./_root":530}],468:[function(require,module,exports){
var mapCacheClear = require('./_mapCacheClear'),
    mapCacheDelete = require('./_mapCacheDelete'),
    mapCacheGet = require('./_mapCacheGet'),
    mapCacheHas = require('./_mapCacheHas'),
    mapCacheSet = require('./_mapCacheSet');

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

module.exports = MapCache;

},{"./_mapCacheClear":519,"./_mapCacheDelete":520,"./_mapCacheGet":521,"./_mapCacheHas":522,"./_mapCacheSet":523}],469:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Promise = getNative(root, 'Promise');

module.exports = Promise;

},{"./_getNative":499,"./_root":530}],470:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Set = getNative(root, 'Set');

module.exports = Set;

},{"./_getNative":499,"./_root":530}],471:[function(require,module,exports){
var MapCache = require('./_MapCache'),
    setCacheAdd = require('./_setCacheAdd'),
    setCacheHas = require('./_setCacheHas');

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

module.exports = SetCache;

},{"./_MapCache":468,"./_setCacheAdd":531,"./_setCacheHas":532}],472:[function(require,module,exports){
var ListCache = require('./_ListCache'),
    stackClear = require('./_stackClear'),
    stackDelete = require('./_stackDelete'),
    stackGet = require('./_stackGet'),
    stackHas = require('./_stackHas'),
    stackSet = require('./_stackSet');

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

module.exports = Stack;

},{"./_ListCache":466,"./_stackClear":534,"./_stackDelete":535,"./_stackGet":536,"./_stackHas":537,"./_stackSet":538}],473:[function(require,module,exports){
var root = require('./_root');

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;

},{"./_root":530}],474:[function(require,module,exports){
var root = require('./_root');

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

module.exports = Uint8Array;

},{"./_root":530}],475:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root, 'WeakMap');

module.exports = WeakMap;

},{"./_getNative":499,"./_root":530}],476:[function(require,module,exports){
/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = arrayFilter;

},{}],477:[function(require,module,exports){
var baseTimes = require('./_baseTimes'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isBuffer = require('./isBuffer'),
    isIndex = require('./_isIndex'),
    isTypedArray = require('./isTypedArray');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = arrayLikeKeys;

},{"./_baseTimes":489,"./_isIndex":510,"./isArguments":541,"./isArray":542,"./isBuffer":544,"./isTypedArray":551}],478:[function(require,module,exports){
/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

module.exports = arrayPush;

},{}],479:[function(require,module,exports){
/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

module.exports = arraySome;

},{}],480:[function(require,module,exports){
var eq = require('./eq');

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;

},{"./eq":540}],481:[function(require,module,exports){
var arrayPush = require('./_arrayPush'),
    isArray = require('./isArray');

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

module.exports = baseGetAllKeys;

},{"./_arrayPush":478,"./isArray":542}],482:[function(require,module,exports){
var Symbol = require('./_Symbol'),
    getRawTag = require('./_getRawTag'),
    objectToString = require('./_objectToString');

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;

},{"./_Symbol":473,"./_getRawTag":501,"./_objectToString":528}],483:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;

},{"./_baseGetTag":482,"./isObjectLike":549}],484:[function(require,module,exports){
var baseIsEqualDeep = require('./_baseIsEqualDeep'),
    isObjectLike = require('./isObjectLike');

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

module.exports = baseIsEqual;

},{"./_baseIsEqualDeep":485,"./isObjectLike":549}],485:[function(require,module,exports){
var Stack = require('./_Stack'),
    equalArrays = require('./_equalArrays'),
    equalByTag = require('./_equalByTag'),
    equalObjects = require('./_equalObjects'),
    getTag = require('./_getTag'),
    isArray = require('./isArray'),
    isBuffer = require('./isBuffer'),
    isTypedArray = require('./isTypedArray');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

module.exports = baseIsEqualDeep;

},{"./_Stack":472,"./_equalArrays":493,"./_equalByTag":494,"./_equalObjects":495,"./_getTag":503,"./isArray":542,"./isBuffer":544,"./isTypedArray":551}],486:[function(require,module,exports){
var isFunction = require('./isFunction'),
    isMasked = require('./_isMasked'),
    isObject = require('./isObject'),
    toSource = require('./_toSource');

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;

},{"./_isMasked":512,"./_toSource":539,"./isFunction":546,"./isObject":548}],487:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isLength = require('./isLength'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;

},{"./_baseGetTag":482,"./isLength":547,"./isObjectLike":549}],488:[function(require,module,exports){
var isPrototype = require('./_isPrototype'),
    nativeKeys = require('./_nativeKeys');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeys;

},{"./_isPrototype":513,"./_nativeKeys":526}],489:[function(require,module,exports){
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;

},{}],490:[function(require,module,exports){
/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

module.exports = baseUnary;

},{}],491:[function(require,module,exports){
/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

module.exports = cacheHas;

},{}],492:[function(require,module,exports){
var root = require('./_root');

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

module.exports = coreJsData;

},{"./_root":530}],493:[function(require,module,exports){
var SetCache = require('./_SetCache'),
    arraySome = require('./_arraySome'),
    cacheHas = require('./_cacheHas');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(array);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

module.exports = equalArrays;

},{"./_SetCache":471,"./_arraySome":479,"./_cacheHas":491}],494:[function(require,module,exports){
var Symbol = require('./_Symbol'),
    Uint8Array = require('./_Uint8Array'),
    eq = require('./eq'),
    equalArrays = require('./_equalArrays'),
    mapToArray = require('./_mapToArray'),
    setToArray = require('./_setToArray');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

module.exports = equalByTag;

},{"./_Symbol":473,"./_Uint8Array":474,"./_equalArrays":493,"./_mapToArray":524,"./_setToArray":533,"./eq":540}],495:[function(require,module,exports){
var getAllKeys = require('./_getAllKeys');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(object);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

module.exports = equalObjects;

},{"./_getAllKeys":497}],496:[function(require,module,exports){
(function (global){
/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],497:[function(require,module,exports){
var baseGetAllKeys = require('./_baseGetAllKeys'),
    getSymbols = require('./_getSymbols'),
    keys = require('./keys');

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

module.exports = getAllKeys;

},{"./_baseGetAllKeys":481,"./_getSymbols":502,"./keys":552}],498:[function(require,module,exports){
var isKeyable = require('./_isKeyable');

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

module.exports = getMapData;

},{"./_isKeyable":511}],499:[function(require,module,exports){
var baseIsNative = require('./_baseIsNative'),
    getValue = require('./_getValue');

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;

},{"./_baseIsNative":486,"./_getValue":504}],500:[function(require,module,exports){
var overArg = require('./_overArg');

/** Built-in value references. */
var getPrototype = overArg(Object.getPrototypeOf, Object);

module.exports = getPrototype;

},{"./_overArg":529}],501:[function(require,module,exports){
var Symbol = require('./_Symbol');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;

},{"./_Symbol":473}],502:[function(require,module,exports){
var arrayFilter = require('./_arrayFilter'),
    stubArray = require('./stubArray');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

module.exports = getSymbols;

},{"./_arrayFilter":476,"./stubArray":553}],503:[function(require,module,exports){
var DataView = require('./_DataView'),
    Map = require('./_Map'),
    Promise = require('./_Promise'),
    Set = require('./_Set'),
    WeakMap = require('./_WeakMap'),
    baseGetTag = require('./_baseGetTag'),
    toSource = require('./_toSource');

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

module.exports = getTag;

},{"./_DataView":464,"./_Map":467,"./_Promise":469,"./_Set":470,"./_WeakMap":475,"./_baseGetTag":482,"./_toSource":539}],504:[function(require,module,exports){
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;

},{}],505:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;

},{"./_nativeCreate":525}],506:[function(require,module,exports){
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;

},{}],507:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;

},{"./_nativeCreate":525}],508:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

module.exports = hashHas;

},{"./_nativeCreate":525}],509:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;

},{"./_nativeCreate":525}],510:[function(require,module,exports){
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

module.exports = isIndex;

},{}],511:[function(require,module,exports){
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

module.exports = isKeyable;

},{}],512:[function(require,module,exports){
var coreJsData = require('./_coreJsData');

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

module.exports = isMasked;

},{"./_coreJsData":492}],513:[function(require,module,exports){
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

module.exports = isPrototype;

},{}],514:[function(require,module,exports){
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;

},{}],515:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

module.exports = listCacheDelete;

},{"./_assocIndexOf":480}],516:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;

},{"./_assocIndexOf":480}],517:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;

},{"./_assocIndexOf":480}],518:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;

},{"./_assocIndexOf":480}],519:[function(require,module,exports){
var Hash = require('./_Hash'),
    ListCache = require('./_ListCache'),
    Map = require('./_Map');

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

module.exports = mapCacheClear;

},{"./_Hash":465,"./_ListCache":466,"./_Map":467}],520:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;

},{"./_getMapData":498}],521:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;

},{"./_getMapData":498}],522:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;

},{"./_getMapData":498}],523:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;

},{"./_getMapData":498}],524:[function(require,module,exports){
/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

module.exports = mapToArray;

},{}],525:[function(require,module,exports){
var getNative = require('./_getNative');

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

module.exports = nativeCreate;

},{"./_getNative":499}],526:[function(require,module,exports){
var overArg = require('./_overArg');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;

},{"./_overArg":529}],527:[function(require,module,exports){
var freeGlobal = require('./_freeGlobal');

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

module.exports = nodeUtil;

},{"./_freeGlobal":496}],528:[function(require,module,exports){
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;

},{}],529:[function(require,module,exports){
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;

},{}],530:[function(require,module,exports){
var freeGlobal = require('./_freeGlobal');

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;

},{"./_freeGlobal":496}],531:[function(require,module,exports){
/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

module.exports = setCacheAdd;

},{}],532:[function(require,module,exports){
/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

module.exports = setCacheHas;

},{}],533:[function(require,module,exports){
/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

module.exports = setToArray;

},{}],534:[function(require,module,exports){
var ListCache = require('./_ListCache');

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

module.exports = stackClear;

},{"./_ListCache":466}],535:[function(require,module,exports){
/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

module.exports = stackDelete;

},{}],536:[function(require,module,exports){
/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;

},{}],537:[function(require,module,exports){
/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;

},{}],538:[function(require,module,exports){
var ListCache = require('./_ListCache'),
    Map = require('./_Map'),
    MapCache = require('./_MapCache');

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;

},{"./_ListCache":466,"./_Map":467,"./_MapCache":468}],539:[function(require,module,exports){
/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;

},{}],540:[function(require,module,exports){
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

module.exports = eq;

},{}],541:[function(require,module,exports){
var baseIsArguments = require('./_baseIsArguments'),
    isObjectLike = require('./isObjectLike');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

module.exports = isArguments;

},{"./_baseIsArguments":483,"./isObjectLike":549}],542:[function(require,module,exports){
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;

},{}],543:[function(require,module,exports){
var isFunction = require('./isFunction'),
    isLength = require('./isLength');

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;

},{"./isFunction":546,"./isLength":547}],544:[function(require,module,exports){
var root = require('./_root'),
    stubFalse = require('./stubFalse');

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

module.exports = isBuffer;

},{"./_root":530,"./stubFalse":554}],545:[function(require,module,exports){
var baseIsEqual = require('./_baseIsEqual');

/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */
function isEqual(value, other) {
  return baseIsEqual(value, other);
}

module.exports = isEqual;

},{"./_baseIsEqual":484}],546:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isObject = require('./isObject');

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;

},{"./_baseGetTag":482,"./isObject":548}],547:[function(require,module,exports){
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;

},{}],548:[function(require,module,exports){
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;

},{}],549:[function(require,module,exports){
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;

},{}],550:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    getPrototype = require('./_getPrototype'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var objectTag = '[object Object]';

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
    return false;
  }
  var proto = getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
    funcToString.call(Ctor) == objectCtorString;
}

module.exports = isPlainObject;

},{"./_baseGetTag":482,"./_getPrototype":500,"./isObjectLike":549}],551:[function(require,module,exports){
var baseIsTypedArray = require('./_baseIsTypedArray'),
    baseUnary = require('./_baseUnary'),
    nodeUtil = require('./_nodeUtil');

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

module.exports = isTypedArray;

},{"./_baseIsTypedArray":487,"./_baseUnary":490,"./_nodeUtil":527}],552:[function(require,module,exports){
var arrayLikeKeys = require('./_arrayLikeKeys'),
    baseKeys = require('./_baseKeys'),
    isArrayLike = require('./isArrayLike');

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;

},{"./_arrayLikeKeys":477,"./_baseKeys":488,"./isArrayLike":543}],553:[function(require,module,exports){
/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

module.exports = stubArray;

},{}],554:[function(require,module,exports){
/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;

},{}],555:[function(require,module,exports){
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],556:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],557:[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _io = require('./internal/io');

Object.defineProperty(exports, 'take', {
  enumerable: true,
  get: function get() {
    return _io.take;
  }
});
Object.defineProperty(exports, 'takem', {
  enumerable: true,
  get: function get() {
    return _io.takem;
  }
});
Object.defineProperty(exports, 'put', {
  enumerable: true,
  get: function get() {
    return _io.put;
  }
});
Object.defineProperty(exports, 'all', {
  enumerable: true,
  get: function get() {
    return _io.all;
  }
});
Object.defineProperty(exports, 'race', {
  enumerable: true,
  get: function get() {
    return _io.race;
  }
});
Object.defineProperty(exports, 'call', {
  enumerable: true,
  get: function get() {
    return _io.call;
  }
});
Object.defineProperty(exports, 'apply', {
  enumerable: true,
  get: function get() {
    return _io.apply;
  }
});
Object.defineProperty(exports, 'cps', {
  enumerable: true,
  get: function get() {
    return _io.cps;
  }
});
Object.defineProperty(exports, 'fork', {
  enumerable: true,
  get: function get() {
    return _io.fork;
  }
});
Object.defineProperty(exports, 'spawn', {
  enumerable: true,
  get: function get() {
    return _io.spawn;
  }
});
Object.defineProperty(exports, 'join', {
  enumerable: true,
  get: function get() {
    return _io.join;
  }
});
Object.defineProperty(exports, 'cancel', {
  enumerable: true,
  get: function get() {
    return _io.cancel;
  }
});
Object.defineProperty(exports, 'select', {
  enumerable: true,
  get: function get() {
    return _io.select;
  }
});
Object.defineProperty(exports, 'actionChannel', {
  enumerable: true,
  get: function get() {
    return _io.actionChannel;
  }
});
Object.defineProperty(exports, 'cancelled', {
  enumerable: true,
  get: function get() {
    return _io.cancelled;
  }
});
Object.defineProperty(exports, 'flush', {
  enumerable: true,
  get: function get() {
    return _io.flush;
  }
});
Object.defineProperty(exports, 'getContext', {
  enumerable: true,
  get: function get() {
    return _io.getContext;
  }
});
Object.defineProperty(exports, 'setContext', {
  enumerable: true,
  get: function get() {
    return _io.setContext;
  }
});
Object.defineProperty(exports, 'takeEvery', {
  enumerable: true,
  get: function get() {
    return _io.takeEvery;
  }
});
Object.defineProperty(exports, 'takeLatest', {
  enumerable: true,
  get: function get() {
    return _io.takeLatest;
  }
});
Object.defineProperty(exports, 'throttle', {
  enumerable: true,
  get: function get() {
    return _io.throttle;
  }
});
},{"./internal/io":560}],558:[function(require,module,exports){
"use strict";

exports.__esModule = true;
exports.buffers = exports.BUFFER_OVERFLOW = undefined;

var _utils = require("./utils");

var BUFFER_OVERFLOW = exports.BUFFER_OVERFLOW = "Channel's Buffer overflow!";

var ON_OVERFLOW_THROW = 1;
var ON_OVERFLOW_DROP = 2;
var ON_OVERFLOW_SLIDE = 3;
var ON_OVERFLOW_EXPAND = 4;

var zeroBuffer = { isEmpty: _utils.kTrue, put: _utils.noop, take: _utils.noop };

function ringBuffer() {
  var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
  var overflowAction = arguments[1];

  var arr = new Array(limit);
  var length = 0;
  var pushIndex = 0;
  var popIndex = 0;

  var push = function push(it) {
    arr[pushIndex] = it;
    pushIndex = (pushIndex + 1) % limit;
    length++;
  };

  var take = function take() {
    if (length != 0) {
      var it = arr[popIndex];
      arr[popIndex] = null;
      length--;
      popIndex = (popIndex + 1) % limit;
      return it;
    }
  };

  var flush = function flush() {
    var items = [];
    while (length) {
      items.push(take());
    }
    return items;
  };

  return {
    isEmpty: function isEmpty() {
      return length == 0;
    },
    put: function put(it) {
      if (length < limit) {
        push(it);
      } else {
        var doubledLimit = void 0;
        switch (overflowAction) {
          case ON_OVERFLOW_THROW:
            throw new Error(BUFFER_OVERFLOW);
          case ON_OVERFLOW_SLIDE:
            arr[pushIndex] = it;
            pushIndex = (pushIndex + 1) % limit;
            popIndex = pushIndex;
            break;
          case ON_OVERFLOW_EXPAND:
            doubledLimit = 2 * limit;

            arr = flush();

            length = arr.length;
            pushIndex = arr.length;
            popIndex = 0;

            arr.length = doubledLimit;
            limit = doubledLimit;

            push(it);
            break;
          default:
          // DROP
        }
      }
    },
    take: take,
    flush: flush
  };
}

var buffers = exports.buffers = {
  none: function none() {
    return zeroBuffer;
  },
  fixed: function fixed(limit) {
    return ringBuffer(limit, ON_OVERFLOW_THROW);
  },
  dropping: function dropping(limit) {
    return ringBuffer(limit, ON_OVERFLOW_DROP);
  },
  sliding: function sliding(limit) {
    return ringBuffer(limit, ON_OVERFLOW_SLIDE);
  },
  expanding: function expanding(initialSize) {
    return ringBuffer(initialSize, ON_OVERFLOW_EXPAND);
  }
};
},{"./utils":567}],559:[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;
exports.UNDEFINED_INPUT_ERROR = exports.INVALID_BUFFER = exports.isEnd = exports.END = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.emitter = emitter;
exports.channel = channel;
exports.eventChannel = eventChannel;
exports.stdChannel = stdChannel;

var _utils = require('./utils');

var _buffers = require('./buffers');

var _scheduler = require('./scheduler');

var CHANNEL_END_TYPE = '@@redux-saga/CHANNEL_END';
var END = exports.END = { type: CHANNEL_END_TYPE };
var isEnd = exports.isEnd = function isEnd(a) {
  return a && a.type === CHANNEL_END_TYPE;
};

function emitter() {
  var subscribers = [];

  function subscribe(sub) {
    subscribers.push(sub);
    return function () {
      return (0, _utils.remove)(subscribers, sub);
    };
  }

  function emit(item) {
    var arr = subscribers.slice();
    for (var i = 0, len = arr.length; i < len; i++) {
      arr[i](item);
    }
  }

  return {
    subscribe: subscribe,
    emit: emit
  };
}

var INVALID_BUFFER = exports.INVALID_BUFFER = 'invalid buffer passed to channel factory function';
var UNDEFINED_INPUT_ERROR = exports.UNDEFINED_INPUT_ERROR = 'Saga was provided with an undefined action';

if (process.env.NODE_ENV !== 'production') {
  exports.UNDEFINED_INPUT_ERROR = UNDEFINED_INPUT_ERROR += '\nHints:\n    - check that your Action Creator returns a non-undefined value\n    - if the Saga was started using runSaga, check that your subscribe source provides the action to its listeners\n  ';
}

function channel() {
  var buffer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _buffers.buffers.fixed();

  var closed = false;
  var takers = [];

  (0, _utils.check)(buffer, _utils.is.buffer, INVALID_BUFFER);

  function checkForbiddenStates() {
    if (closed && takers.length) {
      throw (0, _utils.internalErr)('Cannot have a closed channel with pending takers');
    }
    if (takers.length && !buffer.isEmpty()) {
      throw (0, _utils.internalErr)('Cannot have pending takers with non empty buffer');
    }
  }

  function put(input) {
    checkForbiddenStates();
    (0, _utils.check)(input, _utils.is.notUndef, UNDEFINED_INPUT_ERROR);
    if (closed) {
      return;
    }
    if (!takers.length) {
      return buffer.put(input);
    }
    for (var i = 0; i < takers.length; i++) {
      var cb = takers[i];
      if (!cb[_utils.MATCH] || cb[_utils.MATCH](input)) {
        takers.splice(i, 1);
        return cb(input);
      }
    }
  }

  function take(cb) {
    checkForbiddenStates();
    (0, _utils.check)(cb, _utils.is.func, "channel.take's callback must be a function");

    if (closed && buffer.isEmpty()) {
      cb(END);
    } else if (!buffer.isEmpty()) {
      cb(buffer.take());
    } else {
      takers.push(cb);
      cb.cancel = function () {
        return (0, _utils.remove)(takers, cb);
      };
    }
  }

  function flush(cb) {
    checkForbiddenStates(); // TODO: check if some new state should be forbidden now
    (0, _utils.check)(cb, _utils.is.func, "channel.flush' callback must be a function");
    if (closed && buffer.isEmpty()) {
      cb(END);
      return;
    }
    cb(buffer.flush());
  }

  function close() {
    checkForbiddenStates();
    if (!closed) {
      closed = true;
      if (takers.length) {
        var arr = takers;
        takers = [];
        for (var i = 0, len = arr.length; i < len; i++) {
          arr[i](END);
        }
      }
    }
  }

  return {
    take: take,
    put: put,
    flush: flush,
    close: close,
    get __takers__() {
      return takers;
    },
    get __closed__() {
      return closed;
    }
  };
}

function eventChannel(subscribe) {
  var buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _buffers.buffers.none();
  var matcher = arguments[2];

  /**
    should be if(typeof matcher !== undefined) instead?
    see PR #273 for a background discussion
  **/
  if (arguments.length > 2) {
    (0, _utils.check)(matcher, _utils.is.func, 'Invalid match function passed to eventChannel');
  }

  var chan = channel(buffer);
  var close = function close() {
    if (!chan.__closed__) {
      if (unsubscribe) {
        unsubscribe();
      }
      chan.close();
    }
  };
  var unsubscribe = subscribe(function (input) {
    if (isEnd(input)) {
      close();
      return;
    }
    if (matcher && !matcher(input)) {
      return;
    }
    chan.put(input);
  });
  if (chan.__closed__) {
    unsubscribe();
  }

  if (!_utils.is.func(unsubscribe)) {
    throw new Error('in eventChannel: subscribe should return a function to unsubscribe');
  }

  return {
    take: chan.take,
    flush: chan.flush,
    close: close
  };
}

function stdChannel(subscribe) {
  var chan = eventChannel(function (cb) {
    return subscribe(function (input) {
      if (input[_utils.SAGA_ACTION]) {
        cb(input);
        return;
      }
      (0, _scheduler.asap)(function () {
        return cb(input);
      });
    });
  });

  return _extends({}, chan, {
    take: function take(cb, matcher) {
      if (arguments.length > 1) {
        (0, _utils.check)(matcher, _utils.is.func, "channel.take's matcher argument must be a function");
        cb[_utils.MATCH] = matcher;
      }
      chan.take(cb);
    }
  });
}
}).call(this,require('_process'))

},{"./buffers":558,"./scheduler":566,"./utils":567,"_process":556}],560:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.asEffect = exports.takem = undefined;
exports.take = take;
exports.put = put;
exports.all = all;
exports.race = race;
exports.call = call;
exports.apply = apply;
exports.cps = cps;
exports.fork = fork;
exports.spawn = spawn;
exports.join = join;
exports.cancel = cancel;
exports.select = select;
exports.actionChannel = actionChannel;
exports.cancelled = cancelled;
exports.flush = flush;
exports.getContext = getContext;
exports.setContext = setContext;
exports.takeEvery = takeEvery;
exports.takeLatest = takeLatest;
exports.throttle = throttle;

var _utils = require('./utils');

var _sagaHelpers = require('./sagaHelpers');

var IO = (0, _utils.sym)('IO');
var TAKE = 'TAKE';
var PUT = 'PUT';
var ALL = 'ALL';
var RACE = 'RACE';
var CALL = 'CALL';
var CPS = 'CPS';
var FORK = 'FORK';
var JOIN = 'JOIN';
var CANCEL = 'CANCEL';
var SELECT = 'SELECT';
var ACTION_CHANNEL = 'ACTION_CHANNEL';
var CANCELLED = 'CANCELLED';
var FLUSH = 'FLUSH';
var GET_CONTEXT = 'GET_CONTEXT';
var SET_CONTEXT = 'SET_CONTEXT';

var TEST_HINT = '\n(HINT: if you are getting this errors in tests, consider using createMockTask from redux-saga/utils)';

var effect = function effect(type, payload) {
  var _ref;

  return _ref = {}, _ref[IO] = true, _ref[type] = payload, _ref;
};

function take() {
  var patternOrChannel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '*';

  if (arguments.length) {
    (0, _utils.check)(arguments[0], _utils.is.notUndef, 'take(patternOrChannel): patternOrChannel is undefined');
  }
  if (_utils.is.pattern(patternOrChannel)) {
    return effect(TAKE, { pattern: patternOrChannel });
  }
  if (_utils.is.channel(patternOrChannel)) {
    return effect(TAKE, { channel: patternOrChannel });
  }
  throw new Error('take(patternOrChannel): argument ' + String(patternOrChannel) + ' is not valid channel or a valid pattern');
}

take.maybe = function () {
  var eff = take.apply(undefined, arguments);
  eff[TAKE].maybe = true;
  return eff;
};

var takem = /*#__PURE__*/exports.takem = (0, _utils.deprecate)(take.maybe, /*#__PURE__*/(0, _utils.updateIncentive)('takem', 'take.maybe'));

function put(channel, action) {
  if (arguments.length > 1) {
    (0, _utils.check)(channel, _utils.is.notUndef, 'put(channel, action): argument channel is undefined');
    (0, _utils.check)(channel, _utils.is.channel, 'put(channel, action): argument ' + channel + ' is not a valid channel');
    (0, _utils.check)(action, _utils.is.notUndef, 'put(channel, action): argument action is undefined');
  } else {
    (0, _utils.check)(channel, _utils.is.notUndef, 'put(action): argument action is undefined');
    action = channel;
    channel = null;
  }
  return effect(PUT, { channel: channel, action: action });
}

put.resolve = function () {
  var eff = put.apply(undefined, arguments);
  eff[PUT].resolve = true;
  return eff;
};

put.sync = (0, _utils.deprecate)(put.resolve, (0, _utils.updateIncentive)('put.sync', 'put.resolve'));

function all(effects) {
  return effect(ALL, effects);
}

function race(effects) {
  return effect(RACE, effects);
}

function getFnCallDesc(meth, fn, args) {
  (0, _utils.check)(fn, _utils.is.notUndef, meth + ': argument fn is undefined');

  var context = null;
  if (_utils.is.array(fn)) {
    var _fn = fn;
    context = _fn[0];
    fn = _fn[1];
  } else if (fn.fn) {
    var _fn2 = fn;
    context = _fn2.context;
    fn = _fn2.fn;
  }
  if (context && _utils.is.string(fn) && _utils.is.func(context[fn])) {
    fn = context[fn];
  }
  (0, _utils.check)(fn, _utils.is.func, meth + ': argument ' + fn + ' is not a function');

  return { context: context, fn: fn, args: args };
}

function call(fn) {
  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  return effect(CALL, getFnCallDesc('call', fn, args));
}

function apply(context, fn) {
  var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  return effect(CALL, getFnCallDesc('apply', { context: context, fn: fn }, args));
}

function cps(fn) {
  for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  return effect(CPS, getFnCallDesc('cps', fn, args));
}

function fork(fn) {
  for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    args[_key3 - 1] = arguments[_key3];
  }

  return effect(FORK, getFnCallDesc('fork', fn, args));
}

function spawn(fn) {
  for (var _len4 = arguments.length, args = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
    args[_key4 - 1] = arguments[_key4];
  }

  var eff = fork.apply(undefined, [fn].concat(args));
  eff[FORK].detached = true;
  return eff;
}

function join() {
  for (var _len5 = arguments.length, tasks = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
    tasks[_key5] = arguments[_key5];
  }

  if (tasks.length > 1) {
    return all(tasks.map(function (t) {
      return join(t);
    }));
  }
  var task = tasks[0];
  (0, _utils.check)(task, _utils.is.notUndef, 'join(task): argument task is undefined');
  (0, _utils.check)(task, _utils.is.task, 'join(task): argument ' + task + ' is not a valid Task object ' + TEST_HINT);
  return effect(JOIN, task);
}

function cancel() {
  for (var _len6 = arguments.length, tasks = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
    tasks[_key6] = arguments[_key6];
  }

  if (tasks.length > 1) {
    return all(tasks.map(function (t) {
      return cancel(t);
    }));
  }
  var task = tasks[0];
  if (tasks.length === 1) {
    (0, _utils.check)(task, _utils.is.notUndef, 'cancel(task): argument task is undefined');
    (0, _utils.check)(task, _utils.is.task, 'cancel(task): argument ' + task + ' is not a valid Task object ' + TEST_HINT);
  }
  return effect(CANCEL, task || _utils.SELF_CANCELLATION);
}

function select(selector) {
  for (var _len7 = arguments.length, args = Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
    args[_key7 - 1] = arguments[_key7];
  }

  if (arguments.length === 0) {
    selector = _utils.ident;
  } else {
    (0, _utils.check)(selector, _utils.is.notUndef, 'select(selector,[...]): argument selector is undefined');
    (0, _utils.check)(selector, _utils.is.func, 'select(selector,[...]): argument ' + selector + ' is not a function');
  }
  return effect(SELECT, { selector: selector, args: args });
}

/**
  channel(pattern, [buffer])    => creates an event channel for store actions
**/
function actionChannel(pattern, buffer) {
  (0, _utils.check)(pattern, _utils.is.notUndef, 'actionChannel(pattern,...): argument pattern is undefined');
  if (arguments.length > 1) {
    (0, _utils.check)(buffer, _utils.is.notUndef, 'actionChannel(pattern, buffer): argument buffer is undefined');
    (0, _utils.check)(buffer, _utils.is.buffer, 'actionChannel(pattern, buffer): argument ' + buffer + ' is not a valid buffer');
  }
  return effect(ACTION_CHANNEL, { pattern: pattern, buffer: buffer });
}

function cancelled() {
  return effect(CANCELLED, {});
}

function flush(channel) {
  (0, _utils.check)(channel, _utils.is.channel, 'flush(channel): argument ' + channel + ' is not valid channel');
  return effect(FLUSH, channel);
}

function getContext(prop) {
  (0, _utils.check)(prop, _utils.is.string, 'getContext(prop): argument ' + prop + ' is not a string');
  return effect(GET_CONTEXT, prop);
}

function setContext(props) {
  (0, _utils.check)(props, _utils.is.object, (0, _utils.createSetContextWarning)(null, props));
  return effect(SET_CONTEXT, props);
}

function takeEvery(patternOrChannel, worker) {
  for (var _len8 = arguments.length, args = Array(_len8 > 2 ? _len8 - 2 : 0), _key8 = 2; _key8 < _len8; _key8++) {
    args[_key8 - 2] = arguments[_key8];
  }

  return fork.apply(undefined, [_sagaHelpers.takeEveryHelper, patternOrChannel, worker].concat(args));
}

function takeLatest(patternOrChannel, worker) {
  for (var _len9 = arguments.length, args = Array(_len9 > 2 ? _len9 - 2 : 0), _key9 = 2; _key9 < _len9; _key9++) {
    args[_key9 - 2] = arguments[_key9];
  }

  return fork.apply(undefined, [_sagaHelpers.takeLatestHelper, patternOrChannel, worker].concat(args));
}

function throttle(ms, pattern, worker) {
  for (var _len10 = arguments.length, args = Array(_len10 > 3 ? _len10 - 3 : 0), _key10 = 3; _key10 < _len10; _key10++) {
    args[_key10 - 3] = arguments[_key10];
  }

  return fork.apply(undefined, [_sagaHelpers.throttleHelper, ms, pattern, worker].concat(args));
}

var createAsEffectType = function createAsEffectType(type) {
  return function (effect) {
    return effect && effect[IO] && effect[type];
  };
};

var asEffect = exports.asEffect = {
  take: createAsEffectType(TAKE),
  put: createAsEffectType(PUT),
  all: createAsEffectType(ALL),
  race: createAsEffectType(RACE),
  call: createAsEffectType(CALL),
  cps: createAsEffectType(CPS),
  fork: createAsEffectType(FORK),
  join: createAsEffectType(JOIN),
  cancel: createAsEffectType(CANCEL),
  select: createAsEffectType(SELECT),
  actionChannel: createAsEffectType(ACTION_CHANNEL),
  cancelled: createAsEffectType(CANCELLED),
  flush: createAsEffectType(FLUSH),
  getContext: createAsEffectType(GET_CONTEXT),
  setContext: createAsEffectType(SET_CONTEXT)
};
},{"./sagaHelpers":562,"./utils":567}],561:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.qEnd = undefined;
exports.safeName = safeName;
exports.default = fsmIterator;

var _utils = require('../utils');

var done = { done: true, value: undefined };
var qEnd = exports.qEnd = {};

function safeName(patternOrChannel) {
  if (_utils.is.channel(patternOrChannel)) {
    return 'channel';
  } else if (Array.isArray(patternOrChannel)) {
    return String(patternOrChannel.map(function (entry) {
      return String(entry);
    }));
  } else {
    return String(patternOrChannel);
  }
}

function fsmIterator(fsm, q0) {
  var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'iterator';

  var updateState = void 0,
      qNext = q0;

  function next(arg, error) {
    if (qNext === qEnd) {
      return done;
    }

    if (error) {
      qNext = qEnd;
      throw error;
    } else {
      updateState && updateState(arg);

      var _fsm$qNext = fsm[qNext](),
          q = _fsm$qNext[0],
          output = _fsm$qNext[1],
          _updateState = _fsm$qNext[2];

      qNext = q;
      updateState = _updateState;
      return qNext === qEnd ? done : output;
    }
  }

  return (0, _utils.makeIterator)(next, function (error) {
    return next(null, error);
  }, name, true);
}
},{"../utils":567}],562:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.throttleHelper = exports.takeLatestHelper = exports.takeEveryHelper = exports.throttle = exports.takeLatest = exports.takeEvery = undefined;

var _takeEvery = require('./takeEvery');

var _takeEvery2 = _interopRequireDefault(_takeEvery);

var _takeLatest = require('./takeLatest');

var _takeLatest2 = _interopRequireDefault(_takeLatest);

var _throttle = require('./throttle');

var _throttle2 = _interopRequireDefault(_throttle);

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var deprecationWarning = function deprecationWarning(helperName) {
  return 'import { ' + helperName + ' } from \'redux-saga\' has been deprecated in favor of import { ' + helperName + ' } from \'redux-saga/effects\'.\nThe latter will not work with yield*, as helper effects are wrapped automatically for you in fork effect.\nTherefore yield ' + helperName + ' will return task descriptor to your saga and execute next lines of code.';
};

var takeEvery = /*#__PURE__*/(0, _utils.deprecate)(_takeEvery2.default, /*#__PURE__*/deprecationWarning('takeEvery'));
var takeLatest = /*#__PURE__*/(0, _utils.deprecate)(_takeLatest2.default, /*#__PURE__*/deprecationWarning('takeLatest'));
var throttle = /*#__PURE__*/(0, _utils.deprecate)(_throttle2.default, /*#__PURE__*/deprecationWarning('throttle'));

exports.takeEvery = takeEvery;
exports.takeLatest = takeLatest;
exports.throttle = throttle;
exports.takeEveryHelper = _takeEvery2.default;
exports.takeLatestHelper = _takeLatest2.default;
exports.throttleHelper = _throttle2.default;
},{"../utils":567,"./takeEvery":563,"./takeLatest":564,"./throttle":565}],563:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.default = takeEvery;

var _fsmIterator = require('./fsmIterator');

var _fsmIterator2 = _interopRequireDefault(_fsmIterator);

var _io = require('../io');

var _channel = require('../channel');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function takeEvery(patternOrChannel, worker) {
  for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  var yTake = { done: false, value: (0, _io.take)(patternOrChannel) };
  var yFork = function yFork(ac) {
    return { done: false, value: _io.fork.apply(undefined, [worker].concat(args, [ac])) };
  };

  var action = void 0,
      setAction = function setAction(ac) {
    return action = ac;
  };

  return (0, _fsmIterator2.default)({
    q1: function q1() {
      return ['q2', yTake, setAction];
    },
    q2: function q2() {
      return action === _channel.END ? [_fsmIterator.qEnd] : ['q1', yFork(action)];
    }
  }, 'q1', 'takeEvery(' + (0, _fsmIterator.safeName)(patternOrChannel) + ', ' + worker.name + ')');
}
},{"../channel":559,"../io":560,"./fsmIterator":561}],564:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.default = takeLatest;

var _fsmIterator = require('./fsmIterator');

var _fsmIterator2 = _interopRequireDefault(_fsmIterator);

var _io = require('../io');

var _channel = require('../channel');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function takeLatest(patternOrChannel, worker) {
  for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  var yTake = { done: false, value: (0, _io.take)(patternOrChannel) };
  var yFork = function yFork(ac) {
    return { done: false, value: _io.fork.apply(undefined, [worker].concat(args, [ac])) };
  };
  var yCancel = function yCancel(task) {
    return { done: false, value: (0, _io.cancel)(task) };
  };

  var task = void 0,
      action = void 0;
  var setTask = function setTask(t) {
    return task = t;
  };
  var setAction = function setAction(ac) {
    return action = ac;
  };

  return (0, _fsmIterator2.default)({
    q1: function q1() {
      return ['q2', yTake, setAction];
    },
    q2: function q2() {
      return action === _channel.END ? [_fsmIterator.qEnd] : task ? ['q3', yCancel(task)] : ['q1', yFork(action), setTask];
    },
    q3: function q3() {
      return ['q1', yFork(action), setTask];
    }
  }, 'q1', 'takeLatest(' + (0, _fsmIterator.safeName)(patternOrChannel) + ', ' + worker.name + ')');
}
},{"../channel":559,"../io":560,"./fsmIterator":561}],565:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.default = throttle;

var _fsmIterator = require('./fsmIterator');

var _fsmIterator2 = _interopRequireDefault(_fsmIterator);

var _io = require('../io');

var _channel = require('../channel');

var _buffers = require('../buffers');

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function throttle(delayLength, pattern, worker) {
  for (var _len = arguments.length, args = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    args[_key - 3] = arguments[_key];
  }

  var action = void 0,
      channel = void 0;

  var yActionChannel = { done: false, value: (0, _io.actionChannel)(pattern, _buffers.buffers.sliding(1)) };
  var yTake = function yTake() {
    return { done: false, value: (0, _io.take)(channel) };
  };
  var yFork = function yFork(ac) {
    return { done: false, value: _io.fork.apply(undefined, [worker].concat(args, [ac])) };
  };
  var yDelay = { done: false, value: (0, _io.call)(_utils.delay, delayLength) };

  var setAction = function setAction(ac) {
    return action = ac;
  };
  var setChannel = function setChannel(ch) {
    return channel = ch;
  };

  return (0, _fsmIterator2.default)({
    q1: function q1() {
      return ['q2', yActionChannel, setChannel];
    },
    q2: function q2() {
      return ['q3', yTake(), setAction];
    },
    q3: function q3() {
      return action === _channel.END ? [_fsmIterator.qEnd] : ['q4', yFork(action)];
    },
    q4: function q4() {
      return ['q2', yDelay];
    }
  }, 'q1', 'throttle(' + (0, _fsmIterator.safeName)(pattern) + ', ' + worker.name + ')');
}
},{"../buffers":558,"../channel":559,"../io":560,"../utils":567,"./fsmIterator":561}],566:[function(require,module,exports){
"use strict";

exports.__esModule = true;
exports.asap = asap;
exports.suspend = suspend;
exports.flush = flush;
var queue = [];
/**
  Variable to hold a counting semaphore
  - Incrementing adds a lock and puts the scheduler in a `suspended` state (if it's not
    already suspended)
  - Decrementing releases a lock. Zero locks puts the scheduler in a `released` state. This
    triggers flushing the queued tasks.
**/
var semaphore = 0;

/**
  Executes a task 'atomically'. Tasks scheduled during this execution will be queued
  and flushed after this task has finished (assuming the scheduler endup in a released
  state).
**/
function exec(task) {
  try {
    suspend();
    task();
  } finally {
    release();
  }
}

/**
  Executes or queues a task depending on the state of the scheduler (`suspended` or `released`)
**/
function asap(task) {
  queue.push(task);

  if (!semaphore) {
    suspend();
    flush();
  }
}

/**
  Puts the scheduler in a `suspended` state. Scheduled tasks will be queued until the
  scheduler is released.
**/
function suspend() {
  semaphore++;
}

/**
  Puts the scheduler in a `released` state.
**/
function release() {
  semaphore--;
}

/**
  Releases the current lock. Executes all queued tasks if the scheduler is in the released state.
**/
function flush() {
  release();

  var task = void 0;
  while (!semaphore && (task = queue.shift()) !== undefined) {
    exec(task);
  }
}
},{}],567:[function(require,module,exports){
(function (process){
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.check = check;
exports.hasOwn = hasOwn;
exports.remove = remove;
exports.deferred = deferred;
exports.arrayOfDeffered = arrayOfDeffered;
exports.delay = delay;
exports.createMockTask = createMockTask;
exports.autoInc = autoInc;
exports.makeIterator = makeIterator;
exports.log = log;
exports.deprecate = deprecate;
var sym = exports.sym = function sym(id) {
  return '@@redux-saga/' + id;
};

var TASK = exports.TASK = sym('TASK');
var HELPER = exports.HELPER = sym('HELPER');
var MATCH = exports.MATCH = sym('MATCH');
var CANCEL = exports.CANCEL = sym('CANCEL_PROMISE');
var SAGA_ACTION = exports.SAGA_ACTION = sym('SAGA_ACTION');
var SELF_CANCELLATION = exports.SELF_CANCELLATION = sym('SELF_CANCELLATION');
var konst = exports.konst = function konst(v) {
  return function () {
    return v;
  };
};
var kTrue = exports.kTrue = konst(true);
var kFalse = exports.kFalse = konst(false);
var noop = exports.noop = function noop() {};
var ident = exports.ident = function ident(v) {
  return v;
};

function check(value, predicate, error) {
  if (!predicate(value)) {
    log('error', 'uncaught at check', error);
    throw new Error(error);
  }
}

var hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn(object, property) {
  return is.notUndef(object) && hasOwnProperty.call(object, property);
}

var is = exports.is = {
  undef: function undef(v) {
    return v === null || v === undefined;
  },
  notUndef: function notUndef(v) {
    return v !== null && v !== undefined;
  },
  func: function func(f) {
    return typeof f === 'function';
  },
  number: function number(n) {
    return typeof n === 'number';
  },
  string: function string(s) {
    return typeof s === 'string';
  },
  array: Array.isArray,
  object: function object(obj) {
    return obj && !is.array(obj) && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object';
  },
  promise: function promise(p) {
    return p && is.func(p.then);
  },
  iterator: function iterator(it) {
    return it && is.func(it.next) && is.func(it.throw);
  },
  iterable: function iterable(it) {
    return it && is.func(Symbol) ? is.func(it[Symbol.iterator]) : is.array(it);
  },
  task: function task(t) {
    return t && t[TASK];
  },
  observable: function observable(ob) {
    return ob && is.func(ob.subscribe);
  },
  buffer: function buffer(buf) {
    return buf && is.func(buf.isEmpty) && is.func(buf.take) && is.func(buf.put);
  },
  pattern: function pattern(pat) {
    return pat && (is.string(pat) || (typeof pat === 'undefined' ? 'undefined' : _typeof(pat)) === 'symbol' || is.func(pat) || is.array(pat));
  },
  channel: function channel(ch) {
    return ch && is.func(ch.take) && is.func(ch.close);
  },
  helper: function helper(it) {
    return it && it[HELPER];
  },
  stringableFunc: function stringableFunc(f) {
    return is.func(f) && hasOwn(f, 'toString');
  }
};

var object = exports.object = {
  assign: function assign(target, source) {
    for (var i in source) {
      if (hasOwn(source, i)) {
        target[i] = source[i];
      }
    }
  }
};

function remove(array, item) {
  var index = array.indexOf(item);
  if (index >= 0) {
    array.splice(index, 1);
  }
}

var array = exports.array = {
  from: function from(obj) {
    var arr = Array(obj.length);
    for (var i in obj) {
      if (hasOwn(obj, i)) {
        arr[i] = obj[i];
      }
    }
    return arr;
  }
};

function deferred() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var def = _extends({}, props);
  var promise = new Promise(function (resolve, reject) {
    def.resolve = resolve;
    def.reject = reject;
  });
  def.promise = promise;
  return def;
}

function arrayOfDeffered(length) {
  var arr = [];
  for (var i = 0; i < length; i++) {
    arr.push(deferred());
  }
  return arr;
}

function delay(ms) {
  var val = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  var timeoutId = void 0;
  var promise = new Promise(function (resolve) {
    timeoutId = setTimeout(function () {
      return resolve(val);
    }, ms);
  });

  promise[CANCEL] = function () {
    return clearTimeout(timeoutId);
  };

  return promise;
}

function createMockTask() {
  var _ref;

  var running = true;
  var _result = void 0,
      _error = void 0;

  return _ref = {}, _ref[TASK] = true, _ref.isRunning = function isRunning() {
    return running;
  }, _ref.result = function result() {
    return _result;
  }, _ref.error = function error() {
    return _error;
  }, _ref.setRunning = function setRunning(b) {
    return running = b;
  }, _ref.setResult = function setResult(r) {
    return _result = r;
  }, _ref.setError = function setError(e) {
    return _error = e;
  }, _ref;
}

function autoInc() {
  var seed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

  return function () {
    return ++seed;
  };
}

var uid = exports.uid = autoInc();

var kThrow = function kThrow(err) {
  throw err;
};
var kReturn = function kReturn(value) {
  return { value: value, done: true };
};
function makeIterator(next) {
  var thro = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : kThrow;
  var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  var isHelper = arguments[3];

  var iterator = { name: name, next: next, throw: thro, return: kReturn };

  if (isHelper) {
    iterator[HELPER] = true;
  }
  if (typeof Symbol !== 'undefined') {
    iterator[Symbol.iterator] = function () {
      return iterator;
    };
  }
  return iterator;
}

/**
  Print error in a useful way whether in a browser environment
  (with expandable error stack traces), or in a node.js environment
  (text-only log output)
 **/
function log(level, message) {
  var error = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

  /*eslint-disable no-console*/
  if (typeof window === 'undefined') {
    console.log('redux-saga ' + level + ': ' + message + '\n' + (error && error.stack || error));
  } else {
    console[level](message, error);
  }
}

function deprecate(fn, deprecationWarning) {
  return function () {
    if (process.env.NODE_ENV === 'development') log('warn', deprecationWarning);
    return fn.apply(undefined, arguments);
  };
}

var updateIncentive = exports.updateIncentive = function updateIncentive(deprecated, preferred) {
  return deprecated + ' has been deprecated in favor of ' + preferred + ', please update your code';
};

var internalErr = exports.internalErr = function internalErr(err) {
  return new Error('\n  redux-saga: Error checking hooks detected an inconsistent state. This is likely a bug\n  in redux-saga code and not yours. Thanks for reporting this in the project\'s github repo.\n  Error: ' + err + '\n');
};

var createSetContextWarning = exports.createSetContextWarning = function createSetContextWarning(ctx, props) {
  return (ctx ? ctx + '.' : '') + 'setContext(props): argument ' + props + ' is not a plain object';
};

var wrapSagaDispatch = exports.wrapSagaDispatch = function wrapSagaDispatch(dispatch) {
  return function (action) {
    return dispatch(Object.defineProperty(action, SAGA_ACTION, { value: true }));
  };
};

var cloneableGenerator = exports.cloneableGenerator = function cloneableGenerator(generatorFunc) {
  return function () {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var history = [];
    var gen = generatorFunc.apply(undefined, args);
    return {
      next: function next(arg) {
        history.push(arg);
        return gen.next(arg);
      },
      clone: function clone() {
        var clonedGen = cloneableGenerator(generatorFunc).apply(undefined, args);
        history.forEach(function (arg) {
          return clonedGen.next(arg);
        });
        return clonedGen;
      },
      return: function _return(value) {
        return gen.return(value);
      },
      throw: function _throw(exception) {
        return gen.throw(exception);
      }
    };
  };
};
}).call(this,require('_process'))

},{"_process":556}],568:[function(require,module,exports){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
  typeof module === "object" ? module.exports : {}
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}

},{}],569:[function(require,module,exports){
"use strict";

require("@babel/polyfill");

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _reactRouter = require("react-router");

var _reactRedux = require("react-redux");

var _reactRouterRedux = require("react-router-redux");

var _App = _interopRequireDefault(require("./App"));

var _Home = _interopRequireDefault(require("./screens/Home"));

var _Item = _interopRequireDefault(require("./screens/Item"));

var _List = _interopRequireDefault(require("./screens/List"));

var _store = _interopRequireDefault(require("./store"));

var _lists = require("../utils/lists");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * This is the main entry file, which we compile the main JS bundle from. It
 * only contains the client side routing setup.
 */
// Needed for ES6 generators (redux-saga) to work
// Sync the browser history to the Redux store
var history = (0, _reactRouterRedux.syncHistoryWithStore)(_reactRouter.browserHistory, _store["default"]); // Initialise Keystone.User list

Keystone.User = _lists.listsByKey[Keystone.userList];

_reactDom["default"].render(_react["default"].createElement(_reactRedux.Provider, {
  store: _store["default"]
}, _react["default"].createElement(_reactRouter.Router, {
  history: history
}, _react["default"].createElement(_reactRouter.Route, {
  path: Keystone.adminPath,
  component: _App["default"]
}, _react["default"].createElement(_reactRouter.IndexRoute, {
  component: _Home["default"]
}), _react["default"].createElement(_reactRouter.Route, {
  path: ":listId",
  component: _List["default"]
}), _react["default"].createElement(_reactRouter.Route, {
  path: ":listId/:itemId",
  component: _Item["default"]
})))), document.getElementById('react-root'));

},{"../utils/lists":154,"./App":1,"./screens/Home":83,"./screens/Item":101,"./screens/List":128,"./store":147,"@babel/polyfill":158,"react":undefined,"react-dom":undefined,"react-redux":undefined,"react-router":undefined,"react-router-redux":undefined}]},{},[569])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvQXBwLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL2NvbXBvbmVudHMvRm9vdGVyL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL2NvbXBvbmVudHMvTmF2aWdhdGlvbi9Nb2JpbGUvTGlzdEl0ZW0uanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvY29tcG9uZW50cy9OYXZpZ2F0aW9uL01vYmlsZS9TZWN0aW9uSXRlbS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9jb21wb25lbnRzL05hdmlnYXRpb24vTW9iaWxlL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL2NvbXBvbmVudHMvTmF2aWdhdGlvbi9QcmltYXJ5L05hdkl0ZW0uanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvY29tcG9uZW50cy9OYXZpZ2F0aW9uL1ByaW1hcnkvaW5kZXguanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvY29tcG9uZW50cy9OYXZpZ2F0aW9uL1NlY29uZGFyeS9OYXZJdGVtLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL2NvbXBvbmVudHMvTmF2aWdhdGlvbi9TZWNvbmRhcnkvaW5kZXguanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvZWxlbWVudGFsL0FsZXJ0L2NvbG9ycy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9lbGVtZW50YWwvQWxlcnQvaW5kZXguanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvZWxlbWVudGFsL0FsZXJ0L3N0eWxlcy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9lbGVtZW50YWwvQmxhbmtTdGF0ZS9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9lbGVtZW50YWwvQnV0dG9uL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL2VsZW1lbnRhbC9CdXR0b24vc3R5bGVzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL2VsZW1lbnRhbC9DZW50ZXIvaW5kZXguanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvZWxlbWVudGFsL0NlbnRlci9zdHlsZXMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvZWxlbWVudGFsL0NoaXAvY29sb3JzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL2VsZW1lbnRhbC9DaGlwL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL2VsZW1lbnRhbC9DaGlwL3N0eWxlcy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9lbGVtZW50YWwvQ29udGFpbmVyL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL2VsZW1lbnRhbC9Db250YWluZXIvc2l6ZXMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvZWxlbWVudGFsL0NvbnRhaW5lci9zdHlsZXMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvZWxlbWVudGFsL0Ryb3Bkb3duQnV0dG9uL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL2VsZW1lbnRhbC9Gb3JtL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL2VsZW1lbnRhbC9Gb3JtL3N0eWxlcy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9lbGVtZW50YWwvRm9ybUZpZWxkL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL2VsZW1lbnRhbC9Gb3JtRmllbGQvc3R5bGVzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL2VsZW1lbnRhbC9Gb3JtSW5wdXQvaW5kZXguanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvZWxlbWVudGFsL0Zvcm1JbnB1dC9ub2VkaXQuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvZWxlbWVudGFsL0Zvcm1JbnB1dC9zdHlsZXMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvZWxlbWVudGFsL0Zvcm1MYWJlbC9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9lbGVtZW50YWwvRm9ybUxhYmVsL3N0eWxlcy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9lbGVtZW50YWwvRm9ybU5vdGUvaW5kZXguanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvZWxlbWVudGFsL0Zvcm1Ob3RlL3N0eWxlcy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9lbGVtZW50YWwvRm9ybVNlbGVjdC9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9lbGVtZW50YWwvRm9ybVNlbGVjdC9zdHlsZXMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvZWxlbWVudGFsL0dseXBoL2NvbG9ycy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9lbGVtZW50YWwvR2x5cGgvaW5kZXguanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvZWxlbWVudGFsL0dseXBoL29jdGljb25zLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL2VsZW1lbnRhbC9HbHlwaC9zaXplcy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9lbGVtZW50YWwvR2x5cGgvc3R5bGVzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL2VsZW1lbnRhbC9HbHlwaEJ1dHRvbi9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9lbGVtZW50YWwvR2x5cGhGaWVsZC9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9lbGVtZW50YWwvR3JpZC9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9lbGVtZW50YWwvR3JpZENvbC9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9lbGVtZW50YWwvR3JpZFJvdy9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9lbGVtZW50YWwvSW5saW5lR3JvdXAvaW5kZXguanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvZWxlbWVudGFsL0lubGluZUdyb3VwU2VjdGlvbi9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9lbGVtZW50YWwvSW5saW5lR3JvdXBTZWN0aW9uL3N0eWxlcy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9lbGVtZW50YWwvTGFiZWxsZWRDb250cm9sL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL2VsZW1lbnRhbC9MYWJlbGxlZENvbnRyb2wvc3R5bGVzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL2VsZW1lbnRhbC9Mb2FkaW5nQnV0dG9uL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL2VsZW1lbnRhbC9Nb2RhbC9ib2R5LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL2VsZW1lbnRhbC9Nb2RhbC9kaWFsb2cuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvZWxlbWVudGFsL01vZGFsL2Zvb3Rlci5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9lbGVtZW50YWwvTW9kYWwvaGVhZGVyLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL2VsZW1lbnRhbC9Nb2RhbC9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9lbGVtZW50YWwvUGFnaW5hdGlvbi9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9lbGVtZW50YWwvUGFnaW5hdGlvbi9wYWdlLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL2VsZW1lbnRhbC9QYXNzQ29udGV4dC9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9lbGVtZW50YWwvUG9ydGFsL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL2VsZW1lbnRhbC9SZXNwb25zaXZlVGV4dC9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9lbGVtZW50YWwvU2NyZWVuUmVhZGVyT25seS9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9lbGVtZW50YWwvU2Nyb2xsTG9jay9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9lbGVtZW50YWwvU2VnbWVudGVkQ29udHJvbC9jb2xvcnMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvZWxlbWVudGFsL1NlZ21lbnRlZENvbnRyb2wvaW5kZXguanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvZWxlbWVudGFsL1NlZ21lbnRlZENvbnRyb2wvc3R5bGVzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL2VsZW1lbnRhbC9TcGlubmVyL2NvbG9ycy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9lbGVtZW50YWwvU3Bpbm5lci9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9lbGVtZW50YWwvU3Bpbm5lci9zaXplcy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9lbGVtZW50YWwvU3Bpbm5lci9zdHlsZXMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvZWxlbWVudGFsL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL3BhcnNlcnMvZmlsdGVycy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9wYXJzZXJzL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL3NhZ2FzL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL3NhZ2FzL3F1ZXJ5UGFyYW1zU2FnYXMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvc2NyZWVucy9Ib21lL2FjdGlvbnMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvc2NyZWVucy9Ib21lL2NvbXBvbmVudHMvTGlzdFRpbGUuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvc2NyZWVucy9Ib21lL2NvbXBvbmVudHMvTGlzdHMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvc2NyZWVucy9Ib21lL2NvbXBvbmVudHMvU2VjdGlvbi5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9zY3JlZW5zL0hvbWUvY29uc3RhbnRzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL3NjcmVlbnMvSG9tZS9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9zY3JlZW5zL0hvbWUvcmVkdWNlci5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9zY3JlZW5zL0hvbWUvdXRpbHMvZ2V0UmVsYXRlZEljb25DbGFzcy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9zY3JlZW5zL0l0ZW0vYWN0aW9ucy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9zY3JlZW5zL0l0ZW0vY29tcG9uZW50cy9BbHRUZXh0LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL3NjcmVlbnMvSXRlbS9jb21wb25lbnRzL0RyaWxsZG93bi5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9zY3JlZW5zL0l0ZW0vY29tcG9uZW50cy9EcmlsbGRvd25JdGVtLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL3NjcmVlbnMvSXRlbS9jb21wb25lbnRzL0VkaXRGb3JtLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL3NjcmVlbnMvSXRlbS9jb21wb25lbnRzL0VkaXRGb3JtSGVhZGVyLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL3NjcmVlbnMvSXRlbS9jb21wb25lbnRzL0VkaXRGb3JtSGVhZGVyU2VhcmNoLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL3NjcmVlbnMvSXRlbS9jb21wb25lbnRzL0Zvb3RlckJhci5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9zY3JlZW5zL0l0ZW0vY29tcG9uZW50cy9Gb3JtSGVhZGluZy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9zY3JlZW5zL0l0ZW0vY29tcG9uZW50cy9SZWxhdGVkSXRlbXNMaXN0L1JlbGF0ZWRJdGVtc0xpc3QuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvc2NyZWVucy9JdGVtL2NvbXBvbmVudHMvUmVsYXRlZEl0ZW1zTGlzdC9SZWxhdGVkSXRlbXNMaXN0RHJhZ0Ryb3AuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvc2NyZWVucy9JdGVtL2NvbXBvbmVudHMvUmVsYXRlZEl0ZW1zTGlzdC9SZWxhdGVkSXRlbXNMaXN0Um93LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL3NjcmVlbnMvSXRlbS9jb21wb25lbnRzL1Rvb2xiYXIvVG9vbGJhclNlY3Rpb24uanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvc2NyZWVucy9JdGVtL2NvbXBvbmVudHMvVG9vbGJhci9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9zY3JlZW5zL0l0ZW0vY29uc3RhbnRzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL3NjcmVlbnMvSXRlbS9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9zY3JlZW5zL0l0ZW0vcmVkdWNlci5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9zY3JlZW5zL0xpc3QvYWN0aW9ucy9hY3RpdmUuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvc2NyZWVucy9MaXN0L2FjdGlvbnMvZHJhZ2Ryb3AuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvc2NyZWVucy9MaXN0L2FjdGlvbnMvaW5kZXguanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvc2NyZWVucy9MaXN0L2FjdGlvbnMvaXRlbXMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvc2NyZWVucy9MaXN0L2NvbXBvbmVudHMvRmlsdGVyaW5nL0ZpbHRlci5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9zY3JlZW5zL0xpc3QvY29tcG9uZW50cy9GaWx0ZXJpbmcvTGlzdEZpbHRlcnMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvc2NyZWVucy9MaXN0L2NvbXBvbmVudHMvRmlsdGVyaW5nL0xpc3RGaWx0ZXJzQWRkLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL3NjcmVlbnMvTGlzdC9jb21wb25lbnRzL0ZpbHRlcmluZy9MaXN0RmlsdGVyc0FkZEZvcm0uanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvc2NyZWVucy9MaXN0L2NvbXBvbmVudHMvRmlsdGVyaW5nL2dldEZpbHRlckxhYmVsLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL3NjcmVlbnMvTGlzdC9jb21wb25lbnRzL0l0ZW1zVGFibGUvSXRlbXNUYWJsZS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9zY3JlZW5zL0xpc3QvY29tcG9uZW50cy9JdGVtc1RhYmxlL0l0ZW1zVGFibGVEcmFnRHJvcC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9zY3JlZW5zL0xpc3QvY29tcG9uZW50cy9JdGVtc1RhYmxlL0l0ZW1zVGFibGVEcmFnRHJvcFpvbmUuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvc2NyZWVucy9MaXN0L2NvbXBvbmVudHMvSXRlbXNUYWJsZS9JdGVtc1RhYmxlRHJhZ0Ryb3Bab25lVGFyZ2V0LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL3NjcmVlbnMvTGlzdC9jb21wb25lbnRzL0l0ZW1zVGFibGUvSXRlbXNUYWJsZVJvdy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9zY3JlZW5zL0xpc3QvY29tcG9uZW50cy9MaXN0Q29sdW1uc0Zvcm0uanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvc2NyZWVucy9MaXN0L2NvbXBvbmVudHMvTGlzdENvbnRyb2wuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvc2NyZWVucy9MaXN0L2NvbXBvbmVudHMvTGlzdERvd25sb2FkRm9ybS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9zY3JlZW5zL0xpc3QvY29tcG9uZW50cy9MaXN0SGVhZGVyQnV0dG9uLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL3NjcmVlbnMvTGlzdC9jb21wb25lbnRzL0xpc3RIZWFkZXJTZWFyY2guanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvc2NyZWVucy9MaXN0L2NvbXBvbmVudHMvTGlzdEhlYWRlclRpdGxlLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL3NjcmVlbnMvTGlzdC9jb21wb25lbnRzL0xpc3RIZWFkZXJUb29sYmFyLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL3NjcmVlbnMvTGlzdC9jb21wb25lbnRzL0xpc3RNYW5hZ2VtZW50LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL3NjcmVlbnMvTGlzdC9jb21wb25lbnRzL0xpc3RTb3J0LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL3NjcmVlbnMvTGlzdC9jb21wb25lbnRzL1VwZGF0ZUZvcm0uanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvc2NyZWVucy9MaXN0L2NvbnN0YW50cy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9zY3JlZW5zL0xpc3QvaW5kZXguanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvc2NyZWVucy9MaXN0L3JlZHVjZXJzL2FjdGl2ZS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9zY3JlZW5zL0xpc3QvcmVkdWNlcnMvbWFpbi5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9zaGFyZWQvQWxlcnRNZXNzYWdlcy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9zaGFyZWQvQ29uZmlybWF0aW9uRGlhbG9nLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL3NoYXJlZC9DcmVhdGVGb3JtLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL3NoYXJlZC9GbGFzaE1lc3NhZ2UuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvc2hhcmVkL0ZsYXNoTWVzc2FnZXMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvc2hhcmVkL0ludmFsaWRGaWVsZFR5cGUuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvc2hhcmVkL0tiZC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9zaGFyZWQvUG9wb3V0L1BvcG91dEJvZHkuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvc2hhcmVkL1BvcG91dC9Qb3BvdXRGb290ZXIuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvc2hhcmVkL1BvcG91dC9Qb3BvdXRIZWFkZXIuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvc2hhcmVkL1BvcG91dC9Qb3BvdXRMaXN0LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL3NoYXJlZC9Qb3BvdXQvUG9wb3V0TGlzdEhlYWRpbmcuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvc2hhcmVkL1BvcG91dC9Qb3BvdXRMaXN0SXRlbS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9zaGFyZWQvUG9wb3V0L1BvcG91dFBhbmUuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC9BcHAvc2hhcmVkL1BvcG91dC9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L0FwcC9zaGFyZWQvUG9ydGFsLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvQXBwL3N0b3JlLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvY29uc3RhbnRzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvdGhlbWUuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC91dGlscy9MaXN0LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvdXRpbHMvY29sb3IuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC91dGlscy9jb25jYXRDbGFzc25hbWVzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvdXRpbHMvY3NzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9hZG1pbi9jbGllbnQvdXRpbHMvbGlzdHMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L2FkbWluL2NsaWVudC91dGlscy9xdWVyeVBhcmFtcy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvYWRtaW4vY2xpZW50L3V0aWxzL3N0cmluZy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvZmllbGRzL3V0aWxzL2V2YWxEZXBlbmRzT24uanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9AYmFiZWwvcG9seWZpbGwvbGliL2luZGV4LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvQGJhYmVsL3BvbHlmaWxsL2xpYi9ub0NvbmZsaWN0LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9lczYvaW5kZXguanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL2FycmF5L2ZsYXQtbWFwLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9hcnJheS9pbmNsdWRlcy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vb2JqZWN0L2VudHJpZXMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9vYmplY3QvdmFsdWVzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9wcm9taXNlL2ZpbmFsbHkuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL3N0cmluZy9wYWQtZW5kLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zdHJpbmcvcGFkLXN0YXJ0LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zdHJpbmcvdHJpbS1lbmQuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL2ZuL3N0cmluZy90cmltLXN0YXJ0LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9zeW1ib2wvYXN5bmMtaXRlcmF0b3IuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vZ2xvYmFsLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2EtZnVuY3Rpb24uanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYW4tb2JqZWN0LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvcmUuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY3R4LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZXhwb3J0LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2ZhaWxzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2dsb2JhbC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19oYXMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGlkZS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1vYmplY3QuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3Lmdsb2JhbC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1udW1iZXItdmFsdWUuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FkZC10by11bnNjb3BhYmxlcy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWR2YW5jZS1zdHJpbmctaW5kZXguanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLWluc3RhbmNlLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1jb3B5LXdpdGhpbi5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktZmlsbC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktaW5jbHVkZXMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LW1ldGhvZHMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXJlZHVjZS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2JpbmQuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NsYXNzb2YuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvZi5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24td2Vhay5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kYXRlLXRvLWlzby1zdHJpbmcuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8tcHJpbWl0aXZlLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZWZpbmVkLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWtleXMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2V4cG9ydC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMtaXMtcmVnZXhwLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19maXgtcmUtd2tzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGFncy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhdHRlbi1pbnRvLWFycmF5LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mb3Itb2YuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Z1bmN0aW9uLXRvLXN0cmluZy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faHRtbC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW5oZXJpdC1pZi1yZXF1aXJlZC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW52b2tlLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pb2JqZWN0LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS1pdGVyLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtaW50ZWdlci5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtcmVnZXhwLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWNhbGwuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY3JlYXRlLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRlZmluZS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZXRlY3QuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItc3RlcC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19saWJyYXJ5LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWV4cG0xLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWZyb3VuZC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1sb2cxcC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1zaWduLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tZXRhLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19taWNyb3Rhc2suanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX25ldy1wcm9taXNlLWNhcGFiaWxpdHkuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1hc3NpZ24uanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1jcmVhdGUuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcHMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BkLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wcy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdwby5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtcGllLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qtc2FwLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtdG8tYXJyYXkuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX293bi1rZXlzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1mbG9hdC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtaW50LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wZXJmb3JtLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9taXNlLXJlc29sdmUuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLWFsbC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZ2V4cC1leGVjLWFic3RyYWN0LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWdleHAtZXhlYy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2FtZS12YWx1ZS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXByb3RvLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtc3BlY2llcy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC1rZXkuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaWN0LW1ldGhvZC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWF0LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctY29udGV4dC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWh0bWwuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1wYWQuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1yZXBlYXQuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy10cmltLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctd3MuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Rhc2suanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWFic29sdXRlLWluZGV4LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tbGVuZ3RoLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1vYmplY3QuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLWFycmF5LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1idWZmZXIuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191aWQuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VzZXItYWdlbnQuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3ZhbGlkYXRlLWNvbGxlY3Rpb24uanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1leHQuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsbC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLWluZGV4LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZnJvbS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuam9pbi5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZi5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubWFwLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5vZi5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb21lLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb3J0LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLm5vdy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24uanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLXN0cmluZy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXAuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYWNvc2guanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXNpbmguanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXRhbmguanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2JydC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jbHozMi5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jb3NoLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmZyb3VuZC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5oeXBvdC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5pbXVsLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzEwLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzIuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguc2lnbi5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaW5oLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRhbmguanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgudHJ1bmMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5jb25zdHJ1Y3Rvci5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24uanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIubWF4LXNhZmUtaW50ZWdlci5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXIuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWludC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIudG8tcHJlY2lzaW9uLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHkuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1mcm96ZW4uanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmtleXMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtZmxvYXQuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWludC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucHJvbWlzZS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5hcHBseS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1wcm90b3R5cGUtb2YuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lmhhcy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuZXhlYy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2guanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5yZXBsYWNlLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnNldC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvci5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJpZy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGguanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5maXhlZC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRjb2xvci5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5saW5rLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcucmF3LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcucmVwZWF0LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc21hbGwuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN0cmlrZS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1Yi5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1cC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0uanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN5bWJvbC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5kYXRhLXZpZXcuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0MzItYXJyYXkuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXkuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDE2LWFycmF5LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQzMi1hcnJheS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDE2LWFycmF5LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50MzItYXJyYXkuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWFycmF5LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1jbGFtcGVkLWFycmF5LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi53ZWFrLW1hcC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1zZXQuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmZsYXQtbWFwLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5wcm9taXNlLmZpbmFsbHkuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmltbWVkaWF0ZS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudGltZXJzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvY29yZS1qcy93ZWIvaW5kZXguanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9sb2Rhc2gvX0RhdGFWaWV3LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvbG9kYXNoL19IYXNoLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvbG9kYXNoL19MaXN0Q2FjaGUuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9sb2Rhc2gvX01hcC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2xvZGFzaC9fTWFwQ2FjaGUuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9sb2Rhc2gvX1Byb21pc2UuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9sb2Rhc2gvX1NldC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2xvZGFzaC9fU2V0Q2FjaGUuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9sb2Rhc2gvX1N0YWNrLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvbG9kYXNoL19TeW1ib2wuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9sb2Rhc2gvX1VpbnQ4QXJyYXkuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9sb2Rhc2gvX1dlYWtNYXAuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5RmlsdGVyLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheUxpa2VLZXlzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheVB1c2guanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5U29tZS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXNzb2NJbmRleE9mLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0QWxsS2V5cy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldFRhZy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzQXJndW1lbnRzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNFcXVhbC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzRXF1YWxEZWVwLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNOYXRpdmUuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc1R5cGVkQXJyYXkuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VLZXlzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVGltZXMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VVbmFyeS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2FjaGVIYXMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvcmVKc0RhdGEuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9sb2Rhc2gvX2VxdWFsQXJyYXlzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvbG9kYXNoL19lcXVhbEJ5VGFnLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvbG9kYXNoL19lcXVhbE9iamVjdHMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9sb2Rhc2gvX2ZyZWVHbG9iYWwuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldEFsbEtleXMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldE1hcERhdGEuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldE5hdGl2ZS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0UHJvdG90eXBlLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRSYXdUYWcuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFN5bWJvbHMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFRhZy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0VmFsdWUuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hDbGVhci5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaERlbGV0ZS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaEdldC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaEhhcy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaFNldC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNJbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNLZXlhYmxlLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvbG9kYXNoL19pc01hc2tlZC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNQcm90b3R5cGUuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUNsZWFyLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVEZWxldGUuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUdldC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2xvZGFzaC9fbGlzdENhY2hlSGFzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVTZXQuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlQ2xlYXIuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlRGVsZXRlLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZUdldC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVIYXMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlU2V0LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBUb0FycmF5LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvbG9kYXNoL19uYXRpdmVDcmVhdGUuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9sb2Rhc2gvX25hdGl2ZUtleXMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9sb2Rhc2gvX25vZGVVdGlsLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvbG9kYXNoL19vYmplY3RUb1N0cmluZy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2xvZGFzaC9fb3ZlckFyZy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2xvZGFzaC9fcm9vdC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2V0Q2FjaGVBZGQuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NldENhY2hlSGFzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvbG9kYXNoL19zZXRUb0FycmF5LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja0NsZWFyLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja0RlbGV0ZS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tHZXQuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrSGFzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja1NldC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2xvZGFzaC9fdG9Tb3VyY2UuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9sb2Rhc2gvZXEuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcmd1bWVudHMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcnJheS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FycmF5TGlrZS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0J1ZmZlci5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0VxdWFsLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvbG9kYXNoL2lzRnVuY3Rpb24uanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNMZW5ndGguanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNPYmplY3QuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNPYmplY3RMaWtlLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvbG9kYXNoL2lzUGxhaW5PYmplY3QuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNUeXBlZEFycmF5LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvbG9kYXNoL2tleXMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9sb2Rhc2gvc3R1YkFycmF5LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvbG9kYXNoL3N0dWJGYWxzZS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9yZWR1eC1zYWdhL2xpYi9lZmZlY3RzLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvcmVkdXgtc2FnYS9saWIvaW50ZXJuYWwvYnVmZmVycy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL3JlZHV4LXNhZ2EvbGliL2ludGVybmFsL2NoYW5uZWwuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9yZWR1eC1zYWdhL2xpYi9pbnRlcm5hbC9pby5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL3JlZHV4LXNhZ2EvbGliL2ludGVybmFsL3NhZ2FIZWxwZXJzL2ZzbUl0ZXJhdG9yLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvcmVkdXgtc2FnYS9saWIvaW50ZXJuYWwvc2FnYUhlbHBlcnMvaW5kZXguanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9yZWR1eC1zYWdhL2xpYi9pbnRlcm5hbC9zYWdhSGVscGVycy90YWtlRXZlcnkuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9yZWR1eC1zYWdhL2xpYi9pbnRlcm5hbC9zYWdhSGVscGVycy90YWtlTGF0ZXN0LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMva2V5c3RvbmUtNC9ub2RlX21vZHVsZXMvcmVkdXgtc2FnYS9saWIvaW50ZXJuYWwvc2FnYUhlbHBlcnMvdGhyb3R0bGUuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9yZWR1eC1zYWdhL2xpYi9pbnRlcm5hbC9zY2hlZHVsZXIuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9rZXlzdG9uZS00L25vZGVfbW9kdWxlcy9yZWR1eC1zYWdhL2xpYi9pbnRlcm5hbC91dGlscy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2tleXN0b25lLTQvbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIkFwcC9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFB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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzSUE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7O0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7O0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7O0FDRkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNyRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6QkE7QUFDQTs7Ozs7Ozs7QUNEQTtBQUNBO0FBQ0E7Ozs7QUNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7O0FDREE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ3pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBOztBQ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUJBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hlQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7O0FDREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2QkE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdElBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUN6RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbklBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQzFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDbk5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcFNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNuRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDeFNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDaHRCQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFNQTs7OztBQXhCQTs7OztBQUtBO0FBZUE7QUFDQSxJQUFNLE9BQU8sR0FBRyw0Q0FBcUIsMkJBQXJCLEVBQXFDLGlCQUFyQyxDQUFoQixDLENBRUE7O0FBRUEsUUFBUSxDQUFDLElBQVQsR0FBZ0Isa0JBQVcsUUFBUSxDQUFDLFFBQXBCLENBQWhCOztBQUVBLHFCQUFTLE1BQVQsQ0FDQyxnQ0FBQyxvQkFBRDtBQUFVLEVBQUEsS0FBSyxFQUFFO0FBQWpCLEdBQ0MsZ0NBQUMsbUJBQUQ7QUFBUSxFQUFBLE9BQU8sRUFBRTtBQUFqQixHQUNDLGdDQUFDLGtCQUFEO0FBQU8sRUFBQSxJQUFJLEVBQUUsUUFBUSxDQUFDLFNBQXRCO0FBQWlDLEVBQUEsU0FBUyxFQUFFO0FBQTVDLEdBQ0MsZ0NBQUMsdUJBQUQ7QUFBWSxFQUFBLFNBQVMsRUFBRTtBQUF2QixFQURELEVBRUMsZ0NBQUMsa0JBQUQ7QUFBTyxFQUFBLElBQUksRUFBQyxTQUFaO0FBQXNCLEVBQUEsU0FBUyxFQUFFO0FBQWpDLEVBRkQsRUFHQyxnQ0FBQyxrQkFBRDtBQUFPLEVBQUEsSUFBSSxFQUFDLGlCQUFaO0FBQThCLEVBQUEsU0FBUyxFQUFFO0FBQXpDLEVBSEQsQ0FERCxDQURELENBREQsRUFVQyxRQUFRLENBQUMsY0FBVCxDQUF3QixZQUF4QixDQVZEIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiLyoqXG4gKiBUaGUgQXBwIGNvbXBvbmVudCBpcyB0aGUgY29tcG9uZW50IHRoYXQgaXMgcmVuZGVyZWQgYXJvdW5kIGFsbCB2aWV3cywgYW5kXG4gKiBjb250YWlucyBjb21tb24gdGhpbmdzIGxpa2UgbmF2aWdhdGlvbiwgZm9vdGVyLCBldGMuXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENvbnRhaW5lciB9IGZyb20gJy4vZWxlbWVudGFsJztcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcblxuaW1wb3J0IE1vYmlsZU5hdmlnYXRpb24gZnJvbSAnLi9jb21wb25lbnRzL05hdmlnYXRpb24vTW9iaWxlJztcbmltcG9ydCBQcmltYXJ5TmF2aWdhdGlvbiBmcm9tICcuL2NvbXBvbmVudHMvTmF2aWdhdGlvbi9QcmltYXJ5JztcbmltcG9ydCBTZWNvbmRhcnlOYXZpZ2F0aW9uIGZyb20gJy4vY29tcG9uZW50cy9OYXZpZ2F0aW9uL1NlY29uZGFyeSc7XG5pbXBvcnQgRm9vdGVyIGZyb20gJy4vY29tcG9uZW50cy9Gb290ZXInO1xuXG5jb25zdCBjbGFzc2VzID0ge1xuXHR3cmFwcGVyOiB7XG5cdFx0ZGlzcGxheTogJ2ZsZXgnLFxuXHRcdGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuXHRcdG1pbkhlaWdodDogJzEwMHZoJyxcblx0fSxcblx0Ym9keToge1xuXHRcdGZsZXhHcm93OiAxLFxuXHR9LFxufTtcblxuY29uc3QgQXBwID0gKHByb3BzKSA9PiB7XG5cdGNvbnN0IGxpc3RzQnlQYXRoID0gcmVxdWlyZSgnLi4vdXRpbHMvbGlzdHMnKS5saXN0c0J5UGF0aDtcblx0bGV0IGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW47XG5cdC8vIElmIHdlJ3JlIG9uIGVpdGhlciBhIGxpc3Qgb3IgYW4gaXRlbSB2aWV3XG5cdGxldCBjdXJyZW50TGlzdCwgY3VycmVudFNlY3Rpb247XG5cdGlmIChwcm9wcy5wYXJhbXMubGlzdElkKSB7XG5cdFx0Y3VycmVudExpc3QgPSBsaXN0c0J5UGF0aFtwcm9wcy5wYXJhbXMubGlzdElkXTtcblx0XHQvLyBJZiB3ZSdyZSBvbiBhIGxpc3QgcGF0aCB0aGF0IGRvZXNuJ3QgZXhpc3QgKGUuZy4gL2tleXN0b25lL2dpYmJlcmlzaGFzZnczNGFmc2QpIHRoaXMgd2lsbFxuXHRcdC8vIGJlIHVuZGVmaW5lZFxuXHRcdGlmICghY3VycmVudExpc3QpIHtcblx0XHRcdGNoaWxkcmVuID0gKFxuXHRcdFx0XHQ8Q29udGFpbmVyPlxuXHRcdFx0XHRcdDxwPkxpc3Qgbm90IGZvdW5kITwvcD5cblx0XHRcdFx0XHQ8TGluayB0bz17YCR7S2V5c3RvbmUuYWRtaW5QYXRofWB9PlxuXHRcdFx0XHRcdFx0R28gYmFjayBob21lXG5cdFx0XHRcdFx0PC9MaW5rPlxuXHRcdFx0XHQ8L0NvbnRhaW5lcj5cblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIEdldCB0aGUgY3VycmVudCBzZWN0aW9uIHdlJ3JlIGluIGZvciB0aGUgbmF2aWdhdGlvblxuXHRcdFx0Y3VycmVudFNlY3Rpb24gPSBLZXlzdG9uZS5uYXYuYnkubGlzdFtjdXJyZW50TGlzdC5rZXldO1xuXHRcdH1cblx0fVxuXHQvLyBEZWZhdWx0IGN1cnJlbnQgc2VjdGlvbiBrZXkgdG8gZGFzaGJvYXJkXG5cdGNvbnN0IGN1cnJlbnRTZWN0aW9uS2V5ID0gKGN1cnJlbnRTZWN0aW9uICYmIGN1cnJlbnRTZWN0aW9uLmtleSkgfHwgJ2Rhc2hib2FyZCc7XG5cdHJldHVybiAoXG5cdFx0PGRpdiBjbGFzc05hbWU9e2NzcyhjbGFzc2VzLndyYXBwZXIpfT5cblx0XHRcdDxoZWFkZXI+XG5cdFx0XHRcdDxNb2JpbGVOYXZpZ2F0aW9uXG5cdFx0XHRcdFx0YnJhbmQ9e0tleXN0b25lLmJyYW5kfVxuXHRcdFx0XHRcdGN1cnJlbnRMaXN0S2V5PXtwcm9wcy5wYXJhbXMubGlzdElkfVxuXHRcdFx0XHRcdGN1cnJlbnRTZWN0aW9uS2V5PXtjdXJyZW50U2VjdGlvbktleX1cblx0XHRcdFx0XHRzZWN0aW9ucz17S2V5c3RvbmUubmF2LnNlY3Rpb25zfVxuXHRcdFx0XHRcdHNpZ25vdXRVcmw9e0tleXN0b25lLnNpZ25vdXRVcmx9XG5cdFx0XHRcdC8+XG5cdFx0XHRcdDxQcmltYXJ5TmF2aWdhdGlvblxuXHRcdFx0XHRcdGN1cnJlbnRTZWN0aW9uS2V5PXtjdXJyZW50U2VjdGlvbktleX1cblx0XHRcdFx0XHRicmFuZD17S2V5c3RvbmUuYnJhbmR9XG5cdFx0XHRcdFx0c2VjdGlvbnM9e0tleXN0b25lLm5hdi5zZWN0aW9uc31cblx0XHRcdFx0XHRzaWdub3V0VXJsPXtLZXlzdG9uZS5zaWdub3V0VXJsfVxuXHRcdFx0XHQvPlxuXHRcdFx0XHR7LyogSWYgYSBzZWN0aW9uIGlzIG9wZW4gY3VycmVudGx5LCBzaG93IHRoZSBzZWNvbmRhcnkgbmF2ICovfVxuXHRcdFx0XHR7KGN1cnJlbnRTZWN0aW9uKSA/IChcblx0XHRcdFx0XHQ8U2Vjb25kYXJ5TmF2aWdhdGlvblxuXHRcdFx0XHRcdFx0Y3VycmVudExpc3RLZXk9e3Byb3BzLnBhcmFtcy5saXN0SWR9XG5cdFx0XHRcdFx0XHRsaXN0cz17Y3VycmVudFNlY3Rpb24ubGlzdHN9XG5cdFx0XHRcdFx0XHRpdGVtSWQ9e3Byb3BzLnBhcmFtcy5pdGVtSWR9XG5cdFx0XHRcdFx0Lz5cblx0XHRcdFx0KSA6IG51bGx9XG5cdFx0XHQ8L2hlYWRlcj5cblx0XHRcdDxtYWluIGNsYXNzTmFtZT17Y3NzKGNsYXNzZXMuYm9keSl9PlxuXHRcdFx0XHR7Y2hpbGRyZW59XG5cdFx0XHQ8L21haW4+XG5cdFx0XHQ8Rm9vdGVyXG5cdFx0XHRcdGFwcHZlcnNpb249e0tleXN0b25lLmFwcHZlcnNpb259XG5cdFx0XHRcdGJhY2tVcmw9e0tleXN0b25lLmJhY2tVcmx9XG5cdFx0XHRcdGJyYW5kPXtLZXlzdG9uZS5icmFuZH1cblx0XHRcdFx0VXNlcj17S2V5c3RvbmUuVXNlcn1cblx0XHRcdFx0dXNlcj17S2V5c3RvbmUudXNlcn1cblx0XHRcdFx0dmVyc2lvbj17S2V5c3RvbmUudmVyc2lvbn1cblx0XHRcdC8+XG5cdFx0PC9kaXY+XG5cdCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcDtcbiIsIi8qKlxuICogVGhlIGdsb2JhbCBGb290ZXIsIGRpc3BsYXlzIGEgbGluayB0byB0aGUgd2Vic2l0ZSBhbmQgdGhlIGN1cnJlbnQgS2V5c3RvbmVcbiAqIHZlcnNpb24gaW4gdXNlXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XG5pbXBvcnQgeyBDb250YWluZXIgfSBmcm9tICcuLi8uLi9lbGVtZW50YWwnO1xuaW1wb3J0IHRoZW1lIGZyb20gJy4uLy4uLy4uL3RoZW1lJztcblxudmFyIEZvb3RlciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblx0ZGlzcGxheU5hbWU6ICdGb290ZXInLFxuXHRwcm9wVHlwZXM6IHtcblx0XHRhcHB2ZXJzaW9uOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuXHRcdGJhY2tVcmw6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG5cdFx0YnJhbmQ6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG5cdFx0dXNlcjogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcblx0XHRVc2VyOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlYWN0L3NvcnQtcHJvcC10eXBlc1xuXHRcdHZlcnNpb246IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG5cdH0sXG5cdC8vIFJlbmRlciB0aGUgdXNlclxuXHRyZW5kZXJVc2VyICgpIHtcblx0XHRjb25zdCB7IFVzZXIsIHVzZXIgfSA9IHRoaXMucHJvcHM7XG5cdFx0aWYgKCF1c2VyKSByZXR1cm4gbnVsbDtcblxuXHRcdHJldHVybiAoXG5cdFx0XHQ8c3Bhbj5cblx0XHRcdFx0PHNwYW4+IFNpZ25lZCBpbiBhcyA8L3NwYW4+XG5cdFx0XHRcdDxhIGhyZWY9e2Ake0tleXN0b25lLmFkbWluUGF0aH0vJHtVc2VyLnBhdGh9LyR7dXNlci5pZH1gfSB0YWJJbmRleD1cIi0xXCIgY2xhc3NOYW1lPXtjc3MoY2xhc3Nlcy5saW5rKX0+XG5cdFx0XHRcdFx0e3VzZXIubmFtZX1cblx0XHRcdFx0PC9hPlxuXHRcdFx0XHQ8c3Bhbj4uPC9zcGFuPlxuXHRcdFx0PC9zcGFuPlxuXHRcdCk7XG5cdH0sXG5cdHJlbmRlciAoKSB7XG5cdFx0Y29uc3QgeyBiYWNrVXJsLCBicmFuZCwgYXBwdmVyc2lvbiwgdmVyc2lvbiB9ID0gdGhpcy5wcm9wcztcblxuXHRcdHJldHVybiAoXG5cdFx0XHQ8Zm9vdGVyIGNsYXNzTmFtZT17Y3NzKGNsYXNzZXMuZm9vdGVyKX0gZGF0YS1rZXlzdG9uZS1mb290ZXI+XG5cdFx0XHRcdDxDb250YWluZXI+XG5cdFx0XHRcdFx0PGFcblx0XHRcdFx0XHRcdGhyZWY9e2JhY2tVcmx9XG5cdFx0XHRcdFx0XHR0YWJJbmRleD1cIi0xXCJcblx0XHRcdFx0XHRcdGNsYXNzTmFtZT17Y3NzKGNsYXNzZXMubGluayl9XG5cdFx0XHRcdFx0PlxuXHRcdFx0XHRcdFx0e2JyYW5kICsgKGFwcHZlcnNpb24gPyAoJyAnICsgYXBwdmVyc2lvbikgOiAnJyl9XG5cdFx0XHRcdFx0PC9hPlxuXHRcdFx0XHRcdDxzcGFuPiBwb3dlcmVkIGJ5IDwvc3Bhbj5cblx0XHRcdFx0XHQ8YVxuXHRcdFx0XHRcdFx0aHJlZj1cImh0dHA6Ly9rZXlzdG9uZWpzLmNvbVwiXG5cdFx0XHRcdFx0XHR0YXJnZXQ9XCJfYmxhbmtcIlxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lPXtjc3MoY2xhc3Nlcy5saW5rKX1cblx0XHRcdFx0XHRcdHRhYkluZGV4PVwiLTFcIlxuXHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdEtleXN0b25lSlNcblx0XHRcdFx0XHQ8L2E+XG5cdFx0XHRcdFx0PHNwYW4+IHZlcnNpb24ge3ZlcnNpb259Ljwvc3Bhbj5cblx0XHRcdFx0XHR7dGhpcy5yZW5kZXJVc2VyKCl9XG5cdFx0XHRcdDwvQ29udGFpbmVyPlxuXHRcdFx0PC9mb290ZXI+XG5cdFx0KTtcblx0fSxcbn0pO1xuXG4vKiBlc2xpbnQgcXVvdGUtcHJvcHM6IFtcImVycm9yXCIsIFwiYXMtbmVlZGVkXCJdICovXG5jb25zdCBsaW5rSG92ZXJBbmRGb2N1cyA9IHtcblx0Y29sb3I6IHRoZW1lLmNvbG9yLmdyYXk2MCxcblx0b3V0bGluZTogJ25vbmUnLFxufTtcbmNvbnN0IGNsYXNzZXMgPSB7XG5cdGZvb3Rlcjoge1xuXHRcdGJveFNoYWRvdzogJzAgLTFweCAwIHJnYmEoMCwgMCwgMCwgMC4xKScsXG5cdFx0Y29sb3I6IHRoZW1lLmNvbG9yLmdyYXk0MCxcblx0XHRmb250U2l6ZTogdGhlbWUuZm9udC5zaXplLnNtYWxsLFxuXHRcdHBhZGRpbmdCb3R0b206IDMwLFxuXHRcdHBhZGRpbmdUb3A6IDQwLFxuXHRcdHRleHRBbGlnbjogJ2NlbnRlcicsXG5cdH0sXG5cdGxpbms6IHtcblx0XHRjb2xvcjogdGhlbWUuY29sb3IuZ3JheTYwLFxuXG5cdFx0Jzpob3Zlcic6IGxpbmtIb3ZlckFuZEZvY3VzLFxuXHRcdCc6Zm9jdXMnOiBsaW5rSG92ZXJBbmRGb2N1cyxcblx0fSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRm9vdGVyO1xuIiwiLyoqXG4gKiBBIGxpc3QgaXRlbSBvZiB0aGUgbW9iaWxlIG5hdmlnYXRpb25cbiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5cbmNvbnN0IE1vYmlsZUxpc3RJdGVtID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuXHRkaXNwbGF5TmFtZTogJ01vYmlsZUxpc3RJdGVtJyxcblx0cHJvcFR5cGVzOiB7XG5cdFx0Y2hpbGRyZW46IFJlYWN0LlByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG5cdFx0Y2xhc3NOYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuXHRcdGhyZWY6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcblx0XHRvbkNsaWNrOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcblx0fSxcblx0cmVuZGVyICgpIHtcblx0XHRyZXR1cm4gKFxuXHRcdFx0PExpbmtcblx0XHRcdFx0Y2xhc3NOYW1lPXt0aGlzLnByb3BzLmNsYXNzTmFtZX1cblx0XHRcdFx0dG89e3RoaXMucHJvcHMuaHJlZn1cblx0XHRcdFx0b25DbGljaz17dGhpcy5wcm9wcy5vbkNsaWNrfVxuXHRcdFx0XHR0YWJJbmRleD1cIi0xXCJcblx0XHRcdD5cblx0XHRcdFx0e3RoaXMucHJvcHMuY2hpbGRyZW59XG5cdFx0XHQ8L0xpbms+XG5cdFx0KTtcblx0fSxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1vYmlsZUxpc3RJdGVtO1xuIiwiLyoqXG4gKiBBIG1vYmlsZSBzZWN0aW9uXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBNb2JpbGVMaXN0SXRlbSBmcm9tICcuL0xpc3RJdGVtJztcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuXG5jb25zdCBNb2JpbGVTZWN0aW9uSXRlbSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblx0ZGlzcGxheU5hbWU6ICdNb2JpbGVTZWN0aW9uSXRlbScsXG5cdHByb3BUeXBlczoge1xuXHRcdGNoaWxkcmVuOiBSZWFjdC5Qcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuXHRcdGNsYXNzTmFtZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcblx0XHRjdXJyZW50TGlzdEtleTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcblx0XHRocmVmOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG5cdFx0bGlzdHM6IFJlYWN0LlByb3BUeXBlcy5hcnJheSxcblx0fSxcblx0Ly8gUmVuZGVyIHRoZSBsaXN0c1xuXHRyZW5kZXJMaXN0cyAoKSB7XG5cdFx0aWYgKCF0aGlzLnByb3BzLmxpc3RzIHx8IHRoaXMucHJvcHMubGlzdHMubGVuZ3RoIDw9IDEpIHJldHVybiBudWxsO1xuXG5cdFx0Y29uc3QgbmF2TGlzdHMgPSB0aGlzLnByb3BzLmxpc3RzLm1hcCgoaXRlbSkgPT4ge1xuXHRcdFx0Ly8gR2V0IHRoZSBsaW5rIGFuZCB0aGUgY2xhc3NuYW1lXG5cdFx0XHRjb25zdCBocmVmID0gaXRlbS5leHRlcm5hbCA/IGl0ZW0ucGF0aCA6IGAke0tleXN0b25lLmFkbWluUGF0aH0vJHtpdGVtLnBhdGh9YDtcblx0XHRcdGNvbnN0IGNsYXNzTmFtZSA9ICh0aGlzLnByb3BzLmN1cnJlbnRMaXN0S2V5ICYmIHRoaXMucHJvcHMuY3VycmVudExpc3RLZXkgPT09IGl0ZW0ucGF0aCkgPyAnTW9iaWxlTmF2aWdhdGlvbl9fbGlzdC1pdGVtIGlzLWFjdGl2ZScgOiAnTW9iaWxlTmF2aWdhdGlvbl9fbGlzdC1pdGVtJztcblxuXHRcdFx0cmV0dXJuIChcblx0XHRcdFx0PE1vYmlsZUxpc3RJdGVtIGtleT17aXRlbS5wYXRofSBocmVmPXtocmVmfSBjbGFzc05hbWU9e2NsYXNzTmFtZX0gb25DbGljaz17dGhpcy5wcm9wcy5vbkNsaWNrfT5cblx0XHRcdFx0XHR7aXRlbS5sYWJlbH1cblx0XHRcdFx0PC9Nb2JpbGVMaXN0SXRlbT5cblx0XHRcdCk7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gKFxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJNb2JpbGVOYXZpZ2F0aW9uX19saXN0c1wiPlxuXHRcdFx0XHR7bmF2TGlzdHN9XG5cdFx0XHQ8L2Rpdj5cblx0XHQpO1xuXHR9LFxuXHRyZW5kZXIgKCkge1xuXHRcdHJldHVybiAoXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT17dGhpcy5wcm9wcy5jbGFzc05hbWV9PlxuXHRcdFx0XHQ8TGlua1xuXHRcdFx0XHRcdGNsYXNzTmFtZT1cIk1vYmlsZU5hdmlnYXRpb25fX3NlY3Rpb24taXRlbVwiXG5cdFx0XHRcdFx0dG89e3RoaXMucHJvcHMuaHJlZn1cblx0XHRcdFx0XHR0YWJJbmRleD1cIi0xXCJcblx0XHRcdFx0XHRvbkNsaWNrPXt0aGlzLnByb3BzLm9uQ2xpY2t9XG5cdFx0XHRcdD5cblx0XHRcdFx0XHR7dGhpcy5wcm9wcy5jaGlsZHJlbn1cblx0XHRcdFx0PC9MaW5rPlxuXHRcdFx0XHR7dGhpcy5yZW5kZXJMaXN0cygpfVxuXHRcdFx0PC9kaXY+XG5cdFx0KTtcblx0fSxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1vYmlsZVNlY3Rpb25JdGVtO1xuIiwiLyoqXG4gKiBUaGUgbW9iaWxlIG5hdmlnYXRpb24sIGRpc3BsYXllZCBvbiBzY3JlZW5zIDwgNzY4cHhcbiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRyYW5zaXRpb24gZnJvbSAncmVhY3QtYWRkb25zLWNzcy10cmFuc2l0aW9uLWdyb3VwJztcblxuaW1wb3J0IE1vYmlsZVNlY3Rpb25JdGVtIGZyb20gJy4vU2VjdGlvbkl0ZW0nO1xuXG5jb25zdCBFU0NBUEVfS0VZX0NPREUgPSAyNztcblxuY29uc3QgTW9iaWxlTmF2aWdhdGlvbiA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblx0ZGlzcGxheU5hbWU6ICdNb2JpbGVOYXZpZ2F0aW9uJyxcblx0cHJvcFR5cGVzOiB7XG5cdFx0YnJhbmQ6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG5cdFx0Y3VycmVudExpc3RLZXk6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG5cdFx0Y3VycmVudFNlY3Rpb25LZXk6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG5cdFx0c2VjdGlvbnM6IFJlYWN0LlByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxuXHRcdHNpZ25vdXRVcmw6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG5cdH0sXG5cdGdldEluaXRpYWxTdGF0ZSAoKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGJhcklzVmlzaWJsZTogZmFsc2UsXG5cdFx0fTtcblx0fSxcblx0Ly8gSGFuZGxlIHNob3dpbmcgYW5kIGhpZGluZyB0aGUgbWVudSBiYXNlZCBvbiB0aGUgd2luZG93IHNpemUgd2hlblxuXHQvLyByZXNpemluZ1xuXHRjb21wb25lbnREaWRNb3VudCAoKSB7XG5cdFx0dGhpcy5oYW5kbGVSZXNpemUoKTtcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5oYW5kbGVSZXNpemUpO1xuXHR9LFxuXHRjb21wb25lbnRXaWxsVW5tb3VudCAoKSB7XG5cdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlUmVzaXplKTtcblx0fSxcblx0aGFuZGxlUmVzaXplICgpIHtcblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdGJhcklzVmlzaWJsZTogd2luZG93LmlubmVyV2lkdGggPCA3NjgsXG5cdFx0fSk7XG5cdH0sXG5cdC8vIFRvZ2dsZSB0aGUgbWVudVxuXHR0b2dnbGVNZW51ICgpIHtcblx0XHR0aGlzW3RoaXMuc3RhdGUubWVudUlzVmlzaWJsZSA/ICdoaWRlTWVudScgOiAnc2hvd01lbnUnXSgpO1xuXHR9LFxuXHQvLyBTaG93IHRoZSBtZW51XG5cdHNob3dNZW51ICgpIHtcblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdG1lbnVJc1Zpc2libGU6IHRydWUsXG5cdFx0fSk7XG5cblx0XHQvLyBNYWtlIHRoZSBib2R5IHVuc2Nyb2xsYWJsZSwgc28geW91IGNhbiBvbmx5IHNjcm9sbCBpbiB0aGUgbWVudVxuXHRcdGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcblx0XHRkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5oYW5kbGVFc2NhcGVLZXksIGZhbHNlKTtcblx0fSxcblx0Ly8gSGlkZSB0aGUgbWVudVxuXHRoaWRlTWVudSAoKSB7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRtZW51SXNWaXNpYmxlOiBmYWxzZSxcblx0XHR9KTtcblxuXHRcdC8vIE1ha2UgdGhlIGJvZHkgc2Nyb2xsYWJsZSBhZ2FpblxuXHRcdGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSBudWxsO1xuXHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLmhhbmRsZUVzY2FwZUtleSwgZmFsc2UpO1xuXHR9LFxuXHQvLyBJZiB0aGUgZXNjYXBlIGtleSB3YXMgcHJlc3NlZCwgaGlkZSB0aGUgbWVudVxuXHRoYW5kbGVFc2NhcGVLZXkgKGV2ZW50KSB7XG5cdFx0aWYgKGV2ZW50LndoaWNoID09PSBFU0NBUEVfS0VZX0NPREUpIHtcblx0XHRcdHRoaXMuaGlkZU1lbnUoKTtcblx0XHR9XG5cdH0sXG5cdHJlbmRlck5hdmlnYXRpb24gKCkge1xuXHRcdGlmICghdGhpcy5wcm9wcy5zZWN0aW9ucyB8fCAhdGhpcy5wcm9wcy5zZWN0aW9ucy5sZW5ndGgpIHJldHVybiBudWxsO1xuXG5cdFx0cmV0dXJuIHRoaXMucHJvcHMuc2VjdGlvbnMubWFwKChzZWN0aW9uKSA9PiB7XG5cdFx0XHQvLyBHZXQgdGhlIGxpbmsgYW5kIHRoZSBjbGFzc25hbWVcblx0XHRcdGNvbnN0IGhyZWYgPSBzZWN0aW9uLmxpc3RzWzBdLmV4dGVybmFsID8gc2VjdGlvbi5saXN0c1swXS5wYXRoIDogYCR7S2V5c3RvbmUuYWRtaW5QYXRofS8ke3NlY3Rpb24ubGlzdHNbMF0ucGF0aH1gO1xuXHRcdFx0Y29uc3QgY2xhc3NOYW1lID0gKHRoaXMucHJvcHMuY3VycmVudFNlY3Rpb25LZXkgJiYgdGhpcy5wcm9wcy5jdXJyZW50U2VjdGlvbktleSA9PT0gc2VjdGlvbi5rZXkpID8gJ01vYmlsZU5hdmlnYXRpb25fX3NlY3Rpb24gaXMtYWN0aXZlJyA6ICdNb2JpbGVOYXZpZ2F0aW9uX19zZWN0aW9uJztcblxuXHRcdFx0Ly8gUmVuZGVyIGEgU2VjdGlvbkl0ZW1cblx0XHRcdHJldHVybiAoXG5cdFx0XHRcdDxNb2JpbGVTZWN0aW9uSXRlbVxuXHRcdFx0XHRcdGtleT17c2VjdGlvbi5rZXl9XG5cdFx0XHRcdFx0Y2xhc3NOYW1lPXtjbGFzc05hbWV9XG5cdFx0XHRcdFx0aHJlZj17aHJlZn1cblx0XHRcdFx0XHRsaXN0cz17c2VjdGlvbi5saXN0c31cblx0XHRcdFx0XHRjdXJyZW50TGlzdEtleT17dGhpcy5wcm9wcy5jdXJyZW50TGlzdEtleX1cblx0XHRcdFx0XHRvbkNsaWNrPXt0aGlzLnRvZ2dsZU1lbnV9XG5cdFx0XHRcdD5cblx0XHRcdFx0XHR7c2VjdGlvbi5sYWJlbH1cblx0XHRcdFx0PC9Nb2JpbGVTZWN0aW9uSXRlbT5cblx0XHRcdCk7XG5cdFx0fSk7XG5cdH0sXG5cdC8vIFJlbmRlciBhIGJsb2Nrb3V0XG5cdHJlbmRlckJsb2Nrb3V0ICgpIHtcblx0XHRpZiAoIXRoaXMuc3RhdGUubWVudUlzVmlzaWJsZSkgcmV0dXJuIG51bGw7XG5cblx0XHRyZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJNb2JpbGVOYXZpZ2F0aW9uX19ibG9ja291dFwiIG9uQ2xpY2s9e3RoaXMudG9nZ2xlTWVudX0gLz47XG5cdH0sXG5cdC8vIFJlbmRlciB0aGUgc2lkZWJhciBtZW51XG5cdHJlbmRlck1lbnUgKCkge1xuXHRcdGlmICghdGhpcy5zdGF0ZS5tZW51SXNWaXNpYmxlKSByZXR1cm4gbnVsbDtcblxuXHRcdHJldHVybiAoXG5cdFx0XHQ8bmF2IGNsYXNzTmFtZT1cIk1vYmlsZU5hdmlnYXRpb25fX21lbnVcIj5cblx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJNb2JpbGVOYXZpZ2F0aW9uX19zZWN0aW9uc1wiPlxuXHRcdFx0XHRcdHt0aGlzLnJlbmRlck5hdmlnYXRpb24oKX1cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8L25hdj5cblx0XHQpO1xuXHR9LFxuXHRyZW5kZXIgKCkge1xuXHRcdGlmICghdGhpcy5zdGF0ZS5iYXJJc1Zpc2libGUpIHJldHVybiBudWxsO1xuXG5cdFx0cmV0dXJuIChcblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiTW9iaWxlTmF2aWdhdGlvblwiPlxuXHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cIk1vYmlsZU5hdmlnYXRpb25fX2JhclwiPlxuXHRcdFx0XHRcdDxidXR0b25cblx0XHRcdFx0XHRcdHR5cGU9XCJidXR0b25cIlxuXHRcdFx0XHRcdFx0b25DbGljaz17dGhpcy50b2dnbGVNZW51fVxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lPVwiTW9iaWxlTmF2aWdhdGlvbl9fYmFyX19idXR0b24gTW9iaWxlTmF2aWdhdGlvbl9fYmFyX19idXR0b24tLW1lbnVcIlxuXHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzTmFtZT17J01vYmlsZU5hdmlnYXRpb25fX2Jhcl9faWNvbiBvY3RpY29uIG9jdGljb24tJyArICh0aGlzLnN0YXRlLm1lbnVJc1Zpc2libGUgPyAneCcgOiAndGhyZWUtYmFycycpfSAvPlxuXHRcdFx0XHRcdDwvYnV0dG9uPlxuXHRcdFx0XHRcdDxzcGFuIGNsYXNzTmFtZT1cIk1vYmlsZU5hdmlnYXRpb25fX2Jhcl9fbGFiZWxcIj5cblx0XHRcdFx0XHRcdHt0aGlzLnByb3BzLmJyYW5kfVxuXHRcdFx0XHRcdDwvc3Bhbj5cblx0XHRcdFx0XHQ8YVxuXHRcdFx0XHRcdFx0aHJlZj17dGhpcy5wcm9wcy5zaWdub3V0VXJsfVxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lPVwiTW9iaWxlTmF2aWdhdGlvbl9fYmFyX19idXR0b24gTW9iaWxlTmF2aWdhdGlvbl9fYmFyX19idXR0b24tLXNpZ25vdXRcIlxuXHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzTmFtZT1cIk1vYmlsZU5hdmlnYXRpb25fX2Jhcl9faWNvbiBvY3RpY29uIG9jdGljb24tc2lnbi1vdXRcIiAvPlxuXHRcdFx0XHRcdDwvYT5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiTW9iaWxlTmF2aWdhdGlvbl9fYmFyLS1wbGFjZWhvbGRlclwiIC8+XG5cdFx0XHRcdDxUcmFuc2l0aW9uXG5cdFx0XHRcdFx0dHJhbnNpdGlvbk5hbWU9XCJNb2JpbGVOYXZpZ2F0aW9uX19tZW51XCJcblx0XHRcdFx0XHR0cmFuc2l0aW9uRW50ZXJUaW1lb3V0PXsyNjB9XG5cdFx0XHRcdFx0dHJhbnNpdGlvbkxlYXZlVGltZW91dD17MjAwfVxuXHRcdFx0XHQ+XG5cdFx0XHRcdFx0e3RoaXMucmVuZGVyTWVudSgpfVxuXHRcdFx0XHQ8L1RyYW5zaXRpb24+XG5cdFx0XHRcdDxUcmFuc2l0aW9uXG5cdFx0XHRcdFx0dHJhbnNpdGlvbk5hbWU9XCJyZWFjdC10cmFuc2l0aW9uZ3JvdXAtZmFkZVwiXG5cdFx0XHRcdFx0dHJhbnNpdGlvbkVudGVyVGltZW91dD17MH1cblx0XHRcdFx0XHR0cmFuc2l0aW9uTGVhdmVUaW1lb3V0PXswfVxuXHRcdFx0XHQ+XG5cdFx0XHRcdFx0e3RoaXMucmVuZGVyQmxvY2tvdXQoKX1cblx0XHRcdFx0PC9UcmFuc2l0aW9uPlxuXHRcdFx0PC9kaXY+XG5cdFx0KTtcblx0fSxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1vYmlsZU5hdmlnYXRpb247XG4iLCIvKipcbiAqIEEgaXRlbSBpbiB0aGUgcHJpbWFyeSBuYXZpZ2F0aW9uLiBJZiBpdCBoYXMgYSBcInRvXCIgcHJvcCBpdCdsbCByZW5kZXIgYVxuICogcmVhY3Qtcm91dGVyIFwiTGlua1wiLCBpZiBpdCBoYXMgYSBcImhyZWZcIiBwcm9wIGl0J2xsIHJlbmRlciBhIHNpbXBsZSBcImFcIiB0YWdcbiAqL1xuXG5pbXBvcnQgUmVhY3QsIHsgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcblxuY29uc3QgUHJpbWFyeU5hdkl0ZW0gPSAoeyBjaGlsZHJlbiwgY2xhc3NOYW1lLCBocmVmLCBsYWJlbCwgdGl0bGUsIHRvLCBhY3RpdmUgfSkgPT4ge1xuXHRjb25zdCBpdGVtQ2xhc3NOYW1lID0gY2xhc3NuYW1lcygncHJpbWFyeS1uYXZiYXJfX2l0ZW0nLCBjbGFzc05hbWUpO1xuXG5cdGNvbnN0IEJ1dHRvbiA9IHRvID8gKFxuXHRcdDxMaW5rXG5cdFx0XHRjbGFzc05hbWU9XCJwcmltYXJ5LW5hdmJhcl9fbGlua1wiXG5cdFx0XHRrZXk9e3RpdGxlfVxuXHRcdFx0dGFiSW5kZXg9XCItMVwiXG5cdFx0XHR0aXRsZT17dGl0bGV9XG5cdFx0XHR0bz17dG99XG5cdFx0XHQvLyBCbG9jayBjbGlja3Mgb24gYWN0aXZlIGxpbmtcblx0XHRcdG9uQ2xpY2s9eyhldnQpID0+IHsgaWYgKGFjdGl2ZSkgZXZ0LnByZXZlbnREZWZhdWx0KCk7IH19XG5cdFx0PlxuXHRcdFx0e2NoaWxkcmVufVxuXHRcdDwvTGluaz5cblx0KSA6IChcblx0XHQ8YVxuXHRcdFx0Y2xhc3NOYW1lPVwicHJpbWFyeS1uYXZiYXJfX2xpbmtcIlxuXHRcdFx0aHJlZj17aHJlZn1cblx0XHRcdGtleT17dGl0bGV9XG5cdFx0XHR0YWJJbmRleD1cIi0xXCJcblx0XHRcdHRpdGxlPXt0aXRsZX1cblx0XHQ+XG5cdFx0XHR7Y2hpbGRyZW59XG5cdFx0PC9hPlxuXHQpO1xuXG5cdHJldHVybiAoXG5cdFx0PGxpXG5cdFx0XHRjbGFzc05hbWU9e2l0ZW1DbGFzc05hbWV9XG5cdFx0XHRkYXRhLXNlY3Rpb24tbGFiZWw9e2xhYmVsfVxuXHRcdD5cblx0XHRcdHtCdXR0b259XG5cdFx0PC9saT5cblx0KTtcbn07XG5cblByaW1hcnlOYXZJdGVtLmRpc3BsYXlOYW1lID0gJ1ByaW1hcnlOYXZJdGVtJztcblByaW1hcnlOYXZJdGVtLnByb3BUeXBlcyA9IHtcblx0Y2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG5cdGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblx0aHJlZjogUHJvcFR5cGVzLnN0cmluZyxcblx0bGFiZWw6IFByb3BUeXBlcy5zdHJpbmcsXG5cdHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXHR0bzogUHJvcFR5cGVzLnN0cmluZyxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUHJpbWFyeU5hdkl0ZW07XG4iLCIvKipcbiAqIFRoZSBwcmltYXJ5IChpLmUuIHVwcGVybW9zdCkgbmF2aWdhdGlvbiBvbiBkZXNrdG9wLiBSZW5kZXJzIGFsbCBzZWN0aW9ucyBhbmRcbiAqIHRoZSBob21lLSwgd2Vic2l0ZS0gYW5kIHNpZ25vdXQgYnV0dG9ucy5cbiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ29udGFpbmVyIH0gZnJvbSAnLi4vLi4vLi4vZWxlbWVudGFsJztcbmltcG9ydCBQcmltYXJ5TmF2SXRlbSBmcm9tICcuL05hdkl0ZW0nO1xuXG52YXIgUHJpbWFyeU5hdmlnYXRpb24gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cdGRpc3BsYXlOYW1lOiAnUHJpbWFyeU5hdmlnYXRpb24nLFxuXHRwcm9wVHlwZXM6IHtcblx0XHRicmFuZDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcblx0XHRjdXJyZW50U2VjdGlvbktleTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcblx0XHRzZWN0aW9uczogUmVhY3QuUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXG5cdFx0c2lnbm91dFVybDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcblx0fSxcblx0Z2V0SW5pdGlhbFN0YXRlICgpIHtcblx0XHRyZXR1cm4ge307XG5cdH0sXG5cdC8vIEhhbmRsZSByZXNpemluZywgaGlkZSB0aGlzIG5hdmlnYXRpb24gb24gbW9iaWxlIChpLmUuIDwgNzY4cHgpIHNjcmVlbnNcblx0Y29tcG9uZW50RGlkTW91bnQgKCkge1xuXHRcdHRoaXMuaGFuZGxlUmVzaXplKCk7XG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlUmVzaXplKTtcblx0fSxcblx0Y29tcG9uZW50V2lsbFVubW91bnQgKCkge1xuXHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmhhbmRsZVJlc2l6ZSk7XG5cdH0sXG5cdGhhbmRsZVJlc2l6ZSAoKSB7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRuYXZJc1Zpc2libGU6IHdpbmRvdy5pbm5lcldpZHRoID49IDc2OCxcblx0XHR9KTtcblx0fSxcblx0Ly8gUmVuZGVyIHRoZSBzaWduIG91dCBidXR0b25cblx0cmVuZGVyU2lnbm91dCAoKSB7XG5cdFx0aWYgKCF0aGlzLnByb3BzLnNpZ25vdXRVcmwpIHJldHVybiBudWxsO1xuXG5cdFx0cmV0dXJuIChcblx0XHRcdDxQcmltYXJ5TmF2SXRlbVxuXHRcdFx0XHRsYWJlbD1cIm9jdGljb24tc2lnbi1vdXRcIlxuXHRcdFx0XHRocmVmPXt0aGlzLnByb3BzLnNpZ25vdXRVcmx9XG5cdFx0XHRcdHRpdGxlPVwiU2lnbiBPdXRcIlxuXHRcdFx0PlxuXHRcdFx0XHQ8c3BhbiBjbGFzc05hbWU9XCJvY3RpY29uIG9jdGljb24tc2lnbi1vdXRcIiAvPlxuXHRcdFx0PC9QcmltYXJ5TmF2SXRlbT5cblx0XHQpO1xuXHR9LFxuXHQvLyBSZW5kZXIgdGhlIGJhY2sgYnV0dG9uXG5cdHJlbmRlckJhY2tCdXR0b24gKCkge1xuXHRcdGlmICghS2V5c3RvbmUuYmFja1VybCkgcmV0dXJuIG51bGw7XG5cblx0XHRyZXR1cm4gKFxuXHRcdFx0PFByaW1hcnlOYXZJdGVtXG5cdFx0XHRcdGxhYmVsPVwib2N0aWNvbi1nbG9iZVwiXG5cdFx0XHRcdGhyZWY9e0tleXN0b25lLmJhY2tVcmx9XG5cdFx0XHRcdHRpdGxlPXsnRnJvbnQgcGFnZSAtICcgKyB0aGlzLnByb3BzLmJyYW5kfVxuXHRcdFx0PlxuXHRcdFx0XHQ8c3BhbiBjbGFzc05hbWU9XCJvY3RpY29uIG9jdGljb24tZ2xvYmVcIiAvPlxuXHRcdFx0PC9QcmltYXJ5TmF2SXRlbT5cblx0XHQpO1xuXHR9LFxuXHQvLyBSZW5kZXIgdGhlIGxpbmsgdG8gdGhlIHdlYnBhZ2Vcblx0cmVuZGVyRnJvbnRMaW5rICgpIHtcblx0XHRyZXR1cm4gKFxuXHRcdFx0PHVsIGNsYXNzTmFtZT1cImFwcC1uYXYgYXBwLW5hdi0tcHJpbWFyeSBhcHAtbmF2LS1yaWdodFwiPlxuXHRcdFx0XHR7dGhpcy5yZW5kZXJCYWNrQnV0dG9uKCl9XG5cdFx0XHRcdHt0aGlzLnJlbmRlclNpZ25vdXQoKX1cblx0XHRcdDwvdWw+XG5cdFx0KTtcblx0fSxcblx0cmVuZGVyQnJhbmQgKCkge1xuXHRcdC8vIFRPRE86IHN1cHBvcnQgbmF2YmFyTG9nbyBmcm9tIGtleXN0b25lIGNvbmZpZ1xuXG5cdFx0Y29uc3QgeyBicmFuZCwgY3VycmVudFNlY3Rpb25LZXkgfSA9IHRoaXMucHJvcHM7XG5cdFx0Y29uc3QgY2xhc3NOYW1lID0gY3VycmVudFNlY3Rpb25LZXkgPT09ICdkYXNoYm9hcmQnID8gJ3ByaW1hcnktbmF2YmFyX19icmFuZCBwcmltYXJ5LW5hdmJhcl9faXRlbS0tYWN0aXZlJyA6ICdwcmltYXJ5LW5hdmJhcl9fYnJhbmQnO1xuXG5cdFx0cmV0dXJuIChcblx0XHRcdDxQcmltYXJ5TmF2SXRlbVxuXHRcdFx0XHRjbGFzc05hbWU9e2NsYXNzTmFtZX1cblx0XHRcdFx0bGFiZWw9XCJvY3RpY29uLWhvbWVcIlxuXHRcdFx0XHR0aXRsZT17J0Rhc2hib2FyZCAtICcgKyBicmFuZH1cblx0XHRcdFx0dG89e0tleXN0b25lLmFkbWluUGF0aH1cblx0XHRcdD5cblx0XHRcdFx0PHNwYW4gY2xhc3NOYW1lPVwib2N0aWNvbiBvY3RpY29uLWhvbWVcIiAvPlxuXHRcdFx0PC9QcmltYXJ5TmF2SXRlbT5cblx0XHQpO1xuXHR9LFxuXHQvLyBSZW5kZXIgdGhlIG5hdmlnYXRpb25cblx0cmVuZGVyTmF2aWdhdGlvbiAoKSB7XG5cdFx0aWYgKCF0aGlzLnByb3BzLnNlY3Rpb25zIHx8ICF0aGlzLnByb3BzLnNlY3Rpb25zLmxlbmd0aCkgcmV0dXJuIG51bGw7XG5cblx0XHRyZXR1cm4gdGhpcy5wcm9wcy5zZWN0aW9ucy5tYXAoKHNlY3Rpb24pID0+IHtcblx0XHRcdC8vIEdldCB0aGUgbGluayBhbmQgdGhlIGNsYXNzIG5hbWVcblx0XHRcdGNvbnN0IHRvID0gIXNlY3Rpb24ubGlzdHNbMF0uZXh0ZXJuYWwgJiYgYCR7S2V5c3RvbmUuYWRtaW5QYXRofS8ke3NlY3Rpb24ubGlzdHNbMF0ucGF0aH1gO1xuXHRcdFx0Y29uc3QgaHJlZiA9IHNlY3Rpb24ubGlzdHNbMF0uZXh0ZXJuYWwgJiYgc2VjdGlvbi5saXN0c1swXS5wYXRoO1xuXHRcdFx0Y29uc3QgaXNBY3RpdmUgPSB0aGlzLnByb3BzLmN1cnJlbnRTZWN0aW9uS2V5ICYmIHRoaXMucHJvcHMuY3VycmVudFNlY3Rpb25LZXkgPT09IHNlY3Rpb24ua2V5O1xuXHRcdFx0Y29uc3QgY2xhc3NOYW1lID0gaXNBY3RpdmUgPyAncHJpbWFyeS1uYXZiYXJfX2l0ZW0tLWFjdGl2ZScgOiBudWxsO1xuXG5cdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHQ8UHJpbWFyeU5hdkl0ZW1cblx0XHRcdFx0XHRhY3RpdmU9e2lzQWN0aXZlfVxuXHRcdFx0XHRcdGtleT17c2VjdGlvbi5rZXl9XG5cdFx0XHRcdFx0bGFiZWw9e3NlY3Rpb24ubGFiZWx9XG5cdFx0XHRcdFx0Y2xhc3NOYW1lPXtjbGFzc05hbWV9XG5cdFx0XHRcdFx0dG89e3RvfVxuXHRcdFx0XHRcdGhyZWY9e2hyZWZ9XG5cdFx0XHRcdD5cblx0XHRcdFx0XHR7c2VjdGlvbi5sYWJlbH1cblx0XHRcdFx0PC9QcmltYXJ5TmF2SXRlbT5cblx0XHRcdCk7XG5cdFx0fSk7XG5cdH0sXG5cdHJlbmRlciAoKSB7XG5cdFx0aWYgKCF0aGlzLnN0YXRlLm5hdklzVmlzaWJsZSkgcmV0dXJuIG51bGw7XG5cblx0XHRyZXR1cm4gKFxuXHRcdFx0PG5hdiBjbGFzc05hbWU9XCJwcmltYXJ5LW5hdmJhclwiPlxuXHRcdFx0XHQ8Q29udGFpbmVyIGNsZWFyRmxvYXRpbmdDaGlsZHJlbj5cblx0XHRcdFx0XHQ8dWwgY2xhc3NOYW1lPVwiYXBwLW5hdiBhcHAtbmF2LS1wcmltYXJ5IGFwcC1uYXYtLWxlZnRcIj5cblx0XHRcdFx0XHRcdHt0aGlzLnJlbmRlckJyYW5kKCl9XG5cdFx0XHRcdFx0XHR7dGhpcy5yZW5kZXJOYXZpZ2F0aW9uKCl9XG5cdFx0XHRcdFx0PC91bD5cblx0XHRcdFx0XHR7dGhpcy5yZW5kZXJGcm9udExpbmsoKX1cblx0XHRcdFx0PC9Db250YWluZXI+XG5cdFx0XHQ8L25hdj5cblx0XHQpO1xuXHR9LFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUHJpbWFyeU5hdmlnYXRpb247XG4iLCIvKipcbiAqIEEgbmF2aWdhdGlvbiBpdGVtIG9mIHRoZSBzZWNvbmRhcnkgbmF2aWdhdGlvblxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcblxuY29uc3QgU2Vjb25kYXJ5TmF2SXRlbSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblx0ZGlzcGxheU5hbWU6ICdTZWNvbmRhcnlOYXZJdGVtJyxcblx0cHJvcFR5cGVzOiB7XG5cdFx0Y2hpbGRyZW46IFJlYWN0LlByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG5cdFx0Y2xhc3NOYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuXHRcdGhyZWY6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcblx0XHRvbkNsaWNrOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcblx0XHRwYXRoOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuXHRcdHRpdGxlOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuXHR9LFxuXHRyZW5kZXIgKCkge1xuXHRcdHJldHVybiAoXG5cdFx0XHQ8bGkgY2xhc3NOYW1lPXt0aGlzLnByb3BzLmNsYXNzTmFtZX0gZGF0YS1saXN0LXBhdGg9e3RoaXMucHJvcHMucGF0aH0+XG5cdFx0XHRcdDxMaW5rXG5cdFx0XHRcdFx0dG89e3RoaXMucHJvcHMuaHJlZn1cblx0XHRcdFx0XHRvbkNsaWNrPXt0aGlzLnByb3BzLm9uQ2xpY2t9XG5cdFx0XHRcdFx0dGl0bGU9e3RoaXMucHJvcHMudGl0bGV9XG5cdFx0XHRcdFx0dGFiSW5kZXg9XCItMVwiXG5cdFx0XHRcdD5cblx0XHRcdFx0XHR7dGhpcy5wcm9wcy5jaGlsZHJlbn1cblx0XHRcdFx0PC9MaW5rPlxuXHRcdFx0PC9saT5cblx0XHQpO1xuXHR9LFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU2Vjb25kYXJ5TmF2SXRlbTtcbiIsIi8qKlxuICogVGhlIHNlY29uZGFyeSBuYXZpZ2F0aW9uIGxpbmtzIHRvIGluaWR2aWR1YWwgbGlzdHMgb2YgYSBzZWN0aW9uXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBDb250YWluZXIgfSBmcm9tICcuLi8uLi8uLi9lbGVtZW50YWwnO1xuXG5pbXBvcnQge1xuXHRzZXRBY3RpdmVMaXN0LFxufSBmcm9tICcuLi8uLi8uLi9zY3JlZW5zL0xpc3QvYWN0aW9ucy9hY3RpdmUnO1xuaW1wb3J0IFNlY29uZGFyeU5hdkl0ZW0gZnJvbSAnLi9OYXZJdGVtJztcblxudmFyIFNlY29uZGFyeU5hdmlnYXRpb24gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cdGRpc3BsYXlOYW1lOiAnU2Vjb25kYXJ5TmF2aWdhdGlvbicsXG5cdHByb3BUeXBlczoge1xuXHRcdGN1cnJlbnRMaXN0S2V5OiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuXHRcdGxpc3RzOiBSZWFjdC5Qcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZCxcblx0fSxcblx0Z2V0SW5pdGlhbFN0YXRlICgpIHtcblx0XHRyZXR1cm4ge307XG5cdH0sXG5cdC8vIEhhbmRsZSByZXNpemluZyBhbmQgaGlkZSB0aGlzIG5hdiBvbiBtb2JpbGUgKGkuZS4gPCA3NjhweCkgc2NyZWVuc1xuXHRjb21wb25lbnREaWRNb3VudCAoKSB7XG5cdFx0dGhpcy5oYW5kbGVSZXNpemUoKTtcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5oYW5kbGVSZXNpemUpO1xuXHR9LFxuXHRjb21wb25lbnRXaWxsVW5tb3VudCAoKSB7XG5cdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlUmVzaXplKTtcblx0fSxcblx0aGFuZGxlUmVzaXplICgpIHtcblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdG5hdklzVmlzaWJsZTogdGhpcy5wcm9wcy5saXN0cyAmJiBPYmplY3Qua2V5cyh0aGlzLnByb3BzLmxpc3RzKS5sZW5ndGggPiAwICYmIHdpbmRvdy5pbm5lcldpZHRoID49IDc2OCxcblx0XHR9KTtcblx0fSxcblx0Ly8gUmVuZGVyIHRoZSBuYXZpZ2F0aW9uXG5cdHJlbmRlck5hdmlnYXRpb24gKGxpc3RzKSB7XG5cdFx0Y29uc3QgbmF2aWdhdGlvbiA9IE9iamVjdC5rZXlzKGxpc3RzKS5tYXAoKGtleSkgPT4ge1xuXHRcdFx0Y29uc3QgbGlzdCA9IGxpc3RzW2tleV07XG5cdFx0XHQvLyBHZXQgdGhlIGxpbmsgYW5kIHRoZSBjbGFzc25hbWVcblx0XHRcdGNvbnN0IGhyZWYgPSBsaXN0LmV4dGVybmFsID8gbGlzdC5wYXRoIDogYCR7S2V5c3RvbmUuYWRtaW5QYXRofS8ke2xpc3QucGF0aH1gO1xuXHRcdFx0Y29uc3QgaXNBY3RpdmUgPSB0aGlzLnByb3BzLmN1cnJlbnRMaXN0S2V5ICYmIHRoaXMucHJvcHMuY3VycmVudExpc3RLZXkgPT09IGxpc3QucGF0aDtcblx0XHRcdGNvbnN0IGNsYXNzTmFtZSA9IGlzQWN0aXZlID8gJ2FjdGl2ZScgOiBudWxsO1xuXHRcdFx0Y29uc3Qgb25DbGljayA9IChldnQpID0+IHtcblx0XHRcdFx0Ly8gSWYgaXQncyB0aGUgY3VycmVudGx5IGFjdGl2ZSBuYXZpZ2F0aW9uIGl0ZW0gYW5kIHdlJ3JlIG5vdCBvbiB0aGUgaXRlbSB2aWV3LFxuXHRcdFx0XHQvLyBjbGVhciB0aGUgcXVlcnkgcGFyYW1zIG9uIGNsaWNrXG5cdFx0XHRcdGlmIChpc0FjdGl2ZSAmJiAhdGhpcy5wcm9wcy5pdGVtSWQpIHtcblx0XHRcdFx0XHRldnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHR0aGlzLnByb3BzLmRpc3BhdGNoKFxuXHRcdFx0XHRcdFx0c2V0QWN0aXZlTGlzdCh0aGlzLnByb3BzLmN1cnJlbnRMaXN0LCB0aGlzLnByb3BzLmN1cnJlbnRMaXN0S2V5KVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRcdHJldHVybiAoXG5cdFx0XHRcdDxTZWNvbmRhcnlOYXZJdGVtXG5cdFx0XHRcdFx0a2V5PXtsaXN0LnBhdGh9XG5cdFx0XHRcdFx0cGF0aD17bGlzdC5wYXRofVxuXHRcdFx0XHRcdGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuXHRcdFx0XHRcdGhyZWY9e2hyZWZ9XG5cdFx0XHRcdFx0b25DbGljaz17b25DbGlja31cblx0XHRcdFx0PlxuXHRcdFx0XHRcdHtsaXN0LmxhYmVsfVxuXHRcdFx0XHQ8L1NlY29uZGFyeU5hdkl0ZW0+XG5cdFx0XHQpO1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIChcblx0XHRcdDx1bCBjbGFzc05hbWU9XCJhcHAtbmF2IGFwcC1uYXYtLXNlY29uZGFyeSBhcHAtbmF2LS1sZWZ0XCI+XG5cdFx0XHRcdHtuYXZpZ2F0aW9ufVxuXHRcdFx0PC91bD5cblx0XHQpO1xuXHR9LFxuXHRyZW5kZXIgKCkge1xuXHRcdGlmICghdGhpcy5zdGF0ZS5uYXZJc1Zpc2libGUpIHJldHVybiBudWxsO1xuXG5cdFx0cmV0dXJuIChcblx0XHRcdDxuYXYgY2xhc3NOYW1lPVwic2Vjb25kYXJ5LW5hdmJhclwiPlxuXHRcdFx0XHQ8Q29udGFpbmVyIGNsZWFyRmxvYXRpbmdDaGlsZHJlbj5cblx0XHRcdFx0XHR7dGhpcy5yZW5kZXJOYXZpZ2F0aW9uKHRoaXMucHJvcHMubGlzdHMpfVxuXHRcdFx0XHQ8L0NvbnRhaW5lcj5cblx0XHRcdDwvbmF2PlxuXHRcdCk7XG5cdH0sXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBjb25uZWN0KChzdGF0ZSkgPT4ge1xuXHRyZXR1cm4ge1xuXHRcdGN1cnJlbnRMaXN0OiBzdGF0ZS5saXN0cy5jdXJyZW50TGlzdCxcblx0fTtcbn0pKFNlY29uZGFyeU5hdmlnYXRpb24pO1xuIiwiaW1wb3J0IHRoZW1lIGZyb20gJy4uLy4uLy4uL3RoZW1lJztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdGRhbmdlcjogdGhlbWUuYWxlcnQuY29sb3IuZGFuZ2VyLFxuXHRlcnJvcjogdGhlbWUuYWxlcnQuY29sb3IuZGFuZ2VyLFxuXHRpbmZvOiB0aGVtZS5hbGVydC5jb2xvci5pbmZvLFxuXHRzdWNjZXNzOiB0aGVtZS5hbGVydC5jb2xvci5zdWNjZXNzLFxuXHR3YXJuaW5nOiB0aGVtZS5hbGVydC5jb2xvci53YXJuaW5nLFxufTtcbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XG5pbXBvcnQgUmVhY3QsIHsgY2xvbmVFbGVtZW50LCBDaGlsZHJlbiwgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzZXMgZnJvbSAnLi9zdHlsZXMnO1xuaW1wb3J0IGNvbG9ycyBmcm9tICcuL2NvbG9ycyc7XG5cbi8vIGNsb25lIGNoaWxkcmVuIGlmIGEgY2xhc3MgZXhpc3RzIGZvciB0aGUgdGFnbmFtZVxuY29uc3QgY2xvbmVXaXRoQ2xhc3NuYW1lcyA9IChjKSA9PiB7XG5cdGNvbnN0IHR5cGUgPSBjLnR5cGUgJiYgYy50eXBlLmRpc3BsYXlOYW1lXG5cdFx0PyBjLnR5cGUuZGlzcGxheU5hbWVcblx0XHQ6IGMudHlwZSB8fCBudWxsO1xuXG5cdGlmICghdHlwZSB8fCAhY2xhc3Nlc1t0eXBlXSkgcmV0dXJuIGM7XG5cblx0cmV0dXJuIGNsb25lRWxlbWVudChjLCB7XG5cdFx0Y2xhc3NOYW1lOiBjc3MoY2xhc3Nlc1t0eXBlXSksXG5cdH0pO1xufTtcblxuZnVuY3Rpb24gQWxlcnQgKHtcblx0Y2hpbGRyZW4sXG5cdGNsYXNzTmFtZSxcblx0Y29sb3IsXG5cdGNvbXBvbmVudDogQ29tcG9uZW50LFxuXHQuLi5wcm9wc1xufSkge1xuXHRwcm9wcy5jbGFzc05hbWUgPSBjc3MoXG5cdFx0Y2xhc3Nlcy5hbGVydCxcblx0XHRjbGFzc2VzW2NvbG9yXSxcblx0XHRjbGFzc05hbWVcblx0KTtcblx0cHJvcHMuY2hpbGRyZW4gPSBDaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGNsb25lV2l0aENsYXNzbmFtZXMpO1xuXG5cdHJldHVybiA8Q29tcG9uZW50IHsuLi5wcm9wc30gZGF0YS1hbGVydC10eXBlPXtjb2xvcn0gLz47XG59O1xuXG5BbGVydC5wcm9wVHlwZXMgPSB7XG5cdGNvbG9yOiBQcm9wVHlwZXMub25lT2YoT2JqZWN0LmtleXMoY29sb3JzKSkuaXNSZXF1aXJlZCxcblx0Y29tcG9uZW50OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcblx0XHRQcm9wVHlwZXMuZnVuYyxcblx0XHRQcm9wVHlwZXMuc3RyaW5nLFxuXHRdKSxcbn07XG5BbGVydC5kZWZhdWx0UHJvcHMgPSB7XG5cdGNvbXBvbmVudDogJ2RpdicsXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFsZXJ0O1xuIiwiLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBBbGVydFxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8qIGVzbGludCBxdW90ZS1wcm9wczogW1wiZXJyb3JcIiwgXCJhcy1uZWVkZWRcIl0gKi9cblxuaW1wb3J0IGNvbG9ycyBmcm9tICcuL2NvbG9ycyc7XG5pbXBvcnQgdGhlbWUgZnJvbSAnLi4vLi4vLi4vdGhlbWUnO1xuXG4vLyBQcmVwYXJlIHZhcmlhbnRzXG5jb25zdCBjb2xvclZhcmlhbnRzID0ge307XG5PYmplY3Qua2V5cyhjb2xvcnMpLmZvckVhY2goY29sb3IgPT4ge1xuXHRjb2xvclZhcmlhbnRzW2NvbG9yXSA9IHtcblx0XHRiYWNrZ3JvdW5kQ29sb3I6IGNvbG9yc1tjb2xvcl0uYmFja2dyb3VuZCxcblx0XHRib3JkZXJDb2xvcjogY29sb3JzW2NvbG9yXS5ib3JkZXIsXG5cdFx0Y29sb3I6IGNvbG9yc1tjb2xvcl0udGV4dCxcblx0fTtcbn0pO1xuXG4vLyBQcmVwYXJlIGhlYWRpbmdzXG5jb25zdCBoZWFkaW5nVGFnbmFtZXMgPSB7fTtcblsnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnXS5mb3JFYWNoKHRhZyA9PiB7XG5cdGhlYWRpbmdUYWduYW1lc1t0YWddID0geyBjb2xvcjogJ2luaGVyaXQnIH07XG59KTtcblxuY29uc3QgbGlua1N0eWxlcyA9IHtcblx0Y29sb3I6ICdpbmhlcml0Jyxcblx0dGV4dERlY29yYXRpb246ICd1bmRlcmxpbmUnLFxuXG5cdCc6aG92ZXInOiB7IGNvbG9yOiAnaW5oZXJpdCcgfSxcblx0Jzpmb2N1cyc6IHsgY29sb3I6ICdpbmhlcml0JyB9LFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdGFsZXJ0OiB7XG5cdFx0Ym9yZGVyQ29sb3I6ICd0cmFuc3BhcmVudCcsXG5cdFx0Ym9yZGVyUmFkaXVzOiB0aGVtZS5hbGVydC5ib3JkZXJSYWRpdXMsXG5cdFx0Ym9yZGVyU3R5bGU6ICdzb2xpZCcsXG5cdFx0Ym9yZGVyV2lkdGg6IHRoZW1lLmFsZXJ0LmJvcmRlcldpZHRoLFxuXHRcdG1hcmdpbjogdGhlbWUuYWxlcnQubWFyZ2luLFxuXHRcdHBhZGRpbmc6IHRoZW1lLmFsZXJ0LnBhZGRpbmcsXG5cdH0sXG5cblx0Ly8gdGFnbmFtZXNcblx0YTogbGlua1N0eWxlcyxcblx0TGluazogbGlua1N0eWxlcyxcblx0c3Ryb25nOiB7XG5cdFx0Zm9udFdlaWdodDogNTAwLFxuXHR9LFxuXG5cdC8vIGhlYWRpbmdzXG5cdC4uLmhlYWRpbmdUYWduYW1lcyxcblxuXHQvLyBjb2xvcnNcblx0Li4uY29sb3JWYXJpYW50cyxcbn07XG4iLCJpbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xuaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi90aGVtZSc7XG5cbmZ1bmN0aW9uIEJsYW5rU3RhdGUgKHtcblx0Y2xhc3NOYW1lLFxuXHRjaGlsZHJlbixcblx0aGVhZGluZyxcblx0Y29tcG9uZW50OiBDb21wb25lbnQsXG5cdC4uLnByb3BzXG59KSB7XG5cdHByb3BzLmNsYXNzTmFtZSA9IGNzcyhcblx0XHRjbGFzc2VzLmNvbnRhaW5lcixcblx0XHRjbGFzc05hbWVcblx0KTtcblxuXHRyZXR1cm4gKFxuXHRcdDxDb21wb25lbnQgey4uLnByb3BzfT5cblx0XHRcdHshIWhlYWRpbmcgJiYgPGgyIGRhdGEtZTJlLWJsYW5rLXN0YXRlLWhlYWRpbmcgY2xhc3NOYW1lPXtjc3MoY2xhc3Nlcy5oZWFkaW5nKX0+e2hlYWRpbmd9PC9oMj59XG5cdFx0XHR7Y2hpbGRyZW59XG5cdFx0PC9Db21wb25lbnQ+XG5cdCk7XG59O1xuXG5CbGFua1N0YXRlLnByb3BUeXBlcyA9IHtcblx0Y29tcG9uZW50OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcblx0XHRQcm9wVHlwZXMuZnVuYyxcblx0XHRQcm9wVHlwZXMuc3RyaW5nLFxuXHRdKS5pc1JlcXVpcmVkLFxuXHRoZWFkaW5nOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcbkJsYW5rU3RhdGUuZGVmYXVsdFByb3BzID0ge1xuXHRjb21wb25lbnQ6ICdkaXYnLFxufTtcblxuLyogZXNsaW50IHF1b3RlLXByb3BzOiBbXCJlcnJvclwiLCBcImFzLW5lZWRlZFwiXSAqL1xuXG5jb25zdCBjbGFzc2VzID0ge1xuXHRjb250YWluZXI6IHtcblx0XHRiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLmJsYW5rc3RhdGUuYmFja2dyb3VuZCxcblx0XHRib3JkZXJSYWRpdXM6IHRoZW1lLmJsYW5rc3RhdGUuYm9yZGVyUmFkaXVzLFxuXHRcdGNvbG9yOiB0aGVtZS5ibGFua3N0YXRlLmNvbG9yLFxuXHRcdHBhZGRpbmdCb3R0b206IHRoZW1lLmJsYW5rc3RhdGUucGFkZGluZ1ZlcnRpY2FsLFxuXHRcdHBhZGRpbmdMZWZ0OiB0aGVtZS5ibGFua3N0YXRlLnBhZGRpbmdIb3Jpem9udGFsLFxuXHRcdHBhZGRpbmdSaWdodDogdGhlbWUuYmxhbmtzdGF0ZS5wYWRkaW5nSG9yaXpvbnRhbCxcblx0XHRwYWRkaW5nVG9wOiB0aGVtZS5ibGFua3N0YXRlLnBhZGRpbmdWZXJ0aWNhbCxcblx0XHR0ZXh0QWxpZ246ICdjZW50ZXInLFxuXHR9LFxuXG5cdGhlYWRpbmc6IHtcblx0XHRjb2xvcjogJ2luaGVyaXQnLFxuXG5cdFx0JzpsYXN0LWNoaWxkJzoge1xuXHRcdFx0bWFyZ2luQm90dG9tOiAwLFxuXHRcdH0sXG5cdH0sXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJsYW5rU3RhdGU7XG4iLCJpbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL3N0eWxlcyc7XG5cbmNvbnN0IGNvbW1vbkNsYXNzZXMgPSBzdHlsZXMuY29tbW9uO1xuY29uc3Qgc3R5bGVzaGVldENhY2hlID0ge307XG5mdW5jdGlvbiBnZXRTdHlsZVNoZWV0ICh2YXJpYW50LCBjb2xvcikge1xuXHRjb25zdCBjYWNoZUtleSA9IGAke3ZhcmlhbnR9LSR7Y29sb3J9YDtcblx0aWYgKCFzdHlsZXNoZWV0Q2FjaGVbY2FjaGVLZXldKSB7XG5cdFx0Y29uc3QgdmFyaWFudFN0eWxlcyA9IHN0eWxlc1t2YXJpYW50XShjb2xvcik7XG5cdFx0c3R5bGVzaGVldENhY2hlW2NhY2hlS2V5XSA9IHZhcmlhbnRTdHlsZXM7XG5cdH1cblx0cmV0dXJuIHN0eWxlc2hlZXRDYWNoZVtjYWNoZUtleV07XG59XG5cbmNvbnN0IEJVVFRPTl9TSVpFUyA9IFsnbGFyZ2UnLCAnbWVkaXVtJywgJ3NtYWxsJywgJ3hzbWFsbCddO1xuY29uc3QgQlVUVE9OX1ZBUklBTlRTID0gWydmaWxsJywgJ2hvbGxvdycsICdsaW5rJ107XG5jb25zdCBCVVRUT05fQ09MT1JTID0gWydkZWZhdWx0JywgJ3ByaW1hcnknLCAnc3VjY2VzcycsICd3YXJuaW5nJywgJ2RhbmdlcicsICdjYW5jZWwnLCAnZGVsZXRlJ107XG5cbi8vIE5PVEUgbXVzdCBOT1QgYmUgZnVuY3Rpb25hbCBjb21wb25lbnQgdG8gYWxsb3cgYHJlZnNgXG5cbmNsYXNzIEJ1dHRvbiBleHRlbmRzIENvbXBvbmVudCB7XG5cdHJlbmRlciAoKSB7XG5cdFx0dmFyIHtcblx0XHRcdGFjdGl2ZSxcblx0XHRcdGNzc1N0eWxlcyxcblx0XHRcdGJsb2NrLFxuXHRcdFx0Y2xhc3NOYW1lLFxuXHRcdFx0Y29sb3IsXG5cdFx0XHRjb21wb25lbnQ6IFRhZyxcblx0XHRcdGRpc2FibGVkLFxuXHRcdFx0c2l6ZSxcblx0XHRcdHZhcmlhbnQsXG5cdFx0XHQuLi5wcm9wc1xuXHRcdH0gPSB0aGlzLnByb3BzO1xuXG5cdFx0Ly8gZ2V0IHRoZSBzdHlsZXNcblx0XHRjb25zdCB2YXJpYW50Q2xhc3NlcyA9IGdldFN0eWxlU2hlZXQodmFyaWFudCwgY29sb3IpO1xuXHRcdHByb3BzLmNsYXNzTmFtZSA9IGNzcyhcblx0XHRcdGNvbW1vbkNsYXNzZXMuYmFzZSxcblx0XHRcdGNvbW1vbkNsYXNzZXNbc2l6ZV0sXG5cdFx0XHR2YXJpYW50Q2xhc3Nlcy5iYXNlLFxuXHRcdFx0YmxvY2sgPyBjb21tb25DbGFzc2VzLmJsb2NrIDogbnVsbCxcblx0XHRcdGRpc2FibGVkID8gY29tbW9uQ2xhc3Nlcy5kaXNhYmxlZCA6IG51bGwsXG5cdFx0XHRhY3RpdmUgPyB2YXJpYW50Q2xhc3Nlcy5hY3RpdmUgOiBudWxsLFxuXHRcdFx0Li4uY3NzU3R5bGVzXG5cdFx0KTtcblx0XHRpZiAoY2xhc3NOYW1lKSB7XG5cdFx0XHRwcm9wcy5jbGFzc05hbWUgKz0gKCcgJyArIGNsYXNzTmFtZSk7XG5cdFx0fVxuXG5cdFx0Ly8gcmV0dXJuIGFuIGFuY2hvciBvciBidXR0b25cblx0XHRpZiAoIVRhZykge1xuXHRcdFx0VGFnID0gcHJvcHMuaHJlZiA/ICdhJyA6ICdidXR0b24nO1xuXHRcdH1cblx0XHQvLyBFbnN1cmUgYnV0dG9ucyBkb24ndCBzdWJtaXQgYnkgZGVmYXVsdFxuXHRcdGlmIChUYWcgPT09ICdidXR0b24nICYmICFwcm9wcy50eXBlKSB7XG5cdFx0XHRwcm9wcy50eXBlID0gJ2J1dHRvbic7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIDxUYWcgey4uLnByb3BzfSAvPjtcblx0fVxufTtcblxuQnV0dG9uLnByb3BUeXBlcyA9IHtcblx0YWN0aXZlOiBQcm9wVHlwZXMuYm9vbCxcblx0YmxvY2s6IFByb3BUeXBlcy5ib29sLFxuXHRjb2xvcjogUHJvcFR5cGVzLm9uZU9mKEJVVFRPTl9DT0xPUlMpLFxuXHRjb21wb25lbnQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuXHRcdFByb3BUeXBlcy5mdW5jLFxuXHRcdFByb3BUeXBlcy5zdHJpbmcsXG5cdF0pLFxuXHRjc3NTdHlsZXM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zaGFwZSh7XG5cdFx0X2RlZmluaXRpb246IFByb3BUeXBlcy5vYmplY3QsXG5cdFx0X25hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cdH0pKSxcblx0ZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXHRocmVmOiBQcm9wVHlwZXMuc3RyaW5nLFxuXHRzaXplOiBQcm9wVHlwZXMub25lT2YoQlVUVE9OX1NJWkVTKSxcblx0dmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKEJVVFRPTl9WQVJJQU5UUyksXG59O1xuQnV0dG9uLmRlZmF1bHRQcm9wcyA9IHtcblx0Y3NzU3R5bGVzOiBbXSxcblx0Y29sb3I6ICdkZWZhdWx0Jyxcblx0dmFyaWFudDogJ2ZpbGwnLFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBCdXR0b247XG4iLCIvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEJ1dHRvblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmltcG9ydCB7IGdyYWRpZW50VmVydGljYWwgfSBmcm9tICcuLi8uLi8uLi91dGlscy9jc3MnO1xuaW1wb3J0IHsgZGFya2VuLCBmYWRlLCBsaWdodGVuIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvY29sb3InO1xuaW1wb3J0IHRoZW1lIGZyb20gJy4uLy4uLy4uL3RoZW1lJztcblxuXG4vLyBDb21tb24gU3R5bGVzXG4vLyAtLS0tLS0tLS0tLS0tLS0tXG5cbmV4cG9ydHMuY29tbW9uID0ge1xuXHQvLyBCYXNlIEJ1dHRvblxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tXG5cdGJhc2U6IHtcblx0XHQnYXBwZWFyYW5jZSc6ICdub25lJyxcblx0XHQnYmFja2dyb3VuZCc6ICdub25lJyxcblx0XHQnYm9yZGVyV2lkdGgnOiB0aGVtZS5idXR0b24uYm9yZGVyV2lkdGgsXG5cdFx0J2JvcmRlclN0eWxlJzogJ3NvbGlkJyxcblx0XHQnYm9yZGVyQ29sb3InOiAndHJhbnNwYXJlbnQnLFxuXHRcdCdib3JkZXJSYWRpdXMnOiB0aGVtZS5idXR0b24uYm9yZGVyUmFkaXVzLFxuXHRcdCdjdXJzb3InOiAncG9pbnRlcicsXG5cdFx0J2Rpc3BsYXknOiAnaW5saW5lLWJsb2NrJyxcblx0XHQnZm9udFdlaWdodCc6IHRoZW1lLmJ1dHRvbi5mb250LndlaWdodCxcblx0XHQnaGVpZ2h0JzogdGhlbWUuY29tcG9uZW50LmhlaWdodCxcblx0XHQnbGluZUhlaWdodCc6IHRoZW1lLmNvbXBvbmVudC5saW5lSGVpZ2h0LFxuXHRcdCdtYXJnaW5Cb3R0b20nOiAwLFxuXHRcdCdwYWRkaW5nJzogYDAgJHt0aGVtZS5idXR0b24ucGFkZGluZ0hvcml6b250YWx9YCxcblx0XHQnb3V0bGluZSc6IDAsXG5cdFx0J3RleHRBbGlnbic6ICdjZW50ZXInLFxuXHRcdCd0b3VjaEFjdGlvbic6ICdtYW5pcHVsYXRpb24nLFxuXHRcdCd1c2VyU2VsZWN0JzogJ25vbmUnLFxuXHRcdCd2ZXJ0aWNhbEFsaWduJzogJ21pZGRsZScsXG5cdFx0J3doaXRlU3BhY2UnOiAnbm93cmFwJyxcblxuXHRcdCc6aG92ZXInOiB7XG5cdFx0XHRjb2xvcjogdGhlbWUuYnV0dG9uLmRlZmF1bHQudGV4dENvbG9yLFxuXHRcdFx0dGV4dERlY29yYXRpb246ICdub25lJyxcblx0XHR9LFxuXHRcdCc6Zm9jdXMnOiB7XG5cdFx0XHRjb2xvcjogdGhlbWUuYnV0dG9uLmRlZmF1bHQudGV4dENvbG9yLFxuXHRcdFx0dGV4dERlY29yYXRpb246ICdub25lJyxcblx0XHR9LFxuXHR9LFxuXHQvLyBCbG9jayBEaXNwbGF5XG5cdC8vIC0tLS0tLS0tLS0tLS0tLS1cblx0YmxvY2s6IHtcblx0XHRkaXNwbGF5OiAnYmxvY2snLFxuXHRcdHdpZHRoOiAnMTAwJScsXG5cdH0sXG5cdC8vIERpc2FibGVkXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS1cblx0ZGlzYWJsZWQ6IHtcblx0XHRvcGFjaXR5OiAwLjQsXG5cdFx0cG9pbnRlckV2ZW50czogJ25vbmUnLFxuXHR9LFxuXHQvLyBTaXplc1xuXHQvLyAtLS0tLS0tLS0tLS0tLS0tXG5cdGxhcmdlOiB7XG5cdFx0Zm9udFNpemU6IHRoZW1lLmZvbnQuc2l6ZS5sYXJnZSxcblx0fSxcblx0ZGVmYXVsdDoge1xuXHRcdGZvbnRTaXplOiB0aGVtZS5mb250LnNpemUuZGVmYXVsdCxcblx0fSxcblx0c21hbGw6IHtcblx0XHRmb250U2l6ZTogdGhlbWUuZm9udC5zaXplLnNtYWxsLFxuXHR9LFxuXHR4c21hbGw6IHtcblx0XHRmb250U2l6ZTogdGhlbWUuZm9udC5zaXplLnhzbWFsbCxcblx0XHRsaW5lSGVpZ2h0OiAnMS45Jyxcblx0XHRwYWRkaW5nTGVmdDogJy42NmVtJyxcblx0XHRwYWRkaW5nUmlnaHQ6ICcuNjZlbScsXG5cdH0sXG59O1xuXG5cbi8vIEZpbGwgVmFyaWFudFxuLy8gLS0tLS0tLS0tLS0tLS0tLVxuZnVuY3Rpb24gYnV0dG9uRmlsbFZhcmlhbnQgKHRleHRDb2xvciwgYmdDb2xvcikge1xuXHRjb25zdCBob3ZlclN0eWxlcyA9IHtcblx0XHQuLi5ncmFkaWVudFZlcnRpY2FsKGxpZ2h0ZW4oYmdDb2xvciwgMTApLCBkYXJrZW4oYmdDb2xvciwgNSkpLFxuXHRcdGJvcmRlckNvbG9yOiBgJHtkYXJrZW4oYmdDb2xvciwgNSl9ICR7ZGFya2VuKGJnQ29sb3IsIDEwKX0gJHtkYXJrZW4oYmdDb2xvciwgMTUpfWAsXG5cdFx0Ym94U2hhZG93OiAnMCAxcHggMCByZ2JhKDAsMCwwLDAuMSknLFxuXHRcdGNvbG9yOiB0ZXh0Q29sb3IsXG5cdFx0b3V0bGluZTogJ25vbmUnLFxuXHR9O1xuXHRjb25zdCBmb2N1c1N0eWxlcyA9IHtcblx0XHQuLi5ncmFkaWVudFZlcnRpY2FsKGxpZ2h0ZW4oYmdDb2xvciwgMTApLCBkYXJrZW4oYmdDb2xvciwgNSkpLFxuXHRcdGJvcmRlckNvbG9yOiBgJHtkYXJrZW4oYmdDb2xvciwgNSl9ICR7ZGFya2VuKGJnQ29sb3IsIDEwKX0gJHtkYXJrZW4oYmdDb2xvciwgMTUpfWAsXG5cdFx0Ym94U2hhZG93OiBgMCAwIDAgM3B4ICR7ZmFkZShiZ0NvbG9yLCAyNSl9YCxcblx0XHRjb2xvcjogdGV4dENvbG9yLFxuXHRcdG91dGxpbmU6ICdub25lJyxcblx0fTtcblx0Y29uc3QgYWN0aXZlU3R5bGVzID0ge1xuXHRcdGJhY2tncm91bmRDb2xvcjogZGFya2VuKGJnQ29sb3IsIDEwKSxcblx0XHRiYWNrZ3JvdW5kSW1hZ2U6ICdub25lJyxcblx0XHRib3JkZXJDb2xvcjogYCR7ZGFya2VuKGJnQ29sb3IsIDI1KX0gJHtkYXJrZW4oYmdDb2xvciwgMTUpfSAke2RhcmtlbihiZ0NvbG9yLCAxMCl9YCxcblx0XHRib3hTaGFkb3c6ICdpbnNldCAwIDFweCAycHggcmdiYSgwLCAwLCAwLCAwLjEpJyxcblx0fTtcblx0cmV0dXJuIHtcblx0XHRiYXNlOiB7XG5cdFx0XHQuLi5ncmFkaWVudFZlcnRpY2FsKGxpZ2h0ZW4oYmdDb2xvciwgNSksIGRhcmtlbihiZ0NvbG9yLCAxMCksIGJnQ29sb3IpLFxuXHRcdFx0J2JvcmRlckNvbG9yJzogYCR7ZGFya2VuKGJnQ29sb3IsIDEwKX0gJHtkYXJrZW4oYmdDb2xvciwgMjApfSAke2RhcmtlbihiZ0NvbG9yLCAyNSl9YCxcblx0XHRcdCdib3hTaGFkb3cnOiAnaW5zZXQgMCAxcHggMCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMSknLFxuXHRcdFx0J2NvbG9yJzogdGV4dENvbG9yLFxuXHRcdFx0J2ZvbnRXZWlnaHQnOiA0MDAsXG5cdFx0XHQndGV4dFNoYWRvdyc6ICcwIC0xcHggMCByZ2JhKDAsIDAsIDAsIDAuMjUpJyxcblxuXHRcdFx0Jzpob3Zlcic6IGhvdmVyU3R5bGVzLFxuXHRcdFx0Jzpmb2N1cyc6IGZvY3VzU3R5bGVzLFxuXHRcdFx0JzphY3RpdmUnOiBhY3RpdmVTdHlsZXMsXG5cdFx0fSxcblx0XHRhY3RpdmU6IGFjdGl2ZVN0eWxlcyxcblx0fTtcbn1cbi8vIFRPRE86IFRoaXMgaXMgcHJldHR5IGhhY2t5LCBuZWVkcyB0byBiZSBjb25zb2xpZGF0ZWQgd2l0aCB0aGUgVmFyaWFudCgpIG1ldGhvZFxuLy8gYWJvdmUgKG5lZWRzIG1vcmUgdGhlbWUgdmFyaWFibGVzIHRvIGJlIGltcGxlbWVudGVkIHRob3VnaClcbmZ1bmN0aW9uIGJ1dHRvbkZpbGxEZWZhdWx0ICgpIHtcblx0Y29uc3QgYm9yZGVyQ29sb3IgPSB0aGVtZS5pbnB1dC5ib3JkZXIuY29sb3IuZGVmYXVsdDtcblx0Y29uc3QgaG92ZXJTdHlsZXMgPSB7XG5cdFx0Li4uZ3JhZGllbnRWZXJ0aWNhbCgnI2ZmZicsICcjZWVlJyksXG5cdFx0Ym9yZGVyQ29sb3I6IGAke2Rhcmtlbihib3JkZXJDb2xvciwgNSl9ICR7ZGFya2VuKGJvcmRlckNvbG9yLCA1KX0gJHtkYXJrZW4oYm9yZGVyQ29sb3IsIDEwKX1gLFxuXHRcdGJveFNoYWRvdzogJzAgMXB4IDAgcmdiYSgwLDAsMCwwLjEpJyxcblx0XHRjb2xvcjogdGhlbWUuY29sb3IudGV4dCxcblx0fTtcblx0Y29uc3QgZm9jdXNTdHlsZXMgPSB7XG5cdFx0Ym9yZGVyQ29sb3I6IHRoZW1lLmNvbG9yLnByaW1hcnksXG5cdFx0Ym94U2hhZG93OiBgMCAwIDAgM3B4ICR7ZmFkZSh0aGVtZS5jb2xvci5wcmltYXJ5LCAxMCl9YCxcblx0XHRjb2xvcjogdGhlbWUuY29sb3IudGV4dCxcblx0XHRvdXRsaW5lOiAnbm9uZScsXG5cdH07XG5cdGNvbnN0IGFjdGl2ZVN0eWxlcyA9IHtcblx0XHRiYWNrZ3JvdW5kOiAnI2U2ZTZlNicsXG5cdFx0Ym9yZGVyQ29sb3I6IGRhcmtlbihib3JkZXJDb2xvciwgMTApLFxuXHRcdGJveFNoYWRvdzogJ2luc2V0IDAgMXB4IDJweCByZ2JhKDAsIDAsIDAsIDAuMSknLFxuXHRcdGNvbG9yOiB0aGVtZS5jb2xvci50ZXh0LFxuXHR9O1xuXHRyZXR1cm4ge1xuXHRcdGJhc2U6IHtcblx0XHRcdC4uLmdyYWRpZW50VmVydGljYWwoJyNmYWZhZmEnLCAnI2VhZWFlYScpLFxuXHRcdFx0J2JvcmRlckNvbG9yJzogYCR7Ym9yZGVyQ29sb3J9ICR7ZGFya2VuKGJvcmRlckNvbG9yLCA2KX0gJHtkYXJrZW4oYm9yZGVyQ29sb3IsIDEyKX1gLFxuXHRcdFx0J2NvbG9yJzogdGhlbWUuY29sb3IudGV4dCxcblx0XHRcdCd0ZXh0U2hhZG93JzogJzAgMXB4IDAgd2hpdGUnLFxuXG5cdFx0XHQnOmhvdmVyJzogaG92ZXJTdHlsZXMsXG5cdFx0XHQnOmZvY3VzJzogZm9jdXNTdHlsZXMsXG5cdFx0XHQnOmFjdGl2ZSc6IGFjdGl2ZVN0eWxlcyxcblx0XHR9LFxuXG5cdFx0Ly8gZ3Jvc3MgaGFja1xuXHRcdGFjdGl2ZToge1xuXHRcdFx0Li4uYWN0aXZlU3R5bGVzLFxuXG5cdFx0XHQnOmhvdmVyJzogYWN0aXZlU3R5bGVzLFxuXHRcdFx0Jzpmb2N1cyc6IHtcblx0XHRcdFx0Li4uYWN0aXZlU3R5bGVzLFxuXHRcdFx0XHQuLi5mb2N1c1N0eWxlcyxcblx0XHRcdFx0Ym94U2hhZG93OiBgMCAwIDAgM3B4ICR7ZmFkZSh0aGVtZS5jb2xvci5wcmltYXJ5LCAxMCl9LCBpbnNldCAwIDFweCAycHggcmdiYSgwLCAwLCAwLCAwLjEpYCxcblx0XHRcdH0sXG5cdFx0XHQnOmFjdGl2ZSc6IGFjdGl2ZVN0eWxlcyxcblx0XHR9LFxuXHR9O1xufVxuZXhwb3J0cy5maWxsID0gKGNvbG9yKSA9PiB7XG5cdHN3aXRjaCAoY29sb3IpIHtcblx0XHRjYXNlICdkZWZhdWx0Jzpcblx0XHRcdHJldHVybiBidXR0b25GaWxsRGVmYXVsdCgpO1xuXHRcdGNhc2UgJ2NhbmNlbCc6XG5cdFx0Y2FzZSAnZGVsZXRlJzpcblx0XHRcdHJldHVybiBidXR0b25GaWxsVmFyaWFudCgnd2hpdGUnLCB0aGVtZS5idXR0b24uZGFuZ2VyLmJnQ29sb3IpO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gYnV0dG9uRmlsbFZhcmlhbnQoJ3doaXRlJywgdGhlbWUuYnV0dG9uW2NvbG9yXS5iZ0NvbG9yKTtcblx0fVxufTtcblxuXG4vLyBIb2xsb3cgVmFyaWFudFxuLy8gLS0tLS0tLS0tLS0tLS0tLVxuZnVuY3Rpb24gYnV0dG9uSG9sbG93VmFyaWFudCAodGV4dENvbG9yLCBib3JkZXJDb2xvcikge1xuXHRjb25zdCBmb2N1c0FuZEhvdmVyU3R5bGVzID0ge1xuXHRcdGJhY2tncm91bmRJbWFnZTogJ25vbmUnLFxuXHRcdGJhY2tncm91bmRDb2xvcjogZmFkZShib3JkZXJDb2xvciwgMTUpLFxuXHRcdGJvcmRlckNvbG9yOiBkYXJrZW4oYm9yZGVyQ29sb3IsIDE1KSxcblx0XHRib3hTaGFkb3c6ICdub25lJyxcblx0XHRjb2xvcjogdGV4dENvbG9yLFxuXHRcdG91dGxpbmU6ICdub25lJyxcblx0fTtcblx0Y29uc3QgZm9jdXNPbmx5U3R5bGVzID0ge1xuXHRcdGJveFNoYWRvdzogYDAgMCAwIDNweCAke2ZhZGUoYm9yZGVyQ29sb3IsIDEwKX1gLFxuXHR9O1xuXHRjb25zdCBhY3RpdmVTdHlsZXMgPSB7XG5cdFx0YmFja2dyb3VuZENvbG9yOiBmYWRlKGJvcmRlckNvbG9yLCAzNSksXG5cdFx0Ym9yZGVyQ29sb3I6IGRhcmtlbihib3JkZXJDb2xvciwgMjUpLFxuXHRcdGJveFNoYWRvdzogJ25vbmUnLFxuXHR9O1xuXG5cdHJldHVybiB7XG5cdFx0YmFzZToge1xuXHRcdFx0J2JhY2tncm91bmQnOiAnbm9uZScsXG5cdFx0XHQnYm9yZGVyQ29sb3InOiBib3JkZXJDb2xvcixcblx0XHRcdCdjb2xvcic6IHRleHRDb2xvcixcblxuXHRcdFx0Jzpob3Zlcic6IGZvY3VzQW5kSG92ZXJTdHlsZXMsXG5cdFx0XHQnOmZvY3VzICc6IE9iamVjdC5hc3NpZ24oe30sIGZvY3VzQW5kSG92ZXJTdHlsZXMsIGZvY3VzT25seVN0eWxlcyksXG5cdFx0XHQnOmFjdGl2ZSc6IGFjdGl2ZVN0eWxlcyxcblx0XHR9LFxuXHRcdGFjdGl2ZTogYWN0aXZlU3R5bGVzLFxuXHR9O1xufTtcbmV4cG9ydHMuaG9sbG93ID0gKGNvbG9yKSA9PiB7XG5cdC8vIFRPRE86IGJldHRlciBoYW5kbGluZyBvZiBjYW5jZWwgYW5kIGRlbGV0ZSBjb2xvcnNcblx0aWYgKGNvbG9yID09PSAnY2FuY2VsJyB8fCBjb2xvciA9PT0gJ2RlbGV0ZScpIGNvbG9yID0gJ2Rhbmdlcic7XG5cblx0cmV0dXJuIGJ1dHRvbkhvbGxvd1ZhcmlhbnQodGhlbWUuYnV0dG9uW2NvbG9yXS5iZ0NvbG9yLCB0aGVtZS5idXR0b25bY29sb3JdLmJvcmRlckNvbG9yKTtcbn07XG5cblxuLy8gTGluayBWYXJpYW50XG4vLyAtLS0tLS0tLS0tLS0tLS0tXG5mdW5jdGlvbiBidXR0b25MaW5rVmFyaWFudCAodGV4dENvbG9yLCBob3ZlckNvbG9yKSB7XG5cdGNvbnN0IGhvdmVyU3R5bGVzID0ge1xuXHRcdGNvbG9yOiBob3ZlckNvbG9yLFxuXHRcdHRleHREZWNvcmF0aW9uOiAndW5kZXJsaW5lJyxcblx0fTtcblx0cmV0dXJuIHtcblx0XHRiYXNlOiB7XG5cdFx0XHQnYmFja2dyb3VuZCc6ICdub25lJyxcblx0XHRcdCdib3JkZXInOiAwLFxuXHRcdFx0J2JveFNoYWRvdyc6ICdub25lJyxcblx0XHRcdCdjb2xvcic6IHRleHRDb2xvcixcblx0XHRcdCdmb250V2VpZ2h0JzogJ25vcm1hbCcsXG5cdFx0XHQnb3V0bGluZSc6ICdub25lJyxcblxuXHRcdFx0Jzpob3Zlcic6IGhvdmVyU3R5bGVzLFxuXHRcdFx0Jzpmb2N1cyc6IGhvdmVyU3R5bGVzLFxuXHRcdFx0JzphY3RpdmUnOiBob3ZlclN0eWxlcyxcblx0XHR9LFxuXHRcdGFjdGl2ZTogaG92ZXJTdHlsZXMsXG5cdH07XG59O1xuZnVuY3Rpb24gYnV0dG9uTGlua0RlbGV0ZSAoKSB7XG5cdGNvbnN0IHN0eWxlcyA9IGJ1dHRvbkxpbmtWYXJpYW50KHRoZW1lLmNvbG9yLmdyYXk0MCwgdGhlbWUuY29sb3IuZGFuZ2VyKTtcblx0Y29uc3QgaG92ZXJTdHlsZXMgPSB7XG5cdFx0Li4uZ3JhZGllbnRWZXJ0aWNhbChsaWdodGVuKHRoZW1lLmNvbG9yLmRhbmdlciwgMTApLCBkYXJrZW4odGhlbWUuY29sb3IuZGFuZ2VyLCAxMCkpLFxuXHRcdGJhY2tncm91bmRDb2xvcjogdGhlbWUuY29sb3IuZGFuZ2VyLFxuXHRcdGJvcmRlckNvbG9yOiBgJHtkYXJrZW4odGhlbWUuY29sb3IuZGFuZ2VyLCA0KX0gJHtkYXJrZW4odGhlbWUuY29sb3IuZGFuZ2VyLCA4KX0gJHtkYXJrZW4odGhlbWUuY29sb3IuZGFuZ2VyLCAxMil9YCxcblx0XHRib3hTaGFkb3c6ICcwIDFweCAwIHJnYmEoMCwwLDAsMC4xKScsXG5cdFx0Y29sb3I6ICd3aGl0ZScsXG5cdFx0dGV4dERlY29yYXRpb246ICdub25lJyxcblx0fTtcblx0Y29uc3QgYWN0aXZlU3R5bGVzID0ge1xuXHRcdGJhY2tncm91bmRDb2xvcjogZGFya2VuKHRoZW1lLmNvbG9yLmRhbmdlciwgNCksXG5cdFx0YmFja2dyb3VuZEltYWdlOiAnbm9uZScsXG5cdFx0Ym9yZGVyQ29sb3I6IGAke2Rhcmtlbih0aGVtZS5jb2xvci5kYW5nZXIsIDEyKX0gJHtkYXJrZW4odGhlbWUuY29sb3IuZGFuZ2VyLCA4KX0gJHtkYXJrZW4odGhlbWUuY29sb3IuZGFuZ2VyLCA4KX1gLFxuXHRcdGJveFNoYWRvdzogJ2luc2V0IDAgMXB4IDJweCByZ2JhKDAsIDAsIDAsIDAuMSknLFxuXHRcdGNvbG9yOiAnd2hpdGUnLFxuXHR9O1xuXHRyZXR1cm4ge1xuXHRcdGJhc2U6IHtcblx0XHRcdC4uLnN0eWxlcy5iYXNlLFxuXHRcdFx0Jzpob3Zlcic6IGhvdmVyU3R5bGVzLFxuXHRcdFx0Jzpmb2N1cyc6IGhvdmVyU3R5bGVzLFxuXHRcdFx0JzphY3RpdmUnOiBhY3RpdmVTdHlsZXMsXG5cdFx0fSxcblx0XHRhY3RpdmU6IGFjdGl2ZVN0eWxlcyxcblx0fTtcbn1cblxuZXhwb3J0cy5saW5rID0gKGNvbG9yKSA9PiB7XG5cdHN3aXRjaCAoY29sb3IpIHtcblx0XHRjYXNlICdkZWZhdWx0Jzpcblx0XHRcdHJldHVybiBidXR0b25MaW5rVmFyaWFudCh0aGVtZS5jb2xvci5saW5rLCB0aGVtZS5jb2xvci5saW5rSG92ZXIpO1xuXHRcdGNhc2UgJ2NhbmNlbCc6XG5cdFx0XHRyZXR1cm4gYnV0dG9uTGlua1ZhcmlhbnQodGhlbWUuY29sb3IuZ3JheTQwLCB0aGVtZS5jb2xvci5kYW5nZXIpO1xuXHRcdGNhc2UgJ2RlbGV0ZSc6XG5cdFx0XHRyZXR1cm4gYnV0dG9uTGlua0RlbGV0ZSgpO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gYnV0dG9uTGlua1ZhcmlhbnQodGhlbWUuY29sb3JbY29sb3JdLCB0aGVtZS5jb2xvcltjb2xvcl0pO1xuXHR9XG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XG5pbXBvcnQgY2xhc3NlcyBmcm9tICcuL3N0eWxlcyc7XG5cbmZ1bmN0aW9uIENlbnRlciAoe1xuXHRjbGFzc05hbWUsXG5cdGNvbXBvbmVudDogQ29tcG9uZW50LFxuXHRoZWlnaHQsXG5cdHN0eWxlLFxuXHQuLi5wcm9wc1xufSkge1xuXHRwcm9wcy5jbGFzc05hbWUgPSBjc3MoY2xhc3Nlcy5jZW50ZXIsIGNsYXNzTmFtZSk7XG5cdHByb3BzLnN0eWxlID0geyBoZWlnaHQsIC4uLnN0eWxlIH07XG5cblx0cmV0dXJuIDxDb21wb25lbnQgey4uLnByb3BzfSAvPjtcbn07XG5DZW50ZXIucHJvcFR5cGVzID0ge1xuXHRjb21wb25lbnQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuXHRcdFByb3BUeXBlcy5mdW5jLFxuXHRcdFByb3BUeXBlcy5zdHJpbmcsXG5cdF0pLFxuXHRoZWlnaHQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuXHRcdFByb3BUeXBlcy5udW1iZXIsXG5cdFx0UHJvcFR5cGVzLnN0cmluZyxcblx0XSksXG59O1xuQ2VudGVyLmRlZmF1bHRQcm9wcyA9IHtcblx0Y29tcG9uZW50OiAnZGl2Jyxcblx0aGVpZ2h0OiAnYXV0bycsXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENlbnRlcjtcbiIsIi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gQ2VudGVyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdGNlbnRlcjoge1xuXHRcdGRpc3BsYXk6ICdmbGV4Jyxcblx0XHRhbGlnbkl0ZW1zOiAnY2VudGVyJyxcblx0XHRqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG5cdH0sXG59O1xuIiwiaW1wb3J0IHRoZW1lIGZyb20gJy4uLy4uLy4uL3RoZW1lJztcbmltcG9ydCB7IGZhZGUsIGxpZ2h0ZW4gfSBmcm9tICcuLi8uLi8uLi91dGlscy9jb2xvcic7XG5cbmNvbnN0IGJhc2VDb2xvcnMgPSB7fTtcblsnZGFuZ2VyJywgJ2luZm8nLCAncHJpbWFyeScsICdzdWNjZXNzJywgJ3dhcm5pbmcnXS5mb3JFYWNoKGNvbG9yID0+IHtcblx0YmFzZUNvbG9yc1tjb2xvcl0gPSB7XG5cdFx0YmFja2dyb3VuZDogZmFkZSh0aGVtZS5jb2xvcltjb2xvcl0sIDEwKSxcblx0XHRiYWNrZ3JvdW5kQWN0aXZlOiBmYWRlKHRoZW1lLmNvbG9yW2NvbG9yXSwgMjApLFxuXHRcdGJhY2tncm91bmRIb3ZlcjogZmFkZSh0aGVtZS5jb2xvcltjb2xvcl0sIDE1KSxcblx0XHR0ZXh0OiB0aGVtZS5jb2xvcltjb2xvcl0sXG5cdH07XG59KTtcbmNvbnN0IGludmVydGVkQ29sb3JzID0ge307XG5bJ2RhbmdlcicsICdpbmZvJywgJ3ByaW1hcnknLCAnc3VjY2VzcycsICd3YXJuaW5nJ10uZm9yRWFjaChjb2xvciA9PiB7XG5cdGludmVydGVkQ29sb3JzW2NvbG9yICsgJ19faW52ZXJ0ZWQnXSA9IHtcblx0XHRiYWNrZ3JvdW5kOiB0aGVtZS5jb2xvcltjb2xvcl0sXG5cdFx0YmFja2dyb3VuZEFjdGl2ZTogbGlnaHRlbih0aGVtZS5jb2xvcltjb2xvcl0sIDUpLFxuXHRcdGJhY2tncm91bmRIb3ZlcjogbGlnaHRlbih0aGVtZS5jb2xvcltjb2xvcl0sIDE1KSxcblx0XHR0ZXh0OiAnd2hpdGUnLFxuXHR9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRkZWZhdWx0OiB7XG5cdFx0YmFja2dyb3VuZDogdGhlbWUuY29sb3IuZ3JheTEwLFxuXHRcdGJhY2tncm91bmRBY3RpdmU6IHRoZW1lLmNvbG9yLmdyYXkyMCxcblx0XHRiYWNrZ3JvdW5kSG92ZXI6IHRoZW1lLmNvbG9yLmdyYXkxNSxcblx0XHR0ZXh0OiB0aGVtZS5jb2xvci5ncmF5NjAsXG5cdH0sXG5cdC4uLmJhc2VDb2xvcnMsXG5cblx0Ly8gaW52ZXJ0ZWRcblx0ZGVmYXVsdF9faW52ZXJ0ZWQ6IHtcblx0XHRiYWNrZ3JvdW5kOiB0aGVtZS5jb2xvci5ncmF5NjAsXG5cdFx0YmFja2dyb3VuZEFjdGl2ZTogbGlnaHRlbih0aGVtZS5jb2xvci5ncmF5NjAsIDUpLFxuXHRcdGJhY2tncm91bmRIb3ZlcjogbGlnaHRlbih0aGVtZS5jb2xvci5ncmF5NjAsIDE1KSxcblx0XHR0ZXh0OiAnd2hpdGUnLFxuXHR9LFxuXHQuLi5pbnZlcnRlZENvbG9ycyxcbn07XG4iLCJpbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xuaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc2VzIGZyb20gJy4vc3R5bGVzJztcbmltcG9ydCBjb2xvcnMgZnJvbSAnLi9jb2xvcnMnO1xuXG5mdW5jdGlvbiBDaGlwICh7XG5cdGNsYXNzTmFtZSxcblx0Y2hpbGRyZW4sXG5cdGNvbG9yLFxuXHRpbnZlcnRlZCxcblx0bGFiZWwsXG5cdG9uQ2xlYXIsXG5cdG9uQ2xpY2ssXG5cdC4uLnByb3BzXG59KSB7XG5cdHByb3BzLmNsYXNzTmFtZSA9IGNzcyhcblx0XHRjbGFzc2VzLmNoaXAsXG5cdFx0Y2xhc3NOYW1lXG5cdCk7XG5cdGNvbnN0IGxhYmVsQ2xhc3NOYW1lID0gY3NzKFxuXHRcdGNsYXNzZXMuYnV0dG9uLFxuXHRcdGNsYXNzZXMubGFiZWwsXG5cdFx0Y2xhc3Nlc1snYnV0dG9uX18nICsgY29sb3IgKyAoaW52ZXJ0ZWQgPyAnX19pbnZlcnRlZCcgOiAnJyldXG5cdCk7XG5cdGNvbnN0IGNsZWFyQ2xhc3NOYW1lID0gY3NzKFxuXHRcdGNsYXNzZXMuYnV0dG9uLFxuXHRcdGNsYXNzZXMuY2xlYXIsXG5cdFx0Y2xhc3Nlc1snYnV0dG9uX18nICsgY29sb3IgKyAoaW52ZXJ0ZWQgPyAnX19pbnZlcnRlZCcgOiAnJyldXG5cdCk7XG5cblx0cmV0dXJuIChcblx0XHQ8ZGl2IHsuLi5wcm9wc30+XG5cdFx0XHQ8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBvbkNsaWNrPXtvbkNsaWNrfSBjbGFzc05hbWU9e2xhYmVsQ2xhc3NOYW1lfT5cblx0XHRcdFx0e2xhYmVsfVxuXHRcdFx0XHR7Y2hpbGRyZW59XG5cdFx0XHQ8L2J1dHRvbj5cblx0XHRcdHshIW9uQ2xlYXIgJiYgKFxuXHRcdFx0XHQ8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBvbkNsaWNrPXtvbkNsZWFyfSBjbGFzc05hbWU9e2NsZWFyQ2xhc3NOYW1lfT5cblx0XHRcdFx0XHQmdGltZXM7XG5cdFx0XHRcdDwvYnV0dG9uPlxuXHRcdFx0KX1cblx0XHQ8L2Rpdj5cblx0KTtcbn07XG5cbkNoaXAucHJvcFR5cGVzID0ge1xuXHRjb2xvcjogUHJvcFR5cGVzLm9uZU9mKE9iamVjdC5rZXlzKGNvbG9ycykpLmlzUmVxdWlyZWQsXG5cdGludmVydGVkOiBQcm9wVHlwZXMuYm9vbCxcblx0bGFiZWw6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcblx0b25DbGVhcjogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG5cdG9uQ2xpY2s6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxufTtcbkNoaXAuZGVmYXVsdFByb3BzID0ge1xuXHRjb2xvcjogJ2RlZmF1bHQnLFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDaGlwO1xuIiwiLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBBbGVydFxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8qIGVzbGludCBxdW90ZS1wcm9wczogW1wiZXJyb3JcIiwgXCJhcy1uZWVkZWRcIl0gKi9cblxuaW1wb3J0IGNvbG9ycyBmcm9tICcuL2NvbG9ycyc7XG5pbXBvcnQgdGhlbWUgZnJvbSAnLi4vLi4vLi4vdGhlbWUnO1xuaW1wb3J0IHsgYm9yZGVyTGVmdFJhZGl1cywgYm9yZGVyUmlnaHRSYWRpdXMgfSBmcm9tICcuLi8uLi8uLi91dGlscy9jc3MnO1xuXG4vLyBQcmVwYXJlIHZhcmlhbnRzXG5jb25zdCBjb2xvclZhcmlhbnRzID0ge307XG5PYmplY3Qua2V5cyhjb2xvcnMpLmZvckVhY2goY29sb3IgPT4ge1xuXHRjb25zdCBob3ZlclN0eWxlcyA9IHtcblx0XHRiYWNrZ3JvdW5kQ29sb3I6IGNvbG9yc1tjb2xvcl0uYmFja2dyb3VuZEhvdmVyLFxuXHR9O1xuXG5cdGNvbG9yVmFyaWFudHNbJ2J1dHRvbl9fJyArIGNvbG9yXSA9IHtcblx0XHRiYWNrZ3JvdW5kQ29sb3I6IGNvbG9yc1tjb2xvcl0uYmFja2dyb3VuZCxcblx0XHRjb2xvcjogY29sb3JzW2NvbG9yXS50ZXh0LFxuXG5cdFx0Jzpob3Zlcic6IGhvdmVyU3R5bGVzLFxuXHRcdCc6Zm9jdXMnOiBob3ZlclN0eWxlcyxcblx0XHQnOmFjdGl2ZSc6IHtcblx0XHRcdGJhY2tncm91bmRDb2xvcjogY29sb3JzW2NvbG9yXS5iYWNrZ3JvdW5kQWN0aXZlLFxuXHRcdH0sXG5cdH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdGNoaXA6IHtcblx0XHRkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcblx0XHRmb250U2l6ZTogdGhlbWUuZm9udC5zaXplLnNtYWxsLFxuXHRcdGZvbnRXZWlnaHQ6IDUwMCxcblx0XHRtYXJnaW5SaWdodDogJzAuNWVtJyxcblx0XHRvdmVyZmxvdzogJ2hpZGRlbicsXG5cdFx0bGluZUhlaWdodDogJzIuMmVtJyxcblx0fSxcblxuXHQvLyB0YWduYW1lc1xuXHRidXR0b246IHtcblx0XHRhcHBlYXJhbmNlOiAnbm9uZScsXG5cdFx0YmFja2dyb3VuZDogJ25vbmUnLFxuXHRcdGJvcmRlcjogJ25vbmUnLFxuXHRcdGN1cnNvcjogJ3BvaW50ZXInLFxuXHRcdGRpc3BsYXk6ICdibG9jaycsXG5cdFx0ZmxvYXQ6ICdsZWZ0Jyxcblx0XHRwYWRkaW5nOiAnMCAuOWVtJyxcblx0XHRvdXRsaW5lOiAnbm9uZScsXG5cblx0XHQvLyBtYWtlIHBpbGxzIC0gZXhhZ2dlcmF0ZSB0aGUgcGFkZGluZyB0b3dhcmQgdGhlIHJhZGlpIHNvIGl0IGxvb2tzIGV2ZW5cblx0XHQnOmZpcnN0LWNoaWxkJzoge1xuXHRcdFx0Li4uYm9yZGVyTGVmdFJhZGl1cygnM2VtJyksXG5cdFx0XHRwYWRkaW5nTGVmdDogJzEuMWVtJyxcblx0XHR9LFxuXHRcdCc6bGFzdC1jaGlsZCc6IHtcblx0XHRcdC4uLmJvcmRlclJpZ2h0UmFkaXVzKCczZW0nKSxcblx0XHRcdHBhZGRpbmdSaWdodDogJzEuMWVtJyxcblx0XHR9LFxuXHR9LFxuXG5cblx0Ly8gcHJvdmlkZSBzZXBhcmF0aW9uIGJldHdlZW4gdGhlIGxhYmVsIGFuZCBjbGVhciBidXR0b25zXG5cdC8vIGZsb2F0aW5nIHN0b3BzIHRoZSBtYXJnaW5zIGZyb20gY29sbGFwc2luZyBpbnRvIGVhY2hpbmdcblxuXHRsYWJlbDogeyBtYXJnaW5SaWdodDogMSB9LFxuXHRjbGVhcjogeyBtYXJnaW5MZWZ0OiAxIH0sXG5cblx0Ly8gY29sb3JzXG5cdC4uLmNvbG9yVmFyaWFudHMsXG59O1xuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcbmltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NlcyBmcm9tICcuL3N0eWxlcyc7XG5pbXBvcnQgc2l6ZXMgZnJvbSAnLi9zaXplcyc7XG5cbmZ1bmN0aW9uIENvbnRhaW5lciAoe1xuXHRjbGFzc05hbWUsXG5cdGNsZWFyRmxvYXRpbmdDaGlsZHJlbixcblx0Y29tcG9uZW50OiBDb21wb25lbnQsXG5cdHdpZHRoLFxuXHQuLi5wcm9wc1xufSkge1xuXHRwcm9wcy5jbGFzc05hbWUgPSBjc3MoXG5cdFx0Y2xhc3Nlcy5jb250YWluZXIsXG5cdFx0Y2xhc3Nlc1t3aWR0aF0sXG5cdFx0Y2xlYXJGbG9hdGluZ0NoaWxkcmVuID8gY2xhc3Nlcy5jbGVhcmZpeCA6IG51bGwsXG5cdFx0Y2xhc3NOYW1lXG5cdCk7XG5cblx0cmV0dXJuIDxDb21wb25lbnQgey4uLnByb3BzfSAvPjtcbn07XG5cbkNvbnRhaW5lci5wcm9wVHlwZXMgPSB7XG5cdGNsZWFyRmxvYXRpbmdDaGlsZHJlbjogUHJvcFR5cGVzLmJvb2wsXG5cdGNvbXBvbmVudDogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG5cdFx0UHJvcFR5cGVzLmZ1bmMsXG5cdFx0UHJvcFR5cGVzLnN0cmluZyxcblx0XSkuaXNSZXF1aXJlZCxcblx0d2lkdGg6IFByb3BUeXBlcy5vbmVPZihPYmplY3Qua2V5cyhzaXplcykpLmlzUmVxdWlyZWQsXG59O1xuQ29udGFpbmVyLmRlZmF1bHRQcm9wcyA9IHtcblx0Y29tcG9uZW50OiAnZGl2Jyxcblx0d2lkdGg6ICdsYXJnZScsXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENvbnRhaW5lcjtcbiIsImltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi90aGVtZSc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRzbWFsbDogdGhlbWUuY29udGFpbmVyLnNpemUuc21hbGwsXG5cdG1lZGl1bTogdGhlbWUuY29udGFpbmVyLnNpemUubWVkaXVtLFxuXHRsYXJnZTogdGhlbWUuY29udGFpbmVyLnNpemUubGFyZ2UsXG59O1xuIiwiLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBDb250YWluZXJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vKiBlc2xpbnQgcXVvdGUtcHJvcHM6IFtcImVycm9yXCIsIFwiYXMtbmVlZGVkXCJdICovXG5cbmltcG9ydCBzaXplcyBmcm9tICcuL3NpemVzJztcbmltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi90aGVtZSc7XG5cbi8vIFByZXBhcmUgc2l6ZXNcbmNvbnN0IHNpemVWYXJpYW50cyA9IHt9O1xuT2JqZWN0LmtleXMoc2l6ZXMpLmZvckVhY2goc2l6ZSA9PiB7XG5cdHNpemVWYXJpYW50c1tzaXplXSA9IHtcblx0XHRtYXhXaWR0aDogc2l6ZXNbc2l6ZV0sXG5cdH07XG59KTtcblxuLypcblx0TWljcm8gY2xlYXJmaXggaGFja1xuXHQxLlx0VGhlIHNwYWNlIGNvbnRlbnQgaXMgb25lIHdheSB0byBhdm9pZCBhbiBPcGVyYSBidWcgd2hlbiB0aGVcblx0XHRcdGNvbnRlbnRlZGl0YWJsZSBhdHRyaWJ1dGUgaXMgaW5jbHVkZWQgYW55d2hlcmUgZWxzZSBpbiB0aGUgZG9jdW1lbnQuXG5cdFx0XHRPdGhlcndpc2UgaXQgY2F1c2VzIHNwYWNlIHRvIGFwcGVhciBhdCB0aGUgdG9wIGFuZCBib3R0b20gb2YgZWxlbWVudHNcblx0XHRcdHRoYXQgYXJlIGNsZWFyZml4ZWQuXG5cdDIuXHRUaGUgdXNlIG9mIGB0YWJsZWAgcmF0aGVyIHRoYW4gYGJsb2NrYCBpcyBvbmx5IG5lY2Vzc2FyeSBpZiB1c2luZ1xuXHRcdFx0YDpiZWZvcmVgIHRvIGNvbnRhaW4gdGhlIHRvcC1tYXJnaW5zIG9mIGNoaWxkIGVsZW1lbnRzLlxuKi9cbmNvbnN0IGNsZWFyZml4U3R5bGVzID0ge1xuXHRjbGVhcjogJ2JvdGgnLFxuXHRjb250ZW50OiAnXCIgXCInLCAvLyAxXG5cdGRpc3BsYXk6ICd0YWJsZScsIC8vIDJcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRjb250YWluZXI6IHtcblx0XHRtYXJnaW5MZWZ0OiAnYXV0bycsXG5cdFx0bWFyZ2luUmlnaHQ6ICdhdXRvJyxcblx0XHRwYWRkaW5nTGVmdDogdGhlbWUuY29udGFpbmVyLmd1dHRlcixcblx0XHRwYWRkaW5nUmlnaHQ6IHRoZW1lLmNvbnRhaW5lci5ndXR0ZXIsXG5cdH0sXG5cblx0Ly8gY2xlYXIgZmxvYXRpbmcgY2hpbGRyZW5cblx0Y2xlYXJmaXg6IHtcblx0XHQnOmJlZm9yZSc6IGNsZWFyZml4U3R5bGVzLFxuXHRcdCc6YWZ0ZXInOiBjbGVhcmZpeFN0eWxlcyxcblx0fSxcblxuXHQvLyBzaXplc1xuXHQuLi5zaXplVmFyaWFudHMsXG59O1xuIiwiLyogZXNsaW50IHF1b3RlLXByb3BzOiBbXCJlcnJvclwiLCBcImFzLW5lZWRlZFwiXSAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vQnV0dG9uJztcblxuZnVuY3Rpb24gRHJvcGRvd25CdXR0b24gKHsgY2hpbGRyZW4sIC4uLnByb3BzIH0pIHtcblx0cmV0dXJuIChcblx0XHQ8QnV0dG9uIHsuLi5wcm9wc30+XG5cdFx0XHR7Y2hpbGRyZW59XG5cdFx0XHQ8c3BhbiBjbGFzc05hbWU9e2NzcyhjbGFzc2VzLmFycm93KX0gLz5cblx0XHQ8L0J1dHRvbj5cblx0KTtcbn07XG5cbi8vIE5PVEVcbi8vIDE6IHRha2UgYWR2YW50YWdlIG9mIGBjdXJyZW50Q29sb3JgIGJ5IGxlYXZpbmcgYm9yZGVyIHRvcCBjb2xvciB1bmRlZmluZWRcbi8vIDI6IGV2ZW4gdGhvdWdoIHRoZSBhcnJvdyBpcyB2ZXJ0aWNhbGx5IGNlbnRlcmVkLCB2aXN1YWxseSBpdCBhcHBlYXJzIHRvbyBsb3dcbi8vICAgIGJlY2F1c2Ugb2YgbG93ZXJjYXNlIGNoYXJhY3RlcnMgYmVzaWRlIGl0XG5jb25zdCBjbGFzc2VzID0ge1xuXHRhcnJvdzoge1xuXHRcdGJvcmRlckxlZnQ6ICcwLjNlbSBzb2xpZCB0cmFuc3BhcmVudCcsXG5cdFx0Ym9yZGVyUmlnaHQ6ICcwLjNlbSBzb2xpZCB0cmFuc3BhcmVudCcsXG5cdFx0Ym9yZGVyVG9wOiAnMC4zZW0gc29saWQnLCAvLyAxXG5cdFx0ZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG5cdFx0aGVpZ2h0OiAwLFxuXHRcdG1hcmdpblRvcDogJy0wLjEyNWVtJywgLy8gMlxuXHRcdHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuXHRcdHdpZHRoOiAwLFxuXG5cdFx0Ly8gYWRkIHNwYWNpbmdcblx0XHQnOmZpcnN0LWNoaWxkJzoge1xuXHRcdFx0bWFyZ2luUmlnaHQ6ICcwLjVlbScsXG5cdFx0fSxcblx0XHQnOmxhc3QtY2hpbGQnOiB7XG5cdFx0XHRtYXJnaW5MZWZ0OiAnMC41ZW0nLFxuXHRcdH0sXG5cdH0sXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IERyb3Bkb3duQnV0dG9uO1xuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc2VzIGZyb20gJy4vc3R5bGVzJztcblxuY2xhc3MgRm9ybSBleHRlbmRzIENvbXBvbmVudCB7XG5cdGdldENoaWxkQ29udGV4dCAoKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGZvcm1MYXlvdXQ6IHRoaXMucHJvcHMubGF5b3V0LFxuXHRcdFx0bGFiZWxXaWR0aDogdGhpcy5wcm9wcy5sYWJlbFdpZHRoLFxuXHRcdH07XG5cdH1cblx0cmVuZGVyICgpIHtcblx0XHQvLyBOT1RFIGBsYWJlbFdpZHRoYCBpcyBkZWNsYXJlZCB0byByZW1vdmUgaXQgZnJvbSBgcHJvcHNgLCB0aG91Z2ggbmV2ZXIgdXNlZFxuXHRcdGNvbnN0IHtcblx0XHRcdGNsYXNzTmFtZSxcblx0XHRcdGNvbXBvbmVudDogQ29tcG9uZW50LFxuXHRcdFx0bGFiZWxXaWR0aCwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXHRcdFx0bGF5b3V0LFxuXHRcdFx0Li4ucHJvcHNcblx0XHR9ID0gdGhpcy5wcm9wcztcblxuXHRcdHByb3BzLmNsYXNzTmFtZSA9IGNzcyhcblx0XHRcdGNsYXNzZXMuRm9ybSxcblx0XHRcdGNsYXNzZXNbJ0Zvcm1fXycgKyBsYXlvdXRdLFxuXHRcdFx0Y2xhc3NOYW1lXG5cdFx0KTtcblxuXHRcdHJldHVybiA8Q29tcG9uZW50IHsuLi5wcm9wc30gLz47XG5cdH1cbn07XG5cbkZvcm0uY2hpbGRDb250ZXh0VHlwZXMgPSB7XG5cdGZvcm1MYXlvdXQ6IFByb3BUeXBlcy5vbmVPZihbJ2Jhc2ljJywgJ2hvcml6b250YWwnLCAnaW5saW5lJ10pLFxuXHRsYWJlbFdpZHRoOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcblx0XHRQcm9wVHlwZXMubnVtYmVyLFxuXHRcdFByb3BUeXBlcy5zdHJpbmcsXG5cdF0pLFxufTtcbkZvcm0ucHJvcFR5cGVzID0ge1xuXHRjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcblx0Y29tcG9uZW50OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcblx0XHRQcm9wVHlwZXMuc3RyaW5nLFxuXHRcdFByb3BUeXBlcy5mdW5jLFxuXHRdKSxcblx0bGF5b3V0OiBQcm9wVHlwZXMub25lT2YoWydiYXNpYycsICdob3Jpem9udGFsJywgJ2lubGluZSddKSxcbn07XG5Gb3JtLmRlZmF1bHRQcm9wcyA9IHtcblx0Y29tcG9uZW50OiAnZm9ybScsXG5cdGxheW91dDogJ2Jhc2ljJyxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRm9ybTtcbiIsIi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gRm9ybVxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRGb3JtOiB7fSxcbn07XG4iLCJpbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgY2xhc3NlcyBmcm9tICcuL3N0eWxlcyc7XG5pbXBvcnQgRm9ybUxhYmVsIGZyb20gJy4uL0Zvcm1MYWJlbCc7XG5cbmNsYXNzIEZvcm1GaWVsZCBleHRlbmRzIENvbXBvbmVudCB7XG5cdGNvbnN0cnVjdG9yICgpIHtcblx0XHRzdXBlcigpO1xuXHRcdHRoaXMuZm9ybUZpZWxkSWQgPSBnZW5lcmF0ZUlkKCk7XG5cdH1cblx0Z2V0Q2hpbGRDb250ZXh0ICgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Zm9ybUZpZWxkSWQ6IHRoaXMuZm9ybUZpZWxkSWQsXG5cdFx0fTtcblx0fVxuXHRyZW5kZXIgKCkge1xuXHRcdGNvbnN0IHsgZm9ybUxheW91dCA9ICdiYXNpYycsIGxhYmVsV2lkdGggfSA9IHRoaXMuY29udGV4dDtcblx0XHRjb25zdCB7XG5cdFx0XHRjc3NTdHlsZXMsXG5cdFx0XHRjaGlsZHJlbixcblx0XHRcdGNsYXNzTmFtZSxcblx0XHRcdGNyb3BMYWJlbCxcblx0XHRcdGh0bWxGb3IsXG5cdFx0XHRsYWJlbCxcblx0XHRcdG9mZnNldEFic2VudExhYmVsLFxuXHRcdFx0Li4ucHJvcHNcblx0XHR9ID0gdGhpcy5wcm9wcztcblxuXHRcdHByb3BzLmNsYXNzTmFtZSA9IGNzcyhcblx0XHRcdGNsYXNzZXMuRm9ybUZpZWxkLFxuXHRcdFx0Y2xhc3Nlc1snRm9ybUZpZWxkLS1mb3JtLWxheW91dC0nICsgZm9ybUxheW91dF0sXG5cdFx0XHRvZmZzZXRBYnNlbnRMYWJlbCA/IGNsYXNzZXNbJ0Zvcm1GaWVsZC0tb2Zmc2V0LWFic2VudC1sYWJlbCddIDogbnVsbCxcblx0XHRcdGNzc1N0eWxlc1xuXHRcdCk7XG5cdFx0aWYgKGNsYXNzTmFtZSkge1xuXHRcdFx0cHJvcHMuY2xhc3NOYW1lICs9ICgnICcgKyBjbGFzc05hbWUpO1xuXHRcdH1cblx0XHRpZiAob2Zmc2V0QWJzZW50TGFiZWwgJiYgbGFiZWxXaWR0aCkge1xuXHRcdFx0cHJvcHMuc3R5bGUgPSB7XG5cdFx0XHRcdHBhZGRpbmdMZWZ0OiBsYWJlbFdpZHRoLFxuXHRcdFx0XHQuLi5wcm9wcy5zdHlsZSxcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gZWxlbWVudHNcblx0XHRjb25zdCBjb21wb25lbnRMYWJlbCA9IGxhYmVsID8gKFxuXHRcdFx0PEZvcm1MYWJlbCBodG1sRm9yPXtodG1sRm9yfSBjcm9wVGV4dD17Y3JvcExhYmVsfT5cblx0XHRcdFx0e2xhYmVsfVxuXHRcdFx0PC9Gb3JtTGFiZWw+XG5cdFx0KSA6IG51bGw7XG5cblx0XHRyZXR1cm4gKFxuXHRcdFx0PGRpdiB7Li4ucHJvcHN9IGh0bWxGb3I9e2h0bWxGb3J9PlxuXHRcdFx0XHR7Y29tcG9uZW50TGFiZWx9XG5cdFx0XHRcdHtjaGlsZHJlbn1cblx0XHRcdDwvZGl2PlxuXHRcdCk7XG5cdH1cbn07XG5cbmNvbnN0IHN0eWxlc1NoYXBlID0ge1xuXHRfZGVmaW5pdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcblx0X25hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG59O1xuXG5Gb3JtRmllbGQuY29udGV4dFR5cGVzID0ge1xuXHRmb3JtTGF5b3V0OiBQcm9wVHlwZXMub25lT2YoWydiYXNpYycsICdob3Jpem9udGFsJywgJ2lubGluZSddKSxcblx0bGFiZWxXaWR0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG5cdFx0UHJvcFR5cGVzLm51bWJlcixcblx0XHRQcm9wVHlwZXMuc3RyaW5nLFxuXHRdKSxcbn07XG5Gb3JtRmllbGQuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG5cdGZvcm1GaWVsZElkOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcbkZvcm1GaWVsZC5wcm9wVHlwZXMgPSB7XG5cdGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblx0Y3JvcExhYmVsOiBQcm9wVHlwZXMuYm9vbCxcblx0Y3NzU3R5bGVzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcblx0XHRQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc2hhcGUoc3R5bGVzU2hhcGUpKSxcblx0XHRQcm9wVHlwZXMuc2hhcGUoc3R5bGVzU2hhcGUpLFxuXHRdKSxcblx0aHRtbEZvcjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcblx0bGFiZWw6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG5cdG9mZnNldEFic2VudExhYmVsOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbn07XG5cbmZ1bmN0aW9uIGdlbmVyYXRlSWQgKCkge1xuXHRyZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDkpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGb3JtRmllbGQ7XG4iLCIvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEZvcm0gRmllbGRcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5pbXBvcnQgdGhlbWUgZnJvbSAnLi4vLi4vLi4vdGhlbWUnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0J0Zvcm1GaWVsZCc6IHtcblx0XHRtYXJnaW5Cb3R0b206ICcxZW0nLFxuXHRcdHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuXHR9LFxuXG5cdC8vIHdoZW4gaW5zaWRlIGEgaG9yaXpvbnRhbCBmb3JtXG5cblx0J0Zvcm1GaWVsZC0tZm9ybS1sYXlvdXQtaG9yaXpvbnRhbCc6IHtcblx0XHRbYEBtZWRpYSAobWluLXdpZHRoOiAke3RoZW1lLmJyZWFrcG9pbnQudGFibGV0TGFuZHNjYXBlTWlufSlgXToge1xuXHRcdFx0ZGlzcGxheTogJ3RhYmxlJyxcblx0XHRcdHRhYmxlTGF5b3V0OiAnZml4ZWQnLFxuXHRcdFx0d2lkdGg6ICcxMDAlJyxcblx0XHR9LFxuXHR9LFxuXG5cdC8vIGluc2lkZSBob3Jpem9udGFsIGZvcm1cblx0Ly8gdHlwaWNhbGx5IGZvciB1c2Ugd2l0aCBzdWJtaXQgYnV0dG9uIGluc2lkZVxuXHQnRm9ybUZpZWxkLS1vZmZzZXQtYWJzZW50LWxhYmVsJzoge1xuXHRcdHBhZGRpbmdMZWZ0OiB0aGVtZS5mb3JtLmxhYmVsLndpZHRoLFxuXHR9LFxuXG5cdC8vIHdoZW4gaW5zaWRlIGFuIGlubGluZSBmb3JtXG5cblx0J0Zvcm1GaWVsZC0tZm9ybS1sYXlvdXQtaW5saW5lJzoge1xuXHRcdCdkaXNwbGF5JzogJ2lubGluZS1ibG9jaycsXG5cdFx0J3BhZGRpbmdMZWZ0JzogJzAuMjVlbScsXG5cdFx0J3BhZGRpbmdSaWdodCc6ICcwLjI1ZW0nLFxuXHRcdCd2ZXJ0aWNhbEFsaWduJzogJ3RvcCcsXG5cblx0XHQnOmZpcnN0LWNoaWxkJzogeyBwYWRkaW5nTGVmdDogMCB9LFxuXHRcdCc6bGFzdC1jaGlsZCc6IHsgcGFkZGluZ1JpZ2h0OiAwIH0sXG5cdH0sXG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcbmltcG9ydCBjbGFzc2VzIGZyb20gJy4vc3R5bGVzJztcbmltcG9ydCBjb25jYXRDbGFzc25hbWVzIGZyb20gJy4uLy4uLy4uL3V0aWxzL2NvbmNhdENsYXNzbmFtZXMnO1xuaW1wb3J0IElucHV0Tm9lZGl0IGZyb20gJy4vbm9lZGl0JztcblxuLy8gTk9URSBtdXN0IE5PVCBiZSBmdW5jdGlvbmFsIGNvbXBvbmVudCB0byBhbGxvdyBgcmVmc2BcblxuY2xhc3MgRm9ybUlucHV0IGV4dGVuZHMgQ29tcG9uZW50IHtcblx0Ymx1ciAoKSB7XG5cdFx0dGhpcy50YXJnZXQuYmx1cigpO1xuXHR9XG5cdGZvY3VzICgpIHtcblx0XHR0aGlzLnRhcmdldC5mb2N1cygpO1xuXHR9XG5cdHJlbmRlciAoKSB7XG5cdFx0Y29uc3Qge1xuXHRcdFx0Y3NzU3R5bGVzLFxuXHRcdFx0Y2xhc3NOYW1lLFxuXHRcdFx0ZGlzYWJsZWQsXG5cdFx0XHRpZCxcblx0XHRcdG11bHRpbGluZSxcblx0XHRcdG5vZWRpdCxcblx0XHRcdHNpemUsXG5cdFx0XHQuLi5wcm9wc1xuXHRcdH0gPSB0aGlzLnByb3BzO1xuXG5cdFx0Ly8gTk9URSByZXR1cm4gYSBkaWZmZXJlbnQgY29tcG9uZW50IGZvciBgbm9lZGl0YFxuXHRcdGlmIChub2VkaXQpIHJldHVybiA8SW5wdXROb2VkaXQgey4uLnRoaXMucHJvcHN9IC8+O1xuXG5cdFx0Y29uc3QgeyBmb3JtRmllbGRJZCwgZm9ybUxheW91dCB9ID0gdGhpcy5jb250ZXh0O1xuXG5cdFx0cHJvcHMuaWQgPSBpZCB8fCBmb3JtRmllbGRJZDtcblx0XHRwcm9wcy5jbGFzc05hbWUgPSBjc3MoXG5cdFx0XHRjbGFzc2VzLkZvcm1JbnB1dCxcblx0XHRcdGNsYXNzZXNbJ0Zvcm1JbnB1dF9fc2l6ZS0tJyArIHNpemVdLFxuXHRcdFx0ZGlzYWJsZWQgPyBjbGFzc2VzWydGb3JtSW5wdXQtLWRpc2FibGVkJ10gOiBudWxsLFxuXHRcdFx0Zm9ybUxheW91dCA/IGNsYXNzZXNbJ0Zvcm1JbnB1dC0tZm9ybS1sYXlvdXQtJyArIGZvcm1MYXlvdXRdIDogbnVsbCxcblx0XHRcdC4uLmNvbmNhdENsYXNzbmFtZXMoY3NzU3R5bGVzKVxuXHRcdCk7XG5cdFx0aWYgKGNsYXNzTmFtZSkge1xuXHRcdFx0cHJvcHMuY2xhc3NOYW1lICs9ICgnICcgKyBjbGFzc05hbWUpO1xuXHRcdH1cblxuXHRcdGNvbnN0IHNldFJlZiA9IChuKSA9PiAodGhpcy50YXJnZXQgPSBuKTtcblx0XHRjb25zdCBUYWcgPSBtdWx0aWxpbmUgPyAndGV4dGFyZWEnIDogJ2lucHV0JztcblxuXHRcdHJldHVybiAoXG5cdFx0XHQ8VGFnXG5cdFx0XHRcdHJlZj17c2V0UmVmfVxuXHRcdFx0XHRkaXNhYmxlZD17cHJvcHMuZGlzYWJsZWR9XG5cdFx0XHRcdHsuLi5wcm9wc31cblx0XHRcdC8+XG5cdFx0KTtcblx0fVxufTtcblxuY29uc3Qgc3R5bGVzU2hhcGUgPSB7XG5cdF9kZWZpbml0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuXHRfbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbn07XG5cbkZvcm1JbnB1dC5wcm9wVHlwZXMgPSB7XG5cdGNzc1N0eWxlczogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG5cdFx0UHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnNoYXBlKHN0eWxlc1NoYXBlKSksXG5cdFx0UHJvcFR5cGVzLnNoYXBlKHN0eWxlc1NoYXBlKSxcblx0XSksXG5cdG11bHRpbGluZTogUHJvcFR5cGVzLmJvb2wsXG5cdHNpemU6IFByb3BUeXBlcy5vbmVPZihbJ2RlZmF1bHQnLCAnc21hbGwnLCAnbGFyZ2UnXSksXG5cdHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG59O1xuRm9ybUlucHV0LmRlZmF1bHRQcm9wcyA9IHtcblx0c2l6ZTogJ2RlZmF1bHQnLFxuXHR0eXBlOiAndGV4dCcsXG59O1xuRm9ybUlucHV0LmNvbnRleHRUeXBlcyA9IHtcblx0Zm9ybUxheW91dDogUHJvcFR5cGVzLm9uZU9mKFsnYmFzaWMnLCAnaG9yaXpvbnRhbCcsICdpbmxpbmUnXSksXG5cdGZvcm1GaWVsZElkOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGb3JtSW5wdXQ7XG4iLCJpbXBvcnQgUmVhY3QsIHsgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcblxuaW1wb3J0IHRoZW1lIGZyb20gJy4uLy4uLy4uL3RoZW1lJztcbmltcG9ydCB7IGZhZGUgfSBmcm9tICcuLi8uLi8uLi91dGlscy9jb2xvcic7XG5cbi8qIGVzbGludCBxdW90ZS1wcm9wczogW1wiZXJyb3JcIiwgXCJhcy1uZWVkZWRcIl0gKi9cblxuZnVuY3Rpb24gRm9ybUlucHV0Tm9lZGl0ICh7XG5cdGNsYXNzTmFtZSxcblx0Y29tcG9uZW50OiBDb21wb25lbnQsXG5cdGNyb3BUZXh0LFxuXHRtdWx0aWxpbmUsXG5cdG5vZWRpdCwgLy8gTk9URSBub3QgdXNlZCwganVzdCByZW1vdmVkIGZyb20gcHJvcHNcblx0dHlwZSxcblx0Li4ucHJvcHNcbn0pIHtcblx0cHJvcHMuY2xhc3NOYW1lID0gY3NzKFxuXHRcdGNsYXNzZXMubm9lZGl0LFxuXHRcdGNyb3BUZXh0ID8gY2xhc3Nlcy5jcm9wVGV4dCA6IG51bGwsXG5cdFx0bXVsdGlsaW5lID8gY2xhc3Nlcy5tdWx0aWxpbmUgOiBudWxsLFxuXHRcdChwcm9wcy5ocmVmIHx8IHByb3BzLm9uQ2xpY2spID8gY2xhc3Nlcy5hbmNob3IgOiBudWxsLFxuXHRcdGNsYXNzTmFtZVxuXHQpO1xuXG5cdHJldHVybiA8Q29tcG9uZW50IHsuLi5wcm9wc30gLz47XG59O1xuXG5Gb3JtSW5wdXROb2VkaXQucHJvcFR5cGVzID0ge1xuXHRjb21wb25lbnQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuXHRcdFByb3BUeXBlcy5zdHJpbmcsXG5cdFx0UHJvcFR5cGVzLmZ1bmMsXG5cdF0pLFxuXHRjcm9wVGV4dDogUHJvcFR5cGVzLmJvb2wsXG59O1xuRm9ybUlucHV0Tm9lZGl0LmRlZmF1bHRQcm9wcyA9IHtcblx0Y29tcG9uZW50OiAnc3BhbicsXG59O1xuXG5jb25zdCBhbmNob3JIb3ZlckFuZEZvY3VzU3R5bGVzID0ge1xuXHRiYWNrZ3JvdW5kQ29sb3I6IGZhZGUodGhlbWUuY29sb3IubGluaywgMTApLFxuXHRib3JkZXJDb2xvcjogZmFkZSh0aGVtZS5jb2xvci5saW5rLCAxMCksXG5cdGNvbG9yOiB0aGVtZS5jb2xvci5saW5rLFxuXHRvdXRsaW5lOiAnbm9uZScsXG5cdHRleHREZWNvcmF0aW9uOiAndW5kZXJsaW5lJyxcbn07XG5cbmNvbnN0IGNsYXNzZXMgPSB7XG5cdG5vZWRpdDoge1xuXHRcdGFwcGVhcmFuY2U6ICdub25lJyxcblx0XHRiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLmlucHV0LmJhY2tncm91bmQubm9lZGl0LFxuXHRcdGJhY2tncm91bmRJbWFnZTogJ25vbmUnLFxuXHRcdGJvcmRlckNvbG9yOiB0aGVtZS5pbnB1dC5ib3JkZXIuY29sb3Iubm9lZGl0LFxuXHRcdGJvcmRlclJhZGl1czogdGhlbWUuaW5wdXQuYm9yZGVyLnJhZGl1cyxcblx0XHRib3JkZXJTdHlsZTogJ3NvbGlkJyxcblx0XHRib3JkZXJXaWR0aDogdGhlbWUuaW5wdXQuYm9yZGVyLndpZHRoLFxuXHRcdGNvbG9yOiB0aGVtZS5jb2xvci5ncmF5ODAsXG5cdFx0ZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG5cdFx0bGluZUhlaWdodDogdGhlbWUuaW5wdXQubGluZUhlaWdodCxcblx0XHRwYWRkaW5nOiBgMCAke3RoZW1lLmlucHV0LnBhZGRpbmdIb3Jpem9udGFsfWAsXG5cdFx0dHJhbnNpdGlvbjogJ2JvcmRlci1jb2xvciBlYXNlLWluLW91dCAwLjE1cywgYm94LXNoYWRvdyBlYXNlLWluLW91dCAwLjE1cycsXG5cdFx0dmVydGljYWxBbGlnbjogJ21pZGRsZScsXG5cblx0XHQvLyBwcmV2ZW50IGVtcHR5IGlucHV0cyBmcm9tIGNvbGxhcHNpbmcgYnkgYWRkaW5nIGNvbnRlbnRcblx0XHQnOmVtcHR5OmJlZm9yZSc6IHtcblx0XHRcdGNvbG9yOiB0aGVtZS5jb2xvci5ncmF5NDAsXG5cdFx0XHRjb250ZW50OiAnXCIobm8gdmFsdWUpXCInLFxuXHRcdH0sXG5cdH0sXG5cblx0bXVsdGlsaW5lOiB7XG5cdFx0ZGlzcGxheTogJ2Jsb2NrJyxcblx0XHRoZWlnaHQ6ICdhdXRvJyxcblx0XHRsaW5lSGVpZ2h0OiAnMS40Jyxcblx0XHRwYWRkaW5nQm90dG9tOiAnMC42ZW0nLFxuXHRcdHBhZGRpbmdUb3A6ICcwLjZlbScsXG5cdH0sXG5cblx0Ly8gaW5kaWNhdGUgY2xpY2thYmlsaXR5IHdoZW4gdXNpbmcgYW4gYW5jaG9yXG5cdGFuY2hvcjoge1xuXHRcdGJhY2tncm91bmRDb2xvcjogZmFkZSh0aGVtZS5jb2xvci5saW5rLCA1KSxcblx0XHRib3JkZXJDb2xvcjogZmFkZSh0aGVtZS5jb2xvci5saW5rLCAxMCksXG5cdFx0Y29sb3I6IHRoZW1lLmNvbG9yLmxpbmssXG5cdFx0bWFyZ2luUmlnaHQ6IDUsXG5cdFx0bWluV2lkdGg6IDAsXG5cdFx0dGV4dERlY29yYXRpb246ICdub25lJyxcblxuXHRcdCc6aG92ZXInOiBhbmNob3JIb3ZlckFuZEZvY3VzU3R5bGVzLFxuXHRcdCc6Zm9jdXMnOiBhbmNob3JIb3ZlckFuZEZvY3VzU3R5bGVzLFxuXHR9LFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGb3JtSW5wdXROb2VkaXQ7XG4iLCIvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEZvcm0gSW5wdXRcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5pbXBvcnQgdGhlbWUgZnJvbSAnLi4vLi4vLi4vdGhlbWUnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0J0Zvcm1JbnB1dCc6IHtcblx0XHQnYXBwZWFyYW5jZSc6ICdub25lJyxcblx0XHQnYmFja2dyb3VuZENvbG9yJzogdGhlbWUuaW5wdXQuYmFja2dyb3VuZC5kZWZhdWx0LFxuXHRcdCdiYWNrZ3JvdW5kSW1hZ2UnOiAnbm9uZScsXG5cdFx0J2JvcmRlckNvbG9yJzogdGhlbWUuaW5wdXQuYm9yZGVyLmNvbG9yLmRlZmF1bHQsXG5cdFx0J2JvcmRlclJhZGl1cyc6IHRoZW1lLmlucHV0LmJvcmRlci5yYWRpdXMsXG5cdFx0J2JvcmRlclN0eWxlJzogJ3NvbGlkJyxcblx0XHQnYm9yZGVyV2lkdGgnOiB0aGVtZS5pbnB1dC5ib3JkZXIud2lkdGgsXG5cdFx0J2JveFNoYWRvdyc6IHRoZW1lLmlucHV0LmJveFNoYWRvdyxcblx0XHQnY29sb3InOiAnaW5oZXJpdCcsIC8vIEZJWE1FXG5cdFx0J2Rpc3BsYXknOiAnYmxvY2snLFxuXHRcdCdoZWlnaHQnOiB0aGVtZS5pbnB1dC5oZWlnaHQsXG5cdFx0J2xpbmVIZWlnaHQnOiB0aGVtZS5pbnB1dC5saW5lSGVpZ2h0LFxuXHRcdCdwYWRkaW5nJzogYDAgJHt0aGVtZS5pbnB1dC5wYWRkaW5nSG9yaXpvbnRhbH1gLFxuXHRcdCd0cmFuc2l0aW9uJzogJ2JvcmRlci1jb2xvciBlYXNlLWluLW91dCAwLjE1cywgYm94LXNoYWRvdyBlYXNlLWluLW91dCAwLjE1cycsXG5cdFx0J3dpZHRoJzogJzEwMCUnLFxuXG5cdFx0Jzpob3Zlcic6IHtcblx0XHRcdGJvcmRlckNvbG9yOiB0aGVtZS5pbnB1dC5ib3JkZXIuY29sb3IuaG92ZXIsXG5cdFx0XHRvdXRsaW5lOiAwLFxuXHRcdH0sXG5cdFx0Jzpmb2N1cyc6IHtcblx0XHRcdGJvcmRlckNvbG9yOiB0aGVtZS5pbnB1dC5ib3JkZXIuY29sb3IuZm9jdXMsXG5cdFx0XHRib3hTaGFkb3c6IHRoZW1lLmlucHV0LmJveFNoYWRvd0ZvY3VzLFxuXHRcdFx0b3V0bGluZTogMCxcblx0XHR9LFxuXHR9LFxuXHQnRm9ybUlucHV0LS1kaXNhYmxlZCc6IHtcblx0XHRiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLmlucHV0LmJhY2tncm91bmQuZGlzYWJsZWQsXG5cdFx0cG9pbnRlckV2ZW50czogJ25vbmUnLFxuXHR9LFxuXG5cdC8vIHNpemVzXG5cdCdGb3JtSW5wdXRfX3NpemUtLXNtYWxsJzoge1xuXHRcdGZvbnRTaXplOiB0aGVtZS5mb250LnNpemUuc21hbGwsXG5cdH0sXG5cdCdGb3JtSW5wdXRfX3NpemUtLWxhcmdlJzoge1xuXHRcdGZvbnRTaXplOiB0aGVtZS5mb250LnNpemUubGFyZ2UsXG5cdH0sXG59O1xuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcbmltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NlcyBmcm9tICcuL3N0eWxlcyc7XG5cbmZ1bmN0aW9uIEZvcm1MYWJlbCAoe1xuXHRjc3NTdHlsZXMsXG5cdGNsYXNzTmFtZSxcblx0Y29tcG9uZW50OiBDb21wb25lbnQsXG5cdGNyb3BUZXh0LFxuXHRodG1sRm9yLFxuXHQuLi5wcm9wc1xufSxcbntcblx0Zm9ybUZpZWxkSWQsXG5cdGZvcm1MYXlvdXQsXG5cdGxhYmVsV2lkdGgsXG59KSB7XG5cdHByb3BzLmh0bWxGb3IgPSBodG1sRm9yIHx8IGZvcm1GaWVsZElkO1xuXHRwcm9wcy5jbGFzc05hbWUgPSBjc3MoXG5cdFx0Y2xhc3Nlcy5Gb3JtTGFiZWwsXG5cdFx0Zm9ybUxheW91dCA/IGNsYXNzZXNbJ0Zvcm1MYWJlbC0tZm9ybS1sYXlvdXQtJyArIGZvcm1MYXlvdXRdIDogbnVsbCxcblx0XHRjcm9wVGV4dCA/IGNsYXNzZXNbJ0Zvcm1MYWJlbC0tY3JvcC10ZXh0J10gOiBudWxsLFxuXHRcdGNzc1N0eWxlc1xuXHQpO1xuXHRpZiAoY2xhc3NOYW1lKSB7XG5cdFx0cHJvcHMuY2xhc3NOYW1lICs9ICgnICcgKyBjbGFzc05hbWUpO1xuXHR9XG5cdGlmIChsYWJlbFdpZHRoKSB7XG5cdFx0cHJvcHMuc3R5bGUgPSB7XG5cdFx0XHR3aWR0aDogbGFiZWxXaWR0aCxcblx0XHRcdC4uLnByb3BzLnN0eWxlLFxuXHRcdH07XG5cdH1cblxuXHRyZXR1cm4gPENvbXBvbmVudCB7Li4ucHJvcHN9IC8+O1xufTtcblxuY29uc3Qgc3R5bGVzU2hhcGUgPSB7XG5cdF9kZWZpbml0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuXHRfbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbn07XG5cbkZvcm1MYWJlbC5wcm9wVHlwZXMgPSB7XG5cdGNvbXBvbmVudDogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG5cdFx0UHJvcFR5cGVzLnN0cmluZyxcblx0XHRQcm9wVHlwZXMuZnVuYyxcblx0XSksXG5cdGNyb3BUZXh0OiBQcm9wVHlwZXMuYm9vbCxcblx0Y3NzU3R5bGVzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcblx0XHRQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc2hhcGUoc3R5bGVzU2hhcGUpKSxcblx0XHRQcm9wVHlwZXMuc2hhcGUoc3R5bGVzU2hhcGUpLFxuXHRdKSxcbn07XG5Gb3JtTGFiZWwuZGVmYXVsdFByb3BzID0ge1xuXHRjb21wb25lbnQ6ICdsYWJlbCcsXG59O1xuRm9ybUxhYmVsLmNvbnRleHRUeXBlcyA9IHtcblx0Zm9ybUxheW91dDogUHJvcFR5cGVzLm9uZU9mKFsnYmFzaWMnLCAnaG9yaXpvbnRhbCcsICdpbmxpbmUnXSksXG5cdGZvcm1GaWVsZElkOiBQcm9wVHlwZXMuc3RyaW5nLFxuXHRsYWJlbFdpZHRoOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcblx0XHRQcm9wVHlwZXMubnVtYmVyLFxuXHRcdFByb3BUeXBlcy5zdHJpbmcsXG5cdF0pLFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGb3JtTGFiZWw7XG4iLCIvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEZvcm0gTGFiZWxcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5pbXBvcnQgdGhlbWUgZnJvbSAnLi4vLi4vLi4vdGhlbWUnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0J0Zvcm1MYWJlbCc6IHtcblx0XHRjb2xvcjogdGhlbWUuZm9ybS5sYWJlbC5jb2xvcixcblx0XHRmb250U2l6ZTogdGhlbWUuZm9ybS5sYWJlbC5mb250U2l6ZSxcblx0XHRmb250V2VpZ2h0OiB0aGVtZS5mb3JtLmxhYmVsLmZvbnRXZWlnaHQsXG5cdFx0ZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG5cdFx0bWFyZ2luQm90dG9tOiAnMC41ZW0nLFxuXHR9LFxuXG5cdC8vIHdoZW4gaW5zaWRlIGEgaG9yaXpvbnRhbCBmb3JtXG5cblx0J0Zvcm1MYWJlbC0tZm9ybS1sYXlvdXQtaG9yaXpvbnRhbCc6IHtcblx0XHRbYEBtZWRpYSAobWluLXdpZHRoOiAke3RoZW1lLmJyZWFrcG9pbnQudGFibGV0TGFuZHNjYXBlTWlufSlgXToge1xuXHRcdFx0ZGlzcGxheTogJ3RhYmxlLWNlbGwnLFxuXHRcdFx0bGluZUhlaWdodDogdGhlbWUuY29tcG9uZW50LmxpbmVIZWlnaHQsIC8vIGZpeFxuXHRcdFx0bWFyZ2luQm90dG9tOiAwLFxuXHRcdFx0cGFkZGluZ1JpZ2h0OiA1LFxuXHRcdFx0dmVydGljYWxBbGlnbjogJ3RvcCcsXG5cdFx0XHR3aWR0aDogdGhlbWUuZm9ybS5sYWJlbC53aWR0aCxcblx0XHR9LFxuXHR9LFxuXG5cdC8vIGNyb3AgbG9uZyB0ZXh0XG5cblx0J0Zvcm1MYWJlbC0tY3JvcC10ZXh0Jzoge1xuXHRcdG92ZXJmbG93OiAnaGlkZGVuJyxcblx0XHR0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG5cdFx0d2hpdGVTcGFjZTogJ25vd3JhcCcsXG5cdH0sXG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XG5pbXBvcnQgY2xhc3NlcyBmcm9tICcuL3N0eWxlcyc7XG5cbmZ1bmN0aW9uIEZvcm1Ob3RlICh7XG5cdGNsYXNzTmFtZSxcblx0Y2hpbGRyZW4sXG5cdGNvbXBvbmVudDogQ29tcG9uZW50LFxuXHRodG1sLFxuXHQuLi5wcm9wc1xufSkge1xuXHRwcm9wcy5jbGFzc05hbWUgPSBjc3MoY2xhc3Nlcy5ub3RlLCBjbGFzc05hbWUpO1xuXG5cdC8vIFByb3BlcnR5IFZpb2xhdGlvblxuXHRpZiAoY2hpbGRyZW4gJiYgaHRtbCkge1xuXHRcdGNvbnNvbGUuZXJyb3IoJ1dhcm5pbmc6IEZvcm1Ob3RlIGNhbm5vdCByZW5kZXIgYGNoaWxkcmVuYCBhbmQgYGh0bWxgLiBZb3UgbXVzdCBwcm92aWRlIG9uZSBvciB0aGUgb3RoZXIuJyk7XG5cdH1cblxuXHRyZXR1cm4gaHRtbCA/IChcblx0XHQ8Q29tcG9uZW50IHsuLi5wcm9wc30gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiBodG1sIH19IC8+XG5cdCkgOiAoXG5cdFx0PENvbXBvbmVudCB7Li4ucHJvcHN9PntjaGlsZHJlbn08L0NvbXBvbmVudD5cblx0KTtcbn07XG5Gb3JtTm90ZS5wcm9wVHlwZXMgPSB7XG5cdGNvbXBvbmVudDogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG5cdFx0UHJvcFR5cGVzLmZ1bmMsXG5cdFx0UHJvcFR5cGVzLnN0cmluZyxcblx0XSksXG5cdGh0bWw6IFByb3BUeXBlcy5zdHJpbmcsXG59O1xuRm9ybU5vdGUuZGVmYXVsdFByb3BzID0ge1xuXHRjb21wb25lbnQ6ICdkaXYnLFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGb3JtTm90ZTtcbiIsIi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gRm9ybSBOb3RlXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuaW1wb3J0IHRoZW1lIGZyb20gJy4uLy4uLy4uL3RoZW1lJztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdG5vdGU6IHtcblx0XHRjb2xvcjogdGhlbWUuZm9ybS5ub3RlLmNvbG9yLFxuXHRcdGZvbnRTaXplOiB0aGVtZS5mb3JtLm5vdGUuZm9udFNpemUsXG5cdFx0bWFyZ2luVG9wOiB0aGVtZS5zcGFjaW5nLnNtYWxsLFxuXHR9LFxufTtcbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBjbGFzc2VzIGZyb20gJy4vc3R5bGVzJztcblxuY2xhc3MgRm9ybVNlbGVjdCBleHRlbmRzIENvbXBvbmVudCB7XG5cdHJlbmRlciAoKSB7XG5cdFx0Y29uc3QgeyBjaGlsZHJlbiwgaWQsIG9wdGlvbnMsIC4uLnByb3BzIH0gPSB0aGlzLnByb3BzO1xuXHRcdGNvbnN0IHsgZm9ybUZpZWxkSWQgfSA9IHRoaXMuY29udGV4dDtcblxuXHRcdHByb3BzLmNsYXNzTmFtZSA9IGNzcyhcblx0XHRcdGNsYXNzZXMuc2VsZWN0LFxuXHRcdFx0cHJvcHMuZGlzYWJsZWQgPyBjbGFzc2VzWydzZWxlY3QtLWRpc2FibGVkJ10gOiBudWxsXG5cdFx0KTtcblx0XHRwcm9wcy5pZCA9IGlkIHx8IGZvcm1GaWVsZElkO1xuXG5cdFx0Ly8gUHJvcGVydHkgVmlvbGF0aW9uXG5cdFx0aWYgKG9wdGlvbnMgJiYgY2hpbGRyZW4pIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ1dhcm5pbmc6IEZvcm1TZWxlY3QgY2Fubm90IHJlbmRlciBgY2hpbGRyZW5gIGFuZCBgb3B0aW9uc2AuIFlvdSBtdXN0IHByb3ZpZGUgb25lIG9yIHRoZSBvdGhlci4nKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gKFxuXHRcdFx0PGRpdiBjbGFzc05hbWU9e2NzcyhjbGFzc2VzLmNvbnRhaW5lcil9PlxuXHRcdFx0XHR7b3B0aW9ucyA/IChcblx0XHRcdFx0XHQ8c2VsZWN0IHsuLi5wcm9wc30+e29wdGlvbnMubWFwKG9wdCA9PiAoXG5cdFx0XHRcdFx0XHQ8b3B0aW9uIGtleT17b3B0LnZhbHVlfSB2YWx1ZT17b3B0LnZhbHVlfT5cblx0XHRcdFx0XHRcdFx0e29wdC5sYWJlbH1cblx0XHRcdFx0XHRcdDwvb3B0aW9uPlxuXHRcdFx0XHRcdCkpfVxuXHRcdFx0XHRcdDwvc2VsZWN0PlxuXHRcdFx0XHQpIDogPHNlbGVjdCB7Li4ucHJvcHN9PntjaGlsZHJlbn08L3NlbGVjdD59XG5cdFx0XHRcdDxzcGFuIGNsYXNzTmFtZT17Y3NzKGNsYXNzZXMuYXJyb3dzLCBwcm9wcy5kaXNhYmxlZCA/IGNsYXNzZXNbJ2Fycm93cy0tZGlzYWJsZWQnXSA6IG51bGwpfT5cblx0XHRcdFx0XHQ8c3BhbiBjbGFzc05hbWU9e2NzcyhjbGFzc2VzLmFycm93LCBjbGFzc2VzLmFycm93VG9wKX0gLz5cblx0XHRcdFx0XHQ8c3BhbiBjbGFzc05hbWU9e2NzcyhjbGFzc2VzLmFycm93LCBjbGFzc2VzLmFycm93Qm90dG9tKX0gLz5cblx0XHRcdFx0PC9zcGFuPlxuXHRcdFx0PC9kaXY+XG5cdFx0KTtcblx0fVxufTtcblxuRm9ybVNlbGVjdC5jb250ZXh0VHlwZXMgPSB7XG5cdGZvcm1GaWVsZElkOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcbkZvcm1TZWxlY3QucHJvcFR5cGVzID0ge1xuXHRvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcblx0b3B0aW9uczogUmVhY3QuUHJvcFR5cGVzLmFycmF5T2YoXG5cdFx0UmVhY3QuUHJvcFR5cGVzLnNoYXBlKHtcblx0XHRcdGxhYmVsOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuXHRcdFx0dmFsdWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG5cdFx0fSlcblx0KSxcblx0dmFsdWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuXHRcdFByb3BUeXBlcy5udW1iZXIsXG5cdFx0UHJvcFR5cGVzLnN0cmluZyxcblx0XSksXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZvcm1TZWxlY3Q7XG4iLCIvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEZvcm0gU2VsZWN0XG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLyogZXNsaW50IHF1b3RlLXByb3BzOiBbXCJlcnJvclwiLCBcImFzLW5lZWRlZFwiXSAqL1xuXG5pbXBvcnQgdGhlbWUgZnJvbSAnLi4vLi4vLi4vdGhlbWUnO1xuaW1wb3J0IHsgZGFya2VuLCBsaWdodGVuIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvY29sb3InO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0Y29udGFpbmVyOiB7XG5cdFx0cG9zaXRpb246ICdyZWxhdGl2ZScsXG5cdH0sXG5cblx0Ly8gc2VsZWN0IG5vZGVcblx0c2VsZWN0OiB7XG5cdFx0YXBwZWFyYW5jZTogJ25vbmUnLFxuXHRcdGJhY2tncm91bmRDb2xvcjogdGhlbWUuaW5wdXQuYmFja2dyb3VuZC5kZWZhdWx0LFxuXHRcdGJhY2tncm91bmRJbWFnZTogJ25vbmUnLFxuXHRcdGJvcmRlckNvbG9yOiB0aGVtZS5pbnB1dC5ib3JkZXIuY29sb3IuZGVmYXVsdCxcblx0XHRib3JkZXJCb3R0b21Db2xvcjogZGFya2VuKHRoZW1lLmlucHV0LmJvcmRlci5jb2xvci5kZWZhdWx0LCA0KSxcblx0XHRib3JkZXJUb3BDb2xvcjogbGlnaHRlbih0aGVtZS5pbnB1dC5ib3JkZXIuY29sb3IuZGVmYXVsdCwgNCksXG5cdFx0Ym9yZGVyUmFkaXVzOiB0aGVtZS5pbnB1dC5ib3JkZXIucmFkaXVzLFxuXHRcdGJvcmRlclN0eWxlOiAnc29saWQnLFxuXHRcdGJvcmRlcldpZHRoOiB0aGVtZS5pbnB1dC5ib3JkZXIud2lkdGgsXG5cdFx0Ym94U2hhZG93OiB0aGVtZS5zZWxlY3QuYm94U2hhZG93LFxuXHRcdGNvbG9yOiAnaW5oZXJpdCcsIC8vIEZJWE1FXG5cdFx0ZGlzcGxheTogJ2Jsb2NrJyxcblx0XHRoZWlnaHQ6IHRoZW1lLmlucHV0LmhlaWdodCxcblx0XHRsaW5lSGVpZ2h0OiB0aGVtZS5pbnB1dC5saW5lSGVpZ2h0LFxuXHRcdHBhZGRpbmc6IGAwICR7dGhlbWUuaW5wdXQucGFkZGluZ0hvcml6b250YWx9YCxcblx0XHR0cmFuc2l0aW9uOiAnYm9yZGVyLWNvbG9yIGVhc2UtaW4tb3V0IDAuMTVzLCBib3gtc2hhZG93IGVhc2UtaW4tb3V0IDAuMTVzJyxcblx0XHR3aWR0aDogJzEwMCUnLFxuXG5cdFx0Jzpob3Zlcic6IHtcblx0XHRcdGJvcmRlckNvbG9yOiB0aGVtZS5pbnB1dC5ib3JkZXIuY29sb3IuaG92ZXIsXG5cdFx0XHRvdXRsaW5lOiAwLFxuXHRcdH0sXG5cdFx0Jzpmb2N1cyc6IHtcblx0XHRcdGJvcmRlckNvbG9yOiB0aGVtZS5pbnB1dC5ib3JkZXIuY29sb3IuZm9jdXMsXG5cdFx0XHRib3hTaGFkb3c6IHRoZW1lLmlucHV0LmJveFNoYWRvd0ZvY3VzLFxuXHRcdFx0b3V0bGluZTogMCxcblx0XHR9LFxuXHR9LFxuXHQnc2VsZWN0LS1kaXNhYmxlZCc6IHtcblx0XHRiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLmlucHV0LmJhY2tncm91bmQuZGlzYWJsZWQsXG5cdFx0cG9pbnRlckV2ZW50czogJ25vbmUnLFxuXHR9LFxuXG5cdC8vIGFycm93c1xuXHRhcnJvd3M6IHtcblx0XHRhbGlnbkl0ZW1zOiAnY2VudGVyJyxcblx0XHRkaXNwbGF5OiAnZmxleCcsXG5cdFx0ZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG5cdFx0aGVpZ2h0OiB0aGVtZS5pbnB1dC5oZWlnaHQsXG5cdFx0anVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuXHRcdHBvaW50ZXJFdmVudHM6ICdub25lJyxcblx0XHRwb3NpdGlvbjogJ2Fic29sdXRlJyxcblx0XHRyaWdodDogMCxcblx0XHR0b3A6IDAsXG5cdFx0d2lkdGg6IHRoZW1lLmlucHV0LmhlaWdodCxcblx0fSxcblx0YXJyb3c6IHtcblx0XHRib3JkZXJMZWZ0OiAnMC4zZW0gc29saWQgdHJhbnNwYXJlbnQnLFxuXHRcdGJvcmRlclJpZ2h0OiAnMC4zZW0gc29saWQgdHJhbnNwYXJlbnQnLFxuXHRcdGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuXHRcdGhlaWdodDogMCxcblx0XHR2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcblx0XHR3aWR0aDogMCxcblx0XHR6SW5kZXg6IDEsXG5cdH0sXG5cdGFycm93VG9wOiB7XG5cdFx0Ym9yZGVyQm90dG9tOiAnMC4zZW0gc29saWQnLFxuXHRcdG1hcmdpbkJvdHRvbTogJzAuMWVtJyxcblx0fSxcblx0YXJyb3dCb3R0b206IHtcblx0XHRib3JkZXJUb3A6ICcwLjNlbSBzb2xpZCcsXG5cdFx0bWFyZ2luVG9wOiAnMC4xZW0nLFxuXHR9LFxufTtcbiIsImltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi90aGVtZSc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRkYW5nZXI6IHRoZW1lLmdseXBoLmNvbG9yLmRhbmdlcixcblx0aW5oZXJpdDogdGhlbWUuZ2x5cGguY29sb3IuaW5oZXJpdCxcblx0aW52ZXJ0ZWQ6IHRoZW1lLmdseXBoLmNvbG9yLmludmVydGVkLFxuXHRwcmltYXJ5OiB0aGVtZS5nbHlwaC5jb2xvci5wcmltYXJ5LFxuXHRzdWNjZXNzOiB0aGVtZS5nbHlwaC5jb2xvci5zdWNjZXNzLFxuXHR3YXJuaW5nOiB0aGVtZS5nbHlwaC5jb2xvci53YXJuaW5nLFxufTtcbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XG5pbXBvcnQgUmVhY3QsIHsgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgb2N0aWNvbnMgZnJvbSAnLi9vY3RpY29ucyc7XG5pbXBvcnQgY29sb3JzIGZyb20gJy4vY29sb3JzJztcbmltcG9ydCBzaXplcyBmcm9tICcuL3NpemVzJztcbmltcG9ydCBjbGFzc2VzIGZyb20gJy4vc3R5bGVzJztcblxuLy8gRklYTUUgc3RhdGljIG9jdGljb24gY2xhc3NlcyBsZWFuaW5nIG9uIEVsZW1lbnRhbCB0byBhdm9pZCBkdXBsaWNhdGVcbi8vIGZvbnQgYW5kIENTUzsgaW5mbGF0aW5nIHRoZSBwcm9qZWN0IHNpemVcblxuZnVuY3Rpb24gR2x5cGggKHtcblx0Y3NzU3R5bGVzLFxuXHRjbGFzc05hbWUsXG5cdGNvbG9yLFxuXHRjb21wb25lbnQ6IENvbXBvbmVudCxcblx0bmFtZSxcblx0c2l6ZSxcblx0c3R5bGUsXG5cdC4uLnByb3BzXG59KSB7XG5cdGNvbnN0IGNvbG9ySXNWYWxpZFR5cGUgPSBPYmplY3Qua2V5cyhjb2xvcnMpLmluY2x1ZGVzKGNvbG9yKTtcblx0cHJvcHMuY2xhc3NOYW1lID0gY3NzKFxuXHRcdGNsYXNzZXMuZ2x5cGgsXG5cdFx0Y29sb3JJc1ZhbGlkVHlwZSAmJiBjbGFzc2VzWydjb2xvcl9fJyArIGNvbG9yXSxcblx0XHRjbGFzc2VzWydzaXplX18nICsgc2l6ZV0sXG5cdFx0Y3NzU3R5bGVzXG5cdCkgKyBgICR7b2N0aWNvbnNbbmFtZV19YDtcblx0aWYgKGNsYXNzTmFtZSkge1xuXHRcdHByb3BzLmNsYXNzTmFtZSArPSAoJyAnICsgY2xhc3NOYW1lKTtcblx0fVxuXG5cdC8vIHN1cHBvcnQgcmFuZG9tIGNvbG9yIHN0cmluZ3Ncblx0cHJvcHMuc3R5bGUgPSB7XG5cdFx0Y29sb3I6ICFjb2xvcklzVmFsaWRUeXBlID8gY29sb3IgOiBudWxsLFxuXHRcdC4uLnN0eWxlLFxuXHR9O1xuXG5cdHJldHVybiA8Q29tcG9uZW50IHsuLi5wcm9wc30gLz47XG59O1xuXG5HbHlwaC5wcm9wVHlwZXMgPSB7XG5cdGNvbG9yOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcblx0XHRQcm9wVHlwZXMub25lT2YoT2JqZWN0LmtleXMoY29sb3JzKSksXG5cdFx0UHJvcFR5cGVzLnN0cmluZywgLy8gc3VwcG9ydCByYW5kb20gY29sb3Igc3RyaW5nc1xuXHRdKSxcblx0Y3NzU3R5bGVzOiBQcm9wVHlwZXMuc2hhcGUoe1xuXHRcdF9kZWZpbml0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuXHRcdF9uYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXHR9KSxcblx0bmFtZTogUHJvcFR5cGVzLm9uZU9mKE9iamVjdC5rZXlzKG9jdGljb25zKSkuaXNSZXF1aXJlZCxcblx0c2l6ZTogUHJvcFR5cGVzLm9uZU9mKE9iamVjdC5rZXlzKHNpemVzKSksXG59O1xuR2x5cGguZGVmYXVsdFByb3BzID0ge1xuXHRjb21wb25lbnQ6ICdpJyxcblx0Y29sb3I6ICdpbmhlcml0Jyxcblx0c2l6ZTogJ3NtYWxsJyxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gR2x5cGg7XG4iLCIvKiBlc2xpbnQgcXVvdGUtcHJvcHM6IFtcImVycm9yXCIsIFwiYXMtbmVlZGVkXCJdICovXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRhbGVydDogJ29jdGljb24gb2N0aWNvbi1hbGVydCcsXG5cdCdhcnJvdy1kb3duJzogJ29jdGljb24gb2N0aWNvbi1hcnJvdy1kb3duJyxcblx0J2Fycm93LWxlZnQnOiAnb2N0aWNvbiBvY3RpY29uLWFycm93LWxlZnQnLFxuXHQnYXJyb3ctcmlnaHQnOiAnb2N0aWNvbiBvY3RpY29uLWFycm93LXJpZ2h0Jyxcblx0J2Fycm93LXNtYWxsLWRvd24nOiAnb2N0aWNvbiBvY3RpY29uLWFycm93LXNtYWxsLWRvd24nLFxuXHQnYXJyb3ctc21hbGwtbGVmdCc6ICdvY3RpY29uIG9jdGljb24tYXJyb3ctc21hbGwtbGVmdCcsXG5cdCdhcnJvdy1zbWFsbC1yaWdodCc6ICdvY3RpY29uIG9jdGljb24tYXJyb3ctc21hbGwtcmlnaHQnLFxuXHQnYXJyb3ctc21hbGwtdXAnOiAnb2N0aWNvbiBvY3RpY29uLWFycm93LXNtYWxsLXVwJyxcblx0J2Fycm93LXVwJzogJ29jdGljb24gb2N0aWNvbi1hcnJvdy11cCcsXG5cdG1pY3Jvc2NvcGU6ICdvY3RpY29uIG9jdGljb24tbWljcm9zY29wZScsXG5cdGJlYWtlcjogJ29jdGljb24gb2N0aWNvbi1iZWFrZXInLFxuXHRiZWxsOiAnb2N0aWNvbiBvY3RpY29uLWJlbGwnLFxuXHRib29rOiAnb2N0aWNvbiBvY3RpY29uLWJvb2snLFxuXHRib29rbWFyazogJ29jdGljb24gb2N0aWNvbi1ib29rbWFyaycsXG5cdGJyaWVmY2FzZTogJ29jdGljb24gb2N0aWNvbi1icmllZmNhc2UnLFxuXHRicm9hZGNhc3Q6ICdvY3RpY29uIG9jdGljb24tYnJvYWRjYXN0Jyxcblx0YnJvd3NlcjogJ29jdGljb24gb2N0aWNvbi1icm93c2VyJyxcblx0YnVnOiAnb2N0aWNvbiBvY3RpY29uLWJ1ZycsXG5cdGNhbGVuZGFyOiAnb2N0aWNvbiBvY3RpY29uLWNhbGVuZGFyJyxcblx0Y2hlY2s6ICdvY3RpY29uIG9jdGljb24tY2hlY2snLFxuXHRjaGVja2xpc3Q6ICdvY3RpY29uIG9jdGljb24tY2hlY2tsaXN0Jyxcblx0J2NoZXZyb24tZG93bic6ICdvY3RpY29uIG9jdGljb24tY2hldnJvbi1kb3duJyxcblx0J2NoZXZyb24tbGVmdCc6ICdvY3RpY29uIG9jdGljb24tY2hldnJvbi1sZWZ0Jyxcblx0J2NoZXZyb24tcmlnaHQnOiAnb2N0aWNvbiBvY3RpY29uLWNoZXZyb24tcmlnaHQnLFxuXHQnY2hldnJvbi11cCc6ICdvY3RpY29uIG9jdGljb24tY2hldnJvbi11cCcsXG5cdCdjaXJjbGUtc2xhc2gnOiAnb2N0aWNvbiBvY3RpY29uLWNpcmNsZS1zbGFzaCcsXG5cdCdjaXJjdWl0LWJvYXJkJzogJ29jdGljb24gb2N0aWNvbi1jaXJjdWl0LWJvYXJkJyxcblx0Y2xpcHB5OiAnb2N0aWNvbiBvY3RpY29uLWNsaXBweScsXG5cdGNsb2NrOiAnb2N0aWNvbiBvY3RpY29uLWNsb2NrJyxcblx0J2Nsb3VkLWRvd25sb2FkJzogJ29jdGljb24gb2N0aWNvbi1jbG91ZC1kb3dubG9hZCcsXG5cdCdjbG91ZC11cGxvYWQnOiAnb2N0aWNvbiBvY3RpY29uLWNsb3VkLXVwbG9hZCcsXG5cdGNvZGU6ICdvY3RpY29uIG9jdGljb24tY29kZScsXG5cdCdjb2xvci1tb2RlJzogJ29jdGljb24gb2N0aWNvbi1jb2xvci1tb2RlJyxcblx0J2NvbW1lbnQtYWRkJzogJ29jdGljb24gb2N0aWNvbi1jb21tZW50LWFkZCcsXG5cdGNvbW1lbnQ6ICdvY3RpY29uIG9jdGljb24tY29tbWVudCcsXG5cdCdjb21tZW50LWRpc2N1c3Npb24nOiAnb2N0aWNvbiBvY3RpY29uLWNvbW1lbnQtZGlzY3Vzc2lvbicsXG5cdCdjcmVkaXQtY2FyZCc6ICdvY3RpY29uIG9jdGljb24tY3JlZGl0LWNhcmQnLFxuXHRkYXNoOiAnb2N0aWNvbiBvY3RpY29uLWRhc2gnLFxuXHRkYXNoYm9hcmQ6ICdvY3RpY29uIG9jdGljb24tZGFzaGJvYXJkJyxcblx0ZGF0YWJhc2U6ICdvY3RpY29uIG9jdGljb24tZGF0YWJhc2UnLFxuXHRjbG9uZTogJ29jdGljb24gb2N0aWNvbi1jbG9uZScsXG5cdCdkZXNrdG9wLWRvd25sb2FkJzogJ29jdGljb24gb2N0aWNvbi1kZXNrdG9wLWRvd25sb2FkJyxcblx0J2RldmljZS1jYW1lcmEnOiAnb2N0aWNvbiBvY3RpY29uLWRldmljZS1jYW1lcmEnLFxuXHQnZGV2aWNlLWNhbWVyYS12aWRlbyc6ICdvY3RpY29uIG9jdGljb24tZGV2aWNlLWNhbWVyYS12aWRlbycsXG5cdCdkZXZpY2UtZGVza3RvcCc6ICdvY3RpY29uIG9jdGljb24tZGV2aWNlLWRlc2t0b3AnLFxuXHQnZGV2aWNlLW1vYmlsZSc6ICdvY3RpY29uIG9jdGljb24tZGV2aWNlLW1vYmlsZScsXG5cdGRpZmY6ICdvY3RpY29uIG9jdGljb24tZGlmZicsXG5cdCdkaWZmLWFkZGVkJzogJ29jdGljb24gb2N0aWNvbi1kaWZmLWFkZGVkJyxcblx0J2RpZmYtaWdub3JlZCc6ICdvY3RpY29uIG9jdGljb24tZGlmZi1pZ25vcmVkJyxcblx0J2RpZmYtbW9kaWZpZWQnOiAnb2N0aWNvbiBvY3RpY29uLWRpZmYtbW9kaWZpZWQnLFxuXHQnZGlmZi1yZW1vdmVkJzogJ29jdGljb24gb2N0aWNvbi1kaWZmLXJlbW92ZWQnLFxuXHQnZGlmZi1yZW5hbWVkJzogJ29jdGljb24gb2N0aWNvbi1kaWZmLXJlbmFtZWQnLFxuXHRlbGxpcHNpczogJ29jdGljb24gb2N0aWNvbi1lbGxpcHNpcycsXG5cdCdleWUtdW53YXRjaCc6ICdvY3RpY29uIG9jdGljb24tZXllLXVud2F0Y2gnLFxuXHQnZXllLXdhdGNoJzogJ29jdGljb24gb2N0aWNvbi1leWUtd2F0Y2gnLFxuXHRleWU6ICdvY3RpY29uIG9jdGljb24tZXllJyxcblx0J2ZpbGUtYmluYXJ5JzogJ29jdGljb24gb2N0aWNvbi1maWxlLWJpbmFyeScsXG5cdCdmaWxlLWNvZGUnOiAnb2N0aWNvbiBvY3RpY29uLWZpbGUtY29kZScsXG5cdCdmaWxlLWRpcmVjdG9yeSc6ICdvY3RpY29uIG9jdGljb24tZmlsZS1kaXJlY3RvcnknLFxuXHQnZmlsZS1tZWRpYSc6ICdvY3RpY29uIG9jdGljb24tZmlsZS1tZWRpYScsXG5cdCdmaWxlLXBkZic6ICdvY3RpY29uIG9jdGljb24tZmlsZS1wZGYnLFxuXHQnZmlsZS1zdWJtb2R1bGUnOiAnb2N0aWNvbiBvY3RpY29uLWZpbGUtc3VibW9kdWxlJyxcblx0J2ZpbGUtc3ltbGluay1kaXJlY3RvcnknOiAnb2N0aWNvbiBvY3RpY29uLWZpbGUtc3ltbGluay1kaXJlY3RvcnknLFxuXHQnZmlsZS1zeW1saW5rLWZpbGUnOiAnb2N0aWNvbiBvY3RpY29uLWZpbGUtc3ltbGluay1maWxlJyxcblx0J2ZpbGUtdGV4dCc6ICdvY3RpY29uIG9jdGljb24tZmlsZS10ZXh0Jyxcblx0J2ZpbGUtemlwJzogJ29jdGljb24gb2N0aWNvbi1maWxlLXppcCcsXG5cdGZsYW1lOiAnb2N0aWNvbiBvY3RpY29uLWZsYW1lJyxcblx0Zm9sZDogJ29jdGljb24gb2N0aWNvbi1mb2xkJyxcblx0Z2VhcjogJ29jdGljb24gb2N0aWNvbi1nZWFyJyxcblx0Z2lmdDogJ29jdGljb24gb2N0aWNvbi1naWZ0Jyxcblx0Z2lzdDogJ29jdGljb24gb2N0aWNvbi1naXN0Jyxcblx0J2dpc3Qtc2VjcmV0JzogJ29jdGljb24gb2N0aWNvbi1naXN0LXNlY3JldCcsXG5cdCdnaXQtYnJhbmNoLWNyZWF0ZSc6ICdvY3RpY29uIG9jdGljb24tZ2l0LWJyYW5jaC1jcmVhdGUnLFxuXHQnZ2l0LWJyYW5jaC1kZWxldGUnOiAnb2N0aWNvbiBvY3RpY29uLWdpdC1icmFuY2gtZGVsZXRlJyxcblx0J2dpdC1icmFuY2gnOiAnb2N0aWNvbiBvY3RpY29uLWdpdC1icmFuY2gnLFxuXHQnZ2l0LWNvbW1pdCc6ICdvY3RpY29uIG9jdGljb24tZ2l0LWNvbW1pdCcsXG5cdCdnaXQtY29tcGFyZSc6ICdvY3RpY29uIG9jdGljb24tZ2l0LWNvbXBhcmUnLFxuXHQnZ2l0LW1lcmdlJzogJ29jdGljb24gb2N0aWNvbi1naXQtbWVyZ2UnLFxuXHQnZ2l0LXB1bGwtcmVxdWVzdC1hYmFuZG9uZWQnOiAnb2N0aWNvbiBvY3RpY29uLWdpdC1wdWxsLXJlcXVlc3QtYWJhbmRvbmVkJyxcblx0J2dpdC1wdWxsLXJlcXVlc3QnOiAnb2N0aWNvbiBvY3RpY29uLWdpdC1wdWxsLXJlcXVlc3QnLFxuXHRnbG9iZTogJ29jdGljb24gb2N0aWNvbi1nbG9iZScsXG5cdGdyYXBoOiAnb2N0aWNvbiBvY3RpY29uLWdyYXBoJyxcblx0aGVhcnQ6ICdvY3RpY29uIG9jdGljb24taGVhcnQnLFxuXHRoaXN0b3J5OiAnb2N0aWNvbiBvY3RpY29uLWhpc3RvcnknLFxuXHRob21lOiAnb2N0aWNvbiBvY3RpY29uLWhvbWUnLFxuXHQnaG9yaXpvbnRhbC1ydWxlJzogJ29jdGljb24gb2N0aWNvbi1ob3Jpem9udGFsLXJ1bGUnLFxuXHRodWJvdDogJ29jdGljb24gb2N0aWNvbi1odWJvdCcsXG5cdGluYm94OiAnb2N0aWNvbiBvY3RpY29uLWluYm94Jyxcblx0aW5mbzogJ29jdGljb24gb2N0aWNvbi1pbmZvJyxcblx0J2lzc3VlLWNsb3NlZCc6ICdvY3RpY29uIG9jdGljb24taXNzdWUtY2xvc2VkJyxcblx0J2lzc3VlLW9wZW5lZCc6ICdvY3RpY29uIG9jdGljb24taXNzdWUtb3BlbmVkJyxcblx0J2lzc3VlLXJlb3BlbmVkJzogJ29jdGljb24gb2N0aWNvbi1pc3N1ZS1yZW9wZW5lZCcsXG5cdGplcnNleTogJ29jdGljb24gb2N0aWNvbi1qZXJzZXknLFxuXHRrZXk6ICdvY3RpY29uIG9jdGljb24ta2V5Jyxcblx0a2V5Ym9hcmQ6ICdvY3RpY29uIG9jdGljb24ta2V5Ym9hcmQnLFxuXHRsYXc6ICdvY3RpY29uIG9jdGljb24tbGF3Jyxcblx0J2xpZ2h0LWJ1bGInOiAnb2N0aWNvbiBvY3RpY29uLWxpZ2h0LWJ1bGInLFxuXHRsaW5rOiAnb2N0aWNvbiBvY3RpY29uLWxpbmsnLFxuXHQnbGluay1leHRlcm5hbCc6ICdvY3RpY29uIG9jdGljb24tbGluay1leHRlcm5hbCcsXG5cdCdsaXN0LW9yZGVyZWQnOiAnb2N0aWNvbiBvY3RpY29uLWxpc3Qtb3JkZXJlZCcsXG5cdCdsaXN0LXVub3JkZXJlZCc6ICdvY3RpY29uIG9jdGljb24tbGlzdC11bm9yZGVyZWQnLFxuXHRsb2NhdGlvbjogJ29jdGljb24gb2N0aWNvbi1sb2NhdGlvbicsXG5cdCdnaXN0LXByaXZhdGUnOiAnb2N0aWNvbiBvY3RpY29uLWdpc3QtcHJpdmF0ZScsXG5cdCdtaXJyb3ItcHJpdmF0ZSc6ICdvY3RpY29uIG9jdGljb24tbWlycm9yLXByaXZhdGUnLFxuXHQnZ2l0LWZvcmstcHJpdmF0ZSc6ICdvY3RpY29uIG9jdGljb24tZ2l0LWZvcmstcHJpdmF0ZScsXG5cdGxvY2s6ICdvY3RpY29uIG9jdGljb24tbG9jaycsXG5cdCdsb2dvLWdpdGh1Yic6ICdvY3RpY29uIG9jdGljb24tbG9nby1naXRodWInLFxuXHRtYWlsOiAnb2N0aWNvbiBvY3RpY29uLW1haWwnLFxuXHQnbWFpbC1yZWFkJzogJ29jdGljb24gb2N0aWNvbi1tYWlsLXJlYWQnLFxuXHQnbWFpbC1yZXBseSc6ICdvY3RpY29uIG9jdGljb24tbWFpbC1yZXBseScsXG5cdCdtYXJrLWdpdGh1Yic6ICdvY3RpY29uIG9jdGljb24tbWFyay1naXRodWInLFxuXHRtYXJrZG93bjogJ29jdGljb24gb2N0aWNvbi1tYXJrZG93bicsXG5cdG1lZ2FwaG9uZTogJ29jdGljb24gb2N0aWNvbi1tZWdhcGhvbmUnLFxuXHRtZW50aW9uOiAnb2N0aWNvbiBvY3RpY29uLW1lbnRpb24nLFxuXHRtaWxlc3RvbmU6ICdvY3RpY29uIG9jdGljb24tbWlsZXN0b25lJyxcblx0J21pcnJvci1wdWJsaWMnOiAnb2N0aWNvbiBvY3RpY29uLW1pcnJvci1wdWJsaWMnLFxuXHRtaXJyb3I6ICdvY3RpY29uIG9jdGljb24tbWlycm9yJyxcblx0J21vcnRhci1ib2FyZCc6ICdvY3RpY29uIG9jdGljb24tbW9ydGFyLWJvYXJkJyxcblx0bXV0ZTogJ29jdGljb24gb2N0aWNvbi1tdXRlJyxcblx0J25vLW5ld2xpbmUnOiAnb2N0aWNvbiBvY3RpY29uLW5vLW5ld2xpbmUnLFxuXHRvY3RvZmFjZTogJ29jdGljb24gb2N0aWNvbi1vY3RvZmFjZScsXG5cdG9yZ2FuaXphdGlvbjogJ29jdGljb24gb2N0aWNvbi1vcmdhbml6YXRpb24nLFxuXHRwYWNrYWdlOiAnb2N0aWNvbiBvY3RpY29uLXBhY2thZ2UnLFxuXHRwYWludGNhbjogJ29jdGljb24gb2N0aWNvbi1wYWludGNhbicsXG5cdHBlbmNpbDogJ29jdGljb24gb2N0aWNvbi1wZW5jaWwnLFxuXHQncGVyc29uLWFkZCc6ICdvY3RpY29uIG9jdGljb24tcGVyc29uLWFkZCcsXG5cdCdwZXJzb24tZm9sbG93JzogJ29jdGljb24gb2N0aWNvbi1wZXJzb24tZm9sbG93Jyxcblx0cGVyc29uOiAnb2N0aWNvbiBvY3RpY29uLXBlcnNvbicsXG5cdHBpbjogJ29jdGljb24gb2N0aWNvbi1waW4nLFxuXHRwbHVnOiAnb2N0aWNvbiBvY3RpY29uLXBsdWcnLFxuXHQncmVwby1jcmVhdGUnOiAnb2N0aWNvbiBvY3RpY29uLXJlcG8tY3JlYXRlJyxcblx0J2dpc3QtbmV3JzogJ29jdGljb24gb2N0aWNvbi1naXN0LW5ldycsXG5cdCdmaWxlLWRpcmVjdG9yeS1jcmVhdGUnOiAnb2N0aWNvbiBvY3RpY29uLWZpbGUtZGlyZWN0b3J5LWNyZWF0ZScsXG5cdCdmaWxlLWFkZCc6ICdvY3RpY29uIG9jdGljb24tZmlsZS1hZGQnLFxuXHRwbHVzOiAnb2N0aWNvbiBvY3RpY29uLXBsdXMnLFxuXHQncHJpbWl0aXZlLWRvdCc6ICdvY3RpY29uIG9jdGljb24tcHJpbWl0aXZlLWRvdCcsXG5cdCdwcmltaXRpdmUtc3F1YXJlJzogJ29jdGljb24gb2N0aWNvbi1wcmltaXRpdmUtc3F1YXJlJyxcblx0cHVsc2U6ICdvY3RpY29uIG9jdGljb24tcHVsc2UnLFxuXHRxdWVzdGlvbjogJ29jdGljb24gb2N0aWNvbi1xdWVzdGlvbicsXG5cdHF1b3RlOiAnb2N0aWNvbiBvY3RpY29uLXF1b3RlJyxcblx0J3JhZGlvLXRvd2VyJzogJ29jdGljb24gb2N0aWNvbi1yYWRpby10b3dlcicsXG5cdCdyZXBvLWRlbGV0ZSc6ICdvY3RpY29uIG9jdGljb24tcmVwby1kZWxldGUnLFxuXHRyZXBvOiAnb2N0aWNvbiBvY3RpY29uLXJlcG8nLFxuXHQncmVwby1jbG9uZSc6ICdvY3RpY29uIG9jdGljb24tcmVwby1jbG9uZScsXG5cdCdyZXBvLWZvcmNlLXB1c2gnOiAnb2N0aWNvbiBvY3RpY29uLXJlcG8tZm9yY2UtcHVzaCcsXG5cdCdnaXN0LWZvcmsnOiAnb2N0aWNvbiBvY3RpY29uLWdpc3QtZm9yaycsXG5cdCdyZXBvLWZvcmtlZCc6ICdvY3RpY29uIG9jdGljb24tcmVwby1mb3JrZWQnLFxuXHQncmVwby1wdWxsJzogJ29jdGljb24gb2N0aWNvbi1yZXBvLXB1bGwnLFxuXHQncmVwby1wdXNoJzogJ29jdGljb24gb2N0aWNvbi1yZXBvLXB1c2gnLFxuXHRyb2NrZXQ6ICdvY3RpY29uIG9jdGljb24tcm9ja2V0Jyxcblx0cnNzOiAnb2N0aWNvbiBvY3RpY29uLXJzcycsXG5cdHJ1Ynk6ICdvY3RpY29uIG9jdGljb24tcnVieScsXG5cdCdzY3JlZW4tZnVsbCc6ICdvY3RpY29uIG9jdGljb24tc2NyZWVuLWZ1bGwnLFxuXHQnc2NyZWVuLW5vcm1hbCc6ICdvY3RpY29uIG9jdGljb24tc2NyZWVuLW5vcm1hbCcsXG5cdCdzZWFyY2gtc2F2ZSc6ICdvY3RpY29uIG9jdGljb24tc2VhcmNoLXNhdmUnLFxuXHRzZWFyY2g6ICdvY3RpY29uIG9jdGljb24tc2VhcmNoJyxcblx0c2VydmVyOiAnb2N0aWNvbiBvY3RpY29uLXNlcnZlcicsXG5cdHNldHRpbmdzOiAnb2N0aWNvbiBvY3RpY29uLXNldHRpbmdzJyxcblx0c2hpZWxkOiAnb2N0aWNvbiBvY3RpY29uLXNoaWVsZCcsXG5cdCdsb2ctaW4nOiAnb2N0aWNvbiBvY3RpY29uLWxvZy1pbicsXG5cdCdzaWduLWluJzogJ29jdGljb24gb2N0aWNvbi1zaWduLWluJyxcblx0J2xvZy1vdXQnOiAnb2N0aWNvbiBvY3RpY29uLWxvZy1vdXQnLFxuXHQnc2lnbi1vdXQnOiAnb2N0aWNvbiBvY3RpY29uLXNpZ24tb3V0Jyxcblx0c3F1aXJyZWw6ICdvY3RpY29uIG9jdGljb24tc3F1aXJyZWwnLFxuXHQnc3Rhci1hZGQnOiAnb2N0aWNvbiBvY3RpY29uLXN0YXItYWRkJyxcblx0J3N0YXItZGVsZXRlJzogJ29jdGljb24gb2N0aWNvbi1zdGFyLWRlbGV0ZScsXG5cdHN0YXI6ICdvY3RpY29uIG9jdGljb24tc3RhcicsXG5cdHN0b3A6ICdvY3RpY29uIG9jdGljb24tc3RvcCcsXG5cdCdyZXBvLXN5bmMnOiAnb2N0aWNvbiBvY3RpY29uLXJlcG8tc3luYycsXG5cdHN5bmM6ICdvY3RpY29uIG9jdGljb24tc3luYycsXG5cdCd0YWctcmVtb3ZlJzogJ29jdGljb24gb2N0aWNvbi10YWctcmVtb3ZlJyxcblx0J3RhZy1hZGQnOiAnb2N0aWNvbiBvY3RpY29uLXRhZy1hZGQnLFxuXHR0YWc6ICdvY3RpY29uIG9jdGljb24tdGFnJyxcblx0dGVsZXNjb3BlOiAnb2N0aWNvbiBvY3RpY29uLXRlbGVzY29wZScsXG5cdHRlcm1pbmFsOiAnb2N0aWNvbiBvY3RpY29uLXRlcm1pbmFsJyxcblx0J3RocmVlLWJhcnMnOiAnb2N0aWNvbiBvY3RpY29uLXRocmVlLWJhcnMnLFxuXHR0aHVtYnNkb3duOiAnb2N0aWNvbiBvY3RpY29uLXRodW1ic2Rvd24nLFxuXHR0aHVtYnN1cDogJ29jdGljb24gb2N0aWNvbi10aHVtYnN1cCcsXG5cdHRvb2xzOiAnb2N0aWNvbiBvY3RpY29uLXRvb2xzJyxcblx0dHJhc2hjYW46ICdvY3RpY29uIG9jdGljb24tdHJhc2hjYW4nLFxuXHQndHJpYW5nbGUtZG93bic6ICdvY3RpY29uIG9jdGljb24tdHJpYW5nbGUtZG93bicsXG5cdCd0cmlhbmdsZS1sZWZ0JzogJ29jdGljb24gb2N0aWNvbi10cmlhbmdsZS1sZWZ0Jyxcblx0J3RyaWFuZ2xlLXJpZ2h0JzogJ29jdGljb24gb2N0aWNvbi10cmlhbmdsZS1yaWdodCcsXG5cdCd0cmlhbmdsZS11cCc6ICdvY3RpY29uIG9jdGljb24tdHJpYW5nbGUtdXAnLFxuXHR1bmZvbGQ6ICdvY3RpY29uIG9jdGljb24tdW5mb2xkJyxcblx0dW5tdXRlOiAnb2N0aWNvbiBvY3RpY29uLXVubXV0ZScsXG5cdHZlcnNpb25zOiAnb2N0aWNvbiBvY3RpY29uLXZlcnNpb25zJyxcblx0d2F0Y2g6ICdvY3RpY29uIG9jdGljb24td2F0Y2gnLFxuXHQncmVtb3ZlLWNsb3NlJzogJ29jdGljb24gb2N0aWNvbi1yZW1vdmUtY2xvc2UnLFxuXHR4OiAnb2N0aWNvbiBvY3RpY29uLXgnLFxuXHR6YXA6ICdvY3RpY29uIG9jdGljb24temFwJyxcbn07XG4iLCJpbXBvcnQgdGhlbWUgZnJvbSAnLi4vLi4vLi4vdGhlbWUnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0c21hbGw6IHRoZW1lLmdseXBoLnNpemUuc21hbGwsXG5cdG1lZGl1bTogdGhlbWUuZ2x5cGguc2l6ZS5tZWRpdW0sXG5cdGxhcmdlOiB0aGVtZS5nbHlwaC5zaXplLmxhcmdlLFxufTtcbiIsIi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gR2x5cGhcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5pbXBvcnQgY29sb3JzIGZyb20gJy4vY29sb3JzJztcbmltcG9ydCBzaXplcyBmcm9tICcuL3NpemVzJztcblxuLy8gUHJlcGFyZSB2YXJpYW50c1xuY29uc3QgY29sb3JWYXJpYW50cyA9IHt9O1xuT2JqZWN0LmtleXMoY29sb3JzKS5mb3JFYWNoKGNvbG9yID0+IHtcblx0Y29sb3JWYXJpYW50c1tgY29sb3JfXyR7Y29sb3J9YF0gPSB7XG5cdFx0Y29sb3I6IGNvbG9yc1tjb2xvcl0sXG5cdH07XG59KTtcblxuLy8gUHJlcGFyZSBzaXplc1xuY29uc3Qgc2l6ZVZhcmlhbnRzID0ge307XG5PYmplY3Qua2V5cyhzaXplcykuZm9yRWFjaChzaXplID0+IHtcblx0c2l6ZVZhcmlhbnRzW2BzaXplX18ke3NpemV9YF0gPSB7XG5cdFx0Zm9udFNpemU6IHNpemVzW3NpemVdLFxuXHR9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRnbHlwaDoge30sXG5cblx0Ly8gQ29sb3JzXG5cdC4uLmNvbG9yVmFyaWFudHMsXG5cblx0Ly8gU2l6ZXNcblx0Li4uc2l6ZVZhcmlhbnRzLFxufTtcbiIsIi8qIGVzbGludCBxdW90ZS1wcm9wczogW1wiZXJyb3JcIiwgXCJhcy1uZWVkZWRcIl0gKi9cblxuaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBCdXR0b24gZnJvbSAnLi4vQnV0dG9uJztcbmltcG9ydCBHbHlwaCBmcm9tICcuLi9HbHlwaCc7XG5cbmZ1bmN0aW9uIEdseXBoQnV0dG9uICh7XG5cdGNoaWxkcmVuLFxuXHRnbHlwaCxcblx0Z2x5cGhDb2xvcixcblx0Z2x5cGhTaXplLFxuXHRnbHlwaFN0eWxlLFxuXHRwb3NpdGlvbixcblx0Li4ucHJvcHNcbn0pIHtcblx0Y29uc3QgaXNEZWZhdWx0ID0gcG9zaXRpb24gPT09ICdkZWZhdWx0Jztcblx0Y29uc3QgaXNMZWZ0ID0gcG9zaXRpb24gPT09ICdsZWZ0Jztcblx0Y29uc3QgaXNSaWdodCA9IHBvc2l0aW9uID09PSAncmlnaHQnO1xuXG5cdGNvbnN0IG9mZnNldCA9IHt9O1xuXHRpZiAoaXNMZWZ0KSBvZmZzZXQubWFyZ2luUmlnaHQgPSAnMC41ZW0nO1xuXHRpZiAoaXNSaWdodCkgb2Zmc2V0Lm1hcmdpbkxlZnQgPSAnMC41ZW0nO1xuXG5cdGNvbnN0IGdseXBoU3R5bGVzID0ge1xuXHRcdC4uLm9mZnNldCxcblx0XHQuLi5nbHlwaFN0eWxlLFxuXHR9O1xuXG5cdGNvbnN0IGljb24gPSAoXG5cdFx0PEdseXBoXG5cdFx0XHRjc3NTdHlsZXM9e2NsYXNzZXMuZ2x5cGh9XG5cdFx0XHRjb2xvcj17Z2x5cGhDb2xvcn1cblx0XHRcdG5hbWU9e2dseXBofVxuXHRcdFx0c2l6ZT17Z2x5cGhTaXplfVxuXHRcdFx0c3R5bGU9e2dseXBoU3R5bGVzfVxuXHRcdC8+XG5cdCk7XG5cblx0cmV0dXJuIChcblx0XHQ8QnV0dG9uIHsuLi5wcm9wc30+XG5cdFx0XHR7KGlzRGVmYXVsdCB8fCBpc0xlZnQpICYmIGljb259XG5cdFx0XHR7Y2hpbGRyZW59XG5cdFx0XHR7aXNSaWdodCAmJiBpY29ufVxuXHRcdDwvQnV0dG9uPlxuXHQpO1xufTtcblxuLy8gRm9yIHByb3BzIFwiZ2x5cGhcIiwgXCJnbHlwaENvbG9yXCIsIGFuZCBcImdseXBoU2l6ZVwiOlxuLy8gcHJvcCB0eXBlIHZhbGlkYXRpb24gd2lsbCBvY2N1ciB3aXRoaW4gdGhlIEdseXBoIGNvbXBvbmVudCwgbm8gbmVlZCB0b1xuLy8gZHVwbGljYXRlLCBqdXN0IHBhc3MgaXQgdGhyb3VnaC5cbkdseXBoQnV0dG9uLnByb3BUeXBlcyA9IHtcblx0Z2x5cGg6IFByb3BUeXBlcy5zdHJpbmcsXG5cdGdseXBoQ29sb3I6IFByb3BUeXBlcy5zdHJpbmcsXG5cdGdseXBoU2l6ZTogUHJvcFR5cGVzLnN0cmluZyxcblx0Z2x5cGhTdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcblx0cG9zaXRpb246IFByb3BUeXBlcy5vbmVPZihbJ2RlZmF1bHQnLCAnbGVmdCcsICdyaWdodCddKSxcbn07XG5HbHlwaEJ1dHRvbi5kZWZhdWx0UHJvcHMgPSB7XG5cdGdseXBoU3R5bGU6IHt9LFxuXHRwb3NpdGlvbjogJ2RlZmF1bHQnLCAvLyBubyBtYXJnaW4sIGFzc3VtZXMgbm8gY2hpbGRyZW5cbn07XG5cbmNvbnN0IGNsYXNzZXMgPSB7XG5cdGdseXBoOiB7XG5cdFx0ZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG5cdFx0bWFyZ2luVG9wOiAnLTAuMTI1ZW0nLCAvLyBmaXggaWNvbiBhbGlnbm1lbnRcblx0XHR2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcblx0fSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gR2x5cGhCdXR0b247XG4iLCIvKiBlc2xpbnQgcXVvdGUtcHJvcHM6IFtcImVycm9yXCIsIFwiYXMtbmVlZGVkXCJdICovXG5cbmltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRmllbGQgZnJvbSAnLi4vRm9ybUZpZWxkJztcbmltcG9ydCBHbHlwaCBmcm9tICcuLi9HbHlwaCc7XG5cbmZ1bmN0aW9uIEdseXBoRmllbGQgKHtcblx0Y2hpbGRyZW4sXG5cdGdseXBoLFxuXHRnbHlwaENvbG9yLFxuXHRnbHlwaFNpemUsXG5cdHBvc2l0aW9uLFxuXHQuLi5wcm9wc1xufSkge1xuXHRjb25zdCBpc0xlZnQgPSBwb3NpdGlvbiA9PT0gJ2xlZnQnO1xuXHRjb25zdCBpc1JpZ2h0ID0gcG9zaXRpb24gPT09ICdyaWdodCc7XG5cblx0Y29uc3QgZ2x5cGhTdHlsZXMgPSB7fTtcblx0aWYgKGlzTGVmdCkgZ2x5cGhTdHlsZXMubWFyZ2luUmlnaHQgPSAnMC41ZW0nO1xuXHRpZiAoaXNSaWdodCkgZ2x5cGhTdHlsZXMubWFyZ2luTGVmdCA9ICcwLjVlbSc7XG5cblx0Y29uc3QgaWNvbiA9IChcblx0XHQ8R2x5cGhcblx0XHRcdGNzc1N0eWxlcz17Y2xhc3Nlcy5nbHlwaH1cblx0XHRcdGNvbG9yPXtnbHlwaENvbG9yfVxuXHRcdFx0bmFtZT17Z2x5cGh9XG5cdFx0XHRzaXplPXtnbHlwaFNpemV9XG5cdFx0XHRzdHlsZT17Z2x5cGhTdHlsZXN9XG5cdFx0Lz5cblx0KTtcblxuXHRyZXR1cm4gKFxuXHRcdDxGaWVsZCBjc3NTdHlsZXM9e2NsYXNzZXMud3JhcHBlcn0gey4uLnByb3BzfT5cblx0XHRcdHtpc0xlZnQgJiYgaWNvbn1cblx0XHRcdHtjaGlsZHJlbn1cblx0XHRcdHtpc1JpZ2h0ICYmIGljb259XG5cdFx0PC9GaWVsZD5cblx0KTtcbn07XG5cbi8vIEZvciBwcm9wcyBcImdseXBoXCIsIFwiZ2x5cGhDb2xvclwiLCBhbmQgXCJnbHlwaFNpemVcIjpcbi8vIHByb3AgdHlwZSB2YWxpZGF0aW9uIHdpbGwgb2NjdXIgd2l0aGluIHRoZSBHbHlwaCBjb21wb25lbnQsIG5vIG5lZWQgdG9cbi8vIGR1cGxpY2F0ZSwganVzdCBwYXNzIGl0IHRocm91Z2guXG5HbHlwaEZpZWxkLnByb3BUeXBlcyA9IHtcblx0Z2x5cGg6IFByb3BUeXBlcy5zdHJpbmcsXG5cdGdseXBoQ29sb3I6IFByb3BUeXBlcy5zdHJpbmcsXG5cdGdseXBoU2l6ZTogUHJvcFR5cGVzLnN0cmluZyxcblx0cG9zaXRpb246IFByb3BUeXBlcy5vbmVPZihbJ2xlZnQnLCAncmlnaHQnXSksXG59O1xuR2x5cGhGaWVsZC5kZWZhdWx0UHJvcHMgPSB7XG5cdHBvc2l0aW9uOiAnbGVmdCcsXG59O1xuXG5jb25zdCBjbGFzc2VzID0ge1xuXHR3cmFwcGVyOiB7XG5cdFx0YWxpZ25JdGVtczogJ2NlbnRlcicsXG5cdFx0ZGlzcGxheTogJ2ZsZXgnLFxuXHR9LFxuXHRnbHlwaDoge1xuXHRcdGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuXHRcdG1hcmdpblRvcDogJy0wLjEyNWVtJywgLy8gZml4IGljb24gYWxpZ25tZW50XG5cdFx0dmVydGljYWxBbGlnbjogJ21pZGRsZScsXG5cdH0sXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEdseXBoRmllbGQ7XG4iLCJpbXBvcnQgQ29sIGZyb20gJy4uL0dyaWRDb2wnO1xuaW1wb3J0IFJvdyBmcm9tICcuLi9HcmlkUm93JztcblxuZXhwb3J0IHsgQ29sLCBSb3cgfTtcbiIsImltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XG5cbmltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi90aGVtZSc7XG5cbmNvbnN0IFdJRFRIUyA9IHtcblx0J29uZS13aG9sZSc6ICcxMDAlJyxcblx0J29uZS1oYWxmJzogJzUwJScsXG5cdCdvbmUtdGhpcmQnOiAnMzMuMzMlJyxcblx0J3R3by10aGlyZHMnOiAnNjYuNjYlJyxcblx0J29uZS1xdWFydGVyJzogJzI1JScsXG5cdCd0aHJlZS1xdWFydGVycyc6ICc3NSUnLFxuXG5cdCdvbmUtZmlmdGgnOiAnMjAlJyxcblx0J3R3by1maWZ0aHMnOiAnNDAlJyxcblx0J3RocmVlLWZpZnRocyc6ICc2MCUnLFxuXHQnZm91ci1maWZ0aHMnOiAnODAlJyxcblxuXHQnb25lLXNpeHRoJzogJzE2LjY2JScsXG5cdCdmaXZlLXNpeHRocyc6ICc4My4zMyUnLFxufTtcblxuY29uc3QgR3JpZENvbCA9IChwcm9wcywgY29udGV4dCkgPT4ge1xuXHRjb25zdCBndXR0ZXIgPSBwcm9wcy5ndXR0ZXIgfHwgY29udGV4dC5ndXR0ZXI7XG5cdGNvbnN0IHhzbWFsbCA9IHByb3BzLnhzbWFsbCB8fCBjb250ZXh0LnhzbWFsbDtcblx0Y29uc3Qgc21hbGwgPSBwcm9wcy5zbWFsbCB8fCBjb250ZXh0LnNtYWxsO1xuXHRjb25zdCBtZWRpdW0gPSBwcm9wcy5tZWRpdW0gfHwgY29udGV4dC5tZWRpdW07XG5cdGNvbnN0IGxhcmdlID0gcHJvcHMubGFyZ2UgfHwgY29udGV4dC5sYXJnZTtcblxuXHRjb25zdCBjbGFzc05hbWUgPSBjc3MoXG5cdFx0Y2xhc3Nlc1sneHNtYWxsLScgKyB4c21hbGxdLFxuXHRcdGNsYXNzZXNbJ3NtYWxsLScgKyBzbWFsbF0sXG5cdFx0Y2xhc3Nlc1snbWVkaXVtLScgKyBtZWRpdW1dLFxuXHRcdGNsYXNzZXNbJ2xhcmdlLScgKyBsYXJnZV1cblx0KTtcblxuXHRjb25zdCBjb21wb25lbnRDbGFzc05hbWUgPSBgJHtjbGFzc05hbWV9JHtwcm9wcy5jbGFzc05hbWUgPyAoJyAnICsgcHJvcHMuY2xhc3NOYW1lKSA6ICcnfWA7XG5cdGNvbnN0IGNvbXBvbmVudFN0eWxlcyA9IGd1dHRlciA/IHtcblx0XHRwYWRkaW5nTGVmdDogZ3V0dGVyIC8gMixcblx0XHRwYWRkaW5nUmlnaHQ6IGd1dHRlciAvIDIsXG5cdH0gOiB7fTtcblxuXHRyZXR1cm4gKFxuXHRcdDxkaXYgY2xhc3NOYW1lPXtjb21wb25lbnRDbGFzc05hbWV9IHN0eWxlPXtjb21wb25lbnRTdHlsZXN9PlxuXHRcdFx0e3Byb3BzLmNoaWxkcmVufVxuXHRcdDwvZGl2PlxuXHQpO1xufTtcblxuR3JpZENvbC5jb250ZXh0VHlwZXMgPSB7XG5cdGd1dHRlcjogUHJvcFR5cGVzLm51bWJlcixcblx0bGFyZ2U6IFByb3BUeXBlcy5zdHJpbmcsXG5cdG1lZGl1bTogUHJvcFR5cGVzLnN0cmluZyxcblx0c21hbGw6IFByb3BUeXBlcy5zdHJpbmcsXG5cdHhzbWFsbDogUHJvcFR5cGVzLnN0cmluZyxcbn07XG5cbkdyaWRDb2wucHJvcFR5cGVzID0ge1xuXHRndXR0ZXI6IFByb3BUeXBlcy5udW1iZXIsXG5cdGxhcmdlOiBQcm9wVHlwZXMuc3RyaW5nLFxuXHRtZWRpdW06IFByb3BUeXBlcy5zdHJpbmcsXG5cdHNtYWxsOiBQcm9wVHlwZXMuc3RyaW5nLFxuXHR4c21hbGw6IFByb3BUeXBlcy5zdHJpbmcsXG59O1xuXG5jb25zdCBjbGFzc2VzID0ge1xuXHQuLi5wcmVwYXJlV2lkdGhzKCd4c21hbGwnLCBXSURUSFMpLFxuXHQuLi5wcmVwYXJlV2lkdGhzKCdzbWFsbCcsIFdJRFRIUyksXG5cdC4uLnByZXBhcmVXaWR0aHMoJ21lZGl1bScsIFdJRFRIUyksXG5cdC4uLnByZXBhcmVXaWR0aHMoJ2xhcmdlJywgV0lEVEhTKSxcbn07XG5cbi8qIGVzbGludC1kaXNhYmxlIGd1YXJkLWZvci1pbiAqL1xuZnVuY3Rpb24gcHJlcGFyZVdpZHRocyAocHJlZml4LCBvYmopIHtcblx0bGV0IGNsYXNzZXMgPSB7fTtcblx0c3dpdGNoIChwcmVmaXgpIHtcblx0XHRjYXNlICdzbWFsbCc6XG5cdFx0XHRmb3IgKGxldCBwcm9wIGluIG9iaikge1xuXHRcdFx0XHRjbGFzc2VzW3ByZWZpeCArICctJyArIHByb3BdID0ge1xuXHRcdFx0XHRcdFtgQG1lZGlhIChtaW4td2lkdGg6ICR7dGhlbWUuYnJlYWtwb2ludC50YWJsZXRQb3J0cmFpdE1pbn0pYF06IHtcblx0XHRcdFx0XHRcdHdpZHRoOiBvYmpbcHJvcF0sXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ21lZGl1bSc6XG5cdFx0XHRmb3IgKGxldCBwcm9wIGluIG9iaikge1xuXHRcdFx0XHRjbGFzc2VzW3ByZWZpeCArICctJyArIHByb3BdID0ge1xuXHRcdFx0XHRcdFtgQG1lZGlhIChtaW4td2lkdGg6ICR7dGhlbWUuYnJlYWtwb2ludC50YWJsZXRMYW5kc2NhcGVNaW59KWBdOiB7XG5cdFx0XHRcdFx0XHR3aWR0aDogb2JqW3Byb3BdLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICdsYXJnZSc6XG5cdFx0XHRmb3IgKGxldCBwcm9wIGluIG9iaikge1xuXHRcdFx0XHRjbGFzc2VzW3ByZWZpeCArICctJyArIHByb3BdID0ge1xuXHRcdFx0XHRcdFtgQG1lZGlhIChtaW4td2lkdGg6ICR7dGhlbWUuYnJlYWtwb2ludC5kZXNrdG9wTWlufSlgXToge1xuXHRcdFx0XHRcdFx0d2lkdGg6IG9ialtwcm9wXSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0YnJlYWs7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdGZvciAobGV0IHByb3AgaW4gb2JqKSB7XG5cdFx0XHRcdGNsYXNzZXNbcHJlZml4ICsgJy0nICsgcHJvcF0gPSB7XG5cdFx0XHRcdFx0d2lkdGg6IG9ialtwcm9wXSxcblx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIGNsYXNzZXM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEdyaWRDb2w7XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xuXG5jbGFzcyBHcmlkUm93IGV4dGVuZHMgQ29tcG9uZW50IHtcblx0Z2V0Q2hpbGRDb250ZXh0ICgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Z3V0dGVyOiB0aGlzLnByb3BzLmd1dHRlcixcblx0XHRcdHhzbWFsbDogdGhpcy5wcm9wcy54c21hbGwsXG5cdFx0XHRzbWFsbDogdGhpcy5wcm9wcy5zbWFsbCxcblx0XHRcdG1lZGl1bTogdGhpcy5wcm9wcy5tZWRpdW0sXG5cdFx0XHRsYXJnZTogdGhpcy5wcm9wcy5sYXJnZSxcblx0XHR9O1xuXHR9XG5cdHJlbmRlciAoKSB7XG5cdFx0Y29uc3QgeyBjaGlsZHJlbiwgY2xhc3NOYW1lLCBndXR0ZXIsIHN0eWxlcyA9IHt9IH0gPSB0aGlzLnByb3BzO1xuXG5cdFx0Y29uc3QgY29tcG9uZW50Q2xhc3NOYW1lID0gYCR7Y3NzKGNsYXNzZXMuZ3JpZCl9JHtjbGFzc05hbWUgPyAoJyAnICsgY2xhc3NOYW1lKSA6ICcnfWA7XG5cdFx0Y29uc3QgY29tcG9uZW50U3R5bGVzID0gT2JqZWN0LmFzc2lnbihzdHlsZXMsIHtcblx0XHRcdG1hcmdpbkxlZnQ6IGd1dHRlciAvIC0yLFxuXHRcdFx0bWFyZ2luUmlnaHQ6IGd1dHRlciAvIC0yLFxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIChcblx0XHRcdDxkaXYgY2xhc3NOYW1lPXtjb21wb25lbnRDbGFzc05hbWV9IHN0eWxlPXtjb21wb25lbnRTdHlsZXN9PlxuXHRcdFx0XHR7Y2hpbGRyZW59XG5cdFx0XHQ8L2Rpdj5cblx0XHQpO1xuXHR9XG59O1xuXG5HcmlkUm93LmNoaWxkQ29udGV4dFR5cGVzID0ge1xuXHRndXR0ZXI6IFByb3BUeXBlcy5udW1iZXIsXG5cdHhzbWFsbDogUHJvcFR5cGVzLnN0cmluZyxcblx0c21hbGw6IFByb3BUeXBlcy5zdHJpbmcsXG5cdG1lZGl1bTogUHJvcFR5cGVzLnN0cmluZyxcblx0bGFyZ2U6IFByb3BUeXBlcy5zdHJpbmcsXG59O1xuXG5HcmlkUm93LnByb3BUeXBlcyA9IHtcblx0Z3V0dGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuXHRsYXJnZTogUHJvcFR5cGVzLnN0cmluZyxcblx0bWVkaXVtOiBQcm9wVHlwZXMuc3RyaW5nLFxuXHRzbWFsbDogUHJvcFR5cGVzLnN0cmluZyxcblx0eHNtYWxsOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcblxuR3JpZFJvdy5kZWZhdWx0UHJvcHMgPSB7XG5cdGd1dHRlcjogMCxcblx0eHNtYWxsOiAnb25lLXdob2xlJyxcbn07XG5cbmNvbnN0IGNsYXNzZXMgPSB7XG5cdGdyaWQ6IHtcblx0XHRkaXNwbGF5OiAnZmxleCcsXG5cdFx0ZmxleFdyYXA6ICd3cmFwJyxcblx0fSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gR3JpZFJvdztcbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XG5pbXBvcnQgUmVhY3QsIHsgY2xvbmVFbGVtZW50LCBDaGlsZHJlbiwgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xuXG4vLyBOT1RFOiBvbmx5IGFjY2VwdHMgSW5saW5lR3JvdXBTZWN0aW9uIGFzIGEgc2luZ2xlIGNoaWxkXG5cbmZ1bmN0aW9uIElubGluZUdyb3VwICh7XG5cdGNzc1N0eWxlcyxcblx0YmxvY2ssXG5cdGNoaWxkcmVuLFxuXHRjbGFzc05hbWUsXG5cdGNvbXBvbmVudDogQ29tcG9uZW50LFxuXHRjb250aWd1b3VzLFxuXHQuLi5wcm9wc1xufSkge1xuXHQvLyBwcmVwYXJlIGdyb3VwIGNsYXNzTmFtZVxuXHRwcm9wcy5jbGFzc05hbWUgPSBjc3MoXG5cdFx0Y2xhc3Nlcy5ncm91cCxcblx0XHQhIWJsb2NrICYmIGNsYXNzZXMuYmxvY2ssXG5cdFx0Y3NzU3R5bGVzXG5cdCk7XG5cdGlmIChjbGFzc05hbWUpIHtcblx0XHRwcm9wcy5jbGFzc05hbWUgKz0gKCcgJyArIGNsYXNzTmFtZSk7XG5cdH1cblxuXHQvLyBjb252ZXJ0IGNoaWxkcmVuIHRvIGFuIGFycmF5IGFuZCBmaWx0ZXIgb3V0IGZhbHNleSB2YWx1ZXNcblx0Y29uc3QgYnV0dG9ucyA9IENoaWxkcmVuLnRvQXJyYXkoY2hpbGRyZW4pLmZpbHRlcihpID0+IGkpO1xuXG5cdC8vIG5vcm1hbGl6ZSB0aGUgY291bnRcblx0Y29uc3QgY291bnQgPSBidXR0b25zLmxlbmd0aCAtIDE7XG5cblx0Ly8gY2xvbmUgY2hpbGRyZW4gYW5kIGFwcGx5IGNsYXNzTmFtZXMgdGhhdCBnbGFtb3IgY2FuIHRhcmdldFxuXHRwcm9wcy5jaGlsZHJlbiA9IGJ1dHRvbnMubWFwKChjLCBpZHgpID0+IHtcblx0XHRpZiAoIWMpIHJldHVybiBudWxsO1xuXG5cdFx0Y29uc3QgaXNPbmx5Q2hpbGQgPSAhY291bnQ7XG5cdFx0Y29uc3QgaXNGaXJzdENoaWxkID0gIWlzT25seUNoaWxkICYmIGlkeCA9PT0gMDtcblx0XHRjb25zdCBpc0xhc3RDaGlsZCA9ICFpc09ubHlDaGlsZCAmJiBpZHggPT09IGNvdW50O1xuXHRcdGNvbnN0IGlzTWlkZGxlQ2hpbGQgPSAhaXNPbmx5Q2hpbGQgJiYgIWlzRmlyc3RDaGlsZCAmJiAhaXNMYXN0Q2hpbGQ7XG5cblx0XHRsZXQgcG9zaXRpb247XG5cdFx0aWYgKGlzT25seUNoaWxkKSBwb3NpdGlvbiA9ICdvbmx5Jztcblx0XHRpZiAoaXNGaXJzdENoaWxkKSBwb3NpdGlvbiA9ICdmaXJzdCc7XG5cdFx0aWYgKGlzTGFzdENoaWxkKSBwb3NpdGlvbiA9ICdsYXN0Jztcblx0XHRpZiAoaXNNaWRkbGVDaGlsZCkgcG9zaXRpb24gPSAnbWlkZGxlJztcblxuXHRcdHJldHVybiBjbG9uZUVsZW1lbnQoYywge1xuXHRcdFx0Y29udGlndW91czogY29udGlndW91cyxcblx0XHRcdHBvc2l0aW9uLFxuXHRcdH0pO1xuXHR9KTtcblxuXHRyZXR1cm4gPENvbXBvbmVudCB7Li4ucHJvcHN9IC8+O1xufTtcblxuSW5saW5lR3JvdXAucHJvcFR5cGVzID0ge1xuXHRibG9jazogUHJvcFR5cGVzLmJvb2wsXG5cdGNvbXBvbmVudDogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG5cdFx0UHJvcFR5cGVzLmZ1bmMsXG5cdFx0UHJvcFR5cGVzLnN0cmluZyxcblx0XSksXG5cdGNvbnRpZ3VvdXM6IFByb3BUeXBlcy5ib29sLFxuXHRjc3NTdHlsZXM6IFByb3BUeXBlcy5zaGFwZSh7XG5cdFx0X2RlZmluaXRpb246IFByb3BUeXBlcy5vYmplY3QsXG5cdFx0X25hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cdH0pLFxufTtcbklubGluZUdyb3VwLmRlZmF1bHRQcm9wcyA9IHtcblx0Y29tcG9uZW50OiAnZGl2Jyxcbn07XG5cbmNvbnN0IGNsYXNzZXMgPSB7XG5cdGdyb3VwOiB7XG5cdFx0ZGlzcGxheTogJ2lubGluZS1mbGV4Jyxcblx0fSxcblx0YmxvY2s6IHtcblx0XHRkaXNwbGF5OiAnZmxleCcsXG5cdH0sXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IElubGluZUdyb3VwO1xuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcbmltcG9ydCBSZWFjdCwgeyBjbG9uZUVsZW1lbnQsIFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc2VzIGZyb20gJy4vc3R5bGVzJztcblxuLy8gTk9URTogSW5saW5lIEdyb3VwIFNlY3Rpb24gYWNjZXB0cyBhIHNpbmdsZSBjaGlsZFxuXG5mdW5jdGlvbiBJbmxpbmVHcm91cFNlY3Rpb24gKHtcblx0YWN0aXZlLFxuXHRjc3NTdHlsZXMsXG5cdGNoaWxkcmVuLFxuXHRjbGFzc05hbWUsXG5cdGNvbnRpZ3VvdXMsXG5cdGdyb3csXG5cdHBvc2l0aW9uLFxuXHQuLi5wcm9wc1xufSkge1xuXHQvLyBldmFsdWF0ZSBwb3NpdGlvblxuXHRjb25zdCBzZXBhcmF0ZSA9IHBvc2l0aW9uID09PSAnbGFzdCcgfHwgcG9zaXRpb24gPT09ICdtaWRkbGUnO1xuXG5cdC8vIEEgYGNvbnRpZ3VvdXNgIHNlY3Rpb24gbXVzdCBtYW5pcHVsYXRlIGl0J3MgY2hpbGQgZGlyZWN0bHlcblx0Ly8gQSBzZXBhcmF0ZSAoZGVmYXVsdCkgc2VjdGlvbiBqdXN0IHdyYXBzIHRoZSBjaGlsZFxuXHRyZXR1cm4gY29udGlndW91cyA/IGNsb25lRWxlbWVudChjaGlsZHJlbiwge1xuXHRcdGNzc1N0eWxlczogW1xuXHRcdFx0Y2xhc3Nlcy5jb250aWd1b3VzLFxuXHRcdFx0Y2xhc3Nlc1snY29udGlndW91c19fJyArIHBvc2l0aW9uXSxcblx0XHRcdGFjdGl2ZSA/IGNsYXNzZXMuYWN0aXZlIDogbnVsbCxcblx0XHRcdGdyb3cgPyBjbGFzc2VzLmdyb3cgOiBudWxsLFxuXHRcdFx0Y3NzU3R5bGVzLFxuXHRcdF0sXG5cdFx0Li4ucHJvcHMsXG5cdH0pIDogKFxuXHRcdDxkaXYgY2xhc3NOYW1lPXtjc3MoXG5cdFx0XHQhIWdyb3cgJiYgY2xhc3Nlcy5ncm93LFxuXHRcdFx0ISFzZXBhcmF0ZSAmJiBjbGFzc2VzLnNlcGFyYXRlLFxuXHRcdFx0Y3NzU3R5bGVzXG5cdFx0KX0gey4uLnByb3BzfT5cblx0XHRcdHtjaGlsZHJlbn1cblx0XHQ8L2Rpdj5cblx0KTtcbn07XG5cbklubGluZUdyb3VwU2VjdGlvbi5wcm9wVHlwZXMgPSB7XG5cdGFjdGl2ZTogUHJvcFR5cGVzLmJvb2wsIC8vIGJ1dHRvbnMgb25seVxuXHRjaGlsZHJlbjogUHJvcFR5cGVzLmVsZW1lbnQuaXNSZXF1aXJlZCxcblx0Y29udGlndW91czogUHJvcFR5cGVzLmJvb2wsXG5cdGdyb3c6IFByb3BUeXBlcy5ib29sLFxuXHRwb3NpdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnZmlyc3QnLCAnbGFzdCcsICdtaWRkbGUnLCAnb25seSddKSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW5saW5lR3JvdXBTZWN0aW9uO1xuIiwiLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBJbmxpbmUgR3JvdXA6IFNlY3Rpb25cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vLyBUYWtlcyBvbmx5IEZvcm1JbnB1dCBhbmQgQnV0dG9uIGFzIGNoaWxkcmVuLCByZW5kZXJpbmcgdGhlbSBhcyBhXG4vLyB0aWR5IGlubGluZSBhcnJheVxuXG5pbXBvcnQgdGhlbWUgZnJvbSAnLi4vLi4vLi4vdGhlbWUnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0Ly8gcHVsbCBhY3RpdmUgZWxlbWVudHMgdXBcblx0YWN0aXZlOiB7XG5cdFx0cG9zaXRpb246ICdyZWxhdGl2ZScsXG5cdH0sXG5cblx0Ly8gc3RyZXRjaCB0byBmaWxsIGF2YWlsYWJsZSB3aWR0aFxuXHRncm93OiB7XG5cdFx0ZmxleDogJzEgMSAwJyxcblx0fSxcblxuXHQvLyBzZXBhcmF0ZSBhcHBsaWNhYmxlIG5vbi1jb250aWd1b3VzIGVsZW1lbnRzXG5cdHNlcGFyYXRlOiB7XG5cdFx0cGFkZGluZ0xlZnQ6ICcwLjc1ZW0nLFxuXHR9LFxuXG5cdC8vIENvbnRpZ3VvdXM6IG1hbmlwdWxhdGUgY2hpbGRyZW4gZGlyZWN0bHlcblxuXHQvLyBwdWxsIGZvY3VzZWQgY29udGlndW91cyBlbGVtZW50cyB1cFxuXHRjb250aWd1b3VzOiB7XG5cdFx0Jzpmb2N1cyc6IHtcblx0XHRcdHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuXHRcdFx0ekluZGV4OiAxLFxuXHRcdH0sXG5cdH0sXG5cblx0Ly8gcG9zaXRpb25cblx0Y29udGlndW91c19fbWlkZGxlOiB7XG5cdFx0Ym9yZGVyUmFkaXVzOiAwLFxuXHRcdG1hcmdpbkxlZnQ6IHRoZW1lLmJ1dHRvbi5ib3JkZXJXaWR0aCAqIC0xLFxuXHR9LFxuXHRjb250aWd1b3VzX19maXJzdDoge1xuXHRcdGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzOiAnMCAhaW1wb3J0YW50Jyxcblx0XHRib3JkZXJUb3BSaWdodFJhZGl1czogJzAgIWltcG9ydGFudCcsXG5cdH0sXG5cdGNvbnRpZ3VvdXNfX2xhc3Q6IHtcblx0XHRib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiAnMCAhaW1wb3J0YW50Jyxcblx0XHRib3JkZXJUb3BMZWZ0UmFkaXVzOiAnMCAhaW1wb3J0YW50Jyxcblx0XHRtYXJnaW5MZWZ0OiB0aGVtZS5idXR0b24uYm9yZGVyV2lkdGggKiAtMSxcblx0fSxcbn07XG4iLCJpbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xuaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc2VzIGZyb20gJy4vc3R5bGVzJztcblxuZnVuY3Rpb24gTGFiZWxsZWRDb250cm9sICh7XG5cdGNsYXNzTmFtZSxcblx0aW5saW5lLFxuXHRsYWJlbCxcblx0dGl0bGUsXG5cdC4uLnByb3BzXG59KSB7XG5cdGNvbnN0IGxhYmVsQ2xhc3NOYW1lID0gY3NzKFxuXHRcdGNsYXNzZXMud3JhcHBlcixcblx0XHRpbmxpbmUgJiYgY2xhc3Nlcy53cmFwcGVyX19pbmxpbmUsXG5cdFx0Y2xhc3NOYW1lXG5cdCk7XG5cblx0cmV0dXJuIChcblx0XHQ8bGFiZWwgdGl0bGU9e3RpdGxlfSBjbGFzc05hbWU9e2xhYmVsQ2xhc3NOYW1lfT5cblx0XHRcdDxpbnB1dCB7Li4ucHJvcHN9IGNsYXNzTmFtZT17Y3NzKGNsYXNzZXMuY29udHJvbCl9IC8+XG5cdFx0XHQ8c3BhbiBjbGFzc05hbWU9e2NzcyhjbGFzc2VzLmxhYmVsKX0+e2xhYmVsfTwvc3Bhbj5cblx0XHQ8L2xhYmVsPlxuXHQpO1xufTtcblxuTGFiZWxsZWRDb250cm9sLnByb3BUeXBlcyA9IHtcblx0aW5saW5lOiBQcm9wVHlwZXMuYm9vbCxcblx0dGl0bGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cdHR5cGU6IFByb3BUeXBlcy5vbmVPZihbJ2NoZWNrYm94JywgJ3JhZGlvJ10pLmlzUmVxdWlyZWQsXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExhYmVsbGVkQ29udHJvbDtcbiIsIi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gQWxlcnRcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vKiBlc2xpbnQgcXVvdGUtcHJvcHM6IFtcImVycm9yXCIsIFwiYXMtbmVlZGVkXCJdICovXG5cbmltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi90aGVtZSc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHR3cmFwcGVyOiB7XG5cdFx0ZGlzcGxheTogJ2Jsb2NrJyxcblx0XHRoZWlnaHQ6IHRoZW1lLmlucHV0LmhlaWdodCxcblx0XHRsaW5lSGVpZ2h0OiB0aGVtZS5pbnB1dC5saW5lSGVpZ2h0LFxuXHR9LFxuXHR3cmFwcGVyX19pbmxpbmU6IHtcblx0XHRkaXNwbGF5OiAnaW5saW5lJyxcblx0fSxcblxuXHQvLyBjaGVja2JveCBvciByYWRpb1xuXHRjb250cm9sOiB7XG5cdFx0bWFyZ2luUmlnaHQ6ICcwLjVlbScsXG5cdH0sXG59O1xuIiwiaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XG5pbXBvcnQgQnV0dG9uIGZyb20gJy4uL0J1dHRvbic7XG5pbXBvcnQgU3Bpbm5lciBmcm9tICcuLi9TcGlubmVyJztcbmltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi90aGVtZSc7XG5cbmZ1bmN0aW9uIExvYWRpbmdCdXR0b24gKHsgY2hpbGRyZW4sIGxvYWRpbmcsIC4uLnByb3BzIH0pIHtcblx0Ly8gZGV0ZXJtaW5lIHRoZSBjb3JyZWN0IHZhcmlhbnQgZm9yIHRoZSBzcGlubmVyLFxuXHQvLyBmaWxsIGlzIHRoZSBkZWZhdWx0IHZhcmlhbnQgb24gQnV0dG9uXG5cdGNvbnN0IHZhcmlhbnQgPSBwcm9wcy52YXJpYW50IHx8ICdmaWxsJztcblxuXHQvLyBkZXRlcm1pbmUgdGhlIGNvcnJlY3QgY29sb3IgZm9yIHRoZSBzcGlubmVyLFxuXHQvLyBjYW5jZWwgYW5kIGRlbGV0ZSBhbGlhcyB0byBcImRhbmdlclwiXG5cdGxldCBjb2xvcjtcblx0aWYgKHByb3BzLmNvbG9yID09PSAnY2FuY2VsJyB8fCBwcm9wcy5jb2xvciA9PT0gJ2RlbGV0ZScpIGNvbG9yID0gJ2Rhbmdlcic7XG5cblx0Ly8gbWVyZ2UgYWxsIHRoZSB2YXJpYW50L2NvbG9yIHRvZ2V0aGVyXG5cdGNvbnN0IGZvcm1hdHRlZENvbG9yID0gdmFyaWFudCA9PT0gJ2ZpbGwnICYmIHByb3BzLmNvbG9yICE9PSAnZGVmYXVsdCdcblx0XHQ/ICdpbnZlcnRlZCdcblx0XHQ6IGNvbG9yO1xuXG5cdC8vIHJlbmRlciB0aGUgc3Bpbm5lciBpZiByZXF1aXJlZFxuXHRjb25zdCBzcGlubmVyID0gbG9hZGluZyAmJiAoXG5cdFx0PFNwaW5uZXJcblx0XHRcdHNpemU9XCJzbWFsbFwiXG5cdFx0XHRjb2xvcj17Zm9ybWF0dGVkQ29sb3J9XG5cdFx0Lz5cblx0KTtcblxuXHQvLyBzbGlkZSB0aGUgc3Bpbm5lciBpbiBhbmQgb3V0IG9mIHZpZXdcblx0Y29uc3Qgc3Bpbm5lclN0eWxlcyA9IHtcblx0XHR3aWR0aDogbG9hZGluZ1xuXHRcdFx0PyAodGhlbWUuc3Bpbm5lci5zaXplLnNtYWxsICogNSArIHRoZW1lLnNwYWNpbmcuc21hbGwpXG5cdFx0XHQ6IDAsXG5cdH07XG5cblx0Ly8gcmVuZGVyIGV2ZXJ5dGhpbmdcblx0cmV0dXJuIChcblx0XHQ8QnV0dG9uIHsuLi5wcm9wc30+XG5cdFx0XHQ8c3BhbiBjbGFzc05hbWU9e2NzcyhjbGFzc2VzLnNwaW5uZXIpfSBzdHlsZT17c3Bpbm5lclN0eWxlc30+XG5cdFx0XHRcdHtzcGlubmVyfVxuXHRcdFx0PC9zcGFuPlxuXHRcdFx0e2NoaWxkcmVufVxuXHRcdDwvQnV0dG9uPlxuXHQpO1xufTtcblxuTG9hZGluZ0J1dHRvbi5wcm9wVHlwZXMgPSB7XG5cdGxvYWRpbmc6IFByb3BUeXBlcy5ib29sLFxufTtcbkxvYWRpbmdCdXR0b24uZGVmYXVsdFByb3BzID0ge1xuXHRsb2FkaW5nOiBmYWxzZSxcbn07XG5cbmNvbnN0IGNsYXNzZXMgPSB7XG5cdHNwaW5uZXI6IHtcblx0XHRkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcblx0XHRvdmVyZmxvdzogJ2hpZGRlbicsXG5cdFx0dGV4dEFsaWduOiAnbGVmdCcsXG5cdFx0dHJhbnNpdGlvbjogJ3dpZHRoIDIwMG1zIGVhc2Utb3V0Jyxcblx0XHR2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcblx0fSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTG9hZGluZ0J1dHRvbjtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xuaW1wb3J0IHRoZW1lIGZyb20gJy4uLy4uLy4uL3RoZW1lJztcblxuZnVuY3Rpb24gTW9kYWxCb2R5ICh7XG5cdGNsYXNzTmFtZSxcblx0Li4ucHJvcHNcbn0pIHtcblx0cmV0dXJuIChcblx0XHQ8ZGl2XG5cdFx0XHRjbGFzc05hbWU9e2NzcyhjbGFzc2VzLmJvZHksIGNsYXNzTmFtZSl9XG5cdFx0XHR7Li4ucHJvcHN9XG5cdFx0Lz5cblx0KTtcbn07XG5cbmNvbnN0IGNsYXNzZXMgPSB7XG5cdGJvZHk6IHtcblx0XHRwYWRkaW5nQm90dG9tOiB0aGVtZS5tb2RhbC5wYWRkaW5nLmJvZHkudmVydGljYWwsXG5cdFx0cGFkZGluZ0xlZnQ6IHRoZW1lLm1vZGFsLnBhZGRpbmcuYm9keS5ob3Jpem9udGFsLFxuXHRcdHBhZGRpbmdSaWdodDogdGhlbWUubW9kYWwucGFkZGluZy5ib2R5Lmhvcml6b250YWwsXG5cdFx0cGFkZGluZ1RvcDogdGhlbWUubW9kYWwucGFkZGluZy5ib2R5LnZlcnRpY2FsLFxuXHR9LFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNb2RhbEJvZHk7XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xuaW1wb3J0IFNjcm9sbExvY2sgZnJvbSAnLi4vU2Nyb2xsTG9jayc7XG5pbXBvcnQgUG9ydGFsIGZyb20gJy4uL1BvcnRhbCc7XG5cbmltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi90aGVtZSc7XG5cbmNvbnN0IGNhblVzZURvbSA9ICEhKFxuXHR0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuXHQmJiB3aW5kb3cuZG9jdW1lbnRcblx0JiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnRcbik7XG5cbmNsYXNzIE1vZGFsRGlhbG9nIGV4dGVuZHMgQ29tcG9uZW50IHtcblx0Y29uc3RydWN0b3IgKCkge1xuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLmhhbmRsZUJhY2tkcm9wQ2xpY2sgPSB0aGlzLmhhbmRsZUJhY2tkcm9wQ2xpY2suYmluZCh0aGlzKTtcblx0XHR0aGlzLmhhbmRsZUtleWJvYXJkSW5wdXQgPSB0aGlzLmhhbmRsZUtleWJvYXJkSW5wdXQuYmluZCh0aGlzKTtcblx0fVxuXHRnZXRDaGlsZENvbnRleHQgKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRvbkNsb3NlOiB0aGlzLnByb3BzLm9uQ2xvc2UsXG5cdFx0fTtcblx0fVxuXHRjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIChuZXh0UHJvcHMpIHtcblx0XHRpZiAoIWNhblVzZURvbSkgcmV0dXJuO1xuXG5cdFx0Ly8gYWRkIGV2ZW50IGxpc3RlbmVyc1xuXHRcdGlmIChuZXh0UHJvcHMuaXNPcGVuICYmIG5leHRQcm9wcy5lbmFibGVLZXlib2FyZElucHV0KSB7XG5cdFx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5Ym9hcmRJbnB1dCk7XG5cdFx0fVxuXHRcdGlmICghbmV4dFByb3BzLmlzT3BlbiAmJiBuZXh0UHJvcHMuZW5hYmxlS2V5Ym9hcmRJbnB1dCkge1xuXHRcdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmhhbmRsZUtleWJvYXJkSW5wdXQpO1xuXHRcdH1cblx0fVxuXHRjb21wb25lbnRXaWxsVW5tb3VudCAoKSB7XG5cdFx0aWYgKHRoaXMucHJvcHMuZW5hYmxlS2V5Ym9hcmRJbnB1dCkge1xuXHRcdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmhhbmRsZUtleWJvYXJkSW5wdXQpO1xuXHRcdH1cblx0fVxuXG5cdC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXHQvLyBNZXRob2RzXG5cdC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5cdGhhbmRsZUtleWJvYXJkSW5wdXQgKGV2ZW50KSB7XG5cdFx0aWYgKGV2ZW50LmtleUNvZGUgPT09IDI3KSB0aGlzLnByb3BzLm9uQ2xvc2UoKTtcblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRoYW5kbGVCYWNrZHJvcENsaWNrIChlKSB7XG5cdFx0aWYgKGUudGFyZ2V0ICE9PSB0aGlzLnJlZnMuY29udGFpbmVyKSByZXR1cm47XG5cblx0XHR0aGlzLnByb3BzLm9uQ2xvc2UoKTtcblx0fVxuXG5cdC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXHQvLyBSZW5kZXJlcnNcblx0Ly8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cblx0cmVuZGVyRGlhbG9nICgpIHtcblx0XHRjb25zdCB7XG5cdFx0XHRiYWNrZHJvcENsb3Nlc01vZGFsLFxuXHRcdFx0Y2hpbGRyZW4sXG5cdFx0XHRpc09wZW4sXG5cdFx0XHR3aWR0aCxcblx0XHR9ID0gdGhpcy5wcm9wcztcblxuXHRcdGlmICghaXNPcGVuKSByZXR1cm4gPHNwYW4ga2V5PVwiY2xvc2VkXCIgLz47XG5cblx0XHRyZXR1cm4gKFxuXHRcdFx0PGRpdlxuXHRcdFx0XHRjbGFzc05hbWU9e2NzcyhjbGFzc2VzLmNvbnRhaW5lcil9XG5cdFx0XHRcdGtleT1cIm9wZW5cIlxuXHRcdFx0XHRyZWY9XCJjb250YWluZXJcIlxuXHRcdFx0XHRvbkNsaWNrPXshIWJhY2tkcm9wQ2xvc2VzTW9kYWwgJiYgdGhpcy5oYW5kbGVCYWNrZHJvcENsaWNrfVxuXHRcdFx0XHRvblRvdWNoRW5kPXshIWJhY2tkcm9wQ2xvc2VzTW9kYWwgJiYgdGhpcy5oYW5kbGVCYWNrZHJvcENsaWNrfVxuXHRcdFx0PlxuXHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT17Y3NzKGNsYXNzZXMuZGlhbG9nKX0gc3R5bGU9e3sgd2lkdGggfX0gZGF0YS1zY3JlZW4taWQ9XCJtb2RhbC1kaWFsb2dcIj5cblx0XHRcdFx0XHR7Y2hpbGRyZW59XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQ8U2Nyb2xsTG9jayAvPlxuXHRcdFx0PC9kaXY+XG5cdFx0KTtcblx0fVxuXHRyZW5kZXIgKCkge1xuXHRcdHJldHVybiAoXG5cdFx0XHQ8UG9ydGFsPlxuXHRcdFx0XHR7dGhpcy5yZW5kZXJEaWFsb2coKX1cblx0XHRcdDwvUG9ydGFsPlxuXHRcdCk7XG5cdH1cbn07XG5cbk1vZGFsRGlhbG9nLnByb3BUeXBlcyA9IHtcblx0YmFja2Ryb3BDbG9zZXNNb2RhbDogUHJvcFR5cGVzLmJvb2wsXG5cdGVuYWJsZUtleWJvYXJkSW5wdXQ6IFByb3BUeXBlcy5ib29sLFxuXHRpc09wZW46IFByb3BUeXBlcy5ib29sLFxuXHRvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXHR3aWR0aDogUHJvcFR5cGVzLm51bWJlcixcbn07XG5Nb2RhbERpYWxvZy5kZWZhdWx0UHJvcHMgPSB7XG5cdGVuYWJsZUtleWJvYXJkSW5wdXQ6IHRydWUsXG5cdHdpZHRoOiA3NjgsXG59O1xuTW9kYWxEaWFsb2cuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG5cdG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG59O1xuXG5jb25zdCBjbGFzc2VzID0ge1xuXHRjb250YWluZXI6IHtcblx0XHRhbGlnbkl0ZW1zOiAnY2VudGVyJyxcblx0XHRiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLm1vZGFsLmJhY2tncm91bmQsXG5cdFx0Ym94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG5cdFx0ZGlzcGxheTogJ2ZsZXgnLFxuXHRcdGhlaWdodDogJzEwMCUnLFxuXHRcdGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcblx0XHRsZWZ0OiAwLFxuXHRcdHBvc2l0aW9uOiAnZml4ZWQnLFxuXHRcdHRvcDogMCxcblx0XHR3aWR0aDogJzEwMCUnLFxuXHRcdHpJbmRleDogdGhlbWUubW9kYWwuekluZGV4LFxuXHR9LFxuXHRkaWFsb2c6IHtcblx0XHRiYWNrZ3JvdW5kQ29sb3I6ICd3aGl0ZScsXG5cdFx0Ym9yZGVyUmFkaXVzOiB0aGVtZS5ib3JkZXJSYWRpdXMuZGVmYXVsdCxcblx0XHRtYXhIZWlnaHQ6ICc5MCUnLFxuXHRcdG92ZXJmbG93WTogJ2F1dG8nLFxuXHRcdHBhZGRpbmdCb3R0b206IHRoZW1lLm1vZGFsLnBhZGRpbmcuZGlhbG9nLnZlcnRpY2FsLFxuXHRcdHBhZGRpbmdMZWZ0OiB0aGVtZS5tb2RhbC5wYWRkaW5nLmRpYWxvZy5ob3Jpem9udGFsLFxuXHRcdHBhZGRpbmdSaWdodDogdGhlbWUubW9kYWwucGFkZGluZy5kaWFsb2cuaG9yaXpvbnRhbCxcblx0XHRwYWRkaW5nVG9wOiB0aGVtZS5tb2RhbC5wYWRkaW5nLmRpYWxvZy52ZXJ0aWNhbCxcblx0XHRwb3NpdGlvbjogJ3JlbGF0aXZlJyxcblx0fSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1vZGFsRGlhbG9nO1xuIiwiaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XG5pbXBvcnQgdGhlbWUgZnJvbSAnLi4vLi4vLi4vdGhlbWUnO1xuXG5mdW5jdGlvbiBNb2RhbEZvb3RlciAoe1xuXHRhbGlnbixcblx0Y2xhc3NOYW1lLFxuXHQuLi5wcm9wc1xufSkge1xuXHRyZXR1cm4gKFxuXHRcdDxkaXYgey4uLnByb3BzfSBjbGFzc05hbWU9e2NzcyhjbGFzc2VzLmZvb3RlciwgY2xhc3Nlc1snYWxpZ25fXycgKyBhbGlnbl0sIGNsYXNzTmFtZSl9IC8+XG5cdCk7XG59O1xuXG5Nb2RhbEZvb3Rlci5wcm9wVHlwZXMgPSB7XG5cdGFsaWduOiBQcm9wVHlwZXMub25lT2YoWydjZW50ZXInLCAnbGVmdCcsICdyaWdodCddKSxcblx0Y2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXHRvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcblx0c2hvd0Nsb3NlQnV0dG9uOiBQcm9wVHlwZXMuYm9vbCxcblx0dGV4dDogUHJvcFR5cGVzLnN0cmluZyxcbn07XG5Nb2RhbEZvb3Rlci5kZWZhdWx0UHJvcHMgPSB7XG5cdGFsaWduOiAnbGVmdCcsXG59O1xuXG5jb25zdCBjbGFzc2VzID0ge1xuXHRmb290ZXI6IHtcblx0XHRib3JkZXJUb3A6IGAycHggc29saWQgJHt0aGVtZS5jb2xvci5ncmF5MTB9YCxcblx0XHRkaXNwbGF5OiAnZmxleCcsXG5cdFx0cGFkZGluZ0JvdHRvbTogdGhlbWUubW9kYWwucGFkZGluZy5mb290ZXIudmVydGljYWwsXG5cdFx0cGFkZGluZ0xlZnQ6IHRoZW1lLm1vZGFsLnBhZGRpbmcuZm9vdGVyLmhvcml6b250YWwsXG5cdFx0cGFkZGluZ1JpZ2h0OiB0aGVtZS5tb2RhbC5wYWRkaW5nLmZvb3Rlci5ob3Jpem9udGFsLFxuXHRcdHBhZGRpbmdUb3A6IHRoZW1lLm1vZGFsLnBhZGRpbmcuZm9vdGVyLnZlcnRpY2FsLFxuXHR9LFxuXG5cdC8vIGFsaWdubWVudFxuXHRhbGlnbl9fbGVmdDoge1xuXHRcdGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCcsXG5cdH0sXG5cdGFsaWduX19jZW50ZXI6IHtcblx0XHRqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG5cdH0sXG5cdGFsaWduX19yaWdodDoge1xuXHRcdGp1c3RpZnlDb250ZW50OiAnZmxleC1lbmQnLFxuXHR9LFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBNb2RhbEZvb3RlcjtcbiIsImltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xuaW1wb3J0IEdseXBoQnV0dG9uIGZyb20gJy4uL0dseXBoQnV0dG9uJztcbmltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi90aGVtZSc7XG5cbmZ1bmN0aW9uIE1vZGFsSGVhZGVyICh7XG5cdGNoaWxkcmVuLFxuXHRjbGFzc05hbWUsXG5cdHNob3dDbG9zZUJ1dHRvbixcblx0dGV4dCxcblx0Li4ucHJvcHNcbn0sIHtcblx0b25DbG9zZSxcbn0pIHtcblx0Ly8gUHJvcGVydHkgVmlvbGF0aW9uXG5cdGlmIChjaGlsZHJlbiAmJiB0ZXh0KSB7XG5cdFx0Y29uc29sZS5lcnJvcignV2FybmluZzogTW9kYWxIZWFkZXIgY2Fubm90IHJlbmRlciBgY2hpbGRyZW5gIGFuZCBgdGV4dGAuIFlvdSBtdXN0IHByb3ZpZGUgb25lIG9yIHRoZSBvdGhlci4nKTtcblx0fVxuXG5cdHJldHVybiAoXG5cdFx0PGRpdiB7Li4ucHJvcHN9IGNsYXNzTmFtZT17Y3NzKGNsYXNzZXMuaGVhZGVyLCBjbGFzc05hbWUpfT5cblx0XHRcdDxkaXYgY2xhc3NOYW1lPXtjc3MoY2xhc3Nlcy5ncm93KX0+XG5cdFx0XHRcdHt0ZXh0ID8gKFxuXHRcdFx0XHRcdDxoNCBjbGFzc05hbWU9e2NzcyhjbGFzc2VzLnRleHQpfT5cblx0XHRcdFx0XHRcdHt0ZXh0fVxuXHRcdFx0XHRcdDwvaDQ+XG5cdFx0XHRcdCkgOiBjaGlsZHJlbn1cblx0XHRcdDwvZGl2PlxuXHRcdFx0eyEhb25DbG9zZSAmJiBzaG93Q2xvc2VCdXR0b24gJiYgKFxuXHRcdFx0XHQ8R2x5cGhCdXR0b25cblx0XHRcdFx0XHRjc3NTdHlsZXM9e2NsYXNzZXMuY2xvc2V9XG5cdFx0XHRcdFx0Y29sb3I9XCJjYW5jZWxcIlxuXHRcdFx0XHRcdGdseXBoPVwieFwiXG5cdFx0XHRcdFx0b25DbGljaz17b25DbG9zZX1cblx0XHRcdFx0XHR2YXJpYW50PVwibGlua1wiXG5cdFx0XHRcdC8+XG5cdFx0XHQpfVxuXHRcdDwvZGl2PlxuXHQpO1xufTtcblxuTW9kYWxIZWFkZXIucHJvcFR5cGVzID0ge1xuXHRjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cdG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxuXHRzaG93Q2xvc2VCdXR0b246IFByb3BUeXBlcy5ib29sLFxuXHR0ZXh0OiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcbk1vZGFsSGVhZGVyLmNvbnRleHRUeXBlcyA9IHtcblx0b25DbG9zZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbn07XG5cbmNvbnN0IGNsYXNzZXMgPSB7XG5cdGhlYWRlcjoge1xuXHRcdGFsaWduSXRlbXM6ICdjZW50ZXInLFxuXHRcdGJvcmRlckJvdHRvbTogYDJweCBzb2xpZCAke3RoZW1lLmNvbG9yLmdyYXkxMH1gLFxuXHRcdGRpc3BsYXk6ICdmbGV4Jyxcblx0XHRwYWRkaW5nQm90dG9tOiB0aGVtZS5tb2RhbC5wYWRkaW5nLmhlYWRlci52ZXJ0aWNhbCxcblx0XHRwYWRkaW5nTGVmdDogdGhlbWUubW9kYWwucGFkZGluZy5oZWFkZXIuaG9yaXpvbnRhbCxcblx0XHRwYWRkaW5nUmlnaHQ6IHRoZW1lLm1vZGFsLnBhZGRpbmcuaGVhZGVyLmhvcml6b250YWwsXG5cdFx0cGFkZGluZ1RvcDogdGhlbWUubW9kYWwucGFkZGluZy5oZWFkZXIudmVydGljYWwsXG5cdH0sXG5cblx0Ly8gZmlsbCBzcGFjZSB0byBwdXNoIHRoZSBjbG9zZSBidXR0b24gcmlnaHRcblx0Z3Jvdzoge1xuXHRcdGZsZXhHcm93OiAxLFxuXHR9LFxuXG5cdC8vIHRpdGxlIHRleHRcblx0dGV4dDoge1xuXHRcdGNvbG9yOiAnaW5oZXJpdCcsXG5cdFx0Zm9udFNpemU6IDE4LFxuXHRcdGZvbnRXZWlnaHQ6IDUwMCxcblx0XHRsaW5lSGVpZ2h0OiAxLFxuXHRcdG1hcmdpbjogMCxcblx0fSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTW9kYWxIZWFkZXI7XG4iLCJpbXBvcnQgQm9keSBmcm9tICcuL2JvZHknO1xuaW1wb3J0IERpYWxvZyBmcm9tICcuL2RpYWxvZyc7XG5pbXBvcnQgRm9vdGVyIGZyb20gJy4vZm9vdGVyJztcbmltcG9ydCBIZWFkZXIgZnJvbSAnLi9oZWFkZXInO1xuXG5leHBvcnQge1xuXHRCb2R5LFxuXHREaWFsb2csXG5cdEZvb3Rlcixcblx0SGVhZGVyLFxufTtcbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUGFnZSBmcm9tICcuL3BhZ2UnO1xuaW1wb3J0IHRoZW1lIGZyb20gJy4uLy4uLy4uL3RoZW1lJztcblxuY2xhc3MgUGFnaW5hdGlvbiBleHRlbmRzIENvbXBvbmVudCB7XG5cdHJlbmRlckNvdW50ICgpIHtcblx0XHRsZXQgY291bnQgPSAnJztcblx0XHRjb25zdCB7IGN1cnJlbnRQYWdlLCBwYWdlU2l6ZSwgcGx1cmFsLCBzaW5ndWxhciwgdG90YWwgfSA9IHRoaXMucHJvcHM7XG5cdFx0aWYgKCF0b3RhbCkge1xuXHRcdFx0Y291bnQgPSAnTm8gJyArIChwbHVyYWwgfHwgJ3JlY29yZHMnKTtcblx0XHR9IGVsc2UgaWYgKHRvdGFsID4gcGFnZVNpemUpIHtcblx0XHRcdGxldCBzdGFydCA9IChwYWdlU2l6ZSAqIChjdXJyZW50UGFnZSAtIDEpKSArIDE7XG5cdFx0XHRsZXQgZW5kID0gTWF0aC5taW4oc3RhcnQgKyBwYWdlU2l6ZSAtIDEsIHRvdGFsKTtcblx0XHRcdGNvdW50ID0gYFNob3dpbmcgJHtzdGFydH0gdG8gJHtlbmR9IG9mICR7dG90YWx9YDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y291bnQgPSAnU2hvd2luZyAnICsgdG90YWw7XG5cdFx0XHRpZiAodG90YWwgPiAxICYmIHBsdXJhbCkge1xuXHRcdFx0XHRjb3VudCArPSAnICcgKyBwbHVyYWw7XG5cdFx0XHR9IGVsc2UgaWYgKHRvdGFsID09PSAxICYmIHNpbmd1bGFyKSB7XG5cdFx0XHRcdGNvdW50ICs9ICcgJyArIHNpbmd1bGFyO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gKFxuXHRcdFx0PGRpdiBjbGFzc05hbWU9e2NzcyhjbGFzc2VzLmNvdW50KX0gZGF0YS1lMmUtcGFnaW5hdGlvbi1jb3VudD57Y291bnR9PC9kaXY+XG5cdFx0KTtcblx0fVxuXHRyZW5kZXJQYWdlcyAoKSB7XG5cdFx0Y29uc3QgeyBjdXJyZW50UGFnZSwgbGltaXQsIG9uUGFnZVNlbGVjdCwgcGFnZVNpemUsIHRvdGFsIH0gPSB0aGlzLnByb3BzO1xuXG5cdFx0aWYgKHRvdGFsIDw9IHBhZ2VTaXplKSByZXR1cm4gbnVsbDtcblxuXHRcdGxldCBwYWdlcyA9IFtdO1xuXHRcdGxldCB0b3RhbFBhZ2VzID0gTWF0aC5jZWlsKHRvdGFsIC8gcGFnZVNpemUpO1xuXHRcdGxldCBtaW5QYWdlID0gMTtcblx0XHRsZXQgbWF4UGFnZSA9IHRvdGFsUGFnZXM7XG5cblx0XHRpZiAobGltaXQgJiYgKGxpbWl0IDwgdG90YWxQYWdlcykpIHtcblx0XHRcdGxldCByaWdodExpbWl0ID0gTWF0aC5mbG9vcihsaW1pdCAvIDIpO1xuXHRcdFx0bGV0IGxlZnRMaW1pdCA9IHJpZ2h0TGltaXQgKyAobGltaXQgJSAyKSAtIDE7XG5cdFx0XHRtaW5QYWdlID0gY3VycmVudFBhZ2UgLSBsZWZ0TGltaXQ7XG5cdFx0XHRtYXhQYWdlID0gY3VycmVudFBhZ2UgKyByaWdodExpbWl0O1xuXG5cdFx0XHRpZiAobWluUGFnZSA8IDEpIHtcblx0XHRcdFx0bWF4UGFnZSA9IGxpbWl0O1xuXHRcdFx0XHRtaW5QYWdlID0gMTtcblx0XHRcdH1cblx0XHRcdGlmIChtYXhQYWdlID4gdG90YWxQYWdlcykge1xuXHRcdFx0XHRtaW5QYWdlID0gdG90YWxQYWdlcyAtIGxpbWl0ICsgMTtcblx0XHRcdFx0bWF4UGFnZSA9IHRvdGFsUGFnZXM7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChtaW5QYWdlID4gMSkge1xuXHRcdFx0cGFnZXMucHVzaCg8UGFnZSBrZXk9XCJwYWdlX3N0YXJ0XCIgb25DbGljaz17KCkgPT4gb25QYWdlU2VsZWN0KDEpfT4uLi48L1BhZ2U+KTtcblx0XHR9XG5cdFx0Zm9yIChsZXQgcGFnZSA9IG1pblBhZ2U7IHBhZ2UgPD0gbWF4UGFnZTsgcGFnZSsrKSB7XG5cdFx0XHRsZXQgc2VsZWN0ZWQgPSAocGFnZSA9PT0gY3VycmVudFBhZ2UpO1xuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXG5cdFx0XHRwYWdlcy5wdXNoKDxQYWdlIGtleT17J3BhZ2VfJyArIHBhZ2V9IHNlbGVjdGVkPXtzZWxlY3RlZH0gb25DbGljaz17KCkgPT4gb25QYWdlU2VsZWN0KHBhZ2UpfT57cGFnZX08L1BhZ2U+KTtcblx0XHRcdC8qIGVzbGludC1lbmFibGUgKi9cblx0XHR9XG5cdFx0aWYgKG1heFBhZ2UgPCB0b3RhbFBhZ2VzKSB7XG5cdFx0XHRwYWdlcy5wdXNoKDxQYWdlIGtleT1cInBhZ2VfZW5kXCIgb25DbGljaz17KCkgPT4gb25QYWdlU2VsZWN0KHRvdGFsUGFnZXMpfT4uLi48L1BhZ2U+KTtcblx0XHR9XG5cdFx0cmV0dXJuIChcblx0XHRcdDxkaXYgY2xhc3NOYW1lPXtjc3MoY2xhc3Nlcy5saXN0KX0+XG5cdFx0XHRcdHtwYWdlc31cblx0XHRcdDwvZGl2PlxuXHRcdCk7XG5cdH1cblx0cmVuZGVyICgpIHtcblx0XHRjb25zdCBjbGFzc05hbWUgPSBjc3MoY2xhc3Nlcy5jb250YWluZXIsIHRoaXMucHJvcHMuY2xhc3NOYW1lKTtcblx0XHRyZXR1cm4gKFxuXHRcdFx0PGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZX0gc3R5bGU9e3RoaXMucHJvcHMuc3R5bGV9PlxuXHRcdFx0XHR7dGhpcy5yZW5kZXJDb3VudCgpfVxuXHRcdFx0XHR7dGhpcy5yZW5kZXJQYWdlcygpfVxuXHRcdFx0PC9kaXY+XG5cdFx0KTtcblx0fVxufTtcblxuY29uc3QgY2xhc3NlcyA9IHtcblx0Y29udGFpbmVyOiB7XG5cdFx0ZGlzcGxheTogJ2Jsb2NrJyxcblx0XHRsaW5lSGVpZ2h0OiB0aGVtZS5jb21wb25lbnQubGluZUhlaWdodCxcblx0XHRtYXJnaW5Cb3R0b206ICcyZW0nLFxuXHR9LFxuXHRjb3VudDoge1xuXHRcdGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuXHRcdG1hcmdpblJpZ2h0OiAnMWVtJyxcblx0XHR2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcblx0fSxcblx0bGlzdDoge1xuXHRcdGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuXHRcdHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuXHR9LFxufTtcblxuUGFnaW5hdGlvbi5wcm9wVHlwZXMgPSB7XG5cdGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblx0Y3VycmVudFBhZ2U6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcblx0bGltaXQ6IFByb3BUeXBlcy5udW1iZXIsXG5cdG9uUGFnZVNlbGVjdDogUHJvcFR5cGVzLmZ1bmMsXG5cdHBhZ2VTaXplOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG5cdHBsdXJhbDogUHJvcFR5cGVzLnN0cmluZyxcblx0c2luZ3VsYXI6IFByb3BUeXBlcy5zdHJpbmcsXG5cdHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuXHR0b3RhbDogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQYWdpbmF0aW9uO1xuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcbmltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdGhlbWUgZnJvbSAnLi4vLi4vLi4vdGhlbWUnO1xuXG5mdW5jdGlvbiBQYWdlICh7XG5cdGRpc2FibGVkLFxuXHRzZWxlY3RlZCxcblx0Li4ucHJvcHNcbn0pIHtcblx0cHJvcHMuY2xhc3NOYW1lID0gY3NzKFxuXHRcdGNsYXNzZXMucGFnZSxcblx0XHQhIWRpc2FibGVkICYmIGNsYXNzZXMuZGlzYWJsZWQsXG5cdFx0ISFzZWxlY3RlZCAmJiBjbGFzc2VzLnNlbGVjdGVkXG5cdCk7XG5cdHJldHVybiAoXG5cdFx0PGJ1dHRvbiB7Li4ucHJvcHN9IC8+XG5cdCk7XG59O1xuXG5QYWdlLnByb3BUeXBlcyA9IHtcblx0ZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXHRvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXHRzZWxlY3RlZDogUHJvcFR5cGVzLmJvb2wsXG59O1xuXG4vKiBlc2xpbnQgcXVvdGUtcHJvcHM6IFtcImVycm9yXCIsIFwiYXMtbmVlZGVkXCJdICovXG5cbmNvbnN0IHNlbGVjdGVkU3R5bGUgPSB7XG5cdGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFnaW5hdGlvbi5zZWxlY3RlZC5iYWNrZ3JvdW5kLFxuXHRib3JkZXJDb2xvcjogdGhlbWUucGFnaW5hdGlvbi5zZWxlY3RlZC5ib3JkZXIsXG5cdGNvbG9yOiB0aGVtZS5wYWdpbmF0aW9uLnNlbGVjdGVkLmNvbG9yLFxuXHRjdXJzb3I6ICdkZWZhdWx0Jyxcblx0ekluZGV4OiAyLFxufTtcbmNvbnN0IHBzZXVkb1N0eWxlID0ge1xuXHRiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhZ2luYXRpb24uaG92ZXIuYmFja2dyb3VuZCxcblx0Ym9yZGVyQ29sb3I6IHRoZW1lLnBhZ2luYXRpb24uaG92ZXIuYm9yZGVyLFxuXHRjb2xvcjogdGhlbWUucGFnaW5hdGlvbi5ob3Zlci5jb2xvcixcblx0b3V0bGluZTogJ25vbmUnLFxufTtcblxuY29uc3QgY2xhc3NlcyA9IHtcblx0cGFnZToge1xuXHRcdGFwcGVhcmFuY2U6ICdub25lJyxcblx0XHRiYWNrZ3JvdW5kOiAnbm9uZScsXG5cdFx0Ym9yZGVyOiAnMXB4IHNvbGlkIHRyYW5zcGFyZW50Jyxcblx0XHRib3JkZXJSYWRpdXM6IHRoZW1lLmJvcmRlclJhZGl1cy5kZWZhdWx0LFxuXHRcdGNvbG9yOiB0aGVtZS5wYWdpbmF0aW9uLmNvbG9yLFxuXHRcdGN1cnNvcjogJ3BvaW50ZXInLFxuXHRcdGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuXHRcdGZsb2F0OiAnbGVmdCcsIC8vIENvbGxhcHNlIHdoaXRlLXNwYWNlXG5cdFx0bWFyZ2luUmlnaHQ6ICcwLjI1ZW0nLFxuXHRcdHBhZGRpbmc6ICcwIC43ZW0nLFxuXHRcdHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuXHRcdHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG5cblx0XHQvLyBoYW5kbGUgaG92ZXIgYW5kIGZvY3VzXG5cdFx0Jzpob3Zlcic6IHBzZXVkb1N0eWxlLFxuXHRcdCc6Zm9jdXMnOiBwc2V1ZG9TdHlsZSxcblx0fSxcblxuXHQvLyBzZWxlY3RlZCBwYWdlXG5cdHNlbGVjdGVkOiB7XG5cdFx0Li4uc2VsZWN0ZWRTdHlsZSxcblxuXHRcdCc6aG92ZXInOiBzZWxlY3RlZFN0eWxlLFxuXHRcdCc6Zm9jdXMnOiBzZWxlY3RlZFN0eWxlLFxuXHR9LFxuXG5cdC8vIGRpc2FibGVkIHBhZ2VcblxuXHRkaXNhYmxlZDoge1xuXHRcdGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFnaW5hdGlvbi5kaXNhYmxlZC5iYWNrZ3JvdW5kLFxuXHRcdGJvcmRlckNvbG9yOiB0aGVtZS5wYWdpbmF0aW9uLmRpc2FibGVkLmJhY2tncm91bmQsXG5cdFx0Y29sb3I6IHRoZW1lLnBhZ2luYXRpb24uZGlzYWJsZWQuY29sb3IsXG5cdFx0Y3Vyc29yOiAnZGVmYXVsdCcsXG5cdH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBQYWdlO1xuIiwiaW1wb3J0IHsgQ2hpbGRyZW4sIENvbXBvbmVudCwgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xuXG4vLyBQYXNzIHRoZSBMaWdodGJveCBjb250ZXh0IHRocm91Z2ggdG8gdGhlIFBvcnRhbCdzIGRlc2NlbmRlbnRzXG4vLyBTdGFja092ZXJmbG93IGRpc2N1c3Npb24gaHR0cDovL2dvby5nbC9vY2xySjlcblxuY2xhc3MgUGFzc0NvbnRleHQgZXh0ZW5kcyBDb21wb25lbnQge1xuXHRnZXRDaGlsZENvbnRleHQgKCkge1xuXHRcdHJldHVybiB0aGlzLnByb3BzLmNvbnRleHQ7XG5cdH1cblx0cmVuZGVyICgpIHtcblx0XHRyZXR1cm4gQ2hpbGRyZW4ub25seSh0aGlzLnByb3BzLmNoaWxkcmVuKTtcblx0fVxufTtcblxuUGFzc0NvbnRleHQucHJvcFR5cGVzID0ge1xuXHRjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG59O1xuUGFzc0NvbnRleHQuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG5cdG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgUGFzc0NvbnRleHQ7XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgVHJhbnNpdGlvbiBmcm9tICdyZWFjdC1hZGRvbnMtY3NzLXRyYW5zaXRpb24tZ3JvdXAnO1xuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBQYXNzQ29udGV4dCBmcm9tICcuLi9QYXNzQ29udGV4dCc7XG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9ydGFsIGV4dGVuZHMgQ29tcG9uZW50IHtcblx0Y29uc3RydWN0b3IgKCkge1xuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy5wb3J0YWxFbGVtZW50ID0gbnVsbDtcblx0fVxuXHRjb21wb25lbnREaWRNb3VudCAoKSB7XG5cdFx0Y29uc3QgcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHRcdGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocCk7XG5cdFx0dGhpcy5wb3J0YWxFbGVtZW50ID0gcDtcblx0XHR0aGlzLmNvbXBvbmVudERpZFVwZGF0ZSgpO1xuXHR9XG5cdGNvbXBvbmVudERpZFVwZGF0ZSAoKSB7XG5cdFx0Ly8gQW5pbWF0ZSBmYWRlIG9uIG1vdW50L3VubW91bnRcblx0XHRjb25zdCBkdXJhdGlvbiA9IDIwMDtcblx0XHRjb25zdCBzdHlsZXMgPSBgXG5cdFx0XHRcdC5mYWRlLWVudGVyIHsgb3BhY2l0eTogMC4wMTsgfVxuXHRcdFx0XHQuZmFkZS1lbnRlci5mYWRlLWVudGVyLWFjdGl2ZSB7IG9wYWNpdHk6IDE7IHRyYW5zaXRpb246IG9wYWNpdHkgJHtkdXJhdGlvbn1tczsgfVxuXHRcdFx0XHQuZmFkZS1sZWF2ZSB7IG9wYWNpdHk6IDE7IH1cblx0XHRcdFx0LmZhZGUtbGVhdmUuZmFkZS1sZWF2ZS1hY3RpdmUgeyBvcGFjaXR5OiAwLjAxOyB0cmFuc2l0aW9uOiBvcGFjaXR5ICR7ZHVyYXRpb259bXM7IH1cblx0XHRgO1xuXHRcdHJlbmRlcihcblx0XHRcdDxQYXNzQ29udGV4dCBjb250ZXh0PXt0aGlzLmNvbnRleHR9PlxuXHRcdFx0XHQ8ZGl2PlxuXHRcdFx0XHRcdDxzdHlsZT57c3R5bGVzfTwvc3R5bGU+XG5cdFx0XHRcdFx0PFRyYW5zaXRpb25cblx0XHRcdFx0XHRcdGNvbXBvbmVudD1cImRpdlwiXG5cdFx0XHRcdFx0XHR0cmFuc2l0aW9uTmFtZT1cImZhZGVcIlxuXHRcdFx0XHRcdFx0dHJhbnNpdGlvbkVudGVyVGltZW91dD17ZHVyYXRpb259XG5cdFx0XHRcdFx0XHR0cmFuc2l0aW9uTGVhdmVUaW1lb3V0PXtkdXJhdGlvbn1cblx0XHRcdFx0XHRcdHsuLi50aGlzLnByb3BzfVxuXHRcdFx0XHRcdC8+XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0PC9QYXNzQ29udGV4dD4sXG5cdFx0XHR0aGlzLnBvcnRhbEVsZW1lbnRcblx0XHQpO1xuXHR9XG5cdGNvbXBvbmVudFdpbGxVbm1vdW50ICgpIHtcblx0XHRkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHRoaXMucG9ydGFsRWxlbWVudCk7XG5cdH1cblx0cmVuZGVyICgpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxufVxuXG5Qb3J0YWwuY29udGV4dFR5cGVzID0ge1xuXHRvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdGhlbWUgZnJvbSAnLi4vLi4vLi4vdGhlbWUnO1xuXG4vLyBVc2luZyB3aW5kb3cuaW5uZXJXaWR0aCBhbmQgc3RhdGUgaW5zdGVhZCBvZiBDU1MgbWVkaWEgYnJlYWtwb2ludHNcbi8vIGJlY2F1c2Ugd2Ugd2FudCB0byByZW5kZXIgbnVsbCByYXRoZXIgdGhhbiBhbiBlbXB0eSBzcGFuLiBBbGxvd2luZyBmb3Jcbi8vIENTUyBwc2V1ZG8gY2xhc3NlcyBsaWtlIDpvbmx5LWNoaWxkIHRvIGJlaGF2ZSBhcyBleHBlY3RlZC5cblxuLy8gUmV0dXJuIHRydWUgaWYgd2luZG93ICsgZG9jdW1lbnRcbmNvbnN0IGNhblVzZURPTSA9ICEhKFxuXHR0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuXHQmJiB3aW5kb3cuZG9jdW1lbnRcblx0JiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnRcbik7XG5cbmNsYXNzIFJlc3BvbnNpdmVUZXh0IGV4dGVuZHMgQ29tcG9uZW50IHtcblx0Y29uc3RydWN0b3IgKCkge1xuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy5oYW5kbGVSZXNpemUgPSB0aGlzLmhhbmRsZVJlc2l6ZS5iaW5kKHRoaXMpO1xuXHRcdHRoaXMuc3RhdGUgPSB7XG5cdFx0XHR3aW5kb3dXaWR0aDogY2FuVXNlRE9NID8gd2luZG93LmlubmVyV2lkdGggOiAwLFxuXHRcdH07XG5cdH1cblx0Y29tcG9uZW50RGlkTW91bnQgKCkge1xuXHRcdGlmIChjYW5Vc2VET00pIHtcblx0XHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmhhbmRsZVJlc2l6ZSk7XG5cdFx0XHR0aGlzLmhhbmRsZVJlc2l6ZSgpO1xuXHRcdH1cblx0fVxuXHRjb21wb25lbnRXaWxsVW5tb3VudCAoKSB7XG5cdFx0aWYgKGNhblVzZURPTSkge1xuXHRcdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlUmVzaXplKTtcblx0XHR9XG5cdH1cblx0aGFuZGxlUmVzaXplICgpIHtcblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdHdpbmRvd1dpZHRoOiBjYW5Vc2VET00gPyB3aW5kb3cuaW5uZXJXaWR0aCA6IDAsXG5cdFx0fSk7XG5cdH1cblx0cmVuZGVyICgpIHtcblx0XHRjb25zdCB7XG5cdFx0XHRjb21wb25lbnQ6IENvbXBvbmVudCxcblx0XHRcdGhpZGRlbkxHLFxuXHRcdFx0aGlkZGVuTUQsXG5cdFx0XHRoaWRkZW5TTSxcblx0XHRcdGhpZGRlblhTLFxuXHRcdFx0dmlzaWJsZUxHLFxuXHRcdFx0dmlzaWJsZU1ELFxuXHRcdFx0dmlzaWJsZVNNLFxuXHRcdFx0dmlzaWJsZVhTLFxuXHRcdFx0Li4ucHJvcHNcblx0XHR9ID0gdGhpcy5wcm9wcztcblx0XHRjb25zdCB7IHdpbmRvd1dpZHRoIH0gPSB0aGlzLnN0YXRlO1xuXG5cdFx0bGV0IHRleHQ7XG5cblx0XHQvLyBzZXQgdGV4dCB2YWx1ZSBmcm9tIGJyZWFrcG9pbnQ7IGF0dGVtcHQgWFMgLS0+IExHXG5cdFx0aWYgKHdpbmRvd1dpZHRoIDwgdGhlbWUuYnJlYWtwb2ludE51bWVyaWMubW9iaWxlKSB7XG5cdFx0XHR0ZXh0ID0gdmlzaWJsZVhTIHx8IGhpZGRlblNNIHx8IGhpZGRlbk1EIHx8IGhpZGRlbkxHO1xuXHRcdH0gZWxzZSBpZiAod2luZG93V2lkdGggPCB0aGVtZS5icmVha3BvaW50TnVtZXJpYy50YWJsZXRQb3J0cmFpdCkge1xuXHRcdFx0dGV4dCA9IGhpZGRlblhTIHx8IHZpc2libGVTTSB8fCBoaWRkZW5NRCB8fCBoaWRkZW5MRztcblx0XHR9IGVsc2UgaWYgKHdpbmRvd1dpZHRoIDwgdGhlbWUuYnJlYWtwb2ludE51bWVyaWMudGFibGV0TGFuZHNjYXBlKSB7XG5cdFx0XHR0ZXh0ID0gaGlkZGVuWFMgfHwgaGlkZGVuU00gfHwgdmlzaWJsZU1EIHx8IGhpZGRlbkxHO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0ZXh0ID0gaGlkZGVuWFMgfHwgaGlkZGVuU00gfHwgaGlkZGVuTUQgfHwgdmlzaWJsZUxHO1xuXHRcdH1cblxuXHRcdHJldHVybiB0ZXh0ID8gPENvbXBvbmVudCB7Li4ucHJvcHN9Pnt0ZXh0fTwvQ29tcG9uZW50PiA6IG51bGw7XG5cdH1cbn07XG5cblJlc3BvbnNpdmVUZXh0LnByb3BUeXBlcyA9IHtcblx0aGlkZGVuTEc6IFByb3BUeXBlcy5zdHJpbmcsXG5cdGhpZGRlbk1EOiBQcm9wVHlwZXMuc3RyaW5nLFxuXHRoaWRkZW5TTTogUHJvcFR5cGVzLnN0cmluZyxcblx0aGlkZGVuWFM6IFByb3BUeXBlcy5zdHJpbmcsXG5cdHZpc2libGVMRzogUHJvcFR5cGVzLnN0cmluZyxcblx0dmlzaWJsZU1EOiBQcm9wVHlwZXMuc3RyaW5nLFxuXHR2aXNpYmxlU006IFByb3BUeXBlcy5zdHJpbmcsXG5cdHZpc2libGVYUzogUHJvcFR5cGVzLnN0cmluZyxcbn07XG5SZXNwb25zaXZlVGV4dC5kZWZhdWx0UHJvcHMgPSB7XG5cdGNvbXBvbmVudDogJ3NwYW4nLFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZXNwb25zaXZlVGV4dDtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xuXG5mdW5jdGlvbiBTY3JlZW5SZWFkZXJPbmx5ICh7IGNsYXNzTmFtZSwgLi4ucHJvcHMgfSkge1xuXHRwcm9wcy5jbGFzc05hbWUgPSBjc3MoY2xhc3Nlcy5zck9ubHksIGNsYXNzTmFtZSk7XG5cblx0cmV0dXJuIDxzcGFuIHsuLi5wcm9wc30gLz47XG59O1xuXG5jb25zdCBjbGFzc2VzID0ge1xuXHRzck9ubHk6IHtcblx0XHRib3JkZXI6IDAsXG5cdFx0Y2xpcDogJ3JlY3QoMCwwLDAsMCknLFxuXHRcdGhlaWdodDogMSxcblx0XHRtYXJnaW46IC0xLFxuXHRcdG92ZXJmbG93OiAnaGlkZGVuJyxcblx0XHRwYWRkaW5nOiAwLFxuXHRcdHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuXHRcdHdpZHRoOiAxLFxuXHR9LFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTY3JlZW5SZWFkZXJPbmx5O1xuIiwiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTY3JvbGxMb2NrIGV4dGVuZHMgQ29tcG9uZW50IHtcblx0Y29uc3RydWN0b3IgKCkge1xuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy5sb2NrQ291bnQgPSAwO1xuXHR9XG5cdGNvbXBvbmVudFdpbGxNb3VudCAoKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSByZXR1cm47XG5cblx0XHR0aGlzLmxvY2tDb3VudCsrO1xuXHRcdGlmICh0aGlzLmxvY2tDb3VudCA+IDEpIHJldHVybjtcblxuXHRcdC8vXHRGSVhNRSBpT1MgaWdub3JlcyBvdmVyZmxvdyBvbiBib2R5XG5cdFx0dHJ5IHtcblx0XHRcdGNvbnN0IHNjcm9sbEJhcldpZHRoID0gd2luZG93LmlubmVyV2lkdGggLSBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoO1xuXG5cdFx0XHRjb25zdCB0YXJnZXQgPSBkb2N1bWVudC5ib2R5O1xuXG5cdFx0XHR0YXJnZXQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gc2Nyb2xsQmFyV2lkdGggKyAncHgnO1xuXHRcdFx0dGFyZ2V0LnN0eWxlLm92ZXJmbG93WSA9ICdoaWRkZW4nO1xuXHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0Y29uc29sZS5lcnJvcignRmFpbGVkIHRvIGZpbmQgYm9keSBlbGVtZW50LiBFcnI6JywgZXJyKTtcblx0XHR9XG5cdH1cblx0Y29tcG9uZW50V2lsbFVubW91bnQgKCkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyB8fCB0aGlzLmxvY2tDb3VudCA9PT0gMCkgcmV0dXJuO1xuXG5cdFx0dGhpcy5sb2NrQ291bnQtLTtcblx0XHRpZiAodGhpcy5sb2NrQ291bnQgPiAwKSByZXR1cm47IC8vIFN0aWxsIGxvY2tlZFxuXG5cdFx0Ly9cdEZJWE1FIGlPUyBpZ25vcmVzIG92ZXJmbG93IG9uIGJvZHlcblx0XHR0cnkge1xuXHRcdFx0Y29uc3QgdGFyZ2V0ID0gZG9jdW1lbnQuYm9keTtcblxuXHRcdFx0dGFyZ2V0LnN0eWxlLnBhZGRpbmdSaWdodCA9ICcnO1xuXHRcdFx0dGFyZ2V0LnN0eWxlLm92ZXJmbG93WSA9ICcnO1xuXG5cdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZmluZCBib2R5IGVsZW1lbnQuIEVycjonLCBlcnIpO1xuXHRcdH1cblx0fVxuXHRyZW5kZXIgKCkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG59XG4iLCJpbXBvcnQgdGhlbWUgZnJvbSAnLi4vLi4vLi4vdGhlbWUnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0ZGFuZ2VyOiB0aGVtZS5jb2xvci5kYW5nZXIsXG5cdGRlZmF1bHQ6IHRoZW1lLmNvbG9yLmdyYXk4MCxcblx0ZXJyb3I6IHRoZW1lLmNvbG9yLmRhbmdlcixcblx0aW5mbzogdGhlbWUuY29sb3IuaW5mbyxcblx0cHJpbWFyeTogdGhlbWUuY29sb3IucHJpbWFyeSxcblx0c3VjY2VzczogdGhlbWUuY29sb3Iuc3VjY2Vzcyxcblx0d2FybmluZzogdGhlbWUuY29sb3Iud2FybmluZyxcbn07XG4iLCJpbXBvcnQgUmVhY3QsIHsgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcbmltcG9ydCBjbGFzc2VzIGZyb20gJy4vc3R5bGVzJztcbmltcG9ydCBjb2xvcnMgZnJvbSAnLi9jb2xvcnMnO1xuXG5mdW5jdGlvbiBTZWdtZW50ZWRDb250cm9sICh7XG5cdGNsYXNzTmFtZSxcblx0Y29sb3IsXG5cdGNyb3BUZXh0LFxuXHRlcXVhbFdpZHRoU2VnbWVudHMsXG5cdGlubGluZSxcblx0b25DaGFuZ2UsXG5cdG9wdGlvbnMsXG5cdHZhbHVlLFxuXHQuLi5wcm9wc1xufSkge1xuXHRwcm9wcy5jbGFzc05hbWUgPSBjc3MoXG5cdFx0Y2xhc3Nlcy5jb250cm9sLFxuXHRcdGlubGluZSA/IGNsYXNzZXMuY29udHJvbF9faW5saW5lIDogbnVsbCxcblx0XHRjbGFzc05hbWVcblx0KTtcblxuXHRyZXR1cm4gKFxuXHRcdDxkaXYgey4uLnByb3BzfT5cblx0XHRcdHtvcHRpb25zLm1hcCgob3B0KSA9PiB7XG5cdFx0XHRcdGNvbnN0IGJ1dHRvbkNsYXNzTmFtZSA9IGNzcyhcblx0XHRcdFx0XHRjbGFzc2VzLmJ1dHRvbixcblx0XHRcdFx0XHRvcHQuZGlzYWJsZWQgPyBjbGFzc2VzLmJ1dHRvbl9fZGlzYWJsZWQgOiBudWxsLFxuXHRcdFx0XHRcdG9wdC52YWx1ZSA9PT0gdmFsdWUgPyBjbGFzc2VzWydidXR0b25fXycgKyBjb2xvcl0gOiBudWxsLFxuXHRcdFx0XHRcdGNyb3BUZXh0ID8gY2xhc3Nlcy5idXR0b25fX2Nyb3BUZXh0IDogbnVsbCxcblx0XHRcdFx0XHRlcXVhbFdpZHRoU2VnbWVudHMgPyBjbGFzc2VzLmJ1dHRvbl9fZXF1YWxXaWR0aCA6IG51bGxcblx0XHRcdFx0KTtcblxuXHRcdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHRcdDxidXR0b25cblx0XHRcdFx0XHRcdGNsYXNzTmFtZT17YnV0dG9uQ2xhc3NOYW1lfVxuXHRcdFx0XHRcdFx0a2V5PXtvcHQudmFsdWV9XG5cdFx0XHRcdFx0XHRvbkNsaWNrPXshb3B0LmRpc2FibGVkICYmICgoKSA9PiBvbkNoYW5nZShvcHQudmFsdWUpKX1cblx0XHRcdFx0XHRcdHR5cGU9XCJidXR0b25cIlxuXHRcdFx0XHRcdFx0dGl0bGU9e2Nyb3BUZXh0ID8gb3B0LmxhYmVsIDogbnVsbH1cblx0XHRcdFx0XHRcdHRhYkluZGV4PXtvcHQuZGlzYWJsZWQgPyAnLTEnIDogJyd9XG5cdFx0XHRcdFx0PlxuXHRcdFx0XHRcdFx0e29wdC5sYWJlbH1cblx0XHRcdFx0XHQ8L2J1dHRvbj5cblx0XHRcdFx0KTtcblx0XHRcdH0pfVxuXHRcdDwvZGl2Pik7XG59O1xuXG5jb25zdCB2YWx1ZVByb3BTaGFwZSA9IFtcblx0UHJvcFR5cGVzLmJvb2wsXG5cdFByb3BUeXBlcy5udW1iZXIsXG5cdFByb3BUeXBlcy5zdHJpbmcsXG5dO1xuXG5TZWdtZW50ZWRDb250cm9sLnByb3BUeXBlcyA9IHtcblx0Y29sb3I6IFByb3BUeXBlcy5vbmVPZihPYmplY3Qua2V5cyhjb2xvcnMpKSxcblx0Y3JvcFRleHQ6IFByb3BUeXBlcy5ib29sLCAvLyB3aGVuIGBpbmxpbmUgJiYgZXF1YWxXaWR0aFNlZ21lbnRzYCBjcm9wcyB0byB0aGUgbmV4dCBsYXJnZXN0IG9wdGlvbiBsZW5ndGhcblx0ZXF1YWxXaWR0aFNlZ21lbnRzOiBQcm9wVHlwZXMuYm9vbCwgLy8gb25seSByZWxldmFudCB3aGVuIGBpbmxpbmUgPT09IGZhbHNlYFxuXHRpbmxpbmU6IFByb3BUeXBlcy5ib29sLFxuXHRvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcblx0b3B0aW9uczogUHJvcFR5cGVzLmFycmF5T2YoXG5cdFx0UHJvcFR5cGVzLnNoYXBlKHtcblx0XHRcdGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcblx0XHRcdGxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxuXHRcdFx0dmFsdWU6IFByb3BUeXBlcy5vbmVPZlR5cGUodmFsdWVQcm9wU2hhcGUpLFxuXHRcdH0pXG5cdCkuaXNSZXF1aXJlZCxcblx0dmFsdWU6IFByb3BUeXBlcy5vbmVPZlR5cGUodmFsdWVQcm9wU2hhcGUpLFxufTtcblNlZ21lbnRlZENvbnRyb2wuZGVmYXVsdFByb3BzID0ge1xuXHRjb2xvcjogJ2RlZmF1bHQnLFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTZWdtZW50ZWRDb250cm9sO1xuIiwiLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBTZWdtZW50ZWQgQ29udHJvbFxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8qIGVzbGludCBxdW90ZS1wcm9wczogW1wiZXJyb3JcIiwgXCJhcy1uZWVkZWRcIl0gKi9cblxuaW1wb3J0IGNvbG9ycyBmcm9tICcuL2NvbG9ycyc7XG5pbXBvcnQgdGhlbWUgZnJvbSAnLi4vLi4vLi4vdGhlbWUnO1xuXG4vLyBQcmVwYXJlIHZhcmlhbnRzXG5jb25zdCBjb2xvclZhcmlhbnRzID0ge307XG5PYmplY3Qua2V5cyhjb2xvcnMpLmZvckVhY2goY29sb3IgPT4ge1xuXHRjb25zdCBwc2V1ZG9TdHlsZXMgPSB7XG5cdFx0YmFja2dyb3VuZENvbG9yOiBjb2xvcnNbY29sb3JdLFxuXHRcdGNvbG9yOiAnd2hpdGUnLFxuXHR9O1xuXHRjb2xvclZhcmlhbnRzWydidXR0b25fXycgKyBjb2xvcl0gPSB7XG5cdFx0YmFja2dyb3VuZENvbG9yOiBjb2xvcnNbY29sb3JdLFxuXHRcdGNvbG9yOiAnd2hpdGUnLFxuXG5cdFx0Jzpob3Zlcic6IHBzZXVkb1N0eWxlcyxcblx0XHQnOmZvY3VzJzogcHNldWRvU3R5bGVzLFxuXHRcdCc6YWN0aXZlJzogcHNldWRvU3R5bGVzLFxuXHR9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRjb250cm9sOiB7XG5cdFx0Ym9yZGVyV2lkdGg6IDEsXG5cdFx0Ym9yZGVyU3R5bGU6ICdzb2xpZCcsXG5cdFx0Ym9yZGVyQ29sb3I6IHRoZW1lLmlucHV0LmJvcmRlci5jb2xvci5kZWZhdWx0LFxuXHRcdGJvcmRlclJhZGl1czogJzAuNGVtJyxcblx0XHRkaXNwbGF5OiAnZmxleCcsXG5cdFx0Zm9udFNpemU6IHRoZW1lLmZvbnQuc2l6ZS5zbWFsbCxcblx0XHRwYWRkaW5nTGVmdDogMSxcblx0XHRwYWRkaW5nUmlnaHQ6IDEsXG5cdH0sXG5cdGNvbnRyb2xfX2lubGluZToge1xuXHRcdGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG5cdH0sXG5cblx0Ly8gYnV0dG9uc1xuXHRidXR0b246IHtcblx0XHRiYWNrZ3JvdW5kOiAnbm9uZScsXG5cdFx0Ym9yZGVyOiAwLFxuXHRcdGJvcmRlclJhZGl1czogJzAuMjVlbScsXG5cdFx0ZmxleEdyb3c6IDEsXG5cdFx0bWFyZ2luOiAnMnB4IDFweCcsXG5cdFx0cGFkZGluZzogJzAuM2VtIDAuOWVtJyxcblx0XHRvdXRsaW5lOiAwLFxuXG5cdFx0Jzpob3Zlcic6IHsgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjA1KScgfSxcblx0XHQnOmZvY3VzJzogeyBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuMDUpJyB9LFxuXHRcdCc6YWN0aXZlJzogeyBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuMSknIH0sXG5cdH0sXG5cdGJ1dHRvbl9fZXF1YWxXaWR0aDoge1xuXHRcdGZsZXg6ICcxIDEgMCcsXG5cdH0sXG5cdGJ1dHRvbl9fY3JvcFRleHQ6IHtcblx0XHRvdmVyZmxvdzogJ2hpZGRlbicsXG5cdFx0dGV4dE92ZXJmbG93OiAnZWxsaXBzaXMnLFxuXHRcdHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuXHR9LFxuXHRidXR0b25fX2Rpc2FibGVkOiB7XG5cdFx0b3BhY2l0eTogMC42LFxuXHRcdHBvaW50ZXJFdmVudHM6ICdub25lJyxcblx0fSxcblxuXHQvLyBjb2xvcnNcblx0Li4uY29sb3JWYXJpYW50cyxcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFsnZGFuZ2VyJywgJ2RlZmF1bHQnLCAnaW52ZXJ0ZWQnLCAncHJpbWFyeScsICdzdWNjZXNzJywgJ3dhcm5pbmcnXTtcbiIsImltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xuaW1wb3J0IGNsYXNzZXMgZnJvbSAnLi9zdHlsZXMnO1xuaW1wb3J0IFNjcmVlblJlYWRlck9ubHkgZnJvbSAnLi4vU2NyZWVuUmVhZGVyT25seSc7XG5pbXBvcnQgY29sb3JzIGZyb20gJy4vY29sb3JzJztcbmltcG9ydCBzaXplcyBmcm9tICcuL3NpemVzJztcblxuZnVuY3Rpb24gU3Bpbm5lciAoeyBjbGFzc05hbWUsIHNpemUsIGNvbG9yLCAuLi5wcm9wcyB9KSB7XG5cdHByb3BzLmNsYXNzTmFtZSA9IGNzcyhcblx0XHRjbGFzc2VzLmJhc2UsXG5cdFx0Y2xhc3Nlc1tzaXplXSxcblx0XHRjbGFzc05hbWVcblx0KTtcblxuXHRyZXR1cm4gKFxuXHRcdDxkaXYgey4uLnByb3BzfT5cblx0XHRcdDxzcGFuIGNsYXNzTmFtZT17YCR7Y3NzKGNsYXNzZXMuZG90LCBjbGFzc2VzWydzaXplX18nICsgc2l6ZV0sIGNsYXNzZXNbJ2NvbG9yX18nICsgY29sb3JdLCBjbGFzc2VzLmRvdF9fZmlyc3QpfWB9IC8+XG5cdFx0XHQ8c3BhbiBjbGFzc05hbWU9e2Ake2NzcyhjbGFzc2VzLmRvdCwgY2xhc3Nlc1snc2l6ZV9fJyArIHNpemVdLCBjbGFzc2VzWydjb2xvcl9fJyArIGNvbG9yXSwgY2xhc3Nlcy5kb3RfX3NlY29uZCl9YH0gLz5cblx0XHRcdDxzcGFuIGNsYXNzTmFtZT17YCR7Y3NzKGNsYXNzZXMuZG90LCBjbGFzc2VzWydzaXplX18nICsgc2l6ZV0sIGNsYXNzZXNbJ2NvbG9yX18nICsgY29sb3JdLCBjbGFzc2VzLmRvdF9fdGhpcmQpfWB9IC8+XG5cdFx0XHQ8U2NyZWVuUmVhZGVyT25seT5Mb2FkaW5nLi4uPC9TY3JlZW5SZWFkZXJPbmx5PlxuXHRcdDwvZGl2PlxuXHQpO1xufTtcblxuU3Bpbm5lci5wcm9wVHlwZXMgPSB7XG5cdGNvbG9yOiBQcm9wVHlwZXMub25lT2YoY29sb3JzKSxcblx0c2l6ZTogUHJvcFR5cGVzLm9uZU9mKHNpemVzKSxcbn07XG5TcGlubmVyLmRlZmF1bHRQcm9wcyA9IHtcblx0c2l6ZTogJ21lZGl1bScsXG5cdGNvbG9yOiAnZGVmYXVsdCcsXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNwaW5uZXI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFsnc21hbGwnLCAnbWVkaXVtJywgJ2xhcmdlJ107XG4iLCIvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIFNwaW5uZXJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5pbXBvcnQgeyBjb21wb3NlIH0gZnJvbSAnZ2xhbW9yJztcbmltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi90aGVtZSc7XG5pbXBvcnQgY29sb3JzIGZyb20gJy4vY29sb3JzJztcbmltcG9ydCBzaXplcyBmcm9tICcuL3NpemVzJztcblxuLy8gUHJlcGFyZSB2YXJpYW50c1xuY29uc3QgY29sb3JWYXJpYW50cyA9IHt9O1xuY29sb3JzLmZvckVhY2goY29sb3IgPT4ge1xuXHRjb2xvclZhcmlhbnRzW2Bjb2xvcl9fJHtjb2xvcn1gXSA9IHtcblx0XHRiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnNwaW5uZXIuY29sb3JbY29sb3JdLFxuXHR9O1xufSk7XG5cbi8vIFByZXBhcmUgc2l6ZXNcbmNvbnN0IHNpemVWYXJpYW50cyA9IHt9O1xuc2l6ZXMuZm9yRWFjaChzaXplID0+IHtcblx0c2l6ZVZhcmlhbnRzW2BzaXplX18ke3NpemV9YF0gPSB7XG5cdFx0Zm9udFNpemU6IHRoZW1lLnNwaW5uZXIuc2l6ZVtzaXplXSxcblx0fTtcbn0pO1xuXG4vLyBEZWNsYXJlIGFuaW1hdGlvbiBrZXlmcmFtZXNcblxuY29uc3Qga2V5ZnJhbWVzID0gY29tcG9zZS5rZXlmcmFtZXMoJ3B1bHNlJywge1xuXHQnMCUsIDgwJSwgMTAwJSc6IHsgb3BhY2l0eTogMCB9LFxuXHQnNDAlJzogeyBvcGFjaXR5OiAxIH0sXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdGJhc2U6IHtcblx0XHRkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcblx0XHRsaW5lSGVpZ2h0OiAxLFxuXHRcdHRleHRBbGlnbjogJ2NlbnRlcicsXG5cdFx0dmVydGljYWxBbGlnbjogJ21pZGRsZScsXG5cdFx0d2lkdGg6ICc1ZW0nLFxuXHR9LFxuXHRzbWFsbDpcdHsgZm9udFNpemU6IDQgfSxcblx0bWVkaXVtOlx0eyBmb250U2l6ZTogOCB9LFxuXHRsYXJnZTpcdHsgZm9udFNpemU6IDE2IH0sXG5cblx0Ly8gdGV4dFxuXHR0ZXh0OiB7XG5cdFx0Ym9yZGVyOiAwLFxuXHRcdGNsaXA6ICdyZWN0KDAsMCwwLDApJyxcblx0XHRoZWlnaHQ6IDEsXG5cdFx0bWFyZ2luOiAtMSxcblx0XHRvdmVyZmxvdzogJ2hpZGRlbicsXG5cdFx0cGFkZGluZzogMCxcblx0XHRwb3NpdGlvbjogJ2Fic29sdXRlJyxcblx0XHR3aWR0aDogMSxcblx0fSxcblxuXHQvLyBkb3RzXG5cdGRvdDoge1xuXHRcdGFuaW1hdGlvbk5hbWU6IGtleWZyYW1lcyxcblx0XHRhbmltYXRpb25EdXJhdGlvbjogJzFzJyxcblx0XHRhbmltYXRpb25JdGVyYXRpb25Db3VudDogJ2luZmluaXRlJyxcblx0XHRib3JkZXJSYWRpdXM6ICcxZW0nLFxuXHRcdGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuXHRcdGhlaWdodDogJzFlbScsXG5cdFx0dmVydGljYWxBbGlnbjogJ3RvcCcsXG5cdFx0d2lkdGg6ICcxZW0nLFxuXHR9LFxuXHRkb3RfX3NlY29uZDoge1xuXHRcdGFuaW1hdGlvbkRlbGF5OiAnMTYwbXMnLFxuXHRcdG1hcmdpbkxlZnQ6ICcxZW0nLFxuXHR9LFxuXHRkb3RfX3RoaXJkOiB7XG5cdFx0YW5pbWF0aW9uRGVsYXk6ICczMjBtcycsXG5cdFx0bWFyZ2luTGVmdDogJzFlbScsXG5cdH0sXG5cblx0Ly8gQ29sb3JzXG5cdC4uLmNvbG9yVmFyaWFudHMsXG5cblx0Ly8gU2l6ZXNcblx0Li4uc2l6ZVZhcmlhbnRzLFxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuXHRBbGVydDogcmVxdWlyZSgnLi9BbGVydCcpLFxuXHRCbGFua1N0YXRlOiByZXF1aXJlKCcuL0JsYW5rU3RhdGUnKSxcblx0QnV0dG9uOiByZXF1aXJlKCcuL0J1dHRvbicpLFxuXHRDZW50ZXI6IHJlcXVpcmUoJy4vQ2VudGVyJyksXG5cdENoaXA6IHJlcXVpcmUoJy4vQ2hpcCcpLFxuXHRDb250YWluZXI6IHJlcXVpcmUoJy4vQ29udGFpbmVyJyksXG5cdERyb3Bkb3duQnV0dG9uOiByZXF1aXJlKCcuL0Ryb3Bkb3duQnV0dG9uJyksXG5cdEZvcm06IHJlcXVpcmUoJy4vRm9ybScpLFxuXHRGb3JtRmllbGQ6IHJlcXVpcmUoJy4vRm9ybUZpZWxkJyksXG5cdEZvcm1JbnB1dDogcmVxdWlyZSgnLi9Gb3JtSW5wdXQnKSxcblx0Rm9ybUxhYmVsOiByZXF1aXJlKCcuL0Zvcm1MYWJlbCcpLFxuXHRGb3JtTm90ZTogcmVxdWlyZSgnLi9Gb3JtTm90ZScpLFxuXHRGb3JtU2VsZWN0OiByZXF1aXJlKCcuL0Zvcm1TZWxlY3QnKSxcblx0R2x5cGg6IHJlcXVpcmUoJy4vR2x5cGgnKSxcblx0R2x5cGhCdXR0b246IHJlcXVpcmUoJy4vR2x5cGhCdXR0b24nKSxcblx0R2x5cGhGaWVsZDogcmVxdWlyZSgnLi9HbHlwaEZpZWxkJyksXG5cdEdyaWQ6IHJlcXVpcmUoJy4vR3JpZCcpLFxuXHRJbmxpbmVHcm91cDogcmVxdWlyZSgnLi9JbmxpbmVHcm91cCcpLFxuXHRJbmxpbmVHcm91cFNlY3Rpb246IHJlcXVpcmUoJy4vSW5saW5lR3JvdXBTZWN0aW9uJyksXG5cdExhYmVsbGVkQ29udHJvbDogcmVxdWlyZSgnLi9MYWJlbGxlZENvbnRyb2wnKSxcblx0TG9hZGluZ0J1dHRvbjogcmVxdWlyZSgnLi9Mb2FkaW5nQnV0dG9uJyksXG5cdE1vZGFsOiByZXF1aXJlKCcuL01vZGFsJyksXG5cdFBhZ2luYXRpb246IHJlcXVpcmUoJy4vUGFnaW5hdGlvbicpLFxuXHRSZXNwb25zaXZlVGV4dDogcmVxdWlyZSgnLi9SZXNwb25zaXZlVGV4dCcpLFxuXHRTY3JlZW5SZWFkZXJPbmx5OiByZXF1aXJlKCcuL1NjcmVlblJlYWRlck9ubHknKSxcblx0U2VnbWVudGVkQ29udHJvbDogcmVxdWlyZSgnLi9TZWdtZW50ZWRDb250cm9sJyksXG5cdFNwaW5uZXI6IHJlcXVpcmUoJy4vU3Bpbm5lcicpLFxufTtcbiIsImltcG9ydCBpc1BsYWluT2JqZWN0IGZyb20gJ2xvZGFzaC9pc1BsYWluT2JqZWN0JztcbmltcG9ydCBpc0FycmF5IGZyb20gJ2xvZGFzaC9pc0FycmF5JztcbmltcG9ydCBpc09iamVjdCBmcm9tICdsb2Rhc2gvaXNPYmplY3QnO1xuXG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgb2YgZXhwYW5kZWQgZmlsdGVyIG9iamVjdHMsXG4gKiBnaXZlbiAoYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gfCBhbiBhcnJheSBvZiBmaWx0ZXJzKSBhbmQgYSBjdXJyZW50TGlzdCBvYmplY3QuXG4gKlxuICogQHBhcmFtIHsgU3RyaW5nfEFycmF5IH0gRWl0aGVyIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGFuIGFycmF5IG9mIGZpbHRlciBvYmplY3RzLCBvciBhbiBhcnJheSBvZiBmaWx0ZXIgb2JqZWN0cy5cbiAqIEBwYXJhbSB7IE9iamVjdCB9IHRoZSBjdXJyZW50IGluc3RhbnRpYXRpb24gb2YgdGhlIExpc3QgcHJvdG90eXBlIHVzZWQgZm9yIHRoZSA8TGlzdC8+IHNjZW5lXG4gKiBAcmV0dXJuIHsgQXJyYXkgfSBvZiB7IE9iamVjdHMgfSBhcyBhbiBleHBhbmRlZCByZXByZXNlbnRhdGlvbiBvZiB0aGUgZmlsdGVycyBwYXNzZWQgaW4uXG4gKiovXG5cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJzUGFyc2VyIChmaWx0ZXJzLCBjdXJyZW50TGlzdCkge1xuXHRpZiAodHlwZW9mIGZpbHRlcnMgPT09ICdzdHJpbmcnKSB7XG5cdFx0dHJ5IHtcblx0XHRcdGZpbHRlcnMgPSBKU09OLnBhcnNlKGZpbHRlcnMpO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdGNvbnNvbGUud2FybignSW52YWxpZCBmaWx0ZXJzIHByb3ZpZGVkJywgZmlsdGVycyk7XG5cdFx0XHRmaWx0ZXJzID0gdm9pZCAwO1xuXHRcdH1cblx0fVxuXG5cdGlmICghZmlsdGVycykgcmV0dXJuIFtdO1xuXG5cdGNvbnN0IGFzc2VtYmxlZEZpbHRlcnMgPSBmaWx0ZXJzLm1hcChmaWx0ZXIgPT4ge1xuXHRcdGNvbnN0IHBhdGggPSBmaWx0ZXIucGF0aDtcblx0XHRjb25zdCB2YWx1ZSA9IE9iamVjdC5hc3NpZ24oe30sIGZpbHRlcik7XG5cdFx0ZGVsZXRlIHZhbHVlLnBhdGg7XG5cdFx0cmV0dXJuIGNyZWF0ZUZpbHRlck9iamVjdChwYXRoLCB2YWx1ZSwgY3VycmVudExpc3QuZmllbGRzKTtcblx0fSk7XG5cblx0ZmlsdGVycyA9IGFzc2VtYmxlZEZpbHRlcnMuZmlsdGVyKGZpbHRlciA9PiBmaWx0ZXIpO1xuXHRyZXR1cm4gZmlsdGVycztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IG9mIGV4cGFuZGVkIGZpbHRlciBvYmplY3RzLFxuICogZ2l2ZW4gKGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIHwgYW4gYXJyYXkgb2YgZmlsdGVycykgYW5kIGEgY3VycmVudExpc3Qgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7IE9iamVjdCB9IEZpbHRlciBvYmplY3QgIGNvbnRhaW5pbmcgdGhlIGZvbGxvd2luZyBrZXkgdmFsdWUgcGFpcnMge3BhdGh9IGFuZCB7dmFsdWV9LlxuICogQHBhcmFtIHsgQXJyYXkgfSBvZiB7IE9iamVjdHMgfSBhbiBhcnJheSBvZiB0aGUgY3VycmVudGx5IGFjdGl2ZSBmaWx0ZXJzLlxuICogQHBhcmFtIHsgT2JqZWN0IH0gdGhlIGN1cnJlbnQgaW5zdGFudGlhdGlvbiBvZiB0aGUgTGlzdCBwcm90b3R5cGUgdXNlZCBmb3IgdGhlIDxMaXN0Lz4gc2NlbmVcbiAqIEByZXR1cm4geyBPYmplY3QgfSBhbiBleHBhbmRlZCByZXByZXNlbnRhdGlvbiBvZiB0aGUgcGFzc2VkIGluIGZpbHRlciB7IE9iamVjdCB9LlxuICoqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJQYXJzZXIgKHsgcGF0aCwgdmFsdWUgfSwgYWN0aXZlRmlsdGVycywgY3VycmVudExpc3QpIHtcblx0aWYgKCFhY3RpdmVGaWx0ZXJzIHx8ICFpc0FycmF5KGFjdGl2ZUZpbHRlcnMpKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdhY3RpdmVGaWx0ZXJzIG11c3QgYmUgYW4gYXJyYXknKTtcblx0fVxuXHRpZiAoIWN1cnJlbnRMaXN0KSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdObyBjdXJyZW50TGlzdCBzZWxlY3RlZCcpO1xuXHR9XG5cblx0aWYgKCFpc09iamVjdChjdXJyZW50TGlzdCkgfHwgaXNBcnJheShjdXJyZW50TGlzdCkpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ2N1cnJlbnRMaXN0IGlzIGV4cGVjdGVkIHRvIGJlIGFuIHsgT2JqZWN0IH0nLCBjdXJyZW50TGlzdCk7XG5cdH1cblxuXHRsZXQgZmlsdGVyID0gYWN0aXZlRmlsdGVycy5maWx0ZXIoaSA9PiBpLmZpZWxkLnBhdGggPT09IHBhdGgpWzBdO1xuXHRpZiAoZmlsdGVyKSB7XG5cdFx0ZmlsdGVyLnZhbHVlID0gdmFsdWU7XG5cdH0gZWxzZSB7XG5cdFx0ZmlsdGVyID0gY3JlYXRlRmlsdGVyT2JqZWN0KHBhdGgsIHZhbHVlLCBjdXJyZW50TGlzdC5maWVsZHMpO1xuXHRcdGlmICghZmlsdGVyKSB7XG5cdFx0XHRyZXR1cm4gdm9pZCAwO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZmlsdGVyO1xufVxuXG4vKlxuKiBUaGlzIG1ldGhvZCBpcyBhIHV0aWwsIGJ1dCBoYXMgc3VjaCBhIHNwZWNpZmljIHVzZSB0aGF0IGl0IGlzIGJlaW5nIGxlZnQgd2l0aGluXG4qIHRoZSBmaWxlIHRoYXQgdXNlcyBpdC5cbiovXG5cbi8qKlxuICogUmV0dXJucyBhIGZpbHRlciBvYmplY3RcbiAqIGdpdmVuIGEgcGF0aCwgYSB2YWx1ZSwgYW5kIHRoZSBmaWVsZHMgd2l0aGluIGFuIGluc3RhbmNlIG9mIHRoZSBMaXN0IHByb3RvdHlwZS5cbiAqXG4gKiBAcGFyYW0geyBTdHJpbmcgfSBmaWx0ZXIgcGF0aFxuICogQHBhcmFtIHsgT2JqZWN0IH0gb2YgZmlsdGVyIHZhbHVlcy5cbiAqIEBwYXJhbSB7IE9iamVjdCB9IG9mIGZpZWxkcyBmcm9tIHRoZSBjdXJyZW50IGluc3RhbmNlIG9mIHRoZSBMaXN0IHByb3RvdHlwZS5cbiAqIEByZXR1cm4geyBPYmplY3QgfSBhIGZpbHRlciBjb21wcmlzZWQgb2YgdGhlOmZpbHRlcnMuanNcbiAqXHQtIGNvcnJlc3BvbmRpbmcgZmllbGQgdmFsdWUgd2l0aGluIHRoZSBjdXJyZW50IExpc3QsXG4gKlx0LSBhbmQgdGhlIHBhc3NlZCBpbiB2YWx1ZSB7IE9iamVjdCB9LlxuICoqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRmlsdGVyT2JqZWN0IChwYXRoLCB2YWx1ZSwgY3VycmVudExpc3RGaWVsZHMpIHtcblx0aWYgKCFjdXJyZW50TGlzdEZpZWxkcyB8fCAhaXNQbGFpbk9iamVjdChjdXJyZW50TGlzdEZpZWxkcykpIHtcblx0XHRjb25zb2xlLndhcm4oJ2N1cnJlbnRMaXN0RmllbGRzIG11c3QgYmUgYSBwbGFpbiBvYmplY3QnLCBjdXJyZW50TGlzdEZpZWxkcyk7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Y29uc3QgZmllbGQgPSBjdXJyZW50TGlzdEZpZWxkc1twYXRoXTtcblxuXHRpZiAoIWZpZWxkKSB7XG5cdFx0Y29uc29sZS53YXJuKCdJbnZhbGlkIEZpbHRlciBwYXRoIHNwZWNpZmllZDonLCBwYXRoKTtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdGZpZWxkLFxuXHRcdHZhbHVlLFxuXHR9O1xufVxuIiwiaW1wb3J0IHsgZmlsdGVyc1BhcnNlciwgZmlsdGVyUGFyc2VyLCBjcmVhdGVGaWx0ZXJPYmplY3QgfSBmcm9tICcuL2ZpbHRlcnMuanMnO1xuXG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgb2YgZXhwYW5kZWQgY29sdW1ucyBvYmplY3QsIGdpdmVuIGEgbGlzdCBvZiBjb2x1bW5zIGFuZCBjdXJyZW50TGlzdCBvYmplY3QuXG4gKlxuICogQHBhcmFtIHsgU3RyaW5nIH0gY29sdW1ucywgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBsaXN0IG9mIGNvbHVtbnMuXG4gKiBAcGFyYW0geyBPYmplY3QgfSB0aGUgY3VycmVudCBpbnN0YW50aWF0aW9uIG9mIHRoZSBMaXN0IHByb3RvdHlwZSB1c2VkIGZvciB0aGUgPExpc3QvPiBzY2VuZVxuICogQHJldHVybiB7IEFycmF5IH0gb2YgeyBPYmplY3RzIH0gYXMgYW4gZXhwYW5kZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlIGNvbHVtbiB2YWx1ZXMgcGFzc2VkIGluLlxuICovXG5cbmZ1bmN0aW9uIGNvbHVtbnNQYXJzZXIgKGNvbHVtbnMsIGN1cnJlbnRMaXN0KSB7XG5cdGlmICghY3VycmVudExpc3QpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ05vIGN1cnJlbnRMaXN0IHNlbGVjdGVkJyk7XG5cdH1cblx0aWYgKCFjb2x1bW5zIHx8IGNvbHVtbnMubGVuZ3RoID09PSAwKSB7XG5cdFx0cmV0dXJuIGN1cnJlbnRMaXN0LmV4cGFuZENvbHVtbnMoY3VycmVudExpc3QuZGVmYXVsdENvbHVtbnMpO1xuXHR9XG5cdHJldHVybiBjdXJyZW50TGlzdC5leHBhbmRDb2x1bW5zKGNvbHVtbnMpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIGV4cGFuZGVkIHNvcnQgb2JqZWN0LCBnaXZlbiBhIHNvcnQgcGF0aCBhbmQgY3VycmVudExpc3Qgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7IFN0cmluZyB9IHBhdGgsIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgbGlzdCBvZiBjb2x1bW5zLlxuICogQHBhcmFtIHsgT2JqZWN0IH0gdGhlIGN1cnJlbnQgaW5zdGFudGlhdGlvbiBvZiB0aGUgTGlzdCBwcm90b3R5cGUgdXNlZCBmb3IgdGhlIDxMaXN0Lz4gc2NlbmVcbiAqIEByZXR1cm4geyBPYmplY3QgfSBhbiBleHBhbmRlZCByZXByZXNlbnRhdGlvbiBvZiB0aGUgc29ydCBwYXRoIHBhc3NlZCBpbi5cbiAqL1xuXG5mdW5jdGlvbiBzb3J0UGFyc2VyIChwYXRoLCBjdXJyZW50TGlzdCkge1xuXHRpZiAoIWN1cnJlbnRMaXN0KSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdObyBjdXJyZW50TGlzdCBzZWxlY3RlZCcpO1xuXHR9XG5cdGlmICghcGF0aCkgcmV0dXJuIGN1cnJlbnRMaXN0LmV4cGFuZFNvcnQoY3VycmVudExpc3QuZGVmYXVsdFNvcnQpO1xuXHRyZXR1cm4gY3VycmVudExpc3QuZXhwYW5kU29ydChwYXRoKTtcbn1cblxuZXhwb3J0IHtcblx0Y3JlYXRlRmlsdGVyT2JqZWN0LFxuXHRmaWx0ZXJzUGFyc2VyLFxuXHRmaWx0ZXJQYXJzZXIsXG5cdHNvcnRQYXJzZXIsXG5cdGNvbHVtbnNQYXJzZXIsXG59O1xuIiwiaW1wb3J0IHsgdGFrZUxhdGVzdCwgZGVsYXkgfSBmcm9tICdyZWR1eC1zYWdhJztcbmltcG9ydCB7IGZvcmssIHNlbGVjdCwgcHV0LCB0YWtlLCBjYWxsIH0gZnJvbSAncmVkdXgtc2FnYS9lZmZlY3RzJztcblxuaW1wb3J0ICogYXMgYWN0aW9ucyBmcm9tICcuLi9zY3JlZW5zL0xpc3QvY29uc3RhbnRzJztcbmltcG9ydCB7IHVwZGF0ZVBhcmFtcywgZXZhbFF1ZXJ5UGFyYW1zIH0gZnJvbSAnLi9xdWVyeVBhcmFtc1NhZ2FzJztcbmltcG9ydCB7IGNvbHVtbnNQYXJzZXIsIHNvcnRQYXJzZXIsIGZpbHRlclBhcnNlciB9IGZyb20gJy4uL3BhcnNlcnMnO1xuXG4vKipcbiAqIERlYm91bmNlIHRoZSBzZWFyY2ggbG9hZGluZyBuZXcgaXRlbXMgYnkgNTAwbXNcbiAqL1xuXG5mdW5jdGlvbiAqIGRlYm91bmNlZFNlYXJjaCAoKSB7XG5cdGNvbnN0IHNlYXJjaFN0cmluZyA9IHlpZWxkIHNlbGVjdCgoc3RhdGUpID0+IHN0YXRlLmFjdGl2ZS5zZWFyY2gpO1xuXHRpZiAoc2VhcmNoU3RyaW5nKSB7XG5cdFx0eWllbGQgZGVsYXkoNTAwKTtcblx0fVxuXHR5aWVsZCBjYWxsKHVwZGF0ZVBhcmFtcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiAqIHNldEFjdGl2ZUNvbHVtbnNTYWdhICgpIHtcblx0d2hpbGUgKHRydWUpIHtcblx0XHRjb25zdCB7IGNvbHVtbnMgfSA9IHlpZWxkIHRha2UoYWN0aW9ucy5TRUxFQ1RfQUNUSVZFX0NPTFVNTlMpO1xuXHRcdGNvbnN0IHsgY3VycmVudExpc3QgfSA9IHlpZWxkIHNlbGVjdChzdGF0ZSA9PiBzdGF0ZS5saXN0cyk7XG5cdFx0Y29uc3QgbmV3Q29sdW1ucyA9IHlpZWxkIGNhbGwoY29sdW1uc1BhcnNlciwgY29sdW1ucywgY3VycmVudExpc3QpO1xuXHRcdHlpZWxkIHB1dCh7IHR5cGU6IGFjdGlvbnMuU0VUX0FDVElWRV9DT0xVTU5TLCBjb2x1bW5zOiBuZXdDb2x1bW5zIH0pO1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiAqIHNldEFjdGl2ZVNvcnRTYWdhICgpIHtcblx0d2hpbGUgKHRydWUpIHtcblx0XHRjb25zdCB7IHBhdGggfSA9IHlpZWxkIHRha2UoYWN0aW9ucy5TRUxFQ1RfQUNUSVZFX1NPUlQpO1xuXHRcdGNvbnN0IHsgY3VycmVudExpc3QgfSA9IHlpZWxkIHNlbGVjdChzdGF0ZSA9PiBzdGF0ZS5saXN0cyk7XG5cdFx0Y29uc3Qgc29ydCA9IHlpZWxkIGNhbGwoc29ydFBhcnNlciwgcGF0aCwgY3VycmVudExpc3QpO1xuXG5cdFx0eWllbGQgcHV0KHsgdHlwZTogYWN0aW9ucy5TRVRfQUNUSVZFX1NPUlQsIHNvcnQgfSk7XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uICogc2V0QWN0aXZlRmlsdGVyU2FnYSAoKSB7XG5cdHdoaWxlICh0cnVlKSB7XG5cdFx0Y29uc3QgeyBmaWx0ZXIgfSA9IHlpZWxkIHRha2UoYWN0aW9ucy5TRUxFQ1RfRklMVEVSKTtcblx0XHRjb25zdCB7IGN1cnJlbnRMaXN0IH0gPSB5aWVsZCBzZWxlY3Qoc3RhdGUgPT4gc3RhdGUubGlzdHMpO1xuXHRcdGNvbnN0IGFjdGl2ZUZpbHRlcnMgPSB5aWVsZCBzZWxlY3Qoc3RhdGUgPT4gc3RhdGUuYWN0aXZlLmZpbHRlcnMpO1xuXHRcdGNvbnN0IHVwZGF0ZWRGaWx0ZXIgPSB5aWVsZCBjYWxsKGZpbHRlclBhcnNlciwgZmlsdGVyLCBhY3RpdmVGaWx0ZXJzLCBjdXJyZW50TGlzdCk7XG5cblx0XHR5aWVsZCBwdXQoeyB0eXBlOiBhY3Rpb25zLkFERF9GSUxURVIsIGZpbHRlcjogdXBkYXRlZEZpbHRlciB9KTtcblx0fVxufVxuXG5mdW5jdGlvbiAqIHJvb3RTYWdhICgpIHtcblx0eWllbGQgZm9yayh0YWtlTGF0ZXN0LCBhY3Rpb25zLlNFVF9BQ1RJVkVfU0VBUkNILCBkZWJvdW5jZWRTZWFyY2gpO1xuXHR5aWVsZCBmb3JrKHRha2VMYXRlc3QsIGFjdGlvbnMuU0VUX0FDVElWRV9MSVNULCBldmFsUXVlcnlQYXJhbXMpO1xuXHQvLyBJZiBvbmUgb2YgdGhlIG90aGVyIGFjdGl2ZSBwcm9wZXJ0aWVzIGNoYW5nZXMsIHVwZGF0ZSB0aGUgcXVlcnkgcGFyYW1zIGFuZCBsb2FkIHRoZSBuZXcgaXRlbXNcblx0eWllbGQgZm9yayhzZXRBY3RpdmVTb3J0U2FnYSk7XG5cdHlpZWxkIGZvcmsoc2V0QWN0aXZlQ29sdW1uc1NhZ2EpO1xuXHR5aWVsZCBmb3JrKHNldEFjdGl2ZUZpbHRlclNhZ2EpO1xuXG5cdHlpZWxkIGZvcmsodGFrZUxhdGVzdCwgW1xuXHRcdGFjdGlvbnMuUVVFUllfSEFTX0NIQU5HRUQsXG5cdFx0YWN0aW9ucy5BRERfRklMVEVSLFxuXHRcdGFjdGlvbnMuU0VUX0FDVElWRV9DT0xVTU5TLFxuXHRcdGFjdGlvbnMuU0VUX0FDVElWRV9TT1JULFxuXHRcdGFjdGlvbnMuU0VUX0NVUlJFTlRfUEFHRSxcblx0XHRhY3Rpb25zLkNMRUFSX0ZJTFRFUixcblx0XHRhY3Rpb25zLkNMRUFSX0FMTF9GSUxURVJTLFxuXHRdLCB1cGRhdGVQYXJhbXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCByb290U2FnYTtcbiIsImltcG9ydCB7IHVwZGF0ZVF1ZXJ5UGFyYW1zLCBzdHJpbmdpZnlDb2x1bW5zLCBwYXJhbWV0aXplRmlsdGVycywgY3JlYXRlU29ydFF1ZXJ5UGFyYW1zLCBjcmVhdGVQYWdlUXVlcnlQYXJhbXMgfSBmcm9tICcuLi8uLi91dGlscy9xdWVyeVBhcmFtcyc7XG5pbXBvcnQgeyByZXBsYWNlLCBwdXNoIH0gZnJvbSAncmVhY3Qtcm91dGVyLXJlZHV4JztcbmltcG9ydCB7IHNlbGVjdCwgcHV0LCBjYWxsIH0gZnJvbSAncmVkdXgtc2FnYS9lZmZlY3RzJztcbmltcG9ydCBibGFja2xpc3QgZnJvbSAnYmxhY2tsaXN0JztcblxuaW1wb3J0ICogYXMgYWN0aW9ucyBmcm9tICcuLi9zY3JlZW5zL0xpc3QvY29uc3RhbnRzJztcblxuaW1wb3J0IHsgbG9hZEl0ZW1zIH0gZnJvbSAnLi4vc2NyZWVucy9MaXN0L2FjdGlvbnMnO1xuXG5pbXBvcnQgaXNFcXVhbCBmcm9tICdsb2Rhc2gvaXNFcXVhbCc7XG5pbXBvcnQgeyBjb2x1bW5zUGFyc2VyLCBzb3J0UGFyc2VyLCBmaWx0ZXJzUGFyc2VyIH0gZnJvbSAnLi4vcGFyc2Vycyc7XG5cbmV4cG9ydCBmdW5jdGlvbiAqIHVybFVwZGF0ZSAocXVlcnksIGNhY2hlLCBwYXRobmFtZSkge1xuXHRjb25zdCBibGFja2xpc3RlZEZpZWxkID0gJ3NlYXJjaCc7XG5cdGNvbnN0IGF0dGVudWF0ZWRRdWVyeSA9IGJsYWNrbGlzdChxdWVyeSwgYmxhY2tsaXN0ZWRGaWVsZCk7XG5cdGNvbnN0IGF0dGVudWF0ZWRDYWNoZSA9IGJsYWNrbGlzdChjYWNoZSwgYmxhY2tsaXN0ZWRGaWVsZCk7XG5cdGlmICghaXNFcXVhbChhdHRlbnVhdGVkUXVlcnksIGF0dGVudWF0ZWRDYWNoZSkpIHtcblx0XHR5aWVsZCBwdXQocHVzaCh7XG5cdFx0XHRwYXRobmFtZSxcblx0XHRcdHF1ZXJ5LFxuXHRcdH0pKTtcblx0fSBlbHNlIHtcblx0XHR5aWVsZCBwdXQocmVwbGFjZSh7XG5cdFx0XHRwYXRobmFtZSxcblx0XHRcdHF1ZXJ5LFxuXHRcdH0pKTtcblx0fVxufVxuLyoqXG4gKiBVcGRhdGUgdGhlIHF1ZXJ5IHBhcmFtcyBiYXNlZCBvbiB0aGUgY3VycmVudCBzdGF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gKiB1cGRhdGVQYXJhbXMgKCkge1xuXHQvLyBTZWxlY3QgYWxsIHRoZSB0aGluZ3Ncblx0Y29uc3QgYWN0aXZlU3RhdGUgPSB5aWVsZCBzZWxlY3QoKHN0YXRlKSA9PiBzdGF0ZS5hY3RpdmUpO1xuXHRjb25zdCBjdXJyZW50TGlzdCA9IHlpZWxkIHNlbGVjdCgoc3RhdGUpID0+IHN0YXRlLmxpc3RzLmN1cnJlbnRMaXN0KTtcblx0Y29uc3QgbG9jYXRpb24gPSB5aWVsZCBzZWxlY3QoKHN0YXRlKSA9PiBzdGF0ZS5yb3V0aW5nLmxvY2F0aW9uQmVmb3JlVHJhbnNpdGlvbnMpO1xuXHRjb25zdCB7IGluZGV4IH0gPSB5aWVsZCBzZWxlY3QoKHN0YXRlKSA9PiBzdGF0ZS5saXN0cy5wYWdlKTtcblxuXHQvLyBHZXQgdGhlIGRhdGEgaW50byB0aGUgcmlnaHQgZm9ybWF0LCBzZXQgdGhlIGRlZmF1bHRzXG5cdGxldCBzb3J0ID0gY3JlYXRlU29ydFF1ZXJ5UGFyYW1zKGFjdGl2ZVN0YXRlLnNvcnQucmF3SW5wdXQsIGN1cnJlbnRMaXN0LmRlZmF1bHRTb3J0KTtcblx0bGV0IHBhZ2UgPSBjcmVhdGVQYWdlUXVlcnlQYXJhbXMoaW5kZXgsIDEpO1xuXG5cdGxldCBjb2x1bW5zID0gc3RyaW5naWZ5Q29sdW1ucyhhY3RpdmVTdGF0ZS5jb2x1bW5zLCBjdXJyZW50TGlzdC5kZWZhdWx0Q29sdW1uUGF0aHMpO1xuXHRsZXQgc2VhcmNoID0gYWN0aXZlU3RhdGUuc2VhcmNoO1xuXG5cdGxldCBmaWx0ZXJzID0gcGFyYW1ldGl6ZUZpbHRlcnMoYWN0aXZlU3RhdGUuZmlsdGVycyk7XG5cblx0Y29uc3QgbmV3UGFyYW1zID0gdXBkYXRlUXVlcnlQYXJhbXMoe1xuXHRcdHBhZ2UsXG5cdFx0Y29sdW1ucyxcblx0XHRzb3J0LFxuXHRcdHNlYXJjaCxcblx0XHRmaWx0ZXJzLFxuXHR9LCBsb2NhdGlvbik7XG5cblx0Ly8gVE9ETzogU3RhcnRpbmcgb3IgY2xlYXJpbmcgYSBzZWFyY2ggcHVzaGVzIGEgbmV3IGhpc3Rvcnkgc3RhdGUsIGJ1dCB1cGRhdGluZ1xuXHQvLyB0aGUgY3VycmVudCBzZWFyY2ggcmVwbGFjZXMgaXQgZm9yIG5pY2VyIGhpc3RvcnkgbmF2aWdhdGlvbiBzdXBwb3J0XG5cblx0eWllbGQgcHV0KHsgdHlwZTogYWN0aW9ucy5SRVBMQUNFX0NBQ0hFRF9RVUVSWSwgY2FjaGVkUXVlcnk6IG5ld1BhcmFtcyB9KTtcblx0eWllbGQgKiB1cmxVcGRhdGUobmV3UGFyYW1zLCBhY3RpdmVTdGF0ZS5jYWNoZWRRdWVyeSwgbG9jYXRpb24ucGF0aG5hbWUpO1xuXHR5aWVsZCBwdXQobG9hZEl0ZW1zKCkpO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiAqIGV2YWxRdWVyeVBhcmFtcyAoKSB7XG5cdGNvbnN0IHsgcGF0aG5hbWUsIHF1ZXJ5IH0gPSB5aWVsZCBzZWxlY3Qoc3RhdGUgPT4gc3RhdGUucm91dGluZy5sb2NhdGlvbkJlZm9yZVRyYW5zaXRpb25zKTtcblxuXHRjb25zdCB7IGNhY2hlZFF1ZXJ5IH0gPSB5aWVsZCBzZWxlY3Qoc3RhdGUgPT4gc3RhdGUuYWN0aXZlKTtcblx0Y29uc3QgeyBjdXJyZW50TGlzdCB9ID0geWllbGQgc2VsZWN0KHN0YXRlID0+IHN0YXRlLmxpc3RzKTtcblxuXHRpZiAocGF0aG5hbWUgIT09IGAke0tleXN0b25lLmFkbWluUGF0aH0vJHtjdXJyZW50TGlzdC5pZH1gKSByZXR1cm47XG5cblx0aWYgKGlzRXF1YWwocXVlcnksIGNhY2hlZFF1ZXJ5KSkge1xuXHRcdHlpZWxkIHB1dCh7IHR5cGU6IGFjdGlvbnMuUVVFUllfSEFTX05PVF9DSEFOR0VEIH0pO1xuXHRcdHlpZWxkIHB1dChsb2FkSXRlbXMoKSk7XG5cdH0gZWxzZSB7XG5cdFx0Y29uc3QgcGFyc2VkUXVlcnkgPSB5aWVsZCBjYWxsKHBhcnNlUXVlcnlQYXJhbXMsIHF1ZXJ5LCBjdXJyZW50TGlzdCk7XG5cdFx0eWllbGQgcHV0KHsgdHlwZTogYWN0aW9ucy5RVUVSWV9IQVNfQ0hBTkdFRCwgcGFyc2VkUXVlcnkgfSk7XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUXVlcnlQYXJhbXMgKHF1ZXJ5LCBjdXJyZW50TGlzdCkge1xuXHRjb25zdCBjb2x1bW5zID0gY29sdW1uc1BhcnNlcihxdWVyeS5jb2x1bW5zLCBjdXJyZW50TGlzdCk7XG5cdGNvbnN0IHNvcnQgPSBzb3J0UGFyc2VyKHF1ZXJ5LnNvcnQsIGN1cnJlbnRMaXN0KTtcblx0Y29uc3QgZmlsdGVycyA9IGZpbHRlcnNQYXJzZXIocXVlcnkuZmlsdGVycywgY3VycmVudExpc3QpO1xuXHRjb25zdCBjdXJyZW50UGFnZSA9IHF1ZXJ5LnBhZ2UgfHwgMTtcblx0Y29uc3Qgc2VhcmNoID0gcXVlcnkuc2VhcmNoIHx8ICcnO1xuXG5cdHJldHVybiB7XG5cdFx0Y29sdW1ucyxcblx0XHRzb3J0LFxuXHRcdGZpbHRlcnMsXG5cdFx0Y3VycmVudFBhZ2UsXG5cdFx0c2VhcmNoLFxuXHR9O1xufVxuIiwiaW1wb3J0IHhociBmcm9tICd4aHInO1xuaW1wb3J0IHtcblx0TE9BRF9DT1VOVFMsXG5cdENPVU5UU19MT0FESU5HX1NVQ0NFU1MsXG5cdENPVU5UU19MT0FESU5HX0VSUk9SLFxufSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBORVRXT1JLX0VSUk9SX1JFVFJZX0RFTEFZIH0gZnJvbSAnLi4vLi4vLi4vY29uc3RhbnRzJztcblxuLyoqXG4gKiBMb2FkIHRoZSBjb3VudHMgb2YgYWxsIGxpc3RzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsb2FkQ291bnRzICgpIHtcblx0cmV0dXJuIChkaXNwYXRjaCkgPT4ge1xuXHRcdGRpc3BhdGNoKHtcblx0XHRcdHR5cGU6IExPQURfQ09VTlRTLFxuXHRcdH0pO1xuXHRcdHhocih7XG5cdFx0XHR1cmw6IGAke0tleXN0b25lLmFkbWluUGF0aH0vYXBpL2NvdW50c2AsXG5cdFx0fSwgKGVyciwgcmVzcCwgYm9keSkgPT4ge1xuXHRcdFx0aWYgKGVycikge1xuXHRcdFx0XHRkaXNwYXRjaChjb3VudHNMb2FkaW5nRXJyb3IoZXJyKSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGJvZHkgPSBKU09OLnBhcnNlKGJvZHkpO1xuXHRcdFx0XHRpZiAoYm9keS5jb3VudHMpIHtcblx0XHRcdFx0XHRkaXNwYXRjaChjb3VudHNMb2FkZWQoYm9keS5jb3VudHMpKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRjb25zb2xlLmxvZygnRXJyb3IgcGFyc2luZyByZXN1bHRzIGpzb246JywgZSwgYm9keSk7XG5cdFx0XHRcdGRpc3BhdGNoKGNvdW50c0xvYWRpbmdFcnJvcihlKSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHR9KTtcblx0fTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaGVkIHdoZW4gdGhlIGNvdW50cyB3ZXJlIGxvYWRlZFxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gY291bnRzIFRoZSBjb3VudHMgb2JqZWN0IGFzIHJldHVybmVkIGJ5IHRoZSBBUElcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvdW50c0xvYWRlZCAoY291bnRzKSB7XG5cdHJldHVybiB7XG5cdFx0dHlwZTogQ09VTlRTX0xPQURJTkdfU1VDQ0VTUyxcblx0XHRjb3VudHMsXG5cdH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2hlZCB3aGVuIHVuc3VjY2Vzc2Z1bGx5IHRyeWluZyB0byBsb2FkIHRoZSBjb3VudHMsIHdpbGwgcmVkaXNwYXRjaFxuICogbG9hZENvdW50cyBhZnRlciBORVRXT1JLX0VSUk9SX1JFVFJZX0RFTEFZIHVudGlsIHdlIGdldCBjb3VudHMgYmFja1xuICpcbiAqIEBwYXJhbSAge29iamVjdH0gZXJyb3IgVGhlIGVycm9yXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb3VudHNMb2FkaW5nRXJyb3IgKGVycm9yKSB7XG5cdHJldHVybiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiB7XG5cdFx0ZGlzcGF0Y2goe1xuXHRcdFx0dHlwZTogQ09VTlRTX0xPQURJTkdfRVJST1IsXG5cdFx0XHRlcnJvcixcblx0XHR9KTtcblx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdGRpc3BhdGNoKGxvYWRDb3VudHMoKSk7XG5cdFx0fSwgTkVUV09SS19FUlJPUl9SRVRSWV9ERUxBWSk7XG5cdH07XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5cbi8qKlxuICogRGlzcGxheXMgaW5mb3JtYXRpb24gYWJvdXQgYSBsaXN0IGFuZCBsZXRzIHlvdSBjcmVhdGUgYSBuZXcgb25lLlxuICovXG52YXIgTGlzdFRpbGUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cdHByb3BUeXBlczoge1xuXHRcdGNvdW50OiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuXHRcdGhpZGVDcmVhdGVCdXR0b246IFJlYWN0LlByb3BUeXBlcy5ib29sLFxuXHRcdGhyZWY6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG5cdFx0bGFiZWw6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG5cdFx0cGF0aDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcblx0XHRzcGlubmVyOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuXHR9LFxuXHRyZW5kZXIgKCkge1xuXHRcdHZhciBvcHRzID0ge1xuXHRcdFx0J2RhdGEtbGlzdC1wYXRoJzogdGhpcy5wcm9wcy5wYXRoLFxuXHRcdH07XG5cdFx0cmV0dXJuIChcblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiZGFzaGJvYXJkLWdyb3VwX19saXN0XCIgey4uLm9wdHN9PlxuXHRcdFx0XHQ8c3BhbiBjbGFzc05hbWU9XCJkYXNoYm9hcmQtZ3JvdXBfX2xpc3QtaW5uZXJcIj5cblx0XHRcdFx0XHQ8TGluayB0bz17dGhpcy5wcm9wcy5ocmVmfSBjbGFzc05hbWU9XCJkYXNoYm9hcmQtZ3JvdXBfX2xpc3QtdGlsZVwiPlxuXHRcdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJkYXNoYm9hcmQtZ3JvdXBfX2xpc3QtbGFiZWxcIj57dGhpcy5wcm9wcy5sYWJlbH08L2Rpdj5cblx0XHRcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiZGFzaGJvYXJkLWdyb3VwX19saXN0LWNvdW50XCI+e3RoaXMucHJvcHMuc3Bpbm5lciB8fCB0aGlzLnByb3BzLmNvdW50fTwvZGl2PlxuXHRcdFx0XHRcdDwvTGluaz5cblx0XHRcdFx0XHR7LyogSWYgd2Ugd2FudCB0byBjcmVhdGUgYSBuZXcgbGlzdCwgd2UgYXBwZW5kID9jcmVhdGUsIHdoaWNoIG9wZW5zIHRoZVxuXHRcdFx0XHRcdFx0Y3JlYXRlIGZvcm0gb24gdGhlIG5ldyBwYWdlISAqL31cblx0XHRcdFx0XHR7KCF0aGlzLnByb3BzLmhpZGVDcmVhdGVCdXR0b24pICYmIChcblx0XHRcdFx0XHRcdDxMaW5rXG5cdFx0XHRcdFx0XHRcdHRvPXt0aGlzLnByb3BzLmhyZWYgKyAnP2NyZWF0ZSd9XG5cdFx0XHRcdFx0XHRcdGNsYXNzTmFtZT1cImRhc2hib2FyZC1ncm91cF9fbGlzdC1jcmVhdGUgb2N0aWNvbiBvY3RpY29uLXBsdXNcIlxuXHRcdFx0XHRcdFx0XHR0aXRsZT1cIkNyZWF0ZVwiXG5cdFx0XHRcdFx0XHRcdHRhYkluZGV4PVwiLTFcIlxuXHRcdFx0XHRcdFx0Lz5cblx0XHRcdFx0XHQpfVxuXHRcdFx0XHQ8L3NwYW4+XG5cdFx0XHQ8L2Rpdj5cblx0XHQpO1xuXHR9LFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gTGlzdFRpbGU7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5cbmltcG9ydCB7IHBsdXJhbCB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL3N0cmluZyc7XG5pbXBvcnQgTGlzdFRpbGUgZnJvbSAnLi9MaXN0VGlsZSc7XG5cbmV4cG9ydCBjbGFzcyBMaXN0cyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG5cdHJlbmRlciAoKSB7XG5cdFx0cmV0dXJuIChcblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiZGFzaGJvYXJkLWdyb3VwX19saXN0c1wiPlxuXHRcdFx0XHR7Xy5tYXAodGhpcy5wcm9wcy5saXN0cywgKGxpc3QsIGtleSkgPT4ge1xuXHRcdFx0XHRcdC8vIElmIGFuIG9iamVjdCBpcyBwYXNzZWQgaW4gdGhlIGtleSBpcyB0aGUgaW5kZXgsXG5cdFx0XHRcdFx0Ly8gaWYgYW4gYXJyYXkgaXMgcGFzc2VkIGluIHRoZSBrZXkgaXMgYXQgbGlzdC5rZXlcblx0XHRcdFx0XHRjb25zdCBsaXN0S2V5ID0gbGlzdC5rZXkgfHwga2V5O1xuXHRcdFx0XHRcdGNvbnN0IGhyZWYgPSBsaXN0LmV4dGVybmFsID8gbGlzdC5wYXRoIDogYCR7S2V5c3RvbmUuYWRtaW5QYXRofS8ke2xpc3QucGF0aH1gO1xuXHRcdFx0XHRcdGNvbnN0IGxpc3REYXRhID0gdGhpcy5wcm9wcy5saXN0c0RhdGFbbGlzdC5wYXRoXTtcblx0XHRcdFx0XHRjb25zdCBpc05vQ3JlYXRlID0gbGlzdERhdGEgPyBsaXN0RGF0YS5ub2NyZWF0ZSA6IGZhbHNlO1xuXHRcdFx0XHRcdHJldHVybiAoXG5cdFx0XHRcdFx0XHQ8TGlzdFRpbGVcblx0XHRcdFx0XHRcdFx0a2V5PXtsaXN0LnBhdGh9XG5cdFx0XHRcdFx0XHRcdHBhdGg9e2xpc3QucGF0aH1cblx0XHRcdFx0XHRcdFx0bGFiZWw9e2xpc3QubGFiZWx9XG5cdFx0XHRcdFx0XHRcdGhpZGVDcmVhdGVCdXR0b249e2lzTm9DcmVhdGV9XG5cdFx0XHRcdFx0XHRcdGhyZWY9e2hyZWZ9XG5cdFx0XHRcdFx0XHRcdGNvdW50PXtwbHVyYWwodGhpcy5wcm9wcy5jb3VudHNbbGlzdEtleV0sICcqIEl0ZW0nLCAnKiBJdGVtcycpfVxuXHRcdFx0XHRcdFx0XHRzcGlubmVyPXt0aGlzLnByb3BzLnNwaW5uZXJ9XG5cdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH0pfVxuXHRcdFx0PC9kaXY+XG5cdFx0KTtcblx0fVxufVxuXG5MaXN0cy5wcm9wVHlwZXMgPSB7XG5cdGNvdW50czogUmVhY3QuUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXHRsaXN0czogUmVhY3QuUHJvcFR5cGVzLm9uZU9mVHlwZShbXG5cdFx0UmVhY3QuUHJvcFR5cGVzLmFycmF5LFxuXHRcdFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG5cdF0pLmlzUmVxdWlyZWQsXG5cdHNwaW5uZXI6IFJlYWN0LlByb3BUeXBlcy5ub2RlLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdCgoc3RhdGUpID0+IHtcblx0cmV0dXJuIHtcblx0XHRsaXN0c0RhdGE6IHN0YXRlLmxpc3RzLmRhdGEsXG5cdH07XG59KShMaXN0cyk7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGdldFJlbGF0ZWRJY29uQ2xhc3MgZnJvbSAnLi4vdXRpbHMvZ2V0UmVsYXRlZEljb25DbGFzcyc7XG5cbmNsYXNzIFNlY3Rpb24gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuXHRyZW5kZXIgKCkge1xuXHRcdGNvbnN0IGljb25DbGFzcyA9IHRoaXMucHJvcHMuaWNvbiB8fCBnZXRSZWxhdGVkSWNvbkNsYXNzKHRoaXMucHJvcHMuaWQpO1xuXHRcdHJldHVybiAoXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImRhc2hib2FyZC1ncm91cFwiIGRhdGEtc2VjdGlvbi1sYWJlbD17dGhpcy5wcm9wcy5sYWJlbH0+XG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiZGFzaGJvYXJkLWdyb3VwX19oZWFkaW5nXCI+XG5cdFx0XHRcdFx0PHNwYW4gY2xhc3NOYW1lPXtgZGFzaGJvYXJkLWdyb3VwX19oZWFkaW5nLWljb24gJHtpY29uQ2xhc3N9YH0gLz5cblx0XHRcdFx0XHR7dGhpcy5wcm9wcy5sYWJlbH1cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdHt0aGlzLnByb3BzLmNoaWxkcmVufVxuXHRcdFx0PC9kaXY+XG5cdFx0KTtcblx0fVxufVxuXG5TZWN0aW9uLnByb3BUeXBlcyA9IHtcblx0Y2hpbGRyZW46IFJlYWN0LlByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWQsXG5cdGljb246IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG5cdGlkOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuXHRsYWJlbDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgU2VjdGlvbjtcbiIsImV4cG9ydCBjb25zdCBMT0FEX0NPVU5UUyA9ICdhcHAvSG9tZS9MT0FEX0NPVU5UUyc7XG5leHBvcnQgY29uc3QgQ09VTlRTX0xPQURJTkdfU1VDQ0VTUyA9ICdhcHAvSG9tZS9DT1VOVFNfTE9BRElOR19TVUNDRVNTJztcbmV4cG9ydCBjb25zdCBDT1VOVFNfTE9BRElOR19FUlJPUiA9ICdhcHAvSG9tZS9DT1VOVFNfTE9BRElOR19FUlJPUic7XG4iLCIvKipcbiAqIFRoZSBIb21lIHZpZXcgaXMgdGhlIHZpZXcgb25lIHNlZXMgYXQgL2tleXN0b25lLiBJdCBzaG93cyBhIGxpc3Qgb2YgYWxsIGxpc3RzLFxuICogZ3JvdXBlZCBieSB0aGVpciBzZWN0aW9uLlxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDb250YWluZXIsIFNwaW5uZXIgfSBmcm9tICcuLi8uLi9lbGVtZW50YWwnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcblxuaW1wb3J0IExpc3RzIGZyb20gJy4vY29tcG9uZW50cy9MaXN0cyc7XG5pbXBvcnQgU2VjdGlvbiBmcm9tICcuL2NvbXBvbmVudHMvU2VjdGlvbic7XG5pbXBvcnQgQWxlcnRNZXNzYWdlcyBmcm9tICcuLi8uLi9zaGFyZWQvQWxlcnRNZXNzYWdlcyc7XG5pbXBvcnQge1xuXHRsb2FkQ291bnRzLFxufSBmcm9tICcuL2FjdGlvbnMnO1xuXG52YXIgSG9tZVZpZXcgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cdGRpc3BsYXlOYW1lOiAnSG9tZVZpZXcnLFxuXHRnZXRJbml0aWFsU3RhdGUgKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRtb2RhbElzT3BlbjogdHJ1ZSxcblx0XHR9O1xuXHR9LFxuXHQvLyBXaGVuIGV2ZXJ5dGhpbmcgaXMgcmVuZGVyZWQsIHN0YXJ0IGxvYWRpbmcgdGhlIGl0ZW0gY291bnRzIG9mIHRoZSBsaXN0c1xuXHQvLyBmcm9tIHRoZSBBUElcblx0Y29tcG9uZW50RGlkTW91bnQgKCkge1xuXHRcdHRoaXMucHJvcHMuZGlzcGF0Y2gobG9hZENvdW50cygpKTtcblx0fSxcblx0Z2V0U3Bpbm5lciAoKSB7XG5cdFx0aWYgKHRoaXMucHJvcHMuY291bnRzICYmIE9iamVjdC5rZXlzKHRoaXMucHJvcHMuY291bnRzKS5sZW5ndGggPT09IDBcblx0XHRcdCYmICh0aGlzLnByb3BzLmVycm9yIHx8IHRoaXMucHJvcHMubG9hZGluZykpIHtcblx0XHRcdHJldHVybiAoXG5cdFx0XHRcdDxTcGlubmVyIC8+XG5cdFx0XHQpO1xuXHRcdH1cblx0XHRyZXR1cm4gbnVsbDtcblx0fSxcblx0cmVuZGVyICgpIHtcblx0XHRjb25zdCBzcGlubmVyID0gdGhpcy5nZXRTcGlubmVyKCk7XG5cdFx0cmV0dXJuIChcblx0XHRcdDxDb250YWluZXIgZGF0YS1zY3JlZW4taWQ9XCJob21lXCI+XG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiZGFzaGJvYXJkLWhlYWRlclwiPlxuXHRcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiZGFzaGJvYXJkLWhlYWRpbmdcIj57S2V5c3RvbmUuYnJhbmR9PC9kaXY+XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImRhc2hib2FyZC1ncm91cHNcIj5cblx0XHRcdFx0XHR7KHRoaXMucHJvcHMuZXJyb3IpICYmIChcblx0XHRcdFx0XHRcdDxBbGVydE1lc3NhZ2VzXG5cdFx0XHRcdFx0XHRcdGFsZXJ0cz17eyBlcnJvcjogeyBlcnJvcjpcblx0XHRcdFx0XHRcdFx0XHRcIlRoZXJlIGlzIGEgcHJvYmxlbSB3aXRoIHRoZSBuZXR3b3JrLCB3ZSdyZSB0cnlpbmcgdG8gcmVjb25uZWN0Li4uXCIsXG5cdFx0XHRcdFx0XHRcdH0gfX1cblx0XHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0KX1cblx0XHRcdFx0XHR7LyogUmVuZGVyIGZsYXQgbmF2ICovfVxuXHRcdFx0XHRcdHtLZXlzdG9uZS5uYXYuZmxhdCA/IChcblx0XHRcdFx0XHRcdDxMaXN0c1xuXHRcdFx0XHRcdFx0XHRjb3VudHM9e3RoaXMucHJvcHMuY291bnRzfVxuXHRcdFx0XHRcdFx0XHRsaXN0cz17S2V5c3RvbmUubGlzdHN9XG5cdFx0XHRcdFx0XHRcdHNwaW5uZXI9e3NwaW5uZXJ9XG5cdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdCkgOiAoXG5cdFx0XHRcdFx0XHQ8ZGl2PlxuXHRcdFx0XHRcdFx0XHR7LyogUmVuZGVyIG5hdiB3aXRoIHNlY3Rpb25zICovfVxuXHRcdFx0XHRcdFx0XHR7S2V5c3RvbmUubmF2LnNlY3Rpb25zLm1hcCgobmF2U2VjdGlvbikgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiAoXG5cdFx0XHRcdFx0XHRcdFx0XHQ8U2VjdGlvbiBrZXk9e25hdlNlY3Rpb24ua2V5fSBpZD17bmF2U2VjdGlvbi5rZXl9IGxhYmVsPXtuYXZTZWN0aW9uLmxhYmVsfT5cblx0XHRcdFx0XHRcdFx0XHRcdFx0PExpc3RzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Y291bnRzPXt0aGlzLnByb3BzLmNvdW50c31cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRsaXN0cz17bmF2U2VjdGlvbi5saXN0c31cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRzcGlubmVyPXtzcGlubmVyfVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0XHRcdFx0PC9TZWN0aW9uPlxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH0pfVxuXHRcdFx0XHRcdFx0XHR7LyogUmVuZGVyIG9ycGhhbmVkIGxpc3RzICovfVxuXHRcdFx0XHRcdFx0XHR7S2V5c3RvbmUub3JwaGFuZWRMaXN0cy5sZW5ndGggPyAoXG5cdFx0XHRcdFx0XHRcdFx0PFNlY3Rpb24gbGFiZWw9XCJPdGhlclwiIGljb249XCJvY3RpY29uLWRhdGFiYXNlXCI+XG5cdFx0XHRcdFx0XHRcdFx0XHQ8TGlzdHNcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y291bnRzPXt0aGlzLnByb3BzLmNvdW50c31cblx0XHRcdFx0XHRcdFx0XHRcdFx0bGlzdHM9e0tleXN0b25lLm9ycGhhbmVkTGlzdHN9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHNwaW5uZXI9e3NwaW5uZXJ9XG5cdFx0XHRcdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0XHRcdDwvU2VjdGlvbj5cblx0XHRcdFx0XHRcdFx0KSA6IG51bGx9XG5cdFx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0XHQpfVxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdDwvQ29udGFpbmVyPlxuXHRcdCk7XG5cdH0sXG59KTtcblxuZXhwb3J0IHtcblx0SG9tZVZpZXcsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KChzdGF0ZSkgPT4gKHtcblx0Y291bnRzOiBzdGF0ZS5ob21lLmNvdW50cyxcblx0bG9hZGluZzogc3RhdGUuaG9tZS5sb2FkaW5nLFxuXHRlcnJvcjogc3RhdGUuaG9tZS5lcnJvcixcbn0pKShIb21lVmlldyk7XG4iLCJpbXBvcnQgYXNzaWduIGZyb20gJ29iamVjdC1hc3NpZ24nO1xuaW1wb3J0IHtcblx0TE9BRF9DT1VOVFMsXG5cdENPVU5UU19MT0FESU5HX1NVQ0NFU1MsXG5cdENPVU5UU19MT0FESU5HX0VSUk9SLFxufSBmcm9tICcuL2NvbnN0YW50cyc7XG5cbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcblx0Y291bnRzOiB7fSxcblx0bG9hZGluZzogZmFsc2UsXG5cdGVycm9yOiBudWxsLFxufTtcblxuZnVuY3Rpb24gaG9tZSAoc3RhdGUgPSBpbml0aWFsU3RhdGUsIGFjdGlvbikge1xuXHRzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG5cdFx0Y2FzZSBMT0FEX0NPVU5UUzpcblx0XHRcdHJldHVybiBhc3NpZ24oe30sIHN0YXRlLCB7XG5cdFx0XHRcdGxvYWRpbmc6IHRydWUsXG5cdFx0XHR9KTtcblx0XHRjYXNlIENPVU5UU19MT0FESU5HX1NVQ0NFU1M6XG5cdFx0XHRyZXR1cm4gYXNzaWduKHt9LCBzdGF0ZSwge1xuXHRcdFx0XHRsb2FkaW5nOiBmYWxzZSxcblx0XHRcdFx0Y291bnRzOiBhY3Rpb24uY291bnRzLFxuXHRcdFx0XHRlcnJvcjogbnVsbCxcblx0XHRcdH0pO1xuXHRcdGNhc2UgQ09VTlRTX0xPQURJTkdfRVJST1I6XG5cdFx0XHRyZXR1cm4gYXNzaWduKHt9LCBzdGF0ZSwge1xuXHRcdFx0XHRsb2FkaW5nOiBmYWxzZSxcblx0XHRcdFx0ZXJyb3I6IGFjdGlvbi5lcnJvcixcblx0XHRcdH0pO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gc3RhdGU7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgaG9tZTtcbiIsIi8qKlxuICogR2V0cyBhIHJlbGF0ZWQgaWNvbiBmb3IgYSBzdHJpbmcsIHJldHVybmVkIGFzIGEgY2xhc3NuYW1lIHRvIGJlIGFwcGxpZWQgdG8gYSBzcGFuLiBJZiBubyByZWxhdGVkXG4gKiBpY29uIGlzIGZvdW5kLCByZXR1cm5zIGEgY2xhc3NuYW1lIGZvciBhIGRvdCBpY29uXG4gKlxuICogQHBhcmFtICBbU3RyaW5nXSBzdHJpbmdcbiAqIEByZXR1cm4gW1N0cmluZ10gICAgICAgIFRoZSBjbGFzc25hbWUgb2YgdGhlIGljb25cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0UmVsYXRlZEljb25DbGFzcyAoc3RyaW5nKSB7XG5cdGNvbnN0IGljb25zID0gW1xuXHRcdHsgaWNvbjogJ2Jvb2snLCBzZWN0aW9uczogWydib29rcycsICdwb3N0cycsICdibG9nJywgJ2Jsb2ctcG9zdHMnLCAnc3RvcmllcycsICduZXdzLXN0b3JpZXMnLCAnY29udGVudCddIH0sXG5cdFx0eyBpY29uOiAnYnJpZWZjYXNlJywgc2VjdGlvbnM6IFsnYnVzaW5lc3NlcycsICdjb21wYW5pZXMnLCAnbGlzdGluZ3MnLCAnb3JnYW5pemF0aW9ucycsICdwYXJ0bmVycyddIH0sXG5cdFx0eyBpY29uOiAnY2FsZW5kYXInLCBzZWN0aW9uczogWydldmVudHMnLCAnZGF0ZXMnXSB9LFxuXHRcdHsgaWNvbjogJ2Nsb2NrJywgc2VjdGlvbnM6IFsnY2xhc3NlcycsICdob3VycycsICd0aW1lcyddIH0sXG5cdFx0eyBpY29uOiAnZmlsZS1tZWRpYScsIHNlY3Rpb25zOiBbJ2dhbGxlcnknLCAnZ2FsbGVyaWVzJywgJ2ltYWdlcycsICdwaG90b3MnLCAncGljdHVyZXMnXSB9LFxuXHRcdHsgaWNvbjogJ2ZpbGUtdGV4dCcsIHNlY3Rpb25zOiBbJ2F0dGFjaG1lbnRzJywgJ2RvY3MnLCAnZG9jdW1lbnRzJywgJ2ZpbGVzJ10gfSxcblx0XHR7IGljb246ICdsb2NhdGlvbicsIHNlY3Rpb25zOiBbJ2xvY2F0aW9ucycsICdtYXJrZXJzJywgJ3BsYWNlcyddIH0sXG5cdFx0eyBpY29uOiAnbWFpbCcsIHNlY3Rpb25zOiBbJ2VtYWlscycsICdlbnF1aXJpZXMnXSB9LFxuXHRcdHsgaWNvbjogJ21lZ2FwaG9uZScsIHNlY3Rpb25zOiBbJ2Jyb2FkY2FzdHMnLCAnam9icycsICd0YWxrcyddIH0sXG5cdFx0eyBpY29uOiAnb3JnYW5pemF0aW9uJywgc2VjdGlvbnM6IFsnY29udGFjdHMnLCAnY3VzdG9tZXJzJywgJ2dyb3VwcycsICdtZW1iZXJzJywgJ3Blb3BsZScsICdzcGVha2VycycsICd0ZWFtcycsICd1c2VycyddIH0sXG5cdFx0eyBpY29uOiAncGFja2FnZScsIHNlY3Rpb25zOiBbJ2JveGVzJywgJ2l0ZW1zJywgJ3BhY2thZ2VzJywgJ3BhcmNlbHMnXSB9LFxuXHRcdHsgaWNvbjogJ3RhZycsIHNlY3Rpb25zOiBbJ3RhZ3MnXSB9LFxuXHRdO1xuXHRjb25zdCBjbGFzc2VzID0gaWNvbnNcblx0XHQuZmlsdGVyKG9iaiA9PiBvYmouc2VjdGlvbnMuaW5kZXhPZihzdHJpbmcpICE9PSAtMSlcblx0XHQubWFwKG9iaiA9PiBgb2N0aWNvbiBvY3RpY29uLSR7b2JqLmljb259YCk7XG5cblx0aWYgKCFjbGFzc2VzLmxlbmd0aCkge1xuXHRcdGNsYXNzZXMucHVzaCgnb2N0aWNvbiBvY3RpY29uLXByaW1pdGl2ZS1kb3QnKTtcblx0fVxuXG5cdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcbn1cbiIsImltcG9ydCB7XG5cdFNFTEVDVF9JVEVNLFxuXHRMT0FEX0RBVEEsXG5cdERBVEFfTE9BRElOR19TVUNDRVNTLFxuXHREQVRBX0xPQURJTkdfRVJST1IsXG5cdERSQUdfTU9WRV9JVEVNLFxuXHREUkFHX1JFU0VUX0lURU1TLFxuXHRMT0FEX1JFTEFUSU9OU0hJUF9EQVRBLFxufSBmcm9tICcuL2NvbnN0YW50cyc7XG5cbmltcG9ydCB7XG5cdGxvYWRJdGVtcyxcbn0gZnJvbSAnLi4vTGlzdC9hY3Rpb25zJztcblxuLyoqXG4gKiBTZWxlY3QgYW4gaXRlbVxuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gaXRlbUlkIFRoZSBpdGVtIElEXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZWxlY3RJdGVtIChpdGVtSWQpIHtcblx0cmV0dXJuIHtcblx0XHR0eXBlOiBTRUxFQ1RfSVRFTSxcblx0XHRpZDogaXRlbUlkLFxuXHR9O1xufVxuXG4vKipcbiAqIExvYWQgdGhlIGl0ZW0gZGF0YSBvZiB0aGUgY3VycmVudCBpdGVtXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsb2FkSXRlbURhdGEgKCkge1xuXHRyZXR1cm4gKGRpc3BhdGNoLCBnZXRTdGF0ZSkgPT4ge1xuXHRcdC8vIEhvbGQgb24gdG8gdGhlIGlkIG9mIHRoZSBpdGVtIHdlIGN1cnJlbnRseSB3YW50IHRvIGxvYWQuXG5cdFx0Ly8gRGlzcGF0Y2ggdGhpcyByZWZlcmVuY2UgdG8gb3VyIHJlZHV4IHN0b3JlIHRvIGhvbGQgb24gdG8gYXMgYSAnbG9hZGluZ1JlZicuXG5cdFx0Y29uc3QgY3VycmVudEl0ZW1JRCA9IGdldFN0YXRlKCkuaXRlbS5pZDtcblx0XHRkaXNwYXRjaCh7XG5cdFx0XHR0eXBlOiBMT0FEX0RBVEEsXG5cdFx0fSk7XG5cdFx0Y29uc3Qgc3RhdGUgPSBnZXRTdGF0ZSgpO1xuXHRcdGNvbnN0IGxpc3QgPSBzdGF0ZS5saXN0cy5jdXJyZW50TGlzdDtcblxuXHRcdC8vIGNvbnN0IGl0ZW1JRCA9IHN0YXRlLml0ZW0uaWQ7XG5cdFx0Ly8gTG9hZCBhIHNwZWNpZmljIGl0ZW0gd2l0aCB0aGUgdXRpbHMvTGlzdC5qcyBoZWxwZXJcblx0XHRsaXN0LmxvYWRJdGVtKHN0YXRlLml0ZW0uaWQsIHsgZHJpbGxkb3duOiB0cnVlIH0sIChlcnIsIGl0ZW1EYXRhKSA9PiB7XG5cblx0XHRcdC8vIE9uY2UgdGhpcyBhc3luYyByZXF1ZXN0IGhhcyBmaXJlZCB0aGlzIGNhbGxiYWNrLCBjaGVjayB0aGF0XG5cdFx0XHQvLyB0aGUgaXRlbSBpZCByZWZlcmVuY2VkIGJ5IHRoaXNMb2FkUmVmIGlzIHRoZSBzYW1lIGlkXG5cdFx0XHQvLyByZWZlcmVuY2VkIGJ5IGxvYWRpbmdSZWYgaW4gdGhlIHJlZHV4IHN0b3JlLlxuXG5cdFx0XHQvLyBJZiBpdCBpcywgdGhlbiB0aGlzIGlzIHRoZSBsYXRlc3QgcmVxdWVzdCwgYW5kIGl0IGlzIHNhZmUgdG8gcmVzb2x2ZSBpdCBub3JtYWxseS5cblx0XHRcdC8vIElmIGl0IGlzIG5vdCB0aGUgc2FtZSBpZCBob3dldmVyLFxuXHRcdFx0Ly8gdGhpcyBtZWFucyB0aGF0IHRoaXMgcmVxdWVzdCBpcyBOT1QgdGhlIGxhdGVzdCBmaXJlZCByZXF1ZXN0LFxuXHRcdFx0Ly8gYW5kIHNvIHdlJ2xsIGJhaWwgb3V0IG9mIGl0IGVhcmx5LlxuXG5cdFx0XHRpZiAoZ2V0U3RhdGUoKS5pdGVtLmlkICE9PSBjdXJyZW50SXRlbUlEKSByZXR1cm47XG5cdFx0XHRpZiAoZXJyIHx8ICFpdGVtRGF0YSkge1xuXHRcdFx0XHRkaXNwYXRjaChkYXRhTG9hZGluZ0Vycm9yKGVycikpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGlzcGF0Y2goZGF0YUxvYWRlZChpdGVtRGF0YSkpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9hZFJlbGF0aW9uc2hpcEl0ZW1EYXRhICh7IGNvbHVtbnMsIHJlZkxpc3QsIHJlbGF0aW9uc2hpcCwgcmVsYXRlZEl0ZW1JZCB9KSB7XG5cdHJldHVybiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiB7XG5cdFx0cmVmTGlzdC5sb2FkSXRlbXMoe1xuXHRcdFx0Y29sdW1uczogY29sdW1ucyxcblx0XHRcdGZpbHRlcnM6IFt7XG5cdFx0XHRcdGZpZWxkOiByZWZMaXN0LmZpZWxkc1tyZWxhdGlvbnNoaXAucmVmUGF0aF0sXG5cdFx0XHRcdHZhbHVlOiB7IHZhbHVlOiByZWxhdGVkSXRlbUlkIH0sXG5cdFx0XHR9XSxcblx0XHR9LCAoZXJyLCBpdGVtcykgPT4ge1xuXHRcdFx0Ly8gLy8gVE9ETzogaW5kaWNhdGUgcGFnaW5hdGlvbiAmIGxpbmsgdG8gbWFpbiBsaXN0IHZpZXdcblx0XHRcdC8vIHRoaXMuc2V0U3RhdGUoeyBpdGVtcyB9KTtcblx0XHRcdGRpc3BhdGNoKHJlbGF0aW9uc2hpcERhdGFMb2FkZWQocmVsYXRpb25zaGlwLnBhdGgsIGl0ZW1zKSk7XG5cdFx0fSk7XG5cdH07XG59XG5cblxuLyoqXG4gKiBDYWxsZWQgd2hlbiBkYXRhIG9mIHRoZSBjdXJyZW50IGl0ZW0gaXMgbG9hZGVkXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBkYXRhIFRoZSBpdGVtIGRhdGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRhdGFMb2FkZWQgKGRhdGEpIHtcblx0cmV0dXJuIHtcblx0XHR0eXBlOiBEQVRBX0xPQURJTkdfU1VDQ0VTUyxcblx0XHRsb2FkaW5nUmVmOiBudWxsLFxuXHRcdGRhdGEsXG5cdH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWxhdGlvbnNoaXBEYXRhTG9hZGVkIChwYXRoLCBkYXRhKSB7XG5cdHJldHVybiB7XG5cdFx0dHlwZTogTE9BRF9SRUxBVElPTlNISVBfREFUQSxcblx0XHRyZWxhdGlvbnNoaXBQYXRoOiBwYXRoLFxuXHRcdGRhdGEsXG5cdH07XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aGVuIHRoZXJlIHdhcyBhbiBlcnJvciBkdXJpbmcgdGhlIGxvYWRpbmcgb2YgdGhlIGN1cnJlbnQgaXRlbSBkYXRhLFxuICogd2lsbCByZXRyeSBsb2FkaW5nIHRoZSBkYXRhIGV2ZXIgTkVUV09SS19FUlJPUl9SRVRSWV9ERUxBWSBtaWxsaXNlY29uZHNcbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IGVycm9yIFRoZSBlcnJvclxuICovXG5leHBvcnQgZnVuY3Rpb24gZGF0YUxvYWRpbmdFcnJvciAoZXJyKSB7XG5cdHJldHVybiB7XG5cdFx0dHlwZTogREFUQV9MT0FESU5HX0VSUk9SLFxuXHRcdGxvYWRpbmdSZWY6IG51bGwsXG5cdFx0ZXJyb3I6IGVycixcblx0fTtcbn1cblxuLyoqXG4gKiBEZWxldGVzIGFuIGl0ZW0gYW5kIG9wdGlvbmFsbHkgcmVkaXJlY3RzIHRvIHRoZSBjdXJyZW50IGxpc3QgVVJMXG4gKlxuICogQHBhcmFtICB7U3RyaW5nfSBpZCAgICAgVGhlIElEIG9mIHRoZSBpdGVtIHdlIHdhbnQgdG8gZGVsZXRlXG4gKiBAcGFyYW0gIHtPYmplY3R9IHJvdXRlciBBIHJlYWN0LXJvdXRlciByb3V0ZXIgb2JqZWN0LiBJZiB0aGlzIGlzIHBhc3NlZCwgd2VcbiAqICAgICAgICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0IHRvIEtleXN0b25lLmFkbWluUGF0aC9jdXJyZW50TGlzdC5wYXRoIVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVsZXRlSXRlbSAoaWQsIHJvdXRlcikge1xuXHRyZXR1cm4gKGRpc3BhdGNoLCBnZXRTdGF0ZSkgPT4ge1xuXHRcdGNvbnN0IHN0YXRlID0gZ2V0U3RhdGUoKTtcblx0XHRjb25zdCBsaXN0ID0gc3RhdGUubGlzdHMuY3VycmVudExpc3Q7XG5cdFx0bGlzdC5kZWxldGVJdGVtKGlkLCAoZXJyKSA9PiB7XG5cdFx0XHQvLyBJZiBhIHJvdXRlciBpcyBwYXNzZWQsIHJlZGlyZWN0IHRvIHRoZSBjdXJyZW50IGxpc3QgcGF0aCxcblx0XHRcdC8vIG90aGVyd2lzZSBzdGF5IHdoZXJlIHdlIGFyZVxuXHRcdFx0aWYgKHJvdXRlcikge1xuXHRcdFx0XHRsZXQgcmVkaXJlY3RVcmwgPSBgJHtLZXlzdG9uZS5hZG1pblBhdGh9LyR7bGlzdC5wYXRofWA7XG5cdFx0XHRcdGlmIChzdGF0ZS5saXN0cy5wYWdlLmluZGV4ICYmIHN0YXRlLmxpc3RzLnBhZ2UuaW5kZXggPiAxKSB7XG5cdFx0XHRcdFx0cmVkaXJlY3RVcmwgPSBgJHtyZWRpcmVjdFVybH0/cGFnZT0ke3N0YXRlLmxpc3RzLnBhZ2UuaW5kZXh9YDtcblx0XHRcdFx0fVxuXHRcdFx0XHRyb3V0ZXIucHVzaChyZWRpcmVjdFVybCk7XG5cdFx0XHR9XG5cdFx0XHQvLyBUT0RPIFByb3BlciBlcnJvciBoYW5kbGluZ1xuXHRcdFx0aWYgKGVycikge1xuXHRcdFx0XHRhbGVydChlcnIuZXJyb3IgfHwgJ0Vycm9yIGRlbGV0aW5nIGl0ZW0sIHBsZWFzZSB0cnkgYWdhaW4hJyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkaXNwYXRjaChsb2FkSXRlbXMoKSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW9yZGVySXRlbXMgKHsgY29sdW1ucywgcmVmTGlzdCwgcmVsYXRpb25zaGlwLCByZWxhdGVkSXRlbUlkLCBpdGVtLCBwcmV2U29ydE9yZGVyLCBuZXdTb3J0T3JkZXIgfSkge1xuXHRyZXR1cm4gKGRpc3BhdGNoLCBnZXRTdGF0ZSkgPT4ge1xuXHRcdC8vIFNlbmQgdGhlIGl0ZW0sIHByZXZpb3VzIHNvcnRPcmRlciBhbmQgdGhlIG5ldyBzb3J0T3JkZXJcblx0XHQvLyB3ZSBzaG91bGQgZ2V0IHRoZSBwcm9wZXIgbGlzdCBhbmQgbmV3IHBhZ2UgcmVzdWx0cyBpbiByZXR1cm5cblx0XHRyZWZMaXN0LnJlb3JkZXJJdGVtcyhcblx0XHRcdGl0ZW0sXG5cdFx0XHRwcmV2U29ydE9yZGVyLFxuXHRcdFx0bmV3U29ydE9yZGVyLFxuXHRcdFx0e1xuXHRcdFx0XHRjb2x1bW5zOiBjb2x1bW5zLFxuXHRcdFx0XHRmaWx0ZXJzOiBbe1xuXHRcdFx0XHRcdGZpZWxkOiByZWZMaXN0LmZpZWxkc1tyZWxhdGlvbnNoaXAucmVmUGF0aF0sXG5cdFx0XHRcdFx0dmFsdWU6IHsgdmFsdWU6IHJlbGF0ZWRJdGVtSWQgfSxcblx0XHRcdFx0fV0sXG5cdFx0XHR9LFxuXHRcdFx0KGVyciwgaXRlbXMpID0+IHtcblx0XHRcdFx0ZGlzcGF0Y2gocmVsYXRpb25zaGlwRGF0YUxvYWRlZChyZWxhdGlvbnNoaXAucGF0aCwgaXRlbXMpKTtcblx0XHRcdFx0Ly8gSWYgZXJyLCBmbGFzaCB0aGUgcm93IGFsZXJ0XG5cdFx0XHRcdC8vIGlmIChlcnIpIHtcblx0XHRcdFx0Ly8gXHRkaXNwYXRjaChyZXNldEl0ZW1zKGl0ZW0uaWQpKTtcblx0XHRcdFx0Ly8gXHQvLyByZXR1cm4gdGhpcy5yZXNldEl0ZW1zKHRoaXMuZmluZEl0ZW1CeUlkW2l0ZW0uaWRdKTtcblx0XHRcdFx0Ly8gfSBlbHNlIHtcblx0XHRcdFx0Ly8gXHRkaXNwYXRjaChpdGVtc0xvYWRlZChpdGVtcykpO1xuXHRcdFx0XHQvLyBcdGRpc3BhdGNoKHNldFJvd0FsZXJ0KHtcblx0XHRcdFx0Ly8gXHRcdHN1Y2Nlc3M6IGl0ZW0uaWQsXG5cdFx0XHRcdC8vIFx0XHRmYWlsOiBmYWxzZSxcblx0XHRcdFx0Ly8gXHR9KSk7XG5cdFx0XHRcdC8vIH1cblx0XHRcdH1cblx0XHQpO1xuXHR9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW92ZUl0ZW0gKHsgcHJldkluZGV4LCBuZXdJbmRleCwgcmVsYXRpb25zaGlwUGF0aCwgbmV3U29ydE9yZGVyIH0pIHtcblx0cmV0dXJuIHtcblx0XHR0eXBlOiBEUkFHX01PVkVfSVRFTSxcblx0XHRwcmV2SW5kZXgsXG5cdFx0bmV3SW5kZXgsXG5cdFx0cmVsYXRpb25zaGlwUGF0aCxcblx0XHRuZXdTb3J0T3JkZXIsXG5cdH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXNldEl0ZW1zICgpIHtcblx0cmV0dXJuIHtcblx0XHR0eXBlOiBEUkFHX1JFU0VUX0lURU1TLFxuXHR9O1xufVxuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHZrZXkgZnJvbSAndmtleSc7XG5cbmNsYXNzIEFsdFRleHQgZXh0ZW5kcyBDb21wb25lbnQge1xuXHRjb25zdHJ1Y3RvciAoKSB7XG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMuaGFuZGxlS2V5RG93biA9IHRoaXMuaGFuZGxlS2V5RG93bi5iaW5kKHRoaXMpO1xuXHRcdHRoaXMuaGFuZGxlS2V5VXAgPSB0aGlzLmhhbmRsZUtleVVwLmJpbmQodGhpcyk7XG5cblx0XHR0aGlzLnN0YXRlID0ge1xuXHRcdFx0bW9kaWZpZWQ6IGZhbHNlLFxuXHRcdH07XG5cdH1cblx0Y29tcG9uZW50RGlkTW91bnQgKCkge1xuXHRcdGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5RG93biwgZmFsc2UpO1xuXHRcdGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLmhhbmRsZUtleVVwLCBmYWxzZSk7XG5cdH1cblx0Y29tcG9uZW50V2lsbFVubW91bnQgKCkge1xuXHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5RG93bik7XG5cdFx0ZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRoaXMuaGFuZGxlS2V5VXApO1xuXHR9XG5cdGhhbmRsZUtleURvd24gKGUpIHtcblx0XHRpZiAodmtleVtlLmtleUNvZGVdICE9PSB0aGlzLnByb3BzLm1vZGlmaWVyKSByZXR1cm47XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRtb2RpZmllZDogdHJ1ZSxcblx0XHR9KTtcblx0fVxuXHRoYW5kbGVLZXlVcCAoZSkge1xuXHRcdGlmICh2a2V5W2Uua2V5Q29kZV0gIT09IHRoaXMucHJvcHMubW9kaWZpZXIpIHJldHVybjtcblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdG1vZGlmaWVkOiBmYWxzZSxcblx0XHR9KTtcblx0fVxuXHRyZW5kZXIgKCkge1xuXHRcdC8vIE5PVEUgYG1vZGlmaWVyYCBpcyBkZWNsYXJlZCB0byByZW1vdmUgaXQgZnJvbSBgcHJvcHNgLCB0aG91Z2ggbmV2ZXIgdXNlZFxuXHRcdGNvbnN0IHtcblx0XHRcdGNvbXBvbmVudDogQ29tcG9uZW50LFxuXHRcdFx0bW9kaWZpZWQsXG5cdFx0XHRtb2RpZmllciwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXHRcdFx0bm9ybWFsLFxuXHRcdFx0Li4ucHJvcHNcblx0XHR9ID0gdGhpcy5wcm9wcztcblxuXHRcdHByb3BzLmNoaWxkcmVuID0gdGhpcy5zdGF0ZS5tb2RpZmllZFxuXHRcdFx0PyBtb2RpZmllZFxuXHRcdFx0OiBub3JtYWw7XG5cblx0XHRyZXR1cm4gPENvbXBvbmVudCB7Li4ucHJvcHN9IC8+O1xuXHR9XG59O1xuXG5jb25zdCBTVVBQT1JURURfS0VZUyA9IFtcblx0JzxhbHQ+Jyxcblx0Jzxjb250cm9sPicsXG5cdCc8bWV0YT4nLFxuXHQnPHNoaWZ0PicsXG5dO1xuXG5BbHRUZXh0LnByb3BUeXBlcyA9IHtcblx0Y29tcG9uZW50OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcblx0XHRQcm9wVHlwZXMuZnVuYyxcblx0XHRQcm9wVHlwZXMuc3RyaW5nLFxuXHRdKSxcblx0bW9kaWZpZWQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuXHRcdFByb3BUeXBlcy5lbGVtZW50LFxuXHRcdFByb3BUeXBlcy5zdHJpbmcsXG5cdF0pLFxuXHRtb2RpZmllcjogUHJvcFR5cGVzLm9uZU9mKFNVUFBPUlRFRF9LRVlTKSxcblx0bm9ybWFsOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcblx0XHRQcm9wVHlwZXMuZWxlbWVudCxcblx0XHRQcm9wVHlwZXMuc3RyaW5nLFxuXHRdKSxcbn07XG5BbHRUZXh0LmRlZmF1bHRQcm9wcyA9IHtcblx0Y29tcG9uZW50OiAnc3BhbicsXG5cdG1vZGlmaWVyOiAnPGFsdD4nLFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBbHRUZXh0O1xuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcbmltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRHJpbGxkb3duSXRlbSBmcm9tICcuL0RyaWxsZG93bkl0ZW0nO1xuXG5mdW5jdGlvbiBEcmlsbGRvd24gKHsgY2xhc3NOYW1lLCBpdGVtcywgLi4ucHJvcHMgfSkge1xuXHRwcm9wcy5jbGFzc05hbWUgPSBjc3MoY2xhc3Nlcy5kcmlsbGRvd24sIGNsYXNzTmFtZSk7XG5cblx0cmV0dXJuIChcblx0XHQ8dWwgey4uLnByb3BzfT5cblx0XHRcdHtpdGVtcy5tYXAoKGl0ZW0sIGlkeCkgPT4gKFxuXHRcdFx0XHQ8RHJpbGxkb3duSXRlbVxuXHRcdFx0XHRcdGhyZWY9e2l0ZW0uaHJlZn1cblx0XHRcdFx0XHRrZXk9e2lkeH1cblx0XHRcdFx0XHRsYWJlbD17aXRlbS5sYWJlbH1cblx0XHRcdFx0XHRzZXBhcmF0ZT17aWR4IDwgaXRlbXMubGVuZ3RoIC0gMX1cblx0XHRcdFx0Lz5cblx0XHRcdCkpfVxuXHRcdDwvdWw+XG5cdCk7XG59O1xuXG5EcmlsbGRvd24ucHJvcFR5cGVzID0ge1xuXHRpdGVtczogUHJvcFR5cGVzLmFycmF5T2YoXG5cdFx0UHJvcFR5cGVzLnNoYXBlKHtcblx0XHRcdGhyZWY6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcblx0XHRcdGxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG5cdFx0XHRzZXBhcmF0ZTogUHJvcFR5cGVzLmJvb2wsIC8vIEZJWE1FIHZlcmI7IGNvdWxkIGJlIGJldHRlclxuXHRcdH0pXG5cdCkuaXNSZXF1aXJlZCxcbn07XG5cbmNvbnN0IGNsYXNzZXMgPSB7XG5cdGRyaWxsZG93bjoge1xuXHRcdGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuXHRcdGxpc3RTdHlsZTogJ25vbmUnLFxuXHRcdG1hcmdpbjogMCxcblx0XHRwYWRkaW5nOiAwLFxuXHR9LFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBEcmlsbGRvd247XG4iLCJpbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xuaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuaW1wb3J0IHsgQnV0dG9uLCBHbHlwaCB9IGZyb20gJy4uLy4uLy4uL2VsZW1lbnRhbCc7XG5cbmltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi8uLi90aGVtZSc7XG5cbmZ1bmN0aW9uIERyaWxsZG93bkl0ZW0gKHsgY2xhc3NOYW1lLCBocmVmLCBsYWJlbCwgc2VwYXJhdGUsIHNlcGFyYXRvciwgc3R5bGUsIC4uLnByb3BzIH0pIHtcblx0cHJvcHMuY2xhc3NOYW1lID0gY3NzKGNsYXNzZXMuaXRlbSwgY2xhc3NOYW1lKTtcblxuXHQvLyByZW1vdmUgaG9yaXpvbnRhbCBwYWRkaW5nXG5cdGNvbnN0IHN0eWxlcyA9IHtcblx0XHRwYWRkaW5nTGVmdDogMCxcblx0XHRwYWRkaW5nUmlnaHQ6IDAsXG5cdFx0Li4uc3R5bGUsXG5cdH07XG5cblx0cmV0dXJuIChcblx0XHQ8bGkgey4uLnByb3BzfT5cblx0XHRcdDxCdXR0b25cblx0XHRcdFx0Y29tcG9uZW50PXtMaW5rfVxuXHRcdFx0XHRzdHlsZT17c3R5bGVzfVxuXHRcdFx0XHR0bz17aHJlZn1cblx0XHRcdFx0dmFyaWFudD1cImxpbmtcIlxuXHRcdFx0PlxuXHRcdFx0XHR7bGFiZWx9XG5cdFx0XHQ8L0J1dHRvbj5cblx0XHRcdHtzZXBhcmF0ZSAmJiAoXG5cdFx0XHRcdDxzcGFuIGNsYXNzTmFtZT17Y3NzKGNsYXNzZXMuc2VwYXJhdG9yKX0+XG5cdFx0XHRcdFx0e3NlcGFyYXRvcn1cblx0XHRcdFx0PC9zcGFuPlxuXHRcdFx0KX1cblx0XHQ8L2xpPlxuXHQpO1xufTtcblxuRHJpbGxkb3duSXRlbS5wcm9wVHlwZXMgPSB7XG5cdGhyZWY6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcblx0bGFiZWw6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcblx0c2VwYXJhdGU6IFByb3BUeXBlcy5ib29sLCAvLyBGSVhNRSB2ZXJiOyBjb3VsZCBiZSBiZXR0ZXJcblx0c2VwYXJhdG9yOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtcblx0XHRQcm9wVHlwZXMuZWxlbWVudCxcblx0XHRQcm9wVHlwZXMuc3RyaW5nLFxuXHRdKSxcbn07XG5EcmlsbGRvd25JdGVtLmRlZmF1bHRQcm9wcyA9IHtcblx0c2VwYXJhdG9yOiA8R2x5cGggbmFtZT1cImNoZXZyb24tcmlnaHRcIiAvPixcbn07XG5cbmNvbnN0IGNsYXNzZXMgPSB7XG5cdGl0ZW06IHtcblx0XHRkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcblx0XHRtYXJnaW46IDAsXG5cdFx0cGFkZGluZzogMCxcblx0XHR2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcblx0fSxcblx0c2VwYXJhdG9yOiB7XG5cdFx0Y29sb3I6IHRoZW1lLmNvbG9yLmdyYXk0MCxcblx0XHRtYXJnaW5MZWZ0OiAnMC41ZW0nLFxuXHRcdG1hcmdpblJpZ2h0OiAnMC41ZW0nLFxuXHR9LFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBEcmlsbGRvd25JdGVtO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCBhc3NpZ24gZnJvbSAnb2JqZWN0LWFzc2lnbic7XG5pbXBvcnQge1xuXHRGb3JtLFxuXHRGb3JtRmllbGQsXG5cdEZvcm1JbnB1dCxcblx0R3JpZCxcblx0UmVzcG9uc2l2ZVRleHQsXG59IGZyb20gJy4uLy4uLy4uL2VsZW1lbnRhbCc7XG5cbmltcG9ydCB7IEZpZWxkcyB9IGZyb20gJ0ZpZWxkVHlwZXMnO1xuaW1wb3J0IHsgZmFkZSB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL2NvbG9yJztcbmltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi8uLi90aGVtZSc7XG5cbmltcG9ydCB7IEJ1dHRvbiwgTG9hZGluZ0J1dHRvbiB9IGZyb20gJy4uLy4uLy4uL2VsZW1lbnRhbCc7XG5pbXBvcnQgQWxlcnRNZXNzYWdlcyBmcm9tICcuLi8uLi8uLi9zaGFyZWQvQWxlcnRNZXNzYWdlcyc7XG5pbXBvcnQgQ29uZmlybWF0aW9uRGlhbG9nIGZyb20gJy4uLy4uLy4uL3NoYXJlZC9Db25maXJtYXRpb25EaWFsb2cnO1xuXG5pbXBvcnQgRm9ybUhlYWRpbmcgZnJvbSAnLi9Gb3JtSGVhZGluZyc7XG5pbXBvcnQgQWx0VGV4dCBmcm9tICcuL0FsdFRleHQnO1xuaW1wb3J0IEZvb3RlckJhciBmcm9tICcuL0Zvb3RlckJhcic7XG5pbXBvcnQgSW52YWxpZEZpZWxkVHlwZSBmcm9tICcuLi8uLi8uLi9zaGFyZWQvSW52YWxpZEZpZWxkVHlwZSc7XG5cbmltcG9ydCB7IGRlbGV0ZUl0ZW0gfSBmcm9tICcuLi9hY3Rpb25zJztcblxuaW1wb3J0IHsgdXBjYXNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvc3RyaW5nJztcblxuZnVuY3Rpb24gZ2V0TmFtZUZyb21EYXRhIChkYXRhKSB7XG5cdGlmICh0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcpIHtcblx0XHRpZiAodHlwZW9mIGRhdGEuZmlyc3QgPT09ICdzdHJpbmcnICYmIHR5cGVvZiBkYXRhLmxhc3QgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRyZXR1cm4gZGF0YS5maXJzdCArICcgJyArIGRhdGEubGFzdDtcblx0XHR9IGVsc2UgaWYgKGRhdGEuaWQpIHtcblx0XHRcdHJldHVybiBkYXRhLmlkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gc21vb3RoU2Nyb2xsVG9wICgpIHtcblx0dmFyIHBvc2l0aW9uID0gd2luZG93LnNjcm9sbFkgfHwgd2luZG93LnBhZ2VZT2Zmc2V0O1xuXHR2YXIgc3BlZWQgPSBwb3NpdGlvbiAvIDEwO1xuXG5cdGlmIChwb3NpdGlvbiA+IDEpIHtcblx0XHR2YXIgbmV3UG9zaXRpb24gPSBwb3NpdGlvbiAtIHNwZWVkO1xuXG5cdFx0d2luZG93LnNjcm9sbFRvKDAsIG5ld1Bvc2l0aW9uKTtcblx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHNtb290aFNjcm9sbFRvcCk7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LnNjcm9sbFRvKDAsIDApO1xuXHR9XG59XG5cbnZhciBFZGl0Rm9ybSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblx0ZGlzcGxheU5hbWU6ICdFZGl0Rm9ybScsXG5cdHByb3BUeXBlczoge1xuXHRcdGRhdGE6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG5cdFx0bGlzdDogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcblx0fSxcblx0Z2V0SW5pdGlhbFN0YXRlICgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0dmFsdWVzOiBhc3NpZ24oe30sIHRoaXMucHJvcHMuZGF0YS5maWVsZHMpLFxuXHRcdFx0Y29uZmlybWF0aW9uRGlhbG9nOiBudWxsLFxuXHRcdFx0bG9hZGluZzogZmFsc2UsXG5cdFx0XHRsYXN0VmFsdWVzOiBudWxsLCAvLyB1c2VkIGZvciByZXNldHRpbmdcblx0XHRcdGZvY3VzRmlyc3RGaWVsZDogIXRoaXMucHJvcHMubGlzdC5uYW1lRmllbGQgJiYgIXRoaXMucHJvcHMubGlzdC5uYW1lRmllbGRJc0Zvcm1IZWFkZXIsXG5cdFx0fTtcblx0fSxcblx0Y29tcG9uZW50RGlkTW91bnQgKCkge1xuXHRcdHRoaXMuX19pc01vdW50ZWQgPSB0cnVlO1xuXHR9LFxuXHRjb21wb25lbnRXaWxsVW5tb3VudCAoKSB7XG5cdFx0dGhpcy5fX2lzTW91bnRlZCA9IGZhbHNlO1xuXHR9LFxuXHRnZXRGaWVsZFByb3BzIChmaWVsZCkge1xuXHRcdGNvbnN0IHByb3BzID0gYXNzaWduKHt9LCBmaWVsZCk7XG5cdFx0Y29uc3QgYWxlcnRzID0gdGhpcy5zdGF0ZS5hbGVydHM7XG5cdFx0Ly8gRGlzcGxheSB2YWxpZGF0aW9uIGVycm9ycyBpbmxpbmVcblx0XHRpZiAoYWxlcnRzICYmIGFsZXJ0cy5lcnJvciAmJiBhbGVydHMuZXJyb3IuZXJyb3IgPT09ICd2YWxpZGF0aW9uIGVycm9ycycpIHtcblx0XHRcdGlmIChhbGVydHMuZXJyb3IuZGV0YWlsW2ZpZWxkLnBhdGhdKSB7XG5cdFx0XHRcdC8vIE5PVEU6IFRoaXMgd29uJ3Qgd29yayB5ZXQsIGFzIEVsZW1lbnRhbFVJIGRvZXNuJ3QgYWxsb3dcblx0XHRcdFx0Ly8gcGFzc2VkIGluIGlzVmFsaWQsIG9ubHkgaW52YWxpZGF0ZXMgdmlhIGludGVybmFsIHN0YXRlLlxuXHRcdFx0XHQvLyBQUiB0byBmaXggdGhhdDogaHR0cHM6Ly9naXRodWIuY29tL2VsZW1lbnRhbHVpL2VsZW1lbnRhbC9wdWxsLzE0OVxuXHRcdFx0XHRwcm9wcy5pc1ZhbGlkID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHByb3BzLnZhbHVlID0gdGhpcy5zdGF0ZS52YWx1ZXNbZmllbGQucGF0aF0gPT09IHVuZGVmaW5lZCA/IGZpZWxkLmRlZmF1bHRWYWx1ZSA6IHRoaXMuc3RhdGUudmFsdWVzW2ZpZWxkLnBhdGhdO1xuXHRcdHByb3BzLnZhbHVlcyA9IHRoaXMuc3RhdGUudmFsdWVzO1xuXHRcdHByb3BzLm9uQ2hhbmdlID0gdGhpcy5oYW5kbGVDaGFuZ2U7XG5cdFx0cHJvcHMubW9kZSA9ICdlZGl0Jztcblx0XHRyZXR1cm4gcHJvcHM7XG5cdH0sXG5cdGhhbmRsZUNoYW5nZSAoZXZlbnQpIHtcblx0XHRjb25zdCB2YWx1ZXMgPSBhc3NpZ24oe30sIHRoaXMuc3RhdGUudmFsdWVzKTtcblxuXHRcdHZhbHVlc1tldmVudC5wYXRoXSA9IGV2ZW50LnZhbHVlO1xuXHRcdHRoaXMuc2V0U3RhdGUoeyB2YWx1ZXMgfSk7XG5cdH0sXG5cblx0dG9nZ2xlRGVsZXRlRGlhbG9nICgpIHtcblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdGRlbGV0ZURpYWxvZ0lzT3BlbjogIXRoaXMuc3RhdGUuZGVsZXRlRGlhbG9nSXNPcGVuLFxuXHRcdH0pO1xuXHR9LFxuXHR0b2dnbGVSZXNldERpYWxvZyAoKSB7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRyZXNldERpYWxvZ0lzT3BlbjogIXRoaXMuc3RhdGUucmVzZXREaWFsb2dJc09wZW4sXG5cdFx0fSk7XG5cdH0sXG5cdGhhbmRsZVJlc2V0ICgpIHtcblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdHZhbHVlczogYXNzaWduKHt9LCB0aGlzLnN0YXRlLmxhc3RWYWx1ZXMgfHwgdGhpcy5wcm9wcy5kYXRhLmZpZWxkcyksXG5cdFx0XHRyZXNldERpYWxvZ0lzT3BlbjogZmFsc2UsXG5cdFx0fSk7XG5cdH0sXG5cdGhhbmRsZURlbGV0ZSAoKSB7XG5cdFx0Y29uc3QgeyBkYXRhIH0gPSB0aGlzLnByb3BzO1xuXHRcdHRoaXMucHJvcHMuZGlzcGF0Y2goZGVsZXRlSXRlbShkYXRhLmlkLCB0aGlzLnByb3BzLnJvdXRlcikpO1xuXHR9LFxuXHRoYW5kbGVLZXlGb2N1cyAoKSB7XG5cdFx0Y29uc3QgaW5wdXQgPSB0aGlzLnJlZnMua2V5T3JJZElucHV0O1xuXHRcdGlucHV0LnNlbGVjdCgpO1xuXHR9LFxuXHRyZW1vdmVDb25maXJtYXRpb25EaWFsb2cgKCkge1xuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0Y29uZmlybWF0aW9uRGlhbG9nOiBudWxsLFxuXHRcdH0pO1xuXHR9LFxuXHR1cGRhdGVJdGVtICgpIHtcblx0XHRjb25zdCB7IGRhdGEsIGxpc3QgfSA9IHRoaXMucHJvcHM7XG5cdFx0Y29uc3QgZWRpdEZvcm0gPSB0aGlzLnJlZnMuZWRpdEZvcm07XG5cblx0XHQvLyBGaXggZm9yIFNhZmFyaSB3aGVyZSBYSFIgZm9ybSBzdWJtaXNzaW9uIGZhaWxzIHdoZW4gaW5wdXRbdHlwZT1maWxlXSBpcyBlbXB0eVxuXHRcdC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQ5NjE0MDkxL3NhZmFyaS0xMS0xLWFqYXgteGhyLWZvcm0tc3VibWlzc2lvbi1mYWlscy13aGVuLWlucHV0dHlwZS1maWxlLWlzLWVtcHR5XG5cdFx0JChlZGl0Rm9ybSkuZmluZChcImlucHV0W3R5cGU9J2ZpbGUnXVwiKS5lYWNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdGlmICgkKHRoaXMpLmdldCgwKS5maWxlcy5sZW5ndGggPT09IDApIHsgJCh0aGlzKS5wcm9wKCdkaXNhYmxlZCcsIHRydWUpOyB9XG5cdFx0fSk7XG5cblx0XHRjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShlZGl0Rm9ybSk7XG5cblx0XHQkKGVkaXRGb3JtKS5maW5kKFwiaW5wdXRbdHlwZT0nZmlsZSddXCIpLmVhY2goZnVuY3Rpb24gKCkge1xuXHRcdFx0aWYgKCQodGhpcykuZ2V0KDApLmZpbGVzLmxlbmd0aCA9PT0gMCkgeyAkKHRoaXMpLnByb3AoJ2Rpc2FibGVkJywgZmFsc2UpOyB9XG5cdFx0fSk7XG5cblx0XHQvLyBTaG93IGxvYWRpbmcgaW5kaWNhdG9yXG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRsb2FkaW5nOiB0cnVlLFxuXHRcdH0pO1xuXG5cdFx0bGlzdC51cGRhdGVJdGVtKGRhdGEuaWQsIGZvcm1EYXRhLCAoZXJyLCBkYXRhKSA9PiB7XG5cdFx0XHRzbW9vdGhTY3JvbGxUb3AoKTtcblx0XHRcdGlmIChlcnIpIHtcblx0XHRcdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRcdFx0YWxlcnRzOiB7XG5cdFx0XHRcdFx0XHRlcnJvcjogZXJyLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0bG9hZGluZzogZmFsc2UsXG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gU3VjY2VzcywgZGlzcGxheSBzdWNjZXNzIGZsYXNoIG1lc3NhZ2VzLCByZXBsYWNlIHZhbHVlc1xuXHRcdFx0XHQvLyBUT0RPOiBVcGRhdGUga2V5IHZhbHVlXG5cdFx0XHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0XHRcdGFsZXJ0czoge1xuXHRcdFx0XHRcdFx0c3VjY2Vzczoge1xuXHRcdFx0XHRcdFx0XHRzdWNjZXNzOiAnWW91ciBjaGFuZ2VzIGhhdmUgYmVlbiBzYXZlZCBzdWNjZXNzZnVsbHknLFxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGxhc3RWYWx1ZXM6IHRoaXMuc3RhdGUudmFsdWVzLFxuXHRcdFx0XHRcdHZhbHVlczogZGF0YS5maWVsZHMsXG5cdFx0XHRcdFx0bG9hZGluZzogZmFsc2UsXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXHRyZW5kZXJLZXlPcklkICgpIHtcblx0XHR2YXIgY2xhc3NOYW1lID0gJ0VkaXRGb3JtX19rZXktb3ItaWQnO1xuXHRcdHZhciBsaXN0ID0gdGhpcy5wcm9wcy5saXN0O1xuXG5cdFx0aWYgKGxpc3QubmFtZUZpZWxkICYmIGxpc3QuYXV0b2tleSAmJiB0aGlzLnByb3BzLmRhdGFbbGlzdC5hdXRva2V5LnBhdGhdKSB7XG5cdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHQ8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lfT5cblx0XHRcdFx0XHQ8QWx0VGV4dFxuXHRcdFx0XHRcdFx0bW9kaWZpZWQ9XCJJRDpcIlxuXHRcdFx0XHRcdFx0bm9ybWFsPXtgJHt1cGNhc2UobGlzdC5hdXRva2V5LnBhdGgpfTogYH1cblx0XHRcdFx0XHRcdHRpdGxlPVwiUHJlc3MgPGFsdD4gdG8gcmV2ZWFsIHRoZSBJRFwiXG5cdFx0XHRcdFx0XHRjbGFzc05hbWU9XCJFZGl0Rm9ybV9fa2V5LW9yLWlkX19sYWJlbFwiIC8+XG5cdFx0XHRcdFx0PEFsdFRleHRcblx0XHRcdFx0XHRcdG1vZGlmaWVkPXs8aW5wdXQgcmVmPVwia2V5T3JJZElucHV0XCIgb25Gb2N1cz17dGhpcy5oYW5kbGVLZXlGb2N1c30gdmFsdWU9e3RoaXMucHJvcHMuZGF0YS5pZH0gY2xhc3NOYW1lPVwiRWRpdEZvcm1fX2tleS1vci1pZF9faW5wdXRcIiByZWFkT25seSAvPn1cblx0XHRcdFx0XHRcdG5vcm1hbD17PGlucHV0IHJlZj1cImtleU9ySWRJbnB1dFwiIG9uRm9jdXM9e3RoaXMuaGFuZGxlS2V5Rm9jdXN9IHZhbHVlPXt0aGlzLnByb3BzLmRhdGFbbGlzdC5hdXRva2V5LnBhdGhdfSBjbGFzc05hbWU9XCJFZGl0Rm9ybV9fa2V5LW9yLWlkX19pbnB1dFwiIHJlYWRPbmx5IC8+fVxuXHRcdFx0XHRcdFx0dGl0bGU9XCJQcmVzcyA8YWx0PiB0byByZXZlYWwgdGhlIElEXCJcblx0XHRcdFx0XHRcdGNsYXNzTmFtZT1cIkVkaXRGb3JtX19rZXktb3ItaWRfX2ZpZWxkXCIgLz5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQpO1xuXHRcdH0gZWxzZSBpZiAobGlzdC5hdXRva2V5ICYmIHRoaXMucHJvcHMuZGF0YVtsaXN0LmF1dG9rZXkucGF0aF0pIHtcblx0XHRcdHJldHVybiAoXG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWV9PlxuXHRcdFx0XHRcdDxzcGFuIGNsYXNzTmFtZT1cIkVkaXRGb3JtX19rZXktb3ItaWRfX2xhYmVsXCI+e2xpc3QuYXV0b2tleS5wYXRofTogPC9zcGFuPlxuXHRcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiRWRpdEZvcm1fX2tleS1vci1pZF9fZmllbGRcIj5cblx0XHRcdFx0XHRcdDxpbnB1dCByZWY9XCJrZXlPcklkSW5wdXRcIiBvbkZvY3VzPXt0aGlzLmhhbmRsZUtleUZvY3VzfSB2YWx1ZT17dGhpcy5wcm9wcy5kYXRhW2xpc3QuYXV0b2tleS5wYXRoXX0gY2xhc3NOYW1lPVwiRWRpdEZvcm1fX2tleS1vci1pZF9faW5wdXRcIiByZWFkT25seSAvPlxuXHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdCk7XG5cdFx0fSBlbHNlIGlmIChsaXN0Lm5hbWVGaWVsZCkge1xuXHRcdFx0cmV0dXJuIChcblx0XHRcdFx0PGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZX0+XG5cdFx0XHRcdFx0PHNwYW4gY2xhc3NOYW1lPVwiRWRpdEZvcm1fX2tleS1vci1pZF9fbGFiZWxcIj5JRDogPC9zcGFuPlxuXHRcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiRWRpdEZvcm1fX2tleS1vci1pZF9fZmllbGRcIj5cblx0XHRcdFx0XHRcdDxpbnB1dCByZWY9XCJrZXlPcklkSW5wdXRcIiBvbkZvY3VzPXt0aGlzLmhhbmRsZUtleUZvY3VzfSB2YWx1ZT17dGhpcy5wcm9wcy5kYXRhLmlkfSBjbGFzc05hbWU9XCJFZGl0Rm9ybV9fa2V5LW9yLWlkX19pbnB1dFwiIHJlYWRPbmx5IC8+XG5cdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0KTtcblx0XHR9XG5cdH0sXG5cdHJlbmRlck5hbWVGaWVsZCAoKSB7XG5cdFx0dmFyIG5hbWVGaWVsZCA9IHRoaXMucHJvcHMubGlzdC5uYW1lRmllbGQ7XG5cdFx0dmFyIG5hbWVGaWVsZElzRm9ybUhlYWRlciA9IHRoaXMucHJvcHMubGlzdC5uYW1lRmllbGRJc0Zvcm1IZWFkZXI7XG5cdFx0dmFyIHdyYXBOYW1lRmllbGQgPSBmaWVsZCA9PiAoXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cIkVkaXRGb3JtX19uYW1lLWZpZWxkXCI+XG5cdFx0XHRcdHtmaWVsZH1cblx0XHRcdDwvZGl2PlxuXHRcdCk7XG5cdFx0aWYgKG5hbWVGaWVsZElzRm9ybUhlYWRlcikge1xuXHRcdFx0dmFyIG5hbWVGaWVsZFByb3BzID0gdGhpcy5nZXRGaWVsZFByb3BzKG5hbWVGaWVsZCk7XG5cdFx0XHRuYW1lRmllbGRQcm9wcy5sYWJlbCA9IG51bGw7XG5cdFx0XHRuYW1lRmllbGRQcm9wcy5zaXplID0gJ2Z1bGwnO1xuXHRcdFx0bmFtZUZpZWxkUHJvcHMuYXV0b0ZvY3VzID0gdHJ1ZTtcblx0XHRcdG5hbWVGaWVsZFByb3BzLmlucHV0UHJvcHMgPSB7XG5cdFx0XHRcdGNsYXNzTmFtZTogJ2l0ZW0tbmFtZS1maWVsZCcsXG5cdFx0XHRcdHBsYWNlaG9sZGVyOiBuYW1lRmllbGQubGFiZWwsXG5cdFx0XHRcdHNpemU6ICdsYXJnZScsXG5cdFx0XHR9O1xuXHRcdFx0cmV0dXJuIHdyYXBOYW1lRmllbGQoXG5cdFx0XHRcdFJlYWN0LmNyZWF0ZUVsZW1lbnQoRmllbGRzW25hbWVGaWVsZC50eXBlXSwgbmFtZUZpZWxkUHJvcHMpXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gd3JhcE5hbWVGaWVsZChcblx0XHRcdFx0PGgyPnt0aGlzLnByb3BzLmRhdGEubmFtZSB8fCAnKG5vIG5hbWUpJ308L2gyPlxuXHRcdFx0KTtcblx0XHR9XG5cdH0sXG5cdHJlbmRlckZvcm1FbGVtZW50cyAoKSB7XG5cdFx0dmFyIGhlYWRpbmdzID0gMDtcblxuXHRcdHJldHVybiB0aGlzLnByb3BzLmxpc3QudWlFbGVtZW50cy5tYXAoKGVsLCBpbmRleCkgPT4ge1xuXHRcdFx0Ly8gRG9uJ3QgcmVuZGVyIHRoZSBuYW1lIGZpZWxkIGlmIGl0IGlzIHRoZSBoZWFkZXIgc2luY2UgaXQnbGwgYmUgcmVuZGVyZWQgaW4gQklHIGFib3ZlXG5cdFx0XHQvLyB0aGUgbGlzdC4gKHNlZSByZW5kZXJOYW1lRmllbGQgbWV0aG9kLCB0aGlzIGlzIHRoZSByZXZlcnNlIGNoZWNrIG9mIHRoZSBvbmUgaXQgZG9lcylcblx0XHRcdGlmIChcblx0XHRcdFx0dGhpcy5wcm9wcy5saXN0Lm5hbWVGaWVsZFxuXHRcdFx0XHQmJiBlbC5maWVsZCA9PT0gdGhpcy5wcm9wcy5saXN0Lm5hbWVGaWVsZC5wYXRoXG5cdFx0XHRcdCYmIHRoaXMucHJvcHMubGlzdC5uYW1lRmllbGRJc0Zvcm1IZWFkZXJcblx0XHRcdCkgcmV0dXJuO1xuXG5cdFx0XHRpZiAoZWwudHlwZSA9PT0gJ2hlYWRpbmcnKSB7XG5cdFx0XHRcdGhlYWRpbmdzKys7XG5cdFx0XHRcdGVsLm9wdGlvbnMudmFsdWVzID0gdGhpcy5zdGF0ZS52YWx1ZXM7XG5cdFx0XHRcdGVsLmtleSA9ICdoLScgKyBoZWFkaW5ncztcblx0XHRcdFx0cmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUhlYWRpbmcsIGVsKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGVsLnR5cGUgPT09ICdmaWVsZCcpIHtcblx0XHRcdFx0dmFyIGZpZWxkID0gdGhpcy5wcm9wcy5saXN0LmZpZWxkc1tlbC5maWVsZF07XG5cdFx0XHRcdHZhciBwcm9wcyA9IHRoaXMuZ2V0RmllbGRQcm9wcyhmaWVsZCk7XG5cdFx0XHRcdGlmICh0eXBlb2YgRmllbGRzW2ZpZWxkLnR5cGVdICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW52YWxpZEZpZWxkVHlwZSwgeyB0eXBlOiBmaWVsZC50eXBlLCBwYXRoOiBmaWVsZC5wYXRoLCBrZXk6IGZpZWxkLnBhdGggfSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cHJvcHMua2V5ID0gZmllbGQucGF0aDtcblx0XHRcdFx0aWYgKGluZGV4ID09PSAwICYmIHRoaXMuc3RhdGUuZm9jdXNGaXJzdEZpZWxkKSB7XG5cdFx0XHRcdFx0cHJvcHMuYXV0b0ZvY3VzID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChGaWVsZHNbZmllbGQudHlwZV0sIHByb3BzKTtcblx0XHRcdH1cblx0XHR9LCB0aGlzKTtcblx0fSxcblx0cmVuZGVyRm9vdGVyQmFyICgpIHtcblx0XHRpZiAodGhpcy5wcm9wcy5saXN0Lm5vZWRpdCAmJiB0aGlzLnByb3BzLmxpc3Qubm9kZWxldGUpIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblxuXHRcdGNvbnN0IHsgbG9hZGluZyB9ID0gdGhpcy5zdGF0ZTtcblx0XHRjb25zdCBsb2FkaW5nQnV0dG9uVGV4dCA9IGxvYWRpbmcgPyAnU2F2aW5nJyA6ICdTYXZlJztcblxuXHRcdC8vIFBhZGRpbmcgbXVzdCBiZSBhcHBsaWVkIGlubGluZSBzbyB0aGUgRm9vdGVyQmFyIGNhbiBkZXRlcm1pbmUgaXRzXG5cdFx0Ly8gaW5uZXJIZWlnaHQgYXQgcnVudGltZS4gQXBocm9kaXRlJ3Mgc3R5bGluZyBjb21lcyBsYXRlci4uLlxuXG5cdFx0cmV0dXJuIChcblx0XHRcdDxGb290ZXJCYXIgc3R5bGU9e3N0eWxlcy5mb290ZXJiYXJ9PlxuXHRcdFx0XHQ8ZGl2IHN0eWxlPXtzdHlsZXMuZm9vdGVyYmFySW5uZXJ9PlxuXHRcdFx0XHRcdHshdGhpcy5wcm9wcy5saXN0Lm5vZWRpdCAmJiAoXG5cdFx0XHRcdFx0XHQ8TG9hZGluZ0J1dHRvblxuXHRcdFx0XHRcdFx0XHRjb2xvcj1cInByaW1hcnlcIlxuXHRcdFx0XHRcdFx0XHRkaXNhYmxlZD17bG9hZGluZ31cblx0XHRcdFx0XHRcdFx0bG9hZGluZz17bG9hZGluZ31cblx0XHRcdFx0XHRcdFx0b25DbGljaz17dGhpcy51cGRhdGVJdGVtfVxuXHRcdFx0XHRcdFx0XHRkYXRhLWJ1dHRvbj1cInVwZGF0ZVwiXG5cdFx0XHRcdFx0XHQ+XG5cdFx0XHRcdFx0XHRcdHtsb2FkaW5nQnV0dG9uVGV4dH1cblx0XHRcdFx0XHRcdDwvTG9hZGluZ0J1dHRvbj5cblx0XHRcdFx0XHQpfVxuXHRcdFx0XHRcdHshdGhpcy5wcm9wcy5saXN0Lm5vZWRpdCAmJiAoXG5cdFx0XHRcdFx0XHQ8QnV0dG9uIGRpc2FibGVkPXtsb2FkaW5nfSBvbkNsaWNrPXt0aGlzLnRvZ2dsZVJlc2V0RGlhbG9nfSB2YXJpYW50PVwibGlua1wiIGNvbG9yPVwiY2FuY2VsXCIgZGF0YS1idXR0b249XCJyZXNldFwiPlxuXHRcdFx0XHRcdFx0XHQ8UmVzcG9uc2l2ZVRleHRcblx0XHRcdFx0XHRcdFx0XHRoaWRkZW5YUz1cInJlc2V0IGNoYW5nZXNcIlxuXHRcdFx0XHRcdFx0XHRcdHZpc2libGVYUz1cInJlc2V0XCJcblx0XHRcdFx0XHRcdFx0Lz5cblx0XHRcdFx0XHRcdDwvQnV0dG9uPlxuXHRcdFx0XHRcdCl9XG5cdFx0XHRcdFx0eyF0aGlzLnByb3BzLmxpc3Qubm9kZWxldGUgJiYgKFxuXHRcdFx0XHRcdFx0PEJ1dHRvbiBkaXNhYmxlZD17bG9hZGluZ30gb25DbGljaz17dGhpcy50b2dnbGVEZWxldGVEaWFsb2d9IHZhcmlhbnQ9XCJsaW5rXCIgY29sb3I9XCJkZWxldGVcIiBzdHlsZT17c3R5bGVzLmRlbGV0ZUJ1dHRvbn0gZGF0YS1idXR0b249XCJkZWxldGVcIj5cblx0XHRcdFx0XHRcdFx0PFJlc3BvbnNpdmVUZXh0XG5cdFx0XHRcdFx0XHRcdFx0aGlkZGVuWFM9e2BkZWxldGUgJHt0aGlzLnByb3BzLmxpc3Quc2luZ3VsYXIudG9Mb3dlckNhc2UoKX1gfVxuXHRcdFx0XHRcdFx0XHRcdHZpc2libGVYUz1cImRlbGV0ZVwiXG5cdFx0XHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0XHQ8L0J1dHRvbj5cblx0XHRcdFx0XHQpfVxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdDwvRm9vdGVyQmFyPlxuXHRcdCk7XG5cdH0sXG5cdHJlbmRlclRyYWNraW5nTWV0YSAoKSB7XG5cdFx0Ly8gVE9ETzogVGhlc2UgZmllbGRzIGFyZSB2aXNpYmxlIG5vdywgc28gd2UgZG9uJ3Qgd2FudCB0aGlzLiBXZSBtYXkgcmV2aXNpdFxuXHRcdC8vIGl0IHdoZW4gd2UgaGF2ZSBtb3JlIGdyYW51bGFyIGNvbnRyb2wgb3ZlciBoaWRpbmcgZmllbGRzIGluIGNlcnRhaW5cblx0XHQvLyBjb250ZXh0cywgc28gSSdtIGxlYXZpbmcgdGhpcyBjb2RlIGhlcmUgYXMgYSByZWZlcmVuY2UgZm9yIG5vdyAtIEpXXG5cdFx0aWYgKHRydWUpIHJldHVybiBudWxsOyAvLyBpZiAodHJ1ZSkgcHJldmVudHMgdW5yZWFjaGFibGUgY29kZSBsaW50ZXIgZXJycHJcblxuXHRcdGlmICghdGhpcy5wcm9wcy5saXN0LnRyYWNraW5nKSByZXR1cm4gbnVsbDtcblxuXHRcdHZhciBlbGVtZW50cyA9IFtdO1xuXHRcdHZhciBkYXRhID0ge307XG5cblx0XHRpZiAodGhpcy5wcm9wcy5saXN0LnRyYWNraW5nLmNyZWF0ZWRBdCkge1xuXHRcdFx0ZGF0YS5jcmVhdGVkQXQgPSB0aGlzLnByb3BzLmRhdGEuZmllbGRzW3RoaXMucHJvcHMubGlzdC50cmFja2luZy5jcmVhdGVkQXRdO1xuXHRcdFx0aWYgKGRhdGEuY3JlYXRlZEF0KSB7XG5cdFx0XHRcdGVsZW1lbnRzLnB1c2goXG5cdFx0XHRcdFx0PEZvcm1GaWVsZCBrZXk9XCJjcmVhdGVkQXRcIiBsYWJlbD1cIkNyZWF0ZWQgb25cIj5cblx0XHRcdFx0XHRcdDxGb3JtSW5wdXQgbm9lZGl0IHRpdGxlPXttb21lbnQoZGF0YS5jcmVhdGVkQXQpLmZvcm1hdCgnREQvTU0vWVlZWSBoOm1tOnNzYScpfT57bW9tZW50KGRhdGEuY3JlYXRlZEF0KS5mb3JtYXQoJ0RvIE1NTSBZWVlZJyl9PC9Gb3JtSW5wdXQ+XG5cdFx0XHRcdFx0PC9Gb3JtRmllbGQ+XG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMucHJvcHMubGlzdC50cmFja2luZy5jcmVhdGVkQnkpIHtcblx0XHRcdGRhdGEuY3JlYXRlZEJ5ID0gdGhpcy5wcm9wcy5kYXRhLmZpZWxkc1t0aGlzLnByb3BzLmxpc3QudHJhY2tpbmcuY3JlYXRlZEJ5XTtcblx0XHRcdGlmIChkYXRhLmNyZWF0ZWRCeSAmJiBkYXRhLmNyZWF0ZWRCeS5uYW1lKSB7XG5cdFx0XHRcdGxldCBjcmVhdGVkQnlOYW1lID0gZ2V0TmFtZUZyb21EYXRhKGRhdGEuY3JlYXRlZEJ5Lm5hbWUpO1xuXHRcdFx0XHRpZiAoY3JlYXRlZEJ5TmFtZSkge1xuXHRcdFx0XHRcdGVsZW1lbnRzLnB1c2goXG5cdFx0XHRcdFx0XHQ8Rm9ybUZpZWxkIGtleT1cImNyZWF0ZWRCeVwiIGxhYmVsPVwiQ3JlYXRlZCBieVwiPlxuXHRcdFx0XHRcdFx0XHQ8Rm9ybUlucHV0IG5vZWRpdD57ZGF0YS5jcmVhdGVkQnkubmFtZS5maXJzdH0ge2RhdGEuY3JlYXRlZEJ5Lm5hbWUubGFzdH08L0Zvcm1JbnB1dD5cblx0XHRcdFx0XHRcdDwvRm9ybUZpZWxkPlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAodGhpcy5wcm9wcy5saXN0LnRyYWNraW5nLnVwZGF0ZWRBdCkge1xuXHRcdFx0ZGF0YS51cGRhdGVkQXQgPSB0aGlzLnByb3BzLmRhdGEuZmllbGRzW3RoaXMucHJvcHMubGlzdC50cmFja2luZy51cGRhdGVkQXRdO1xuXHRcdFx0aWYgKGRhdGEudXBkYXRlZEF0ICYmICghZGF0YS5jcmVhdGVkQXQgfHwgZGF0YS5jcmVhdGVkQXQgIT09IGRhdGEudXBkYXRlZEF0KSkge1xuXHRcdFx0XHRlbGVtZW50cy5wdXNoKFxuXHRcdFx0XHRcdDxGb3JtRmllbGQga2V5PVwidXBkYXRlZEF0XCIgbGFiZWw9XCJVcGRhdGVkIG9uXCI+XG5cdFx0XHRcdFx0XHQ8Rm9ybUlucHV0IG5vZWRpdCB0aXRsZT17bW9tZW50KGRhdGEudXBkYXRlZEF0KS5mb3JtYXQoJ0REL01NL1lZWVkgaDptbTpzc2EnKX0+e21vbWVudChkYXRhLnVwZGF0ZWRBdCkuZm9ybWF0KCdEbyBNTU0gWVlZWScpfTwvRm9ybUlucHV0PlxuXHRcdFx0XHRcdDwvRm9ybUZpZWxkPlxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICh0aGlzLnByb3BzLmxpc3QudHJhY2tpbmcudXBkYXRlZEJ5KSB7XG5cdFx0XHRkYXRhLnVwZGF0ZWRCeSA9IHRoaXMucHJvcHMuZGF0YS5maWVsZHNbdGhpcy5wcm9wcy5saXN0LnRyYWNraW5nLnVwZGF0ZWRCeV07XG5cdFx0XHRpZiAoZGF0YS51cGRhdGVkQnkgJiYgZGF0YS51cGRhdGVkQnkubmFtZSkge1xuXHRcdFx0XHRsZXQgdXBkYXRlZEJ5TmFtZSA9IGdldE5hbWVGcm9tRGF0YShkYXRhLnVwZGF0ZWRCeS5uYW1lKTtcblx0XHRcdFx0aWYgKHVwZGF0ZWRCeU5hbWUpIHtcblx0XHRcdFx0XHRlbGVtZW50cy5wdXNoKFxuXHRcdFx0XHRcdFx0PEZvcm1GaWVsZCBrZXk9XCJ1cGRhdGVkQnlcIiBsYWJlbD1cIlVwZGF0ZWQgYnlcIj5cblx0XHRcdFx0XHRcdFx0PEZvcm1JbnB1dCBub2VkaXQ+e2RhdGEudXBkYXRlZEJ5Lm5hbWUuZmlyc3R9IHtkYXRhLnVwZGF0ZWRCeS5uYW1lLmxhc3R9PC9Gb3JtSW5wdXQ+XG5cdFx0XHRcdFx0XHQ8L0Zvcm1GaWVsZD5cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIE9iamVjdC5rZXlzKGVsZW1lbnRzKS5sZW5ndGggPyAoXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cIkVkaXRGb3JtX19tZXRhXCI+XG5cdFx0XHRcdDxoMyBjbGFzc05hbWU9XCJmb3JtLWhlYWRpbmdcIj5NZXRhPC9oMz5cblx0XHRcdFx0e2VsZW1lbnRzfVxuXHRcdFx0PC9kaXY+XG5cdFx0KSA6IG51bGw7XG5cdH0sXG5cdHJlbmRlciAoKSB7XG5cdFx0cmV0dXJuIChcblx0XHRcdDxmb3JtIHJlZj1cImVkaXRGb3JtXCIgY2xhc3NOYW1lPVwiRWRpdEZvcm0tY29udGFpbmVyXCI+XG5cdFx0XHRcdHsodGhpcy5zdGF0ZS5hbGVydHMpID8gPEFsZXJ0TWVzc2FnZXMgYWxlcnRzPXt0aGlzLnN0YXRlLmFsZXJ0c30gLz4gOiBudWxsfVxuXHRcdFx0XHQ8R3JpZC5Sb3c+XG5cdFx0XHRcdFx0PEdyaWQuQ29sIGxhcmdlPVwidGhyZWUtcXVhcnRlcnNcIj5cblx0XHRcdFx0XHRcdDxGb3JtIGxheW91dD1cImhvcml6b250YWxcIiBjb21wb25lbnQ9XCJkaXZcIj5cblx0XHRcdFx0XHRcdFx0e3RoaXMucmVuZGVyTmFtZUZpZWxkKCl9XG5cdFx0XHRcdFx0XHRcdHt0aGlzLnJlbmRlcktleU9ySWQoKX1cblx0XHRcdFx0XHRcdFx0e3RoaXMucmVuZGVyRm9ybUVsZW1lbnRzKCl9XG5cdFx0XHRcdFx0XHRcdHt0aGlzLnJlbmRlclRyYWNraW5nTWV0YSgpfVxuXHRcdFx0XHRcdFx0PC9Gb3JtPlxuXHRcdFx0XHRcdDwvR3JpZC5Db2w+XG5cdFx0XHRcdFx0PEdyaWQuQ29sIGxhcmdlPVwib25lLXF1YXJ0ZXJcIj48c3BhbiAvPjwvR3JpZC5Db2w+XG5cdFx0XHRcdDwvR3JpZC5Sb3c+XG5cdFx0XHRcdHt0aGlzLnJlbmRlckZvb3RlckJhcigpfVxuXHRcdFx0XHQ8Q29uZmlybWF0aW9uRGlhbG9nXG5cdFx0XHRcdFx0Y29uZmlybWF0aW9uTGFiZWw9XCJSZXNldFwiXG5cdFx0XHRcdFx0aXNPcGVuPXt0aGlzLnN0YXRlLnJlc2V0RGlhbG9nSXNPcGVufVxuXHRcdFx0XHRcdG9uQ2FuY2VsPXt0aGlzLnRvZ2dsZVJlc2V0RGlhbG9nfVxuXHRcdFx0XHRcdG9uQ29uZmlybWF0aW9uPXt0aGlzLmhhbmRsZVJlc2V0fVxuXHRcdFx0XHQ+XG5cdFx0XHRcdFx0PHA+UmVzZXQgeW91ciBjaGFuZ2VzIHRvIDxzdHJvbmc+e3RoaXMucHJvcHMuZGF0YS5uYW1lfTwvc3Ryb25nPj88L3A+XG5cdFx0XHRcdDwvQ29uZmlybWF0aW9uRGlhbG9nPlxuXHRcdFx0XHQ8Q29uZmlybWF0aW9uRGlhbG9nXG5cdFx0XHRcdFx0Y29uZmlybWF0aW9uTGFiZWw9XCJEZWxldGVcIlxuXHRcdFx0XHRcdGlzT3Blbj17dGhpcy5zdGF0ZS5kZWxldGVEaWFsb2dJc09wZW59XG5cdFx0XHRcdFx0b25DYW5jZWw9e3RoaXMudG9nZ2xlRGVsZXRlRGlhbG9nfVxuXHRcdFx0XHRcdG9uQ29uZmlybWF0aW9uPXt0aGlzLmhhbmRsZURlbGV0ZX1cblx0XHRcdFx0PlxuXHRcdFx0XHRcdEFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgPHN0cm9uZz57dGhpcy5wcm9wcy5kYXRhLm5hbWV9Pzwvc3Ryb25nPlxuXHRcdFx0XHRcdDxiciAvPlxuXHRcdFx0XHRcdDxiciAvPlxuXHRcdFx0XHRcdFRoaXMgY2Fubm90IGJlIHVuZG9uZS5cblx0XHRcdFx0PC9Db25maXJtYXRpb25EaWFsb2c+XG5cdFx0XHQ8L2Zvcm0+XG5cdFx0KTtcblx0fSxcbn0pO1xuXG5jb25zdCBzdHlsZXMgPSB7XG5cdGZvb3RlcmJhcjoge1xuXHRcdGJhY2tncm91bmRDb2xvcjogZmFkZSh0aGVtZS5jb2xvci5ib2R5LCA5MyksXG5cdFx0Ym94U2hhZG93OiAnMCAtMnB4IDAgcmdiYSgwLCAwLCAwLCAwLjEpJyxcblx0XHRwYWRkaW5nQm90dG9tOiAyMCxcblx0XHRwYWRkaW5nVG9wOiAyMCxcblx0XHR6SW5kZXg6IDk5LFxuXHR9LFxuXHRmb290ZXJiYXJJbm5lcjoge1xuXHRcdGhlaWdodDogdGhlbWUuY29tcG9uZW50LmhlaWdodCwgLy8gRklYTUUgYXBocm9kaXRlIGJ1Z1xuXHR9LFxuXHRkZWxldGVCdXR0b246IHtcblx0XHRmbG9hdDogJ3JpZ2h0Jyxcblx0fSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRWRpdEZvcm07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZmluZERPTU5vZGUgfSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcblxuaW1wb3J0IFRvb2xiYXIgZnJvbSAnLi9Ub29sYmFyJztcbmltcG9ydCBUb29sYmFyU2VjdGlvbiBmcm9tICcuL1Rvb2xiYXIvVG9vbGJhclNlY3Rpb24nO1xuaW1wb3J0IEVkaXRGb3JtSGVhZGVyU2VhcmNoIGZyb20gJy4vRWRpdEZvcm1IZWFkZXJTZWFyY2gnO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5cbmltcG9ydCBEcmlsbGRvd24gZnJvbSAnLi9EcmlsbGRvd24nO1xuaW1wb3J0IHsgR2x5cGhCdXR0b24sIFJlc3BvbnNpdmVUZXh0IH0gZnJvbSAnLi4vLi4vLi4vZWxlbWVudGFsJztcblxuZXhwb3J0IGNvbnN0IEVkaXRGb3JtSGVhZGVyID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuXHRkaXNwbGF5TmFtZTogJ0VkaXRGb3JtSGVhZGVyJyxcblx0cHJvcFR5cGVzOiB7XG5cdFx0ZGF0YTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcblx0XHRsaXN0OiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuXHRcdHRvZ2dsZUNyZWF0ZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG5cdH0sXG5cdGdldEluaXRpYWxTdGF0ZSAoKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlYXJjaFN0cmluZzogJycsXG5cdFx0fTtcblx0fSxcblx0dG9nZ2xlQ3JlYXRlICh2aXNpYmxlKSB7XG5cdFx0dGhpcy5wcm9wcy50b2dnbGVDcmVhdGUodmlzaWJsZSk7XG5cdH0sXG5cdHNlYXJjaFN0cmluZ0NoYW5nZWQgKGV2ZW50KSB7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRzZWFyY2hTdHJpbmc6IGV2ZW50LnRhcmdldC52YWx1ZSxcblx0XHR9KTtcblx0fSxcblx0aGFuZGxlRXNjYXBlS2V5IChldmVudCkge1xuXHRcdGNvbnN0IGVzY2FwZUtleUNvZGUgPSAyNztcblxuXHRcdGlmIChldmVudC53aGljaCA9PT0gZXNjYXBlS2V5Q29kZSkge1xuXHRcdFx0ZmluZERPTU5vZGUodGhpcy5yZWZzLnNlYXJjaEZpZWxkKS5ibHVyKCk7XG5cdFx0fVxuXHR9LFxuXHRyZW5kZXJEcmlsbGRvd24gKCkge1xuXHRcdHJldHVybiAoXG5cdFx0XHQ8VG9vbGJhclNlY3Rpb24gbGVmdD5cblx0XHRcdFx0e3RoaXMucmVuZGVyRHJpbGxkb3duSXRlbXMoKX1cblx0XHRcdFx0e3RoaXMucmVuZGVyU2VhcmNoKCl9XG5cdFx0XHQ8L1Rvb2xiYXJTZWN0aW9uPlxuXHRcdCk7XG5cdH0sXG5cdHJlbmRlckRyaWxsZG93bkl0ZW1zICgpIHtcblx0XHRjb25zdCB7IGRhdGEsIGxpc3QgfSA9IHRoaXMucHJvcHM7XG5cdFx0Y29uc3QgaXRlbXMgPSBkYXRhLmRyaWxsZG93biA/IGRhdGEuZHJpbGxkb3duLml0ZW1zIDogW107XG5cblx0XHRsZXQgYmFja1BhdGggPSBgJHtLZXlzdG9uZS5hZG1pblBhdGh9LyR7bGlzdC5wYXRofWA7XG5cdFx0Y29uc3QgYmFja1N0eWxlcyA9IHsgcGFkZGluZ0xlZnQ6IDAsIHBhZGRpbmdSaWdodDogMCB9O1xuXHRcdC8vIExpbmsgdG8gdGhlIGxpc3QgcGFnZSB0aGUgdXNlciBjYW1lIGZyb21cblx0XHRpZiAodGhpcy5wcm9wcy5saXN0QWN0aXZlUGFnZSAmJiB0aGlzLnByb3BzLmxpc3RBY3RpdmVQYWdlID4gMSkge1xuXHRcdFx0YmFja1BhdGggPSBgJHtiYWNrUGF0aH0/cGFnZT0ke3RoaXMucHJvcHMubGlzdEFjdGl2ZVBhZ2V9YDtcblx0XHR9XG5cblx0XHQvLyByZXR1cm4gYSBzaW5nbGUgYmFjayBidXR0b24gd2hlbiBubyBkcmlsbGRvd24gZXhpc3RzXG5cdFx0aWYgKCFpdGVtcy5sZW5ndGgpIHtcblx0XHRcdHJldHVybiAoXG5cdFx0XHRcdDxHbHlwaEJ1dHRvblxuXHRcdFx0XHRcdGNvbXBvbmVudD17TGlua31cblx0XHRcdFx0XHRkYXRhLWUyZS1lZGl0Zm9ybS1oZWFkZXItYmFja1xuXHRcdFx0XHRcdGdseXBoPVwiY2hldnJvbi1sZWZ0XCJcblx0XHRcdFx0XHRwb3NpdGlvbj1cImxlZnRcIlxuXHRcdFx0XHRcdHN0eWxlPXtiYWNrU3R5bGVzfVxuXHRcdFx0XHRcdHRvPXtiYWNrUGF0aH1cblx0XHRcdFx0XHR2YXJpYW50PVwibGlua1wiXG5cdFx0XHRcdD5cblx0XHRcdFx0XHR7bGlzdC5wbHVyYWx9XG5cdFx0XHRcdDwvR2x5cGhCdXR0b24+XG5cdFx0XHQpO1xuXHRcdH1cblxuXHRcdC8vIHByZXBhcmUgdGhlIGRyaWxsZG93biBlbGVtZW50c1xuXHRcdGNvbnN0IGRyaWxsZG93biA9IFtdO1xuXHRcdGl0ZW1zLmZvckVhY2goKGl0ZW0sIGlkeCkgPT4ge1xuXHRcdFx0Ly8gRklYTUUgQGplZHdhdHNvblxuXHRcdFx0Ly8gd2UgdXNlZCB0byBzdXBwb3J0IHJlbGF0aW9uc2hpcHMgb2YgdHlwZSBNQU5ZIHdoZXJlIGl0ZW1zIHdlcmVcblx0XHRcdC8vIHJlcHJlc2VudGVkIGFzIHNpYmxpbmdzIGluc2lkZSBhIHNpbmdsZSBsaXN0IGl0ZW07IHRoaXMgZ290IGFcblx0XHRcdC8vIGJpdCBtZXNzeS4uLlxuXHRcdFx0aXRlbS5pdGVtcy5mb3JFYWNoKGxpbmsgPT4ge1xuXHRcdFx0XHRkcmlsbGRvd24ucHVzaCh7XG5cdFx0XHRcdFx0aHJlZjogbGluay5ocmVmLFxuXHRcdFx0XHRcdGxhYmVsOiBsaW5rLmxhYmVsLFxuXHRcdFx0XHRcdHRpdGxlOiBpdGVtLmxpc3Quc2luZ3VsYXIsXG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cblx0XHQvLyBhZGQgdGhlIGN1cnJlbnQgbGlzdCB0byB0aGUgZHJpbGxkb3duXG5cdFx0ZHJpbGxkb3duLnB1c2goe1xuXHRcdFx0aHJlZjogYmFja1BhdGgsXG5cdFx0XHRsYWJlbDogbGlzdC5wbHVyYWwsXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gKFxuXHRcdFx0PERyaWxsZG93biBpdGVtcz17ZHJpbGxkb3dufSAvPlxuXHRcdCk7XG5cdH0sXG5cdHJlbmRlclNlYXJjaCAoKSB7XG5cdFx0dmFyIGxpc3QgPSB0aGlzLnByb3BzLmxpc3Q7XG5cdFx0cmV0dXJuIChcblx0XHRcdDxmb3JtIGFjdGlvbj17YCR7S2V5c3RvbmUuYWRtaW5QYXRofS8ke2xpc3QucGF0aH1gfSBjbGFzc05hbWU9XCJFZGl0Rm9ybV9faGVhZGVyX19zZWFyY2hcIj5cblx0XHRcdFx0PEVkaXRGb3JtSGVhZGVyU2VhcmNoXG5cdFx0XHRcdFx0dmFsdWU9e3RoaXMuc3RhdGUuc2VhcmNoU3RyaW5nfVxuXHRcdFx0XHRcdG9uQ2hhbmdlPXt0aGlzLnNlYXJjaFN0cmluZ0NoYW5nZWR9XG5cdFx0XHRcdFx0b25LZXlVcD17dGhpcy5oYW5kbGVFc2NhcGVLZXl9XG5cdFx0XHRcdC8+XG5cdFx0XHRcdHsvKiA8R2x5cGhGaWVsZCBnbHlwaENvbG9yPVwiIzk5OVwiIGdseXBoPVwic2VhcmNoXCI+XG5cdFx0XHRcdFx0PEZvcm1JbnB1dFxuXHRcdFx0XHRcdFx0cmVmPVwic2VhcmNoRmllbGRcIlxuXHRcdFx0XHRcdFx0dHlwZT1cInNlYXJjaFwiXG5cdFx0XHRcdFx0XHRuYW1lPVwic2VhcmNoXCJcblx0XHRcdFx0XHRcdHZhbHVlPXt0aGlzLnN0YXRlLnNlYXJjaFN0cmluZ31cblx0XHRcdFx0XHRcdG9uQ2hhbmdlPXt0aGlzLnNlYXJjaFN0cmluZ0NoYW5nZWR9XG5cdFx0XHRcdFx0XHRvbktleVVwPXt0aGlzLmhhbmRsZUVzY2FwZUtleX1cblx0XHRcdFx0XHRcdHBsYWNlaG9sZGVyPVwiU2VhcmNoXCJcblx0XHRcdFx0XHRcdHN0eWxlPXt7IHBhZGRpbmdMZWZ0OiAnMi4zZW0nIH19XG5cdFx0XHRcdFx0Lz5cblx0XHRcdFx0PC9HbHlwaEZpZWxkPiAqL31cblx0XHRcdDwvZm9ybT5cblx0XHQpO1xuXHR9LFxuXHRyZW5kZXJJbmZvICgpIHtcblx0XHRyZXR1cm4gKFxuXHRcdFx0PFRvb2xiYXJTZWN0aW9uIHJpZ2h0PlxuXHRcdFx0XHR7dGhpcy5yZW5kZXJDcmVhdGVCdXR0b24oKX1cblx0XHRcdDwvVG9vbGJhclNlY3Rpb24+XG5cdFx0KTtcblx0fSxcblx0cmVuZGVyQ3JlYXRlQnV0dG9uICgpIHtcblx0XHRjb25zdCB7IG5vY3JlYXRlLCBhdXRvY3JlYXRlLCBzaW5ndWxhciB9ID0gdGhpcy5wcm9wcy5saXN0O1xuXG5cdFx0aWYgKG5vY3JlYXRlKSByZXR1cm4gbnVsbDtcblxuXHRcdGxldCBwcm9wcyA9IHt9O1xuXHRcdGlmIChhdXRvY3JlYXRlKSB7XG5cdFx0XHRwcm9wcy5ocmVmID0gJz9uZXcnICsgS2V5c3RvbmUuY3NyZi5xdWVyeTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cHJvcHMub25DbGljayA9ICgpID0+IHsgdGhpcy50b2dnbGVDcmVhdGUodHJ1ZSk7IH07XG5cdFx0fVxuXHRcdHJldHVybiAoXG5cdFx0XHQ8R2x5cGhCdXR0b24gZGF0YS1lMmUtaXRlbS1jcmVhdGUtYnV0dG9uPVwidHJ1ZVwiIGNvbG9yPVwic3VjY2Vzc1wiIGdseXBoPVwicGx1c1wiIHBvc2l0aW9uPVwibGVmdFwiIHsuLi5wcm9wc30+XG5cdFx0XHRcdDxSZXNwb25zaXZlVGV4dCBoaWRkZW5YUz17YE5ldyAke3Npbmd1bGFyfWB9IHZpc2libGVYUz1cIkNyZWF0ZVwiIC8+XG5cdFx0XHQ8L0dseXBoQnV0dG9uPlxuXHRcdCk7XG5cdH0sXG5cdHJlbmRlciAoKSB7XG5cdFx0cmV0dXJuIChcblx0XHRcdDxUb29sYmFyPlxuXHRcdFx0XHR7dGhpcy5yZW5kZXJEcmlsbGRvd24oKX1cblx0XHRcdFx0e3RoaXMucmVuZGVySW5mbygpfVxuXHRcdFx0PC9Ub29sYmFyPlxuXHRcdCk7XG5cdH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdCgoc3RhdGUpID0+ICh7XG5cdGxpc3RBY3RpdmVQYWdlOiBzdGF0ZS5saXN0cy5wYWdlLmluZGV4LFxufSkpKEVkaXRGb3JtSGVhZGVyKTtcbiIsIi8qIGVzbGludCBxdW90ZS1wcm9wczogW1wiZXJyb3JcIiwgXCJhcy1uZWVkZWRcIl0gKi9cblxuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZmluZERPTU5vZGUgfSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcbmltcG9ydCB7IEZvcm1JbnB1dCwgR2x5cGgsIEdseXBoQnV0dG9uIH0gZnJvbSAnLi4vLi4vLi4vZWxlbWVudGFsJztcbmltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi8uLi90aGVtZSc7XG5cbmNsYXNzIEVkaXRGb3JtSGVhZGVyU2VhcmNoIGV4dGVuZHMgQ29tcG9uZW50IHtcblx0Y29uc3RydWN0b3IgKCkge1xuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLmZvY3VzRmllbGQgPSB0aGlzLmZvY3VzRmllbGQuYmluZCh0aGlzKTtcblx0XHR0aGlzLnN0YXRlID0geyBmb2N1c2VkOiBmYWxzZSB9O1xuXHR9XG5cdGZvY3VzRmllbGQgKCkge1xuXHRcdHRoaXMuc2V0U3RhdGUoeyBmb2N1c2VkOiB0cnVlIH0sICgpID0+IHtcblx0XHRcdGZpbmRET01Ob2RlKHRoaXMucmVmcy50YXJnZXQpLmZvY3VzKCk7XG5cdFx0fSk7XG5cdH1cblx0cmVuZGVyICgpIHtcblx0XHRjb25zdCB7IGZvY3VzZWQgfSA9IHRoaXMuc3RhdGU7XG5cdFx0Y29uc3Qge1xuXHRcdFx0b25DaGFuZ2UsXG5cdFx0XHRvbktleVVwLFxuXHRcdFx0dmFsdWUsXG5cdFx0XHQuLi5wcm9wc1xuXHRcdH0gPSB0aGlzLnByb3BzO1xuXG5cdFx0cmV0dXJuIGZvY3VzZWQgPyAoXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT17Y3NzKGNsYXNzZXMud3JhcHBlcil9PlxuXHRcdFx0XHQ8R2x5cGhcblx0XHRcdFx0XHRjc3NTdHlsZXM9e2NsYXNzZXMuZ2x5cGh9XG5cdFx0XHRcdFx0Y29sb3I9e3RoZW1lLmNvbG9yLmdyYXk0MH1cblx0XHRcdFx0XHRuYW1lPVwic2VhcmNoXCJcblx0XHRcdFx0XHRkYXRhLWUyZS1zZWFyY2gtaWNvblxuXHRcdFx0XHQvPlxuXHRcdFx0XHQ8Rm9ybUlucHV0XG5cdFx0XHRcdFx0Y3NzU3R5bGVzPXtjbGFzc2VzLmlucHV0fVxuXHRcdFx0XHRcdG5hbWU9XCJzZWFyY2hcIlxuXHRcdFx0XHRcdG9uQmx1cj17KCkgPT4gdGhpcy5zZXRTdGF0ZSh7IGZvY3VzZWQ6IGZhbHNlIH0pfVxuXHRcdFx0XHRcdG9uQ2hhbmdlPXtvbkNoYW5nZX1cblx0XHRcdFx0XHRvbktleVVwPXtvbktleVVwfVxuXHRcdFx0XHRcdHBsYWNlaG9sZGVyPVwiU2VhcmNoXCJcblx0XHRcdFx0XHRyZWY9XCJ0YXJnZXRcIlxuXHRcdFx0XHRcdHR5cGU9XCJzZWFyY2hcIlxuXHRcdFx0XHRcdHZhbHVlPXt2YWx1ZX1cblx0XHRcdFx0XHR7Li4ucHJvcHN9XG5cdFx0XHRcdC8+XG5cdFx0XHQ8L2Rpdj5cblx0XHQpIDogKFxuXHRcdFx0PEdseXBoQnV0dG9uXG5cdFx0XHRcdGNvbG9yPVwicHJpbWFyeVwiXG5cdFx0XHRcdGdseXBoPVwic2VhcmNoXCJcblx0XHRcdFx0Z2x5cGhTdHlsZT17eyBtYXJnaW5SaWdodDogJzAuNGVtJyB9fVxuXHRcdFx0XHRvbkNsaWNrPXt0aGlzLmZvY3VzRmllbGR9XG5cdFx0XHRcdG9uRm9jdXM9e3RoaXMuZm9jdXNGaWVsZH1cblx0XHRcdFx0cG9zaXRpb249XCJsZWZ0XCJcblx0XHRcdFx0dmFyaWFudD1cImxpbmtcIlxuXHRcdFx0XHRzdHlsZT17eyBwYWRkaW5nTGVmdDogJzAuN2VtJyB9fVxuXHRcdFx0XHRkYXRhLWUyZS1zZWFyY2gtaWNvblxuXHRcdFx0PlxuXHRcdFx0XHRTZWFyY2hcblx0XHRcdDwvR2x5cGhCdXR0b24+XG5cdFx0KTtcblx0fVxufTtcblxuLy8gRm9yIHByb3BzIFwiZ2x5cGhcIiwgXCJnbHlwaENvbG9yXCIsIGFuZCBcImdseXBoU2l6ZVwiOlxuLy8gcHJvcCB0eXBlIHZhbGlkYXRpb24gd2lsbCBvY2N1ciB3aXRoaW4gdGhlIEdseXBoIGNvbXBvbmVudCwgbm8gbmVlZCB0b1xuLy8gZHVwbGljYXRlLCBqdXN0IHBhc3MgaXQgdGhyb3VnaC5cbkVkaXRGb3JtSGVhZGVyU2VhcmNoLnByb3BUeXBlcyA9IHtcblx0b25DaGFuZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cdHZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcblxuY29uc3QgY2xhc3NlcyA9IHtcblx0d3JhcHBlcjoge1xuXHRcdGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuXHRcdHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuXHRcdHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuXHR9LFxuXG5cdC8vIGlucHV0XG5cdGlucHV0OiB7XG5cdFx0cGFkZGluZ0xlZnQ6ICcyLjJlbScsXG5cdFx0Ly8gb3BhY2l0eTogMCxcblx0XHR0cmFuc2l0aW9uOiAnYWxsIDI0MG1zJyxcblx0XHR3aWR0aDogMTAwLFxuXG5cdFx0Jzpmb2N1cyc6IHtcblx0XHRcdC8vIG9wYWNpdHk6IDEsXG5cdFx0XHR3aWR0aDogMjQwLFxuXHRcdH0sXG5cdH0sXG5cblx0Ly8gZ2x5cGhcblx0Z2x5cGg6IHtcblx0XHRhbGlnbkl0ZW1zOiAnY2VudGVyJyxcblx0XHRkaXNwbGF5OiAnZmxleCcsXG5cdFx0aGVpZ2h0OiAnMTAwJScsXG5cdFx0anVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuXHRcdHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuXHRcdHdpZHRoOiAnMi4yZW0nLFxuXHR9LFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFZGl0Rm9ybUhlYWRlclNlYXJjaDtcblxuXG4vLyBTZWFyY2hcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vLyAuRWRpdEZvcm1fX2hlYWRlcl9fc2VhcmNoIHtcbi8vIFx0ZGlzcGxheTogaW5saW5lLWJsb2NrO1xuLy8gXHRtYXJnaW4tbGVmdDogMWVtO1xuLy8gfVxuLy8gLkVkaXRGb3JtX19oZWFkZXJfX3NlYXJjaC1maWVsZCB7XG4vLyBcdG1hcmdpbi1ib3R0b206IDA7XG4vL1xuLy8gXHQuSWNvbkZpZWxkX19pY29uIHtcbi8vIFx0XHRjb2xvcjogQGFwcC1wcmltYXJ5O1xuLy8gXHR9XG4vLyB9XG4vL1xuLy8gLy8gbWFrZSB0aGUgaW5wdXQgYXBwZWFyIGFzIGEgYnV0dG9uIGxpbmsgdW50aWwgZm9jdXNlZFxuLy8gLkVkaXRGb3JtX19oZWFkZXJfX3NlYXJjaC1pbnB1dCB7XG4vLyBcdC8vIG92ZXJyaWRlIGVsZW1lbnRhbCdzIHRyYW5zaXRpb24gdG8gY2F0Y2ggdGhlIHdpZHRoIG9yIGl0IGxvb2tzIHdlaXJkXG4vLyBcdC50cmFuc2l0aW9uKCBhbGwgMC4xNXMgZWFzZS1pbi1vdXQgKTtcbi8vIFx0LnBsYWNlaG9sZGVyKEBsaW5rLWNvbG9yKTtcbi8vIFx0YmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4vLyBcdGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XG4vLyBcdGJveC1zaGFkb3c6IG5vbmU7XG4vLyBcdGRpc3BsYXk6IGlubGluZS1ibG9jaztcbi8vXG4vLyBcdC8vIHNldCB0aGUgd2lkdGggdG8gb25seSBiZSBhcyBsb25nIGFzIGlmIGl0IHdlcmUgYSBidXR0b24gaW5pdGlhbGx5XG4vLyBcdC8vIHRoaXMgaXMgdXBkYXRlZCBvbiBmb2N1cyB0byBhIG1vcmUgY29tZm9ydGFibGUgdHlwaW5nIGxlbmd0aFxuLy8gXHR3aWR0aDogMTAwcHg7XG4vL1xuLy8gXHQvLyBkZWNvcmF0ZSB0aGUgaW5wdXQgYXMgYSBsaW5rXG4vLyBcdCY6aG92ZXIge1xuLy8gXHRcdC5wbGFjZWhvbGRlcihAbGluay1ob3Zlci1jb2xvcik7XG4vLyBcdFx0Ym9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcbi8vIFx0XHRjdXJzb3I6IHBvaW50ZXI7XG4vL1xuLy8gXHRcdC8vIGhhbmRsZSBwbGFjZWhvbGRlciB0ZXh0XG4vLyBcdFx0Jjo6LW1vei1wbGFjZWhvbGRlciB7IHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOyB9XG4vLyBcdFx0JjotbXMtaW5wdXQtcGxhY2Vob2xkZXIgeyB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTsgfVxuLy8gXHRcdCY6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIgIHsgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7IH1cbi8vXG4vLyBcdFx0KyAuSWNvbkZpZWxkX19pY29uIHtcbi8vIFx0XHRcdGNvbG9yOiBAbGluay1ob3Zlci1jb2xvcjtcbi8vIFx0XHR9XG4vLyBcdH1cbi8vXG4vLyBcdC8vIHJldHVybiB0aGUgaW5wdXQgdG8gaXQncyBuYXR1cmFsIGFwcGVhcmFuY2Ugb24gZm9jdXNcbi8vIFx0Jjpmb2N1cyB7XG4vLyBcdFx0LnBsYWNlaG9sZGVyKEBpbnB1dC1wbGFjZWhvbGRlci1jb2xvcik7XG4vLyBcdFx0YmFja2dyb3VuZDogd2hpdGU7XG4vLyBcdFx0Ym9yZGVyLWNvbG9yOiBAaW5wdXQtYm9yZGVyLWNvbG9yLWZvY3VzO1xuLy8gXHRcdGJveC1zaGFkb3c6IGluc2V0IDAgMXB4IDFweCByZ2JhKDAsIDAsIDAsIDAuMDc1KSwgMCAwIDAgM3B4IGZhZGUoQGlucHV0LWJvcmRlci1jb2xvci1mb2N1cywgMTAlKTtcbi8vIFx0XHRjdXJzb3I6IGF1dG87XG4vLyBcdFx0b3V0bGluZTogMDtcbi8vIFx0XHR3aWR0aDogMjQwcHg7XG4vL1xuLy8gXHRcdC8vIGhhbmRsZSBwbGFjZWhvbGRlciB0ZXh0XG4vLyBcdFx0Jjo6LW1vei1wbGFjZWhvbGRlciB7IHRleHQtZGVjb3JhdGlvbjogbm9uZTsgfVxuLy8gXHRcdCY6LW1zLWlucHV0LXBsYWNlaG9sZGVyIHsgdGV4dC1kZWNvcmF0aW9uOiBub25lOyB9XG4vLyBcdFx0Jjo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciAgeyB0ZXh0LWRlY29yYXRpb246IG5vbmU7IH1cbi8vXG4vLyBcdFx0KyAuSWNvbkZpZWxkX19pY29uIHtcbi8vIFx0XHRcdGNvbG9yOiBAaW5wdXQtcGxhY2Vob2xkZXItY29sb3I7XG4vLyBcdFx0fVxuLy8gXHR9XG4vLyB9XG4vLyAvLyBoaWRlIHRoZSBzZWFyY2ggZmllbGQgb24gc21hbGwgZGV2aWNlc1xuLy8gQG1lZGlhIChtYXgtd2lkdGg6IDQ4MHB4KSB7XG4vLyBcdC5FZGl0Rm9ybV9faGVhZGVyX19zZWFyY2gge1xuLy8gXHRcdGRpc3BsYXk6IG5vbmU7XG4vLyBcdH1cbi8vIH1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgYmxhY2tsaXN0IGZyb20gJ2JsYWNrbGlzdCc7XG5pbXBvcnQgYXNzaWduIGZyb20gJ29iamVjdC1hc3NpZ24nO1xuXG52YXIgRm9vdGVyQmFyID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuXHRwcm9wVHlwZXM6IHtcblx0XHRzdHlsZTogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcblx0fSxcblx0Z2V0RGVmYXVsdFByb3BzICgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c3R5bGU6IHt9LFxuXHRcdH07XG5cdH0sXG5cdGdldEluaXRpYWxTdGF0ZSAoKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuXHRcdFx0d2lkdGg6ICdhdXRvJyxcblx0XHRcdGhlaWdodDogJ2F1dG8nLFxuXHRcdFx0dG9wOiAwLFxuXHRcdH07XG5cdH0sXG5cdGNvbXBvbmVudERpZE1vdW50ICgpIHtcblx0XHQvLyBCYWlsIGluIElFOCBiZWNhdXNlIFJlYWN0IGRvZXNuJ3Qgc3VwcG9ydCB0aGUgb25TY3JvbGwgZXZlbnQgaW4gdGhhdCBicm93c2VyXG5cdFx0Ly8gQ29udmVuaWVudGx5ICghKSBJRTggZG9lc24ndCBoYXZlIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlIHdoaWNoIHdlIGFsc28gdXNlIGhlcmVcblx0XHRpZiAoIXdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKSByZXR1cm47XG5cdFx0dmFyIGZvb3RlciA9IHRoaXMucmVmcy5mb290ZXI7XG5cdFx0dGhpcy53aW5kb3dTaXplID0gdGhpcy5nZXRXaW5kb3dTaXplKCk7XG5cdFx0dmFyIGZvb3RlclN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZm9vdGVyKTtcblx0XHR0aGlzLmZvb3RlclNpemUgPSB7XG5cdFx0XHR4OiBmb290ZXIub2Zmc2V0V2lkdGgsXG5cdFx0XHR5OiBmb290ZXIub2Zmc2V0SGVpZ2h0ICsgcGFyc2VJbnQoZm9vdGVyU3R5bGUubWFyZ2luVG9wIHx8ICcwJyksXG5cdFx0fTtcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5yZWNhbGNQb3NpdGlvbiwgZmFsc2UpO1xuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLnJlY2FsY1Bvc2l0aW9uLCBmYWxzZSk7XG5cdFx0dGhpcy5yZWNhbGNQb3NpdGlvbigpO1xuXHR9LFxuXHRjb21wb25lbnRXaWxsVW5tb3VudCAoKSB7XG5cdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMucmVjYWxjUG9zaXRpb24sIGZhbHNlKTtcblx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5yZWNhbGNQb3NpdGlvbiwgZmFsc2UpO1xuXHR9LFxuXHRnZXRXaW5kb3dTaXplICgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0eDogd2luZG93LmlubmVyV2lkdGgsXG5cdFx0XHR5OiB3aW5kb3cuaW5uZXJIZWlnaHQsXG5cdFx0fTtcblx0fSxcblx0cmVjYWxjUG9zaXRpb24gKCkge1xuXHRcdHZhciB3cmFwcGVyID0gdGhpcy5yZWZzLndyYXBwZXI7XG5cblx0XHR0aGlzLmZvb3RlclNpemUueCA9IHdyYXBwZXIub2Zmc2V0V2lkdGg7XG5cblx0XHR2YXIgb2Zmc2V0VG9wID0gMDtcblx0XHR2YXIgb2Zmc2V0RWwgPSB3cmFwcGVyO1xuXG5cdFx0d2hpbGUgKG9mZnNldEVsKSB7XG5cdFx0XHRvZmZzZXRUb3AgKz0gb2Zmc2V0RWwub2Zmc2V0VG9wO1xuXHRcdFx0b2Zmc2V0RWwgPSBvZmZzZXRFbC5vZmZzZXRQYXJlbnQ7XG5cdFx0fVxuXG5cdFx0dmFyIG1heFkgPSBvZmZzZXRUb3AgKyB0aGlzLmZvb3RlclNpemUueTtcblx0XHR2YXIgdmlld1kgPSB3aW5kb3cuc2Nyb2xsWSArIHdpbmRvdy5pbm5lckhlaWdodDtcblxuXHRcdHZhciBuZXdTaXplID0gdGhpcy5nZXRXaW5kb3dTaXplKCk7XG5cdFx0dmFyIHNpemVDaGFuZ2VkID0gKG5ld1NpemUueCAhPT0gdGhpcy53aW5kb3dTaXplLnggfHwgbmV3U2l6ZS55ICE9PSB0aGlzLndpbmRvd1NpemUueSk7XG5cdFx0dGhpcy53aW5kb3dTaXplID0gbmV3U2l6ZTtcblxuXHRcdHZhciBuZXdTdGF0ZSA9IHtcblx0XHRcdHdpZHRoOiB0aGlzLmZvb3RlclNpemUueCxcblx0XHRcdGhlaWdodDogdGhpcy5mb290ZXJTaXplLnksXG5cdFx0fTtcblxuXHRcdGlmICh2aWV3WSA+IG1heFkgJiYgKHNpemVDaGFuZ2VkIHx8IHRoaXMubW9kZSAhPT0gJ2lubGluZScpKSB7XG5cdFx0XHR0aGlzLm1vZGUgPSAnaW5saW5lJztcblx0XHRcdG5ld1N0YXRlLnRvcCA9IDA7XG5cdFx0XHRuZXdTdGF0ZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG5cdFx0XHR0aGlzLnNldFN0YXRlKG5ld1N0YXRlKTtcblx0XHR9IGVsc2UgaWYgKHZpZXdZIDw9IG1heFkgJiYgKHNpemVDaGFuZ2VkIHx8IHRoaXMubW9kZSAhPT0gJ2ZpeGVkJykpIHtcblx0XHRcdHRoaXMubW9kZSA9ICdmaXhlZCc7XG5cdFx0XHRuZXdTdGF0ZS50b3AgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLSB0aGlzLmZvb3RlclNpemUueTtcblx0XHRcdG5ld1N0YXRlLnBvc2l0aW9uID0gJ2ZpeGVkJztcblx0XHRcdHRoaXMuc2V0U3RhdGUobmV3U3RhdGUpO1xuXHRcdH1cblx0fSxcblx0cmVuZGVyICgpIHtcblx0XHR2YXIgd3JhcHBlclN0eWxlID0ge1xuXHRcdFx0aGVpZ2h0OiB0aGlzLnN0YXRlLmhlaWdodCxcblx0XHRcdG1hcmdpblRvcDogNjAsXG5cdFx0XHRwb3NpdGlvbjogJ3JlbGF0aXZlJyxcblx0XHR9O1xuXHRcdHZhciBmb290ZXJQcm9wcyA9IGJsYWNrbGlzdCh0aGlzLnByb3BzLCAnY2hpbGRyZW4nLCAnc3R5bGUnKTtcblx0XHR2YXIgZm9vdGVyU3R5bGUgPSBhc3NpZ24oe30sIHRoaXMucHJvcHMuc3R5bGUsIHtcblx0XHRcdHBvc2l0aW9uOiB0aGlzLnN0YXRlLnBvc2l0aW9uLFxuXHRcdFx0dG9wOiB0aGlzLnN0YXRlLnRvcCxcblx0XHRcdHdpZHRoOiB0aGlzLnN0YXRlLndpZHRoLFxuXHRcdFx0aGVpZ2h0OiB0aGlzLnN0YXRlLmhlaWdodCxcblx0XHR9KTtcblx0XHRyZXR1cm4gKFxuXHRcdFx0PGRpdiByZWY9XCJ3cmFwcGVyXCIgc3R5bGU9e3dyYXBwZXJTdHlsZX0+XG5cdFx0XHRcdDxkaXYgcmVmPVwiZm9vdGVyXCIgc3R5bGU9e2Zvb3RlclN0eWxlfSB7Li4uZm9vdGVyUHJvcHN9Pnt0aGlzLnByb3BzLmNoaWxkcmVufTwvZGl2PlxuXHRcdFx0PC9kaXY+XG5cdFx0KTtcblx0fSxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZvb3RlckJhcjtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgZXZhbERlcGVuZHNPbiBmcm9tICcuLi8uLi8uLi8uLi8uLi8uLi9maWVsZHMvdXRpbHMvZXZhbERlcGVuZHNPbic7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuXHRkaXNwbGF5TmFtZTogJ0Zvcm1IZWFkaW5nJyxcblx0cHJvcFR5cGVzOiB7XG5cdFx0b3B0aW9uczogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcblx0fSxcblx0cmVuZGVyICgpIHtcblx0XHRpZiAoIWV2YWxEZXBlbmRzT24odGhpcy5wcm9wcy5vcHRpb25zLmRlcGVuZHNPbiwgdGhpcy5wcm9wcy5vcHRpb25zLnZhbHVlcykpIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0XHRyZXR1cm4gPGgzIGNsYXNzTmFtZT1cImZvcm0taGVhZGluZ1wiPnt0aGlzLnByb3BzLmNvbnRlbnR9PC9oMz47XG5cdH0sXG59KTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmltcG9ydCB7IEFsZXJ0LCBCbGFua1N0YXRlLCBDZW50ZXIsIFNwaW5uZXIgfSBmcm9tICcuLi8uLi8uLi8uLi9lbGVtZW50YWwnO1xuXG5pbXBvcnQgRHJhZ0Ryb3AgZnJvbSAnLi9SZWxhdGVkSXRlbXNMaXN0RHJhZ0Ryb3AnO1xuaW1wb3J0IExpc3RSb3cgZnJvbSAnLi9SZWxhdGVkSXRlbXNMaXN0Um93JztcblxuaW1wb3J0IHsgbG9hZFJlbGF0aW9uc2hpcEl0ZW1EYXRhIH0gZnJvbSAnLi4vLi4vYWN0aW9ucyc7XG5pbXBvcnQgeyBUQUJMRV9DT05UUk9MX0NPTFVNTl9XSURUSCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2NvbnN0YW50cyc7XG5cbmNvbnN0IFJlbGF0ZWRJdGVtc0xpc3QgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cdHByb3BUeXBlczoge1xuXHRcdGRpc3BhdGNoOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXHRcdGRyYWdOZXdTb3J0T3JkZXI6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXG5cdFx0aXRlbXM6IFJlYWN0LlByb3BUeXBlcy5hcnJheSxcblx0XHRsaXN0OiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cdFx0cmVmTGlzdDogUmVhY3QuUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXHRcdHJlbGF0ZWRJdGVtSWQ6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcblx0XHRyZWxhdGlvbnNoaXA6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblx0fSxcblx0Z2V0SW5pdGlhbFN0YXRlICgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Y29sdW1uczogdGhpcy5nZXRDb2x1bW5zKCksXG5cdFx0XHRlcnI6IG51bGwsXG5cdFx0XHRpdGVtczogbnVsbCxcblx0XHR9O1xuXHR9LFxuXHRjb21wb25lbnREaWRNb3VudCAoKSB7XG5cdFx0dGhpcy5fX2lzTW91bnRlZCA9IHRydWU7XG5cdFx0dGhpcy5sb2FkSXRlbXMoKTtcblx0fSxcblx0Y29tcG9uZW50V2lsbFVubW91bnQgKCkge1xuXHRcdHRoaXMuX19pc01vdW50ZWQgPSBmYWxzZTtcblx0fSxcblx0aXNTb3J0YWJsZSAoKSB7XG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIHJlbGF0ZWQgaXRlbXMgc2hvdWxkIGJlIHNvcnRhYmxlLiBUaGUgcmVmZXJlbmNlZCBsaXN0IGhhcyB0b1xuXHRcdC8vICAgYmUgc29ydGFibGUgYW5kIGl0IGhhcyB0byBzZXQgdGhlIGN1cnJlbnQgbGlzdCBhcyBpdCdzIHNvcnRDb250ZXh0LlxuXHRcdGNvbnN0IHsgcmVmTGlzdCwgbGlzdCwgcmVsYXRpb25zaGlwIH0gPSB0aGlzLnByb3BzO1xuXHRcdGNvbnN0IHNvcnRDb250ZXh0ID0gcmVmTGlzdC5zb3J0Q29udGV4dDtcblx0XHRpZiAocmVmTGlzdC5zb3J0YWJsZSAmJiBzb3J0Q29udGV4dCkge1xuXHRcdFx0Y29uc3QgcGFydHMgPSBzb3J0Q29udGV4dC5zcGxpdCgnOicpO1xuXHRcdFx0aWYgKHBhcnRzWzBdID09PSBsaXN0LmtleSAmJiBwYXJ0c1sxXSA9PT0gcmVsYXRpb25zaGlwLnBhdGgpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcblx0Z2V0Q29sdW1ucyAoKSB7XG5cdFx0Y29uc3QgeyByZWxhdGlvbnNoaXAsIHJlZkxpc3QgfSA9IHRoaXMucHJvcHM7XG5cdFx0Y29uc3QgY29sdW1ucyA9IHJlZkxpc3QuZXhwYW5kQ29sdW1ucyhyZWZMaXN0LmRlZmF1bHRDb2x1bW5zKTtcblx0XHRyZXR1cm4gY29sdW1ucy5maWx0ZXIoaSA9PiBpLnBhdGggIT09IHJlbGF0aW9uc2hpcC5yZWZQYXRoKTtcblx0fSxcblx0bG9hZEl0ZW1zICgpIHtcblx0XHRjb25zdCB7IHJlZkxpc3QsIHJlbGF0ZWRJdGVtSWQsIHJlbGF0aW9uc2hpcCB9ID0gdGhpcy5wcm9wcztcblx0XHRjb25zdCB7IGNvbHVtbnMgfSA9IHRoaXMuc3RhdGU7XG5cdFx0Ly8gVE9ETzogTW92ZSBlcnJvciB0byByZWR1eCBzdG9yZVxuXHRcdGlmICghcmVmTGlzdC5maWVsZHNbcmVsYXRpb25zaGlwLnJlZlBhdGhdKSB7XG5cdFx0XHRjb25zdCBlcnIgPSAoXG5cdFx0XHRcdDxBbGVydCBjb2xvcj1cImRhbmdlclwiPlxuXHRcdFx0XHRcdDxzdHJvbmc+RXJyb3I6PC9zdHJvbmc+IFJlbGF0ZWQgTGlzdCA8c3Ryb25nPntyZWZMaXN0LmxhYmVsfTwvc3Ryb25nPiBoYXMgbm8gZmllbGQgPHN0cm9uZz57cmVsYXRpb25zaGlwLnJlZlBhdGh9PC9zdHJvbmc+XG5cdFx0XHRcdDwvQWxlcnQ+XG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXMuc2V0U3RhdGUoeyBlcnIgfSk7XG5cdFx0fVxuXHRcdHRoaXMucHJvcHMuZGlzcGF0Y2gobG9hZFJlbGF0aW9uc2hpcEl0ZW1EYXRhKHsgY29sdW1ucywgcmVmTGlzdCwgcmVsYXRlZEl0ZW1JZCwgcmVsYXRpb25zaGlwIH0pKTtcblx0fSxcblx0cmVuZGVySXRlbXMgKCkge1xuXHRcdGNvbnN0IHRhYmxlQm9keSA9ICh0aGlzLmlzU29ydGFibGUoKSkgPyAoXG5cdFx0XHQ8RHJhZ0Ryb3Bcblx0XHRcdFx0Y29sdW1ucz17dGhpcy5zdGF0ZS5jb2x1bW5zfVxuXHRcdFx0XHRpdGVtcz17dGhpcy5wcm9wcy5pdGVtc31cblx0XHRcdFx0ey4uLnRoaXMucHJvcHN9XG5cdFx0XHQvPlxuXHRcdCkgOiAoXG5cdFx0XHQ8dGJvZHk+XG5cdFx0XHRcdHt0aGlzLnByb3BzLml0ZW1zLnJlc3VsdHMubWFwKChpdGVtKSA9PiB7XG5cdFx0XHRcdFx0cmV0dXJuICg8TGlzdFJvd1xuXHRcdFx0XHRcdFx0a2V5PXtpdGVtLmlkfVxuXHRcdFx0XHRcdFx0Y29sdW1ucz17dGhpcy5zdGF0ZS5jb2x1bW5zfVxuXHRcdFx0XHRcdFx0aXRlbT17aXRlbX1cblx0XHRcdFx0XHRcdHJlZkxpc3Q9e3RoaXMucHJvcHMucmVmTGlzdH1cblx0XHRcdFx0XHQvPik7XG5cdFx0XHRcdH0pfVxuXHRcdFx0PC90Ym9keT5cblx0XHQpO1xuXHRcdHJldHVybiB0aGlzLnByb3BzLml0ZW1zLnJlc3VsdHMubGVuZ3RoID8gKFxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJJdGVtTGlzdC13cmFwcGVyXCI+XG5cdFx0XHRcdDx0YWJsZSBjZWxsUGFkZGluZz1cIjBcIiBjZWxsU3BhY2luZz1cIjBcIiBjbGFzc05hbWU9XCJUYWJsZSBJdGVtTGlzdFwiPlxuXHRcdFx0XHRcdHt0aGlzLnJlbmRlclRhYmxlQ29scygpfVxuXHRcdFx0XHRcdHt0aGlzLnJlbmRlclRhYmxlSGVhZGVycygpfVxuXHRcdFx0XHRcdHt0YWJsZUJvZHl9XG5cdFx0XHRcdDwvdGFibGU+XG5cdFx0XHQ8L2Rpdj5cblx0XHQpIDogKFxuXHRcdFx0PEJsYW5rU3RhdGVcblx0XHRcdFx0aGVhZGluZz17YE5vIHJlbGF0ZWQgJHt0aGlzLnByb3BzLnJlZkxpc3QucGx1cmFsLnRvTG93ZXJDYXNlKCl9Li4uYH1cblx0XHRcdFx0c3R5bGU9e3sgbWFyZ2luQm90dG9tOiAnM2VtJyB9fVxuXHRcdFx0Lz5cblx0XHQpO1xuXHR9LFxuXHRyZW5kZXJUYWJsZUNvbHMgKCkge1xuXHRcdGNvbnN0IGNvbHMgPSB0aGlzLnN0YXRlLmNvbHVtbnMubWFwKChjb2wpID0+IDxjb2wgd2lkdGg9e2NvbC53aWR0aH0ga2V5PXtjb2wucGF0aH0gLz4pO1xuXHRcdHJldHVybiA8Y29sZ3JvdXA+e2NvbHN9PC9jb2xncm91cD47XG5cdH0sXG5cdHJlbmRlclRhYmxlSGVhZGVycyAoKSB7XG5cdFx0Y29uc3QgY2VsbHMgPSB0aGlzLnN0YXRlLmNvbHVtbnMubWFwKChjb2wpID0+IHtcblx0XHRcdHJldHVybiA8dGgga2V5PXtjb2wucGF0aH0+e2NvbC5sYWJlbH08L3RoPjtcblx0XHR9KTtcblxuXHRcdC8vIGFkZCBzb3J0IGNvbCB3aGVuIGF2YWlsYWJsZVxuXHRcdGlmICh0aGlzLmlzU29ydGFibGUoKSkge1xuXHRcdFx0Y2VsbHMudW5zaGlmdChcblx0XHRcdFx0PHRoIHdpZHRoPXtUQUJMRV9DT05UUk9MX0NPTFVNTl9XSURUSH0ga2V5PVwic29ydGFibGVcIiAvPlxuXHRcdFx0KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gPHRoZWFkPjx0cj57Y2VsbHN9PC90cj48L3RoZWFkPjtcblx0fSxcblx0cmVuZGVyICgpIHtcblx0XHRpZiAodGhpcy5zdGF0ZS5lcnIpIHtcblx0XHRcdHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cIlJlbGF0aW9uc2hpcFwiPnt0aGlzLnN0YXRlLmVycn08L2Rpdj47XG5cdFx0fVxuXG5cdFx0Y29uc3QgbGlzdEhyZWYgPSBgJHtLZXlzdG9uZS5hZG1pblBhdGh9LyR7dGhpcy5wcm9wcy5yZWZMaXN0LnBhdGh9YDtcblx0XHRjb25zdCBsb2FkaW5nRWxlbWVudCA9IChcblx0XHRcdDxDZW50ZXIgaGVpZ2h0PXsxMDB9PlxuXHRcdFx0XHQ8U3Bpbm5lciAvPlxuXHRcdFx0PC9DZW50ZXI+XG5cdFx0KTtcblxuXHRcdHJldHVybiAoXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cIlJlbGF0aW9uc2hpcFwiPlxuXHRcdFx0XHQ8aDMgY2xhc3NOYW1lPVwiUmVsYXRpb25zaGlwX19saW5rXCI+PExpbmsgdG89e2xpc3RIcmVmfT57dGhpcy5wcm9wcy5yZWZMaXN0LmxhYmVsfTwvTGluaz48L2gzPlxuXHRcdFx0XHR7dGhpcy5wcm9wcy5pdGVtcyA/IHRoaXMucmVuZGVySXRlbXMoKSA6IGxvYWRpbmdFbGVtZW50fVxuXHRcdFx0PC9kaXY+XG5cdFx0KTtcblx0fSxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlbGF0ZWRJdGVtc0xpc3Q7XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBEcmFnRHJvcENvbnRleHQgfSBmcm9tICdyZWFjdC1kbmQnO1xuaW1wb3J0IEhUTUw1QmFja2VuZCBmcm9tICdyZWFjdC1kbmQtaHRtbDUtYmFja2VuZCc7XG5pbXBvcnQgeyBTb3J0YWJsZSB9IGZyb20gJy4vUmVsYXRlZEl0ZW1zTGlzdFJvdyc7XG5cbmNsYXNzIFJlbGF0ZWRJdGVtc0xpc3REcmFnRHJvcCBleHRlbmRzIENvbXBvbmVudCB7XG5cdHJlbmRlciAoKSB7XG5cdFx0Y29uc3QgeyBpdGVtcyB9ID0gdGhpcy5wcm9wcztcblx0XHRyZXR1cm4gKFxuXHRcdFx0PHRib2R5PlxuXHRcdFx0XHR7aXRlbXMucmVzdWx0cy5tYXAoKGl0ZW0sIGkpID0+IHtcblx0XHRcdFx0XHRyZXR1cm4gKDxTb3J0YWJsZVxuXHRcdFx0XHRcdFx0a2V5PXtpdGVtLmlkfVxuXHRcdFx0XHRcdFx0aW5kZXg9e2l9XG5cdFx0XHRcdFx0XHRpdGVtPXtpdGVtfVxuXHRcdFx0XHRcdFx0ey4uLnRoaXMucHJvcHN9XG5cdFx0XHRcdFx0Lz4pO1xuXHRcdFx0XHR9KX1cblx0XHRcdDwvdGJvZHk+XG5cdFx0KTtcblx0fVxufTtcblJlbGF0ZWRJdGVtc0xpc3REcmFnRHJvcC5wcm9wVHlwZXMgPSB7XG5cdGNvbHVtbnM6IFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxuXHRkaXNwYXRjaDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcblx0ZHJhZ05ld1NvcnRPcmRlcjogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcblx0aXRlbXM6IFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxuXHRsaXN0OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cdHJlZkxpc3Q6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblx0cmVsYXRlZEl0ZW1JZDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuXHRyZWxhdGlvbnNoaXA6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRHJhZ0Ryb3BDb250ZXh0KEhUTUw1QmFja2VuZCkoUmVsYXRlZEl0ZW1zTGlzdERyYWdEcm9wKTtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IERyb3BUYXJnZXQsIERyYWdTb3VyY2UgfSBmcm9tICdyZWFjdC1kbmQnO1xuXG5pbXBvcnQgeyBDb2x1bW5zIH0gZnJvbSAnRmllbGRUeXBlcyc7XG5cbmltcG9ydCB7XG5cdHJlb3JkZXJJdGVtcyxcblx0cmVzZXRJdGVtcyxcblx0bW92ZUl0ZW0sXG59IGZyb20gJy4uLy4uL2FjdGlvbnMnO1xuXG5pbXBvcnQgTGlzdENvbnRyb2wgZnJvbSAnLi4vLi4vLi4vTGlzdC9jb21wb25lbnRzL0xpc3RDb250cm9sJztcblxuY2xhc3MgUmVsYXRlZEl0ZW1zTGlzdFJvdyBleHRlbmRzIENvbXBvbmVudCB7XG5cdHJlbmRlciAoKSB7XG5cdFx0Y29uc3QgeyBjb2x1bW5zLCBpdGVtLCBjb25uZWN0RHJhZ1NvdXJjZSwgY29ubmVjdERyb3BUYXJnZXQsIHJlZkxpc3QgfSA9IHRoaXMucHJvcHM7XG5cdFx0Y29uc3QgY2VsbHMgPSBjb2x1bW5zLm1hcCgoY29sLCBpKSA9PiB7XG5cdFx0XHRjb25zdCBDb2x1bW5UeXBlID0gQ29sdW1uc1tjb2wudHlwZV0gfHwgQ29sdW1ucy5fX3VucmVjb2duaXNlZF9fO1xuXHRcdFx0Y29uc3QgbGlua1RvID0gIWkgPyBgJHtLZXlzdG9uZS5hZG1pblBhdGh9LyR7cmVmTGlzdC5wYXRofS8ke2l0ZW0uaWR9YCA6IHVuZGVmaW5lZDtcblx0XHRcdHJldHVybiA8Q29sdW1uVHlwZSBrZXk9e2NvbC5wYXRofSBsaXN0PXtyZWZMaXN0fSBjb2w9e2NvbH0gZGF0YT17aXRlbX0gbGlua1RvPXtsaW5rVG99IC8+O1xuXHRcdH0pO1xuXG5cdFx0Ly8gYWRkIHNvcnRhYmxlIGljb24gd2hlbiBhcHBsaWNhYmxlXG5cdFx0aWYgKGNvbm5lY3REcmFnU291cmNlKSB7XG5cdFx0XHRjZWxscy51bnNoaWZ0KDxMaXN0Q29udHJvbCBrZXk9XCJfc29ydFwiIHR5cGU9XCJzb3J0YWJsZVwiIGRyYWdTb3VyY2U9e2Nvbm5lY3REcmFnU291cmNlfSAvPik7XG5cdFx0fVxuXG5cdFx0Y29uc3Qgcm93ID0gKDx0ciBrZXk9eydpJyArIGl0ZW0uaWR9PntjZWxsc308L3RyPik7XG5cblx0XHRpZiAoY29ubmVjdERyb3BUYXJnZXQpIHtcblx0XHRcdHJldHVybiBjb25uZWN0RHJvcFRhcmdldChyb3cpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gcm93O1xuXHRcdH1cblx0fVxufVxuUmVsYXRlZEl0ZW1zTGlzdFJvdy5wcm9wVHlwZXMgPSB7XG5cdGNvbHVtbnM6IFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxuXHRkaXNwYXRjaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcblx0ZHJhZ05ld1NvcnRPcmRlcjogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcblx0aW5kZXg6IFByb3BUeXBlcy5udW1iZXIsXG5cdGl0ZW06IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblx0cmVmTGlzdDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXHRyZWxhdGVkSXRlbUlkOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG5cdHJlbGF0aW9uc2hpcDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXHQvLyBJbmplY3RlZCBieSBSZWFjdCBEbkQ6XG5cdGlzRHJhZ2dpbmc6IFByb3BUeXBlcy5ib29sLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlYWN0L3NvcnQtcHJvcC10eXBlc1xuXHRjb25uZWN0RHJhZ1NvdXJjZTogUHJvcFR5cGVzLmZ1bmMsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3Qvc29ydC1wcm9wLXR5cGVzXG5cdGNvbm5lY3REcm9wVGFyZ2V0OiBQcm9wVHlwZXMuZnVuYywgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC9zb3J0LXByb3AtdHlwZXNcblx0Y29ubmVjdERyYWdQcmV2aWV3OiBQcm9wVHlwZXMuZnVuYywgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC9zb3J0LXByb3AtdHlwZXNcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IFJlbGF0ZWRJdGVtc0xpc3RSb3c7XG5cbi8vIEV4cG9zZSBTb3J0YWJsZVxuXG4vKipcbiAqIEltcGxlbWVudHMgZHJhZyBzb3VyY2UuXG4gKi9cbmNvbnN0IGRyYWdJdGVtID0ge1xuXHRiZWdpbkRyYWcgKHByb3BzKSB7XG5cdFx0Y29uc3Qgc2VuZCA9IHsgLi4ucHJvcHMgfTtcblx0XHQvLyBwcm9wcy5kaXNwYXRjaChzZXREcmFnQmFzZShwcm9wcy5pdGVtLCBwcm9wcy5pbmRleCkpO1xuXHRcdHJldHVybiB7IC4uLnNlbmQgfTtcblx0fSxcblx0ZW5kRHJhZyAocHJvcHMsIG1vbml0b3IsIGNvbXBvbmVudCkge1xuXHRcdC8vIERyb3BwZWQgb3V0c2lkZSBvZiB0aGUgZHJvcCB0YXJnZXQsIHJlc2V0IHJvd3Ncblx0XHRpZiAoIW1vbml0b3IuZGlkRHJvcCgpKSB7XG5cdFx0XHRwcm9wcy5kaXNwYXRjaChyZXNldEl0ZW1zKCkpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnN0IGRyYWdnZWRJdGVtID0gcHJvcHMuaXRlbTtcblx0XHRjb25zdCBwcmV2U29ydE9yZGVyID0gZHJhZ2dlZEl0ZW0uc29ydE9yZGVyO1xuXHRcdGNvbnN0IG5ld1NvcnRPcmRlciA9IHByb3BzLmRyYWdOZXdTb3J0T3JkZXI7XG5cblx0XHQvLyBEcm9wcGluZyBvbiBzZWxmXG5cdFx0aWYgKHByZXZTb3J0T3JkZXIgPT09IG5ld1NvcnRPcmRlcikge1xuXHRcdFx0cHJvcHMuZGlzcGF0Y2gocmVzZXRJdGVtcygpKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBkcm9wcGVkIG9uIGEgdGFyZ2V0XG5cdFx0Y29uc3QgeyBjb2x1bW5zLCByZWZMaXN0LCByZWxhdGlvbnNoaXAsIHJlbGF0ZWRJdGVtSWQsIGl0ZW0gfSA9IHByb3BzO1xuXHRcdHByb3BzLmRpc3BhdGNoKHJlb3JkZXJJdGVtcyh7IGNvbHVtbnMsIHJlZkxpc3QsIHJlbGF0aW9uc2hpcCwgcmVsYXRlZEl0ZW1JZCwgaXRlbSwgcHJldlNvcnRPcmRlciwgbmV3U29ydE9yZGVyIH0pKTtcblx0fSxcbn07XG5cbi8qKlxuICogSW1wbGVtZW50cyBkcmFnIHRhcmdldC5cbiAqL1xuY29uc3QgZHJvcEl0ZW0gPSB7XG5cdGRyb3AgKHByb3BzLCBtb25pdG9yLCBjb21wb25lbnQpIHtcblx0XHRyZXR1cm4geyAuLi5wcm9wcyB9O1xuXHR9LFxuXHRob3ZlciAocHJvcHMsIG1vbml0b3IsIGNvbXBvbmVudCkge1xuXHRcdC8vIHJlc2V0IHJvdyBhbGVydHNcblx0XHQvLyBpZiAocHJvcHMucm93QWxlcnQuc3VjY2VzcyB8fCBwcm9wcy5yb3dBbGVydC5mYWlsKSB7XG5cdFx0Ly8gXHRwcm9wcy5kaXNwYXRjaChzZXRSb3dBbGVydCh7XG5cdFx0Ly8gXHRcdHJlc2V0OiB0cnVlLFxuXHRcdC8vIFx0fSkpO1xuXHRcdC8vIH1cblxuXHRcdGNvbnN0IGRyYWdnZWQgPSBtb25pdG9yLmdldEl0ZW0oKS5pbmRleDtcblx0XHRjb25zdCBvdmVyID0gcHJvcHMuaW5kZXg7XG5cblx0XHQvLyBzZWxmXG5cdFx0aWYgKGRyYWdnZWQgPT09IG92ZXIpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBTaW5jZSB0aGUgaXRlbXMgYXJlIG1vdmVkIG9uIGhvdmVyLCB3ZSBuZWVkIHRvIHN0b3JlIHRoZSBuZXcgc29ydCBvcmRlciBmcm9tIHRoZSBkcmFnZ2VkIG92ZXIgaXRlbSBzbyB3ZSBjYW4gdXNlIGl0IHRvIHJlb3JkZXIgd2hlbiB0aGUgaXRlbSBpcyBkcm9wcGVkLlxuXHRcdHByb3BzLmRpc3BhdGNoKG1vdmVJdGVtKHtcblx0XHRcdHByZXZJbmRleDogZHJhZ2dlZCxcblx0XHRcdG5ld0luZGV4OiBvdmVyLFxuXHRcdFx0cmVsYXRpb25zaGlwUGF0aDogcHJvcHMucmVsYXRpb25zaGlwLnBhdGgsXG5cdFx0XHRuZXdTb3J0T3JkZXI6IHByb3BzLml0ZW0uc29ydE9yZGVyLFxuXHRcdH0pKTtcblx0XHRtb25pdG9yLmdldEl0ZW0oKS5pbmRleCA9IG92ZXI7XG5cdH0sXG59O1xuXG4vKipcbiAqIFNwZWNpZmllcyB0aGUgcHJvcHMgdG8gaW5qZWN0IGludG8geW91ciBjb21wb25lbnQuXG4gKi9cbmZ1bmN0aW9uIGRyYWdQcm9wcyAoY29ubmVjdCwgbW9uaXRvcikge1xuXHRyZXR1cm4ge1xuXHRcdGNvbm5lY3REcmFnU291cmNlOiBjb25uZWN0LmRyYWdTb3VyY2UoKSxcblx0XHRpc0RyYWdnaW5nOiBtb25pdG9yLmlzRHJhZ2dpbmcoKSxcblx0XHRjb25uZWN0RHJhZ1ByZXZpZXc6IGNvbm5lY3QuZHJhZ1ByZXZpZXcoKSxcblx0fTtcbn1cblxuZnVuY3Rpb24gZHJvcFByb3BzIChjb25uZWN0KSB7XG5cdHJldHVybiB7XG5cdFx0Y29ubmVjdERyb3BUYXJnZXQ6IGNvbm5lY3QuZHJvcFRhcmdldCgpLFxuXHR9O1xufTtcblxuLy8gZXhwb3J0cy5Tb3J0YWJsZSA9IFJlbGF0ZWRJdGVtc0xpc3RSb3c7XG5leHBvcnRzLlNvcnRhYmxlID0gRHJhZ1NvdXJjZSgnaXRlbScsIGRyYWdJdGVtLCBkcmFnUHJvcHMpKERyb3BUYXJnZXQoJ2l0ZW0nLCBkcm9wSXRlbSwgZHJvcFByb3BzKShSZWxhdGVkSXRlbXNMaXN0Um93KSk7XG4iLCJpbXBvcnQgUmVhY3QsIHsgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmZ1bmN0aW9uIFRvb2xiYXJTZWN0aW9uICh7IGNsYXNzTmFtZSwgbGVmdCwgcmlnaHQsIC4uLnByb3BzIH0pIHtcblx0cHJvcHMuY2xhc3NOYW1lID0gY2xhc3NOYW1lcygnVG9vbGJhcl9fc2VjdGlvbicsIHtcblx0XHQnVG9vbGJhcl9fc2VjdGlvbi0tbGVmdCc6IGxlZnQsXG5cdFx0J1Rvb2xiYXJfX3NlY3Rpb24tLXJpZ2h0JzogcmlnaHQsXG5cdH0sIGNsYXNzTmFtZSk7XG5cblx0cmV0dXJuIDxkaXYgey4uLnByb3BzfSAvPjtcbn07XG5cblRvb2xiYXJTZWN0aW9uLnByb3BUeXBlcyA9IHtcblx0bGVmdDogUHJvcFR5cGVzLmJvb2wsXG5cdHJpZ2h0OiBQcm9wVHlwZXMuYm9vbCxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVG9vbGJhclNlY3Rpb247XG4iLCJpbXBvcnQgUmVhY3QsIHsgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xuXG5jb25zdCBUb29sYmFyID0gKHByb3BzKSA9PiA8ZGl2IHsuLi5wcm9wc30gY2xhc3NOYW1lPVwiVG9vbGJhclwiIC8+O1xuXG5Ub29sYmFyLmRpc3BsYXlOYW1lID0gJ1Rvb2xiYXInO1xuVG9vbGJhci5wcm9wVHlwZXMgPSB7XG5cdGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBUb29sYmFyO1xuIiwiZXhwb3J0IGNvbnN0IFNFTEVDVF9JVEVNID0gJ2FwcC9JdGVtL1NFTEVDVF9JVEVNJztcbmV4cG9ydCBjb25zdCBMT0FEX0RBVEEgPSAnYXBwL0l0ZW0vTE9BRF9EQVRBJztcbmV4cG9ydCBjb25zdCBEQVRBX0xPQURJTkdfU1VDQ0VTUyA9ICdhcHAvSXRlbS9EQVRBX0xPQURJTkdfU1VDQ0VTUyc7XG5leHBvcnQgY29uc3QgREFUQV9MT0FESU5HX0VSUk9SID0gJ2FwcC9JdGVtL0RBVEFfTE9BRElOR19FUlJPUic7XG5leHBvcnQgY29uc3QgRFJBR19NT1ZFX0lURU0gPSAnYXBwL0l0ZW0vRFJBR19NT1ZFX0lURU0nO1xuZXhwb3J0IGNvbnN0IERSQUdfUkVTRVRfSVRFTVMgPSAnYXBwL0l0ZW0vRFJBR19SRVNFVF9JVEVNUyc7XG5leHBvcnQgY29uc3QgTE9BRF9SRUxBVElPTlNISVBfREFUQSA9ICdhcHAvSXRlbS9MT0FEX1JFTEFUSU9OU0hJUF9EQVRBJztcbiIsIi8qKlxuICogSXRlbSBWaWV3XG4gKlxuICogVGhpcyBpcyB0aGUgaXRlbSB2aWV3LCBpdCBpcyByZW5kZXJlZCB3aGVuIHVzZXJzIHZpc2l0IGEgcGFnZSBvZiBhIHNwZWNpZmljXG4gKiBpdGVtLiBUaGlzIG1haW5seSByZW5kZXJzIHRoZSBmb3JtIHRvIGVkaXQgdGhlIGl0ZW0gY29udGVudCBpbi5cbiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ2VudGVyLCBDb250YWluZXIsIFNwaW5uZXIgfSBmcm9tICcuLi8uLi9lbGVtZW50YWwnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuXG5pbXBvcnQgeyBsaXN0c0J5S2V5IH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvbGlzdHMnO1xuaW1wb3J0IENyZWF0ZUZvcm0gZnJvbSAnLi4vLi4vc2hhcmVkL0NyZWF0ZUZvcm0nO1xuaW1wb3J0IEFsZXJ0IGZyb20gJy4uLy4uL2VsZW1lbnRhbC9BbGVydCc7XG5pbXBvcnQgRWRpdEZvcm0gZnJvbSAnLi9jb21wb25lbnRzL0VkaXRGb3JtJztcbmltcG9ydCBFZGl0Rm9ybUhlYWRlciBmcm9tICcuL2NvbXBvbmVudHMvRWRpdEZvcm1IZWFkZXInO1xuaW1wb3J0IFJlbGF0ZWRJdGVtc0xpc3QgZnJvbSAnLi9jb21wb25lbnRzL1JlbGF0ZWRJdGVtc0xpc3QvUmVsYXRlZEl0ZW1zTGlzdCc7XG4vLyBpbXBvcnQgRmxhc2hNZXNzYWdlcyBmcm9tICcuLi8uLi9zaGFyZWQvRmxhc2hNZXNzYWdlcyc7XG5cbmltcG9ydCB7XG5cdHNlbGVjdEl0ZW0sXG5cdGxvYWRJdGVtRGF0YSxcbn0gZnJvbSAnLi9hY3Rpb25zJztcblxuaW1wb3J0IHtcblx0c2VsZWN0TGlzdCxcbn0gZnJvbSAnLi4vTGlzdC9hY3Rpb25zJztcblxudmFyIEl0ZW1WaWV3ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuXHRkaXNwbGF5TmFtZTogJ0l0ZW1WaWV3Jyxcblx0Y29udGV4dFR5cGVzOiB7XG5cdFx0cm91dGVyOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cdH0sXG5cdGdldEluaXRpYWxTdGF0ZSAoKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGNyZWF0ZUlzT3BlbjogZmFsc2UsXG5cdFx0fTtcblx0fSxcblx0Y29tcG9uZW50RGlkTW91bnQgKCkge1xuXHRcdC8vIFdoZW4gd2UgZGlyZWN0bHkgbmF2aWdhdGUgdG8gYW4gaXRlbSB3aXRob3V0IGNvbWluZyBmcm9tIGFub3RoZXIgY2xpZW50XG5cdFx0Ly8gc2lkZSByb3V0ZWQgcGFnZSBiZWZvcmUsIHdlIG5lZWQgdG8gc2VsZWN0IHRoZSBsaXN0IGJlZm9yZSBpbml0aWFsaXppbmcgdGhlIGl0ZW1cblx0XHQvLyBXZSBhbHNvIG5lZWQgdG8gdXBkYXRlIHdoZW4gdGhlIGxpc3QgaWQgaGFzIGNoYW5nZWRcblx0XHRpZiAoIXRoaXMucHJvcHMuY3VycmVudExpc3QgfHwgdGhpcy5wcm9wcy5jdXJyZW50TGlzdC5pZCAhPT0gdGhpcy5wcm9wcy5wYXJhbXMubGlzdElkKSB7XG5cdFx0XHR0aGlzLnByb3BzLmRpc3BhdGNoKHNlbGVjdExpc3QodGhpcy5wcm9wcy5wYXJhbXMubGlzdElkKSk7XG5cdFx0fVxuXHRcdHRoaXMuaW5pdGlhbGl6ZUl0ZW0odGhpcy5wcm9wcy5wYXJhbXMuaXRlbUlkKTtcblx0fSxcblx0Y29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyAobmV4dFByb3BzKSB7XG5cdFx0Ly8gV2UndmUgb3BlbmVkIGEgbmV3IGl0ZW0gZnJvbSB0aGUgY2xpZW50IHNpZGUgcm91dGluZywgc28gaW5pdGlhbGl6ZVxuXHRcdC8vIGFnYWluIHdpdGggdGhlIG5ldyBpdGVtIGlkXG5cdFx0aWYgKG5leHRQcm9wcy5wYXJhbXMuaXRlbUlkICE9PSB0aGlzLnByb3BzLnBhcmFtcy5pdGVtSWQpIHtcblx0XHRcdHRoaXMucHJvcHMuZGlzcGF0Y2goc2VsZWN0TGlzdChuZXh0UHJvcHMucGFyYW1zLmxpc3RJZCkpO1xuXHRcdFx0dGhpcy5pbml0aWFsaXplSXRlbShuZXh0UHJvcHMucGFyYW1zLml0ZW1JZCk7XG5cdFx0fVxuXHR9LFxuXHQvLyBJbml0aWFsaXplIGFuIGl0ZW1cblx0aW5pdGlhbGl6ZUl0ZW0gKGl0ZW1JZCkge1xuXHRcdHRoaXMucHJvcHMuZGlzcGF0Y2goc2VsZWN0SXRlbShpdGVtSWQpKTtcblx0XHR0aGlzLnByb3BzLmRpc3BhdGNoKGxvYWRJdGVtRGF0YSgpKTtcblx0fSxcblx0Ly8gQ2FsbGVkIHdoZW4gYSBuZXcgaXRlbSBpcyBjcmVhdGVkXG5cdG9uQ3JlYXRlIChpdGVtKSB7XG5cdFx0Ly8gSGlkZSB0aGUgY3JlYXRlIGZvcm1cblx0XHR0aGlzLnRvZ2dsZUNyZWF0ZU1vZGFsKGZhbHNlKTtcblx0XHQvLyBSZWRpcmVjdCB0byBuZXdseSBjcmVhdGVkIGl0ZW0gcGF0aFxuXHRcdGNvbnN0IGxpc3QgPSB0aGlzLnByb3BzLmN1cnJlbnRMaXN0O1xuXHRcdHRoaXMuY29udGV4dC5yb3V0ZXIucHVzaChgJHtLZXlzdG9uZS5hZG1pblBhdGh9LyR7bGlzdC5wYXRofS8ke2l0ZW0uaWR9YCk7XG5cdH0sXG5cdC8vIE9wZW4gYW5kIGNsb3NlIHRoZSBjcmVhdGUgbmV3IGl0ZW0gbW9kYWxcblx0dG9nZ2xlQ3JlYXRlTW9kYWwgKHZpc2libGUpIHtcblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdGNyZWF0ZUlzT3BlbjogdmlzaWJsZSxcblx0XHR9KTtcblx0fSxcblx0Ly8gUmVuZGVyIHRoaXMgaXRlbXMgcmVsYXRpb25zaGlwc1xuXHRyZW5kZXJSZWxhdGlvbnNoaXBzICgpIHtcblx0XHRjb25zdCB7IHJlbGF0aW9uc2hpcHMgfSA9IHRoaXMucHJvcHMuY3VycmVudExpc3Q7XG5cdFx0Y29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHJlbGF0aW9uc2hpcHMpO1xuXHRcdGlmICgha2V5cy5sZW5ndGgpIHJldHVybjtcblx0XHRyZXR1cm4gKFxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJSZWxhdGlvbnNoaXBzXCI+XG5cdFx0XHRcdDxDb250YWluZXI+XG5cdFx0XHRcdFx0PGgyPlJlbGF0aW9uc2hpcHM8L2gyPlxuXHRcdFx0XHRcdHtrZXlzLm1hcChrZXkgPT4ge1xuXHRcdFx0XHRcdFx0Y29uc3QgcmVsYXRpb25zaGlwID0gcmVsYXRpb25zaGlwc1trZXldO1xuXHRcdFx0XHRcdFx0Y29uc3QgcmVmTGlzdCA9IGxpc3RzQnlLZXlbcmVsYXRpb25zaGlwLnJlZl07XG5cdFx0XHRcdFx0XHRjb25zdCB7IGN1cnJlbnRMaXN0LCBwYXJhbXMsIHJlbGF0aW9uc2hpcERhdGEsIGRyYWcgfSA9IHRoaXMucHJvcHM7XG5cdFx0XHRcdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHRcdFx0XHQ8UmVsYXRlZEl0ZW1zTGlzdFxuXHRcdFx0XHRcdFx0XHRcdGtleT17cmVsYXRpb25zaGlwLnBhdGh9XG5cdFx0XHRcdFx0XHRcdFx0bGlzdD17Y3VycmVudExpc3R9XG5cdFx0XHRcdFx0XHRcdFx0cmVmTGlzdD17cmVmTGlzdH1cblx0XHRcdFx0XHRcdFx0XHRyZWxhdGVkSXRlbUlkPXtwYXJhbXMuaXRlbUlkfVxuXHRcdFx0XHRcdFx0XHRcdHJlbGF0aW9uc2hpcD17cmVsYXRpb25zaGlwfVxuXHRcdFx0XHRcdFx0XHRcdGl0ZW1zPXtyZWxhdGlvbnNoaXBEYXRhW3JlbGF0aW9uc2hpcC5wYXRoXX1cblx0XHRcdFx0XHRcdFx0XHRkcmFnTmV3U29ydE9yZGVyPXtkcmFnLm5ld1NvcnRPcmRlcn1cblx0XHRcdFx0XHRcdFx0XHRkaXNwYXRjaD17dGhpcy5wcm9wcy5kaXNwYXRjaH1cblx0XHRcdFx0XHRcdFx0Lz5cblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSl9XG5cdFx0XHRcdDwvQ29udGFpbmVyPlxuXHRcdFx0PC9kaXY+XG5cdFx0KTtcblx0fSxcblx0Ly8gSGFuZGxlIGVycm9yc1xuXHRoYW5kbGVFcnJvciAoZXJyb3IpIHtcblx0XHRjb25zdCBkZXRhaWwgPSBlcnJvci5kZXRhaWw7XG5cdFx0aWYgKGRldGFpbCkge1xuXHRcdFx0Ly8gSXRlbSBub3QgZm91bmRcblx0XHRcdGlmIChkZXRhaWwubmFtZSA9PT0gJ0Nhc3RFcnJvcidcblx0XHRcdFx0JiYgZGV0YWlsLnBhdGggPT09ICdfaWQnKSB7XG5cdFx0XHRcdHJldHVybiAoXG5cdFx0XHRcdFx0PENvbnRhaW5lcj5cblx0XHRcdFx0XHRcdDxBbGVydCBjb2xvcj1cImRhbmdlclwiIHN0eWxlPXt7IG1hcmdpblRvcDogJzJlbScgfX0+XG5cdFx0XHRcdFx0XHRcdE5vIGl0ZW0gbWF0Y2hpbmcgaWQgXCJ7dGhpcy5wcm9wcy5yb3V0ZVBhcmFtcy5pdGVtSWR9XCIuJm5ic3A7XG5cdFx0XHRcdFx0XHRcdDxMaW5rIHRvPXtgJHtLZXlzdG9uZS5hZG1pblBhdGh9LyR7dGhpcy5wcm9wcy5yb3V0ZVBhcmFtcy5saXN0SWR9YH0+XG5cdFx0XHRcdFx0XHRcdFx0R28gYmFjayB0byB7dGhpcy5wcm9wcy5yb3V0ZVBhcmFtcy5saXN0SWR9P1xuXHRcdFx0XHRcdFx0XHQ8L0xpbms+XG5cdFx0XHRcdFx0XHQ8L0FsZXJ0PlxuXHRcdFx0XHRcdDwvQ29udGFpbmVyPlxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoZXJyb3IubWVzc2FnZSkge1xuXHRcdFx0Ly8gU2VydmVyIGRvd24gKyBwb3NzaWJseSBvdGhlciBlcnJvcnNcblx0XHRcdGlmIChlcnJvci5tZXNzYWdlID09PSAnSW50ZXJuYWwgWE1MSHR0cFJlcXVlc3QgRXJyb3InKSB7XG5cdFx0XHRcdHJldHVybiAoXG5cdFx0XHRcdFx0PENvbnRhaW5lcj5cblx0XHRcdFx0XHRcdDxBbGVydCBjb2xvcj1cImRhbmdlclwiIHN0eWxlPXt7IG1hcmdpblRvcDogJzJlbScgfX0+XG5cdFx0XHRcdFx0XHRcdFdlIGVuY291bnRlcmVkIHNvbWUgbmV0d29yayBwcm9ibGVtcywgcGxlYXNlIHJlZnJlc2guXG5cdFx0XHRcdFx0XHQ8L0FsZXJ0PlxuXHRcdFx0XHRcdDwvQ29udGFpbmVyPlxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gKFxuXHRcdFx0PENvbnRhaW5lcj5cblx0XHRcdFx0PEFsZXJ0IGNvbG9yPVwiZGFuZ2VyXCIgc3R5bGU9e3sgbWFyZ2luVG9wOiAnMmVtJyB9fT5cblx0XHRcdFx0XHRBbiB1bmtub3duIGVycm9yIGhhcyBvY3VycmVkLCBwbGVhc2UgcmVmcmVzaC5cblx0XHRcdFx0PC9BbGVydD5cblx0XHRcdDwvQ29udGFpbmVyPlxuXHRcdCk7XG5cdH0sXG5cdHJlbmRlciAoKSB7XG5cdFx0Ly8gSWYgd2UgZG9uJ3QgaGF2ZSBhbnkgZGF0YSB5ZXQsIHNob3cgdGhlIGxvYWRpbmcgaW5kaWNhdG9yXG5cdFx0aWYgKCF0aGlzLnByb3BzLnJlYWR5KSB7XG5cdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHQ8Q2VudGVyIGhlaWdodD1cIjUwdmhcIiBkYXRhLXNjcmVlbi1pZD1cIml0ZW1cIj5cblx0XHRcdFx0XHQ8U3Bpbm5lciAvPlxuXHRcdFx0XHQ8L0NlbnRlcj5cblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiB3ZSBoYXZlIHRoZSBkYXRhLCByZW5kZXIgdGhlIGl0ZW0gdmlldyB3aXRoIGl0XG5cdFx0cmV0dXJuIChcblx0XHRcdDxkaXYgZGF0YS1zY3JlZW4taWQ9XCJpdGVtXCI+XG5cdFx0XHRcdHsodGhpcy5wcm9wcy5lcnJvcikgPyB0aGlzLmhhbmRsZUVycm9yKHRoaXMucHJvcHMuZXJyb3IpIDogKFxuXHRcdFx0XHRcdDxkaXY+XG5cdFx0XHRcdFx0XHQ8Q29udGFpbmVyPlxuXHRcdFx0XHRcdFx0XHQ8RWRpdEZvcm1IZWFkZXJcblx0XHRcdFx0XHRcdFx0XHRsaXN0PXt0aGlzLnByb3BzLmN1cnJlbnRMaXN0fVxuXHRcdFx0XHRcdFx0XHRcdGRhdGE9e3RoaXMucHJvcHMuZGF0YX1cblx0XHRcdFx0XHRcdFx0XHR0b2dnbGVDcmVhdGU9e3RoaXMudG9nZ2xlQ3JlYXRlTW9kYWx9XG5cdFx0XHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0XHRcdDxDcmVhdGVGb3JtXG5cdFx0XHRcdFx0XHRcdFx0bGlzdD17dGhpcy5wcm9wcy5jdXJyZW50TGlzdH1cblx0XHRcdFx0XHRcdFx0XHRpc09wZW49e3RoaXMuc3RhdGUuY3JlYXRlSXNPcGVufVxuXHRcdFx0XHRcdFx0XHRcdG9uQ2FuY2VsPXsoKSA9PiB0aGlzLnRvZ2dsZUNyZWF0ZU1vZGFsKGZhbHNlKX1cblx0XHRcdFx0XHRcdFx0XHRvbkNyZWF0ZT17KGl0ZW0pID0+IHRoaXMub25DcmVhdGUoaXRlbSl9XG5cdFx0XHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0XHRcdDxFZGl0Rm9ybVxuXHRcdFx0XHRcdFx0XHRcdGxpc3Q9e3RoaXMucHJvcHMuY3VycmVudExpc3R9XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YT17dGhpcy5wcm9wcy5kYXRhfVxuXHRcdFx0XHRcdFx0XHRcdGRpc3BhdGNoPXt0aGlzLnByb3BzLmRpc3BhdGNofVxuXHRcdFx0XHRcdFx0XHRcdHJvdXRlcj17dGhpcy5jb250ZXh0LnJvdXRlcn1cblx0XHRcdFx0XHRcdFx0Lz5cblx0XHRcdFx0XHRcdDwvQ29udGFpbmVyPlxuXHRcdFx0XHRcdFx0e3RoaXMucmVuZGVyUmVsYXRpb25zaGlwcygpfVxuXHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQpfVxuXHRcdFx0PC9kaXY+XG5cdFx0KTtcblx0fSxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbm5lY3QoKHN0YXRlKSA9PiAoe1xuXHRkYXRhOiBzdGF0ZS5pdGVtLmRhdGEsXG5cdGxvYWRpbmc6IHN0YXRlLml0ZW0ubG9hZGluZyxcblx0cmVhZHk6IHN0YXRlLml0ZW0ucmVhZHksXG5cdGVycm9yOiBzdGF0ZS5pdGVtLmVycm9yLFxuXHRjdXJyZW50TGlzdDogc3RhdGUubGlzdHMuY3VycmVudExpc3QsXG5cdHJlbGF0aW9uc2hpcERhdGE6IHN0YXRlLml0ZW0ucmVsYXRpb25zaGlwRGF0YSxcblx0ZHJhZzogc3RhdGUuaXRlbS5kcmFnLFxufSkpKEl0ZW1WaWV3KTtcbiIsIi8qKlxuICogSXRlbSByZWR1Y2VyLCBoYW5kbGVzIHRoZSBpdGVtIGRhdGEgYW5kIGxvYWRpbmdcbiAqL1xuaW1wb3J0IGFzc2lnbiBmcm9tICdvYmplY3QtYXNzaWduJztcbmltcG9ydCB7XG5cdFNFTEVDVF9JVEVNLFxuXHRMT0FEX0RBVEEsXG5cdERBVEFfTE9BRElOR19TVUNDRVNTLFxuXHREQVRBX0xPQURJTkdfRVJST1IsXG5cdERSQUdfTU9WRV9JVEVNLFxuXHREUkFHX1JFU0VUX0lURU1TLFxuXHRMT0FEX1JFTEFUSU9OU0hJUF9EQVRBLFxufSBmcm9tICcuL2NvbnN0YW50cyc7XG5cbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcblx0ZGF0YTogbnVsbCxcblx0aWQ6IG51bGwsXG5cdGxvYWRpbmc6IGZhbHNlLFxuXHRyZWFkeTogZmFsc2UsXG5cdGVycm9yOiBudWxsLFxuXHRyZWxhdGlvbnNoaXBEYXRhOiB7fSxcblx0ZHJhZzoge1xuXHRcdGNsb25lZEl0ZW1zOiBmYWxzZSxcblx0XHRuZXdTb3J0T3JkZXI6IG51bGwsXG5cdFx0cmVsYXRpb25zaGlwUGF0aDogZmFsc2UsXG5cdH0sXG59O1xuXG5mdW5jdGlvbiBpdGVtIChzdGF0ZSA9IGluaXRpYWxTdGF0ZSwgYWN0aW9uKSB7XG5cdHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcblx0XHRjYXNlIFNFTEVDVF9JVEVNOlxuXHRcdFx0cmV0dXJuIGFzc2lnbih7fSwgc3RhdGUsIHtcblx0XHRcdFx0cmVhZHk6IGZhbHNlLFxuXHRcdFx0XHRpZDogYWN0aW9uLmlkLFxuXHRcdFx0XHRkYXRhOiBudWxsLFxuXHRcdFx0fSk7XG5cdFx0Y2FzZSBMT0FEX0RBVEE6XG5cdFx0XHRyZXR1cm4gYXNzaWduKHt9LCBzdGF0ZSwge1xuXHRcdFx0XHRsb2FkaW5nOiB0cnVlLFxuXHRcdFx0fSk7XG5cdFx0Y2FzZSBEQVRBX0xPQURJTkdfU1VDQ0VTUzpcblx0XHRcdEtleXN0b25lLml0ZW0gPSBhY3Rpb24uZGF0YTsgLy8gRml4IGtleXN0b25lIGZpbHRlclxuXHRcdFx0cmV0dXJuIGFzc2lnbih7fSwgc3RhdGUsIHtcblx0XHRcdFx0ZGF0YTogYWN0aW9uLmRhdGEsXG5cdFx0XHRcdGxvYWRpbmc6IGZhbHNlLFxuXHRcdFx0XHRyZWFkeTogdHJ1ZSxcblx0XHRcdFx0ZXJyb3I6IG51bGwsXG5cdFx0XHR9KTtcblx0XHRjYXNlIERBVEFfTE9BRElOR19FUlJPUjpcblx0XHRcdHJldHVybiBhc3NpZ24oe30sIHN0YXRlLCB7XG5cdFx0XHRcdGRhdGE6IG51bGwsXG5cdFx0XHRcdGxvYWRpbmc6IGZhbHNlLFxuXHRcdFx0XHRyZWFkeTogdHJ1ZSxcblx0XHRcdFx0ZXJyb3I6IGFjdGlvbi5lcnJvcixcblx0XHRcdH0pO1xuXHRcdGNhc2UgRFJBR19NT1ZFX0lURU06XG5cdFx0XHRjb25zdCBjdXJyZW50SXRlbXMgPSBzdGF0ZS5yZWxhdGlvbnNoaXBEYXRhW2FjdGlvbi5yZWxhdGlvbnNoaXBQYXRoXS5yZXN1bHRzO1xuXHRcdFx0Ly8gQ2FjaGUgYSBjb3B5IG9mIHRoZSBjdXJyZW50IGl0ZW1zIHRvIHJlc2V0IHRoZSBpdGVtcyB3aGVuIGRpc21pc3NpbmcgYSBkcmFnIGFuZCBkcm9wIGlmIGEgY2FjaGVkIGNvcHkgZG9lc24ndCBhbHJlYWR5IGV4aXN0XG5cdFx0XHRjb25zdCBjbG9uZWRJdGVtcyA9IHN0YXRlLmRyYWcuY2xvbmVkSXRlbXMgfHwgY3VycmVudEl0ZW1zO1xuXHRcdFx0Y29uc3QgaXRlbSA9IGN1cnJlbnRJdGVtc1thY3Rpb24ucHJldkluZGV4XTtcblx0XHRcdC8vIFJlbW92ZSBpdGVtIGF0IHByZXZJbmRleCBmcm9tIGFycmF5IGFuZCBzYXZlIHRoYXQgYXJyYXkgaW5cblx0XHRcdC8vIGl0ZW1zV2l0aG91dEl0ZW1cblx0XHRcdGxldCBpdGVtc1dpdGhvdXRJdGVtID0gY3VycmVudEl0ZW1zXG5cdFx0XHRcdC5zbGljZSgwLCBhY3Rpb24ucHJldkluZGV4KVxuXHRcdFx0XHQuY29uY2F0KFxuXHRcdFx0XHRcdGN1cnJlbnRJdGVtcy5zbGljZShcblx0XHRcdFx0XHRcdGFjdGlvbi5wcmV2SW5kZXggKyAxLFxuXHRcdFx0XHRcdFx0Y3VycmVudEl0ZW1zLmxlbmd0aFxuXHRcdFx0XHRcdClcblx0XHRcdFx0KTtcblx0XHRcdC8vIEFkZCBpdGVtIGJhY2sgaW4gYXQgbmV3IGluZGV4XG5cdFx0XHRpdGVtc1dpdGhvdXRJdGVtLnNwbGljZShhY3Rpb24ubmV3SW5kZXgsIDAsIGl0ZW0pO1xuXHRcdFx0Y29uc3QgbmV3UmVsYXRpb25zaGlwRGF0YSA9IGFzc2lnbih7fSwgc3RhdGUucmVsYXRpb25zaGlwRGF0YVthY3Rpb24ucmVsYXRpb25zaGlwUGF0aF0sIHtcblx0XHRcdFx0cmVzdWx0czogaXRlbXNXaXRob3V0SXRlbSxcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIGFzc2lnbih7fSwgc3RhdGUsIHtcblx0XHRcdFx0ZHJhZzoge1xuXHRcdFx0XHRcdG5ld1NvcnRPcmRlcjogYWN0aW9uLm5ld1NvcnRPcmRlcixcblx0XHRcdFx0XHRjbG9uZWRJdGVtczogY2xvbmVkSXRlbXMsXG5cdFx0XHRcdFx0cmVsYXRpb25zaGlwUGF0aDogYWN0aW9uLnJlbGF0aW9uc2hpcFBhdGgsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHJlbGF0aW9uc2hpcERhdGE6IHtcblx0XHRcdFx0XHQuLi5zdGF0ZS5yZWxhdGlvbnNoaXBEYXRhLFxuXHRcdFx0XHRcdFthY3Rpb24ucmVsYXRpb25zaGlwUGF0aF06IG5ld1JlbGF0aW9uc2hpcERhdGEsXG5cdFx0XHRcdH0sXG5cdFx0XHR9KTtcblx0XHRjYXNlIERSQUdfUkVTRVRfSVRFTVM6XG5cdFx0XHRjb25zdCBvcmlnaW5hbFJlbGF0aW9uc2hpcERhdGEgPSBhc3NpZ24oe30sIHN0YXRlLnJlbGF0aW9uc2hpcERhdGFbc3RhdGUuZHJhZy5yZWxhdGlvbnNoaXBQYXRoXSwge1xuXHRcdFx0XHRyZXN1bHRzOiBzdGF0ZS5kcmFnLmNsb25lZEl0ZW1zLFxuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gYXNzaWduKHt9LCBzdGF0ZSwge1xuXHRcdFx0XHRkcmFnOiB7XG5cdFx0XHRcdFx0bmV3U29ydE9yZGVyOiBudWxsLFxuXHRcdFx0XHRcdGNsb25lZEl0ZW1zOiBmYWxzZSxcblx0XHRcdFx0XHRyZWxhdGlvbnNoaXBQYXRoOiBmYWxzZSxcblx0XHRcdFx0fSxcblx0XHRcdFx0cmVsYXRpb25zaGlwRGF0YToge1xuXHRcdFx0XHRcdC4uLnN0YXRlLnJlbGF0aW9uc2hpcERhdGEsXG5cdFx0XHRcdFx0W3N0YXRlLmRyYWcucmVsYXRpb25zaGlwUGF0aF06IG9yaWdpbmFsUmVsYXRpb25zaGlwRGF0YSxcblx0XHRcdFx0fSxcblx0XHRcdH0pO1xuXHRcdGNhc2UgTE9BRF9SRUxBVElPTlNISVBfREFUQTpcblx0XHRcdHJldHVybiBhc3NpZ24oe30sIHN0YXRlLCB7XG5cdFx0XHRcdC8vIFJlc2V0IGRyYWcgYW5kIGRyb3Agd2hlbiByZWxhdGlvbnNoaXAgZGF0YSBpcyBsb2FkZWRcblx0XHRcdFx0ZHJhZzoge1xuXHRcdFx0XHRcdG5ld1NvcnRPcmRlcjogbnVsbCxcblx0XHRcdFx0XHRjbG9uZWRJdGVtczogZmFsc2UsXG5cdFx0XHRcdFx0cmVsYXRpb25zaGlwUGF0aDogZmFsc2UsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHJlbGF0aW9uc2hpcERhdGE6IHtcblx0XHRcdFx0XHQuLi5zdGF0ZS5yZWxhdGlvbnNoaXBEYXRhLFxuXHRcdFx0XHRcdFthY3Rpb24ucmVsYXRpb25zaGlwUGF0aF06IGFjdGlvbi5kYXRhLFxuXHRcdFx0XHR9LFxuXHRcdFx0fSk7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHJldHVybiBzdGF0ZTtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBpdGVtO1xuIiwiaW1wb3J0IHtcblx0Q0xFQVJfRklMVEVSLFxuXHRDTEVBUl9BTExfRklMVEVSUyxcblx0Q0xFQVJfQ0FDSEVEX1FVRVJZLFxuXHRTRVRfQUNUSVZFX1NFQVJDSCxcblx0U0VMRUNUX0FDVElWRV9TT1JULFxuXHRTRUxFQ1RfQUNUSVZFX0NPTFVNTlMsXG5cdFNFVF9BQ1RJVkVfTElTVCxcblx0U0VMRUNUX0ZJTFRFUixcbn0gZnJvbSAnLi4vY29uc3RhbnRzJztcblxuXG4vKipcbiAqIEFjdGl2ZSBhY3Rpb25zXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNldEFjdGl2ZVNlYXJjaCAoc2VhcmNoU3RyaW5nKSB7XG5cdHJldHVybiB7XG5cdFx0dHlwZTogU0VUX0FDVElWRV9TRUFSQ0gsXG5cdFx0c2VhcmNoU3RyaW5nLFxuXHR9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0QWN0aXZlU29ydCAocGF0aCkge1xuXHRyZXR1cm4ge1xuXHRcdHR5cGU6IFNFTEVDVF9BQ1RJVkVfU09SVCxcblx0XHRwYXRoLFxuXHR9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0QWN0aXZlQ29sdW1ucyAoY29sdW1ucykge1xuXHRyZXR1cm4ge1xuXHRcdHR5cGU6IFNFTEVDVF9BQ1RJVkVfQ09MVU1OUyxcblx0XHRjb2x1bW5zLFxuXHR9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0QWN0aXZlTGlzdCAobGlzdCwgaWQpIHtcblx0cmV0dXJuIHtcblx0XHR0eXBlOiBTRVRfQUNUSVZFX0xJU1QsXG5cdFx0bGlzdCxcblx0XHRpZCxcblx0fTtcbn1cblxuLyoqXG4gKiBGaWx0ZXJpbmcgYWN0aW9uc1xuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhckZpbHRlciAocGF0aCkge1xuXHRyZXR1cm4ge1xuXHRcdHR5cGU6IENMRUFSX0ZJTFRFUixcblx0XHRwYXRoLFxuXHR9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJBbGxGaWx0ZXJzICgpIHtcblx0cmV0dXJuIHtcblx0XHR0eXBlOiBDTEVBUl9BTExfRklMVEVSUyxcblx0fTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldEZpbHRlciAocGF0aCwgdmFsdWUpIHtcblx0cmV0dXJuIHtcblx0XHR0eXBlOiBTRUxFQ1RfRklMVEVSLFxuXHRcdGZpbHRlcjogeyBwYXRoLCB2YWx1ZSB9LFxuXHR9O1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhckNhY2hlZFF1ZXJ5ICgpIHtcblx0cmV0dXJuIHtcblx0XHR0eXBlOiBDTEVBUl9DQUNIRURfUVVFUlksXG5cdH07XG59XG4iLCJpbXBvcnQge1xuXHRTRVRfUk9XX0FMRVJULFxuXHRSRVNFVF9EUkFHX1BBR0UsXG5cdFJFU0VUX0RSQUdfSVRFTVMsXG5cdFNFVF9EUkFHX0lURU0sXG5cdFNFVF9EUkFHX0lOREVYLFxuXHREUkFHX01PVkVfSVRFTSxcbn0gZnJvbSAnLi4vY29uc3RhbnRzJztcblxuaW1wb3J0IHtcblx0c2V0Q3VycmVudFBhZ2UsXG5cdGl0ZW1zTG9hZGVkLFxuXHRsb2FkSXRlbXMsXG59IGZyb20gJy4uL2FjdGlvbnMnO1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0RHJhZ0Jhc2UgKGl0ZW0sIGluZGV4KSB7XG5cdHJldHVybiAoZGlzcGF0Y2gpID0+IHtcblx0XHRkaXNwYXRjaChyZXNldERyYWdQYWdlKCkpO1xuXHRcdGRpc3BhdGNoKHJlc2V0RHJhZ0l0ZW1zKCkpO1xuXHRcdGlmIChpdGVtKSB7XG5cdFx0XHRkaXNwYXRjaChzZXREcmFnSXRlbShpdGVtKSk7XG5cdFx0XHRpZiAoaW5kZXgpIHtcblx0XHRcdFx0ZGlzcGF0Y2goc2V0RHJhZ0luZGV4KGluZGV4KSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0RHJhZ1BhZ2UgKCkge1xuXHRyZXR1cm4ge1xuXHRcdHR5cGU6IFJFU0VUX0RSQUdfUEFHRSxcblx0fTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0RHJhZ0l0ZW1zICgpIHtcblx0cmV0dXJuIHtcblx0XHR0eXBlOiBSRVNFVF9EUkFHX0lURU1TLFxuXHR9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0RHJhZ0l0ZW0gKGl0ZW0pIHtcblx0cmV0dXJuIHtcblx0XHR0eXBlOiBTRVRfRFJBR19JVEVNLFxuXHRcdGl0ZW0sXG5cdH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXREcmFnSW5kZXggKGluZGV4KSB7XG5cdHJldHVybiB7XG5cdFx0dHlwZTogU0VUX0RSQUdfSU5ERVgsXG5cdFx0aW5kZXgsXG5cdH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRSb3dBbGVydCAoZGF0YSkge1xuXHRyZXR1cm4ge1xuXHRcdHR5cGU6IFNFVF9ST1dfQUxFUlQsXG5cdFx0ZGF0YSxcblx0fTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vdmVJdGVtIChwcmV2SW5kZXgsIG5ld0luZGV4LCBvcHRpb25zKSB7XG5cdHJldHVybiB7XG5cdFx0dHlwZTogRFJBR19NT1ZFX0lURU0sXG5cdFx0cHJldkluZGV4LFxuXHRcdG5ld0luZGV4LFxuXHRcdG9wdGlvbnMsXG5cdH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW9yZGVySXRlbXMgKGl0ZW0sIHByZXZTb3J0T3JkZXIsIG5ld1NvcnRPcmRlciwgZ29Ub1BhZ2UpIHtcblx0Ly8gLy8gcmVzZXQgZHJhZ1xuXHQvLyBkZWZhdWx0RHJhZygpO1xuXHRyZXR1cm4gKGRpc3BhdGNoLCBnZXRTdGF0ZSkgPT4ge1xuXHRcdGlmIChnb1RvUGFnZSkge1xuXHRcdFx0Ly8gVE9ETyBGSUdVUkUgT1VUIElGIFRISVMgSVMgQSBSQUNFIENPTkRJVElPTlxuXHRcdFx0ZGlzcGF0Y2goc2V0Q3VycmVudFBhZ2UoZ29Ub1BhZ2UpKTtcblx0XHR9XG5cdFx0Y29uc3Qgc3RhdGUgPSBnZXRTdGF0ZSgpO1xuXHRcdGNvbnN0IGxpc3QgPSBzdGF0ZS5saXN0cy5jdXJyZW50TGlzdDtcblxuXHRcdC8vIFNlbmQgdGhlIGl0ZW0sIHByZXZpb3VzIHNvcnRPcmRlciBhbmQgdGhlIG5ldyBzb3J0T3JkZXJcblx0XHQvLyB3ZSBzaG91bGQgZ2V0IHRoZSBwcm9wZXIgbGlzdCBhbmQgbmV3IHBhZ2UgcmVzdWx0cyBpbiByZXR1cm5cblx0XHRsaXN0LnJlb3JkZXJJdGVtcyhcblx0XHRcdGl0ZW0sXG5cdFx0XHRwcmV2U29ydE9yZGVyLFxuXHRcdFx0bmV3U29ydE9yZGVyLFxuXHRcdFx0e1xuXHRcdFx0XHRzZWFyY2g6IHN0YXRlLmFjdGl2ZS5zZWFyY2gsXG5cdFx0XHRcdGZpbHRlcnM6IHN0YXRlLmFjdGl2ZS5maWx0ZXJzLFxuXHRcdFx0XHRzb3J0OiBzdGF0ZS5hY3RpdmUuc29ydCxcblx0XHRcdFx0Y29sdW1uczogc3RhdGUuYWN0aXZlLmNvbHVtbnMsXG5cdFx0XHRcdHBhZ2U6IHN0YXRlLmxpc3RzLnBhZ2UsXG5cdFx0XHR9LCAoZXJyLCBpdGVtcykgPT4ge1xuXHRcdFx0XHQvLyBJZiBlcnIsIGZsYXNoIHRoZSByb3cgYWxlcnRcblx0XHRcdFx0aWYgKGVycikge1xuXHRcdFx0XHRcdGRpc3BhdGNoKHJlc2V0SXRlbXMoaXRlbS5pZCkpO1xuXHRcdFx0XHRcdC8vIHJldHVybiB0aGlzLnJlc2V0SXRlbXModGhpcy5maW5kSXRlbUJ5SWRbaXRlbS5pZF0pO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRpc3BhdGNoKGl0ZW1zTG9hZGVkKGl0ZW1zKSk7XG5cdFx0XHRcdFx0ZGlzcGF0Y2goc2V0Um93QWxlcnQoe1xuXHRcdFx0XHRcdFx0c3VjY2VzczogaXRlbS5pZCxcblx0XHRcdFx0XHRcdGZhaWw6IGZhbHNlLFxuXHRcdFx0XHRcdH0pKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdCk7XG5cdH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXNldEl0ZW1zIChpdGVtSWQpIHtcblx0cmV0dXJuIChkaXNwYXRjaCwgZ2V0U3RhdGUpID0+IHtcblx0XHRjb25zdCBzdGF0ZSA9IGdldFN0YXRlKCk7XG5cdFx0Y29uc3QgeyBwYWdlLCBkcmFnIH0gPSBzdGF0ZS5saXN0cztcblxuXHRcdGlmIChwYWdlLmluZGV4ICE9PSBkcmFnLnBhZ2UpIHtcblx0XHRcdC8vIFdlIGFyZSBub3Qgb24gdGhlIG9yaWdpbmFsIHBhZ2Ugc28gd2UgbmVlZCB0byBtb3ZlIGJhY2sgdG8gaXRcblx0XHRcdGRpc3BhdGNoKHNldEN1cnJlbnRQYWdlKGRyYWcucGFnZSkpO1xuXHRcdFx0ZGlzcGF0Y2gobG9hZEl0ZW1zKHtcblx0XHRcdFx0ZmFpbDogdHJ1ZSxcblx0XHRcdFx0aWQ6IGl0ZW1JZCxcblx0XHRcdH0pKTtcblx0XHRcdC8vIHJlc2V0IGRyYWdcblx0XHRcdC8vIHJldHVybiBkZWZhdWx0RHJhZygpO1xuXHRcdH1cblxuXHRcdC8vIFJlc2V0IHRoZSBsaXN0IGlmIGRyYWdvdXQgb3IgZXJyb3Jcblx0XHRkaXNwYXRjaChzZXRSb3dBbGVydCh7XG5cdFx0XHRzdWNjZXNzOiBmYWxzZSxcblx0XHRcdGZhaWw6IGl0ZW1JZCxcblx0XHR9KSk7XG5cdFx0Ly8gd2UgdXNlIHRoZSBjYWNoZWQgY2xvbmUgc2luY2UgdGhpcyBpcyB0aGUgc2FtZSBwYWdlXG5cdFx0Ly8gdGhlIGNsb25lIGNvbnRhaW5zIHRoZSBwcm9wZXIgaW5kZXggbnVtYmVycyB3aGljaCBnZXQgb3ZlcndyaXR0ZW4gb24gZHJhZ1xuXHRcdC8vIF9pdGVtcy5yZXN1bHRzID0gZHJhZy5jbG9uZWRJdGVtcztcblx0XHQvLyBkZWZhdWx0RHJhZygpO1xuXHRcdC8vIHRoaXMubm90aWZ5Q2hhbmdlKCk7XG5cdH07XG59XG4iLCJpbXBvcnQge1xuXHRTRUxFQ1RfTElTVCxcblx0U0VUX0NVUlJFTlRfUEFHRSxcblx0SU5JVElBTF9MSVNUX0xPQUQsXG59IGZyb20gJy4uL2NvbnN0YW50cyc7XG5cbmltcG9ydCB7IHNldEFjdGl2ZUxpc3QgfSBmcm9tICcuL2FjdGl2ZSc7XG5cbi8qKlxuICogU2VsZWN0IGEgbGlzdCwgYW5kIHNldCBpdCBhcyB0aGUgYWN0aXZlIGxpc3QuIENhbGxlZCB3aGVuZXZlciB0aGUgbWFpblxuICogTGlzdCBjb21wb25lbnQgbW91bnRzIG9yIHRoZSBsaXN0IGNoYW5nZXMuXG4gKlxuICogQHBhcmFtICB7U3RyaW5nfSBpZCBUaGUgbGlzdCBJRCwgcGFzc2VkIHZpYSB0aGlzLnByb3BzLnBhcmFtcy5saXN0SWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdExpc3QgKGlkKSB7XG5cdHJldHVybiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiB7XG5cdFx0ZGlzcGF0Y2goe1xuXHRcdFx0dHlwZTogU0VMRUNUX0xJU1QsXG5cdFx0XHRpZCxcblx0XHR9KTtcblx0XHRkaXNwYXRjaChzZXRBY3RpdmVMaXN0KGdldFN0YXRlKCkubGlzdHMuZGF0YVtpZF0sIGlkKSk7XG5cdH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2FkSW5pdGlhbEl0ZW1zICgpIHtcblx0cmV0dXJuIHtcblx0XHR0eXBlOiBJTklUSUFMX0xJU1RfTE9BRCxcblx0fTtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIGN1cnJlbnQgcGFnZVxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpbmRleCBUaGUgcGFnZSBudW1iZXIgd2Ugd2FudCB0byBiZSBvblxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0Q3VycmVudFBhZ2UgKGluZGV4KSB7XG5cdHJldHVybiB7XG5cdFx0dHlwZTogU0VUX0NVUlJFTlRfUEFHRSxcblx0XHRpbmRleDogcGFyc2VJbnQoaW5kZXgpLFxuXHR9O1xufVxuXG4vLyBFeHBvcnQgYWxsIGFjdGlvbnMgZnJvbSBoZXJlIGFnYWluIGZvciBlYXNpZXIgdXNhYmlsaXR5LCB0aGF0IHRoZXkncmUgc3BsaXQgdXBcbi8vIHNob3VsZCBiZSBhbiBpbXBsZW1lbnRhdGlvbiBkZXRhaWwgb2YgTGlzdFxuXG5pbXBvcnQge1xuXHRzZXRGaWx0ZXIsXG5cdGNsZWFyRmlsdGVyLFxuXHRjbGVhckFsbEZpbHRlcnMsXG5cdHNldEFjdGl2ZUZpbHRlcnMsXG5cdHNldEFjdGl2ZVNlYXJjaCxcblx0c2V0QWN0aXZlQ29sdW1ucyxcblx0Y2xlYXJDYWNoZWRRdWVyeSxcblx0c2V0QWN0aXZlU29ydCxcbn0gZnJvbSAnLi9hY3RpdmUnO1xuXG5pbXBvcnQge1xuXHRsb2FkSXRlbXMsXG5cdGl0ZW1zTG9hZGVkLFxuXHRpdGVtTG9hZGluZ0Vycm9yLFxuXHRkZWxldGVJdGVtcyxcblx0ZG93bmxvYWRJdGVtcyxcbn0gZnJvbSAnLi9pdGVtcyc7XG5cbmltcG9ydCB7XG5cdHNldERyYWdCYXNlLFxuXHRyZXNldEl0ZW1zLFxuXHRyZW9yZGVySXRlbXMsXG5cdHNldFJvd0FsZXJ0LFxuXHRtb3ZlSXRlbSxcbn0gZnJvbSAnLi9kcmFnZHJvcCc7XG5cbmV4cG9ydCB7XG5cdHNldEZpbHRlcixcblx0Y2xlYXJGaWx0ZXIsXG5cdGNsZWFyQWxsRmlsdGVycyxcblx0c2V0QWN0aXZlRmlsdGVycyxcblx0c2V0QWN0aXZlU2VhcmNoLFxuXHRzZXRBY3RpdmVDb2x1bW5zLFxuXHRzZXRBY3RpdmVTb3J0LFxuXHRjbGVhckNhY2hlZFF1ZXJ5LFxuXHRsb2FkSXRlbXMsXG5cdGl0ZW1zTG9hZGVkLFxuXHRpdGVtTG9hZGluZ0Vycm9yLFxuXHRkZWxldGVJdGVtcyxcblx0c2V0RHJhZ0Jhc2UsXG5cdHJlc2V0SXRlbXMsXG5cdHJlb3JkZXJJdGVtcyxcblx0c2V0Um93QWxlcnQsXG5cdG1vdmVJdGVtLFxuXHRkb3dubG9hZEl0ZW1zLFxufTtcbiIsImltcG9ydCB7XG5cdExPQURfSVRFTVMsXG5cdElURU1TX0xPQURFRCxcblx0SVRFTV9MT0FESU5HX0VSUk9SLFxufSBmcm9tICcuLi9jb25zdGFudHMnO1xuXG5pbXBvcnQgeyBORVRXT1JLX0VSUk9SX1JFVFJZX0RFTEFZIH0gZnJvbSAnLi4vLi4vLi4vLi4vY29uc3RhbnRzJztcbmV4cG9ydCBmdW5jdGlvbiBsb2FkSXRlbXMgKG9wdGlvbnMgPSB7fSkge1xuXHRyZXR1cm4gKGRpc3BhdGNoLCBnZXRTdGF0ZSkgPT4ge1xuXHRcdGxldCBjdXJyZW50TG9hZENvdW50ZXIgPSBnZXRTdGF0ZSgpLmxpc3RzLmxvYWRDb3VudGVyICsgMTtcblxuXHRcdGRpc3BhdGNoKHtcblx0XHRcdHR5cGU6IExPQURfSVRFTVMsXG5cdFx0XHRsb2FkQ291bnRlcjogY3VycmVudExvYWRDb3VudGVyLFxuXHRcdH0pO1xuXG5cdFx0Ly8gVGFrZSBhIHNuYXBzaG90IG9mIHRoZSBjdXJyZW50IHJlZHV4IHN0YXRlLlxuXHRcdGNvbnN0IHN0YXRlID0gZ2V0U3RhdGUoKTtcblx0XHQvLyBIb2xkIGEgcmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50TGlzdCBpbiBzdGF0ZS5cblx0XHRjb25zdCBjdXJyZW50TGlzdCA9IHN0YXRlLmxpc3RzLmN1cnJlbnRMaXN0O1xuXG5cdFx0Y3VycmVudExpc3QubG9hZEl0ZW1zKHtcblx0XHRcdHNlYXJjaDogc3RhdGUuYWN0aXZlLnNlYXJjaCxcblx0XHRcdGZpbHRlcnM6IHN0YXRlLmFjdGl2ZS5maWx0ZXJzLFxuXHRcdFx0c29ydDogc3RhdGUuYWN0aXZlLnNvcnQsXG5cdFx0XHRjb2x1bW5zOiBzdGF0ZS5hY3RpdmUuY29sdW1ucyxcblx0XHRcdHBhZ2U6IHN0YXRlLmxpc3RzLnBhZ2UsXG5cdFx0fSwgKGVyciwgaXRlbXMpID0+IHtcblxuXHRcdFx0Ly8gQ3JlYXRlIGEgbmV3IHN0YXRlIHNuYXBzaG90IGFuZCBjb21wYXJlIHRoZSBjdXJyZW50IGFjdGl2ZSBsaXN0IGlkXG5cdFx0XHQvLyB0byB0aGUgaWQgb2YgdGhlIGN1cnJlbnRMaXN0IHJlZmVyZW5jZWQgYWJvdmUuXG5cdFx0XHQvLyBJZiB0aGV5IGFyZSB0aGUgc2FtZSwgdGhlbiB0aGlzIGlzIHRoZSBsYXRlc3QgZmV0Y2ggcmVxdWVzdCwgd2UgbWF5IHJlc29sdmUgdGhpcyBub3JtYWxseS5cblx0XHRcdC8vIElmIHRoZXNlIGFyZSBub3QgdGhlIHNhbWUsIHRoZW4gaXQgbWVhbnMgdGhhdCB0aGlzIGlzIG5vdCB0aGUgbGF0ZXN0IGZldGNoIHJlcXVlc3QuXG5cdFx0XHQvLyBCQUlMIE9VVCFcblxuXHRcdFx0aWYgKGdldFN0YXRlKCkuYWN0aXZlLmlkICE9PSBjdXJyZW50TGlzdC5pZCkgcmV0dXJuO1xuXHRcdFx0aWYgKGdldFN0YXRlKCkubGlzdHMubG9hZENvdW50ZXIgPiBjdXJyZW50TG9hZENvdW50ZXIpIHJldHVybjtcblx0XHRcdGlmIChpdGVtcykge1xuXG5cdFx0XHRcdC8vIGlmIChwYWdlLmluZGV4ICE9PSBkcmFnLnBhZ2UgJiYgZHJhZy5pdGVtKSB7XG5cdFx0XHRcdC8vIFx0Ly8gYWRkIHRoZSBkcmFnZ2luZyBpdGVtXG5cdFx0XHRcdC8vIFx0aWYgKHBhZ2UuaW5kZXggPiBkcmFnLnBhZ2UpIHtcblx0XHRcdFx0Ly8gXHRcdF9pdGVtcy5yZXN1bHRzLnVuc2hpZnQoZHJhZy5pdGVtKTtcblx0XHRcdFx0Ly8gXHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBcdFx0X2l0ZW1zLnJlc3VsdHMucHVzaChkcmFnLml0ZW0pO1xuXHRcdFx0XHQvLyBcdH1cblx0XHRcdFx0Ly8gfVxuXHRcdFx0XHQvLyBfaXRlbXNSZXN1bHRzQ2xvbmUgPSBpdGVtcy5yZXN1bHRzLnNsaWNlKDApO1xuXHRcdFx0XHQvL1xuXG5cdFx0XHRcdC8vIFRPRE8gUmVlbmFibGUgdGhpc1xuXHRcdFx0XHQvLyBpZiAob3B0aW9ucy5zdWNjZXNzICYmIG9wdGlvbnMuaWQpIHtcblx0XHRcdFx0Ly8gXHQvLyBmbGFzaGVzIGEgc3VjY2VzcyBiYWNrZ3JvdW5kIG9uIHRoZSByb3dcblx0XHRcdFx0Ly8gXHRfcm93QWxlcnQuc3VjY2VzcyA9IG9wdGlvbnMuaWQ7XG5cdFx0XHRcdC8vIH1cblx0XHRcdFx0Ly8gaWYgKG9wdGlvbnMuZmFpbCAmJiBvcHRpb25zLmlkKSB7XG5cdFx0XHRcdC8vIFx0Ly8gZmxhc2hlcyBhIGZhaWx1cmUgYmFja2dyb3VuZCBvbiB0aGUgcm93XG5cdFx0XHRcdC8vIFx0X3Jvd0FsZXJ0LmZhaWwgPSBvcHRpb25zLmlkO1xuXHRcdFx0XHQvLyB9XG5cblx0XHRcdFx0Ly8gU3VjY2Vzc2Z1bGx5IHJlc29sdmUgdGhpcyByZXF1ZXN0IGluIHJlZHV4IGFuZCBzZXQgdGhlIGxvYWRDb3VudGVyIGJhY2sgdG8gemVyby5cblx0XHRcdFx0ZGlzcGF0Y2goaXRlbXNMb2FkZWQoaXRlbXMpKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIENhdGNoIHRoaXMgZXJyb3IgaW4gcmVkdXggYW5kIHNldCB0aGUgbG9hZENvdW50ZXIgYmFjayB0byB6ZXJvLlxuXHRcdFx0XHRkaXNwYXRjaChpdGVtTG9hZGluZ0Vycm9yKGVycikpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZG93bmxvYWRJdGVtcyAoZm9ybWF0LCBjb2x1bW5zKSB7XG5cdHJldHVybiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiB7XG5cdFx0Y29uc3Qgc3RhdGUgPSBnZXRTdGF0ZSgpO1xuXHRcdGNvbnN0IGFjdGl2ZSA9IHN0YXRlLmFjdGl2ZTtcblx0XHRjb25zdCBjdXJyZW50TGlzdCA9IHN0YXRlLmxpc3RzLmN1cnJlbnRMaXN0O1xuXHRcdGNvbnN0IHVybCA9IGN1cnJlbnRMaXN0LmdldERvd25sb2FkVVJMKHtcblx0XHRcdHNlYXJjaDogYWN0aXZlLnNlYXJjaCxcblx0XHRcdGZpbHRlcnM6IGFjdGl2ZS5maWx0ZXJzLFxuXHRcdFx0c29ydDogYWN0aXZlLnNvcnQsXG5cdFx0XHRjb2x1bW5zOiBjb2x1bW5zID8gY3VycmVudExpc3QuZXhwYW5kQ29sdW1ucyhjb2x1bW5zKSA6IGFjdGl2ZS5jb2x1bW5zLFxuXHRcdFx0Zm9ybWF0OiBmb3JtYXQsXG5cdFx0fSk7XG5cdFx0d2luZG93Lm9wZW4odXJsKTtcblx0fTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGl0ZW1zTG9hZGVkIChpdGVtcykge1xuXHRyZXR1cm4ge1xuXHRcdHR5cGU6IElURU1TX0xPQURFRCxcblx0XHRpdGVtcyxcblx0fTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaGVkIHdoZW4gdW5zdWNjZXNzZnVsbHkgdHJ5aW5nIHRvIGxvYWQgdGhlIGl0ZW1zLCB3aWxsIHJlZGlzcGF0Y2hcbiAqIGxvYWRJdGVtcyBhZnRlciBORVRXT1JLX0VSUk9SX1JFVFJZX0RFTEFZIG1pbGxpc2Vjb25kcyB1bnRpbCB3ZSBnZXQgaXRlbXMgYmFja1xuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpdGVtTG9hZGluZ0Vycm9yICgpIHtcblx0cmV0dXJuIChkaXNwYXRjaCkgPT4ge1xuXHRcdGRpc3BhdGNoKHtcblx0XHRcdHR5cGU6IElURU1fTE9BRElOR19FUlJPUixcblx0XHRcdGVycjogJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnLFxuXHRcdH0pO1xuXHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0ZGlzcGF0Y2gobG9hZEl0ZW1zKCkpO1xuXHRcdH0sIE5FVFdPUktfRVJST1JfUkVUUllfREVMQVkpO1xuXHR9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVsZXRlSXRlbXMgKGlkcykge1xuXHRyZXR1cm4gKGRpc3BhdGNoLCBnZXRTdGF0ZSkgPT4ge1xuXHRcdGNvbnN0IGxpc3QgPSBnZXRTdGF0ZSgpLmxpc3RzLmN1cnJlbnRMaXN0O1xuXHRcdGxpc3QuZGVsZXRlSXRlbXMoaWRzLCAoZXJyLCBkYXRhKSA9PiB7XG5cdFx0XHQvLyBUT0RPIEVSUk9SIEhBTkRMSU5HXG5cdFx0XHRkaXNwYXRjaChsb2FkSXRlbXMoKSk7XG5cdFx0fSk7XG5cdH07XG59XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBGaWx0ZXJzIH0gZnJvbSAnRmllbGRUeXBlcyc7XG5pbXBvcnQgeyBDaGlwIH0gZnJvbSAnLi4vLi4vLi4vLi4vZWxlbWVudGFsJztcblxuaW1wb3J0IFBvcG91dCBmcm9tICcuLi8uLi8uLi8uLi9zaGFyZWQvUG9wb3V0JztcbmltcG9ydCB7IHNldEZpbHRlciwgY2xlYXJGaWx0ZXIgfSBmcm9tICcuLi8uLi9hY3Rpb25zJztcbmltcG9ydCBnZXRGaWx0ZXJMYWJlbCBmcm9tICcuL2dldEZpbHRlckxhYmVsJztcblxuY2xhc3MgRmlsdGVyIGV4dGVuZHMgQ29tcG9uZW50IHtcblx0Y29uc3RydWN0b3IgKCkge1xuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLm9wZW4gPSB0aGlzLm9wZW4uYmluZCh0aGlzKTtcblx0XHR0aGlzLmNsb3NlID0gdGhpcy5jbG9zZS5iaW5kKHRoaXMpO1xuXHRcdHRoaXMudXBkYXRlVmFsdWUgPSB0aGlzLnVwZGF0ZVZhbHVlLmJpbmQodGhpcyk7XG5cdFx0dGhpcy51cGRhdGVGaWx0ZXIgPSB0aGlzLnVwZGF0ZUZpbHRlci5iaW5kKHRoaXMpO1xuXHRcdHRoaXMucmVtb3ZlRmlsdGVyID0gdGhpcy5yZW1vdmVGaWx0ZXIuYmluZCh0aGlzKTtcblxuXHRcdHRoaXMuc3RhdGUgPSB7XG5cdFx0XHRpc09wZW46IGZhbHNlLFxuXHRcdH07XG5cdH1cblx0b3BlbiAoKSB7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRpc09wZW46IHRydWUsXG5cdFx0XHRmaWx0ZXJWYWx1ZTogdGhpcy5wcm9wcy5maWx0ZXIudmFsdWUsXG5cdFx0fSk7XG5cdH1cblx0Y2xvc2UgKCkge1xuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0aXNPcGVuOiBmYWxzZSxcblx0XHR9KTtcblx0fVxuXHR1cGRhdGVWYWx1ZSAoZmlsdGVyVmFsdWUpIHtcblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdGZpbHRlclZhbHVlOiBmaWx0ZXJWYWx1ZSxcblx0XHR9KTtcblx0fVxuXHR1cGRhdGVGaWx0ZXIgKGUpIHtcblx0XHRjb25zdCB7IGRpc3BhdGNoLCBmaWx0ZXIgfSA9IHRoaXMucHJvcHM7XG5cdFx0ZGlzcGF0Y2goc2V0RmlsdGVyKGZpbHRlci5maWVsZC5wYXRoLCB0aGlzLnN0YXRlLmZpbHRlclZhbHVlKSk7XG5cdFx0dGhpcy5jbG9zZSgpO1xuXHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0fVxuXHRyZW1vdmVGaWx0ZXIgKCkge1xuXHRcdHRoaXMucHJvcHMuZGlzcGF0Y2goY2xlYXJGaWx0ZXIodGhpcy5wcm9wcy5maWx0ZXIuZmllbGQucGF0aCkpO1xuXHR9XG5cdHJlbmRlciAoKSB7XG5cdFx0Y29uc3QgeyBmaWx0ZXIgfSA9IHRoaXMucHJvcHM7XG5cdFx0Y29uc3QgZmlsdGVySWQgPSBgYWN0aXZlRmlsdGVyX18ke2ZpbHRlci5maWVsZC5wYXRofWA7XG5cdFx0Y29uc3QgRmlsdGVyQ29tcG9uZW50ID0gRmlsdGVyc1tmaWx0ZXIuZmllbGQudHlwZV07XG5cblx0XHRyZXR1cm4gKFxuXHRcdFx0PHNwYW4+XG5cdFx0XHRcdDxDaGlwXG5cdFx0XHRcdFx0bGFiZWw9e2dldEZpbHRlckxhYmVsKGZpbHRlci5maWVsZCwgZmlsdGVyLnZhbHVlKX1cblx0XHRcdFx0XHRvbkNsaWNrPXt0aGlzLm9wZW59XG5cdFx0XHRcdFx0b25DbGVhcj17dGhpcy5yZW1vdmVGaWx0ZXJ9XG5cdFx0XHRcdFx0Y29sb3I9XCJwcmltYXJ5XCJcblx0XHRcdFx0XHRpZD17ZmlsdGVySWR9XG5cdFx0XHRcdC8+XG5cdFx0XHRcdDxQb3BvdXQgaXNPcGVuPXt0aGlzLnN0YXRlLmlzT3Blbn0gb25DYW5jZWw9e3RoaXMuY2xvc2V9IHJlbGF0aXZlVG9JRD17ZmlsdGVySWR9PlxuXHRcdFx0XHRcdDxmb3JtIG9uU3VibWl0PXt0aGlzLnVwZGF0ZUZpbHRlcn0+XG5cdFx0XHRcdFx0XHQ8UG9wb3V0LkhlYWRlciB0aXRsZT1cIkVkaXQgRmlsdGVyXCIgLz5cblx0XHRcdFx0XHRcdDxQb3BvdXQuQm9keT5cblx0XHRcdFx0XHRcdFx0PEZpbHRlckNvbXBvbmVudFxuXHRcdFx0XHRcdFx0XHRcdGZpZWxkPXtmaWx0ZXIuZmllbGR9XG5cdFx0XHRcdFx0XHRcdFx0ZmlsdGVyPXt0aGlzLnN0YXRlLmZpbHRlclZhbHVlfVxuXHRcdFx0XHRcdFx0XHRcdG9uQ2hhbmdlPXt0aGlzLnVwZGF0ZVZhbHVlfVxuXHRcdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0PC9Qb3BvdXQuQm9keT5cblx0XHRcdFx0XHRcdDxQb3BvdXQuRm9vdGVyXG5cdFx0XHRcdFx0XHRcdHJlZj1cImZvb3RlclwiXG5cdFx0XHRcdFx0XHRcdHByaW1hcnlCdXR0b25Jc1N1Ym1pdFxuXHRcdFx0XHRcdFx0XHRwcmltYXJ5QnV0dG9uTGFiZWw9XCJBcHBseVwiXG5cdFx0XHRcdFx0XHRcdHNlY29uZGFyeUJ1dHRvbkFjdGlvbj17dGhpcy5jbG9zZX1cblx0XHRcdFx0XHRcdFx0c2Vjb25kYXJ5QnV0dG9uTGFiZWw9XCJDYW5jZWxcIiAvPlxuXHRcdFx0XHRcdDwvZm9ybT5cblx0XHRcdFx0PC9Qb3BvdXQ+XG5cdFx0XHQ8L3NwYW4+XG5cdFx0KTtcblx0fVxufTtcblxuRmlsdGVyLnByb3BUeXBlcyA9IHtcblx0ZGlzcGF0Y2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cdGZpbHRlcjogUHJvcFR5cGVzLnNoYXBlKHtcblx0XHRmaWVsZDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXHRcdHZhbHVlOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cdH0pLmlzUmVxdWlyZWQsXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZpbHRlcjtcbiIsImltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDaGlwIH0gZnJvbSAnLi4vLi4vLi4vLi4vZWxlbWVudGFsJztcbmltcG9ydCBGaWx0ZXIgZnJvbSAnLi9GaWx0ZXInO1xuXG5pbXBvcnQgeyBjbGVhckFsbEZpbHRlcnMgfSBmcm9tICcuLi8uLi9hY3Rpb25zJztcblxuY29uc3QgTGlzdEZpbHRlcnMgPSAoeyBkaXNwYXRjaCwgZmlsdGVycyB9KSA9PiB7XG5cblx0aWYgKCFmaWx0ZXJzLmxlbmd0aCkgcmV0dXJuIDxkaXYgLz47XG5cblx0Y29uc3QgZGlzcGF0Y2hDbGVhckFsbEZpbHRlcnMgPSBmdW5jdGlvbiAoKSB7XG5cdFx0ZGlzcGF0Y2goY2xlYXJBbGxGaWx0ZXJzKCkpO1xuXHR9O1xuXG5cdC8vIEdlbmVyYXRlIHRoZSBsaXN0IG9mIGZpbHRlciBwaWxsc1xuXHRjb25zdCBjdXJyZW50RmlsdGVycyA9IGZpbHRlcnMubWFwKChmaWx0ZXIsIGkpID0+IChcblx0XHQ8RmlsdGVyXG5cdFx0XHRrZXk9eydmJyArIGl9XG5cdFx0XHRmaWx0ZXI9e2ZpbHRlcn1cblx0XHRcdGRpc3BhdGNoPXtkaXNwYXRjaH1cblx0XHQvPlxuXHQpKTtcblxuXHQvLyBXaGVuIG1vcmUgdGhhbiAxLCBhcHBlbmQgdGhlIGNsZWFyIGJ1dHRvblxuXHRpZiAoY3VycmVudEZpbHRlcnMubGVuZ3RoID4gMSkge1xuXHRcdGN1cnJlbnRGaWx0ZXJzLnB1c2goXG5cdFx0XHQ8Q2hpcFxuXHRcdFx0XHRrZXk9XCJsaXN0RmlsdGVyc19fY2xlYXJcIlxuXHRcdFx0XHRsYWJlbD1cIkNsZWFyIEFsbFwiXG5cdFx0XHRcdG9uQ2xpY2s9e2Rpc3BhdGNoQ2xlYXJBbGxGaWx0ZXJzfVxuXHRcdFx0Lz5cblx0XHQpO1xuXHR9XG5cblx0Y29uc3Qgc3R5bGVzID0ge1xuXHRcdG1hcmdpbkJvdHRvbTogJzFlbScsXG5cdFx0bWFyZ2luVG9wOiAnMWVtJyxcblx0fTtcblxuXHRyZXR1cm4gKFxuXHRcdDxkaXYgc3R5bGU9e3N0eWxlc30+XG5cdFx0XHR7Y3VycmVudEZpbHRlcnN9XG5cdFx0PC9kaXY+XG5cdCk7XG59O1xuXG5MaXN0RmlsdGVycy5wcm9wVHlwZXMgPSB7XG5cdGRpc3BhdGNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXHRmaWx0ZXJzOiBQcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZCxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTGlzdEZpbHRlcnM7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZmluZERPTU5vZGUgfSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IFRyYW5zaXRpb25cblx0ZnJvbSAncmVhY3QtYWRkb25zLWNzcy10cmFuc2l0aW9uLWdyb3VwJztcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IExpc3RGaWx0ZXJzQWRkRm9ybSBmcm9tICcuL0xpc3RGaWx0ZXJzQWRkRm9ybSc7XG5pbXBvcnQgUG9wb3V0IGZyb20gJy4uLy4uLy4uLy4uL3NoYXJlZC9Qb3BvdXQnO1xuaW1wb3J0IFBvcG91dExpc3QgZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL1BvcG91dC9Qb3BvdXRMaXN0JztcbmltcG9ydCB7IEZvcm1JbnB1dCB9IGZyb20gJy4uLy4uLy4uLy4uL2VsZW1lbnRhbCc7XG5pbXBvcnQgTGlzdEhlYWRlckJ1dHRvbiBmcm9tICcuLi9MaXN0SGVhZGVyQnV0dG9uJztcblxuaW1wb3J0IHsgc2V0RmlsdGVyIH0gZnJvbSAnLi4vLi4vYWN0aW9ucyc7XG5cbnZhciBMaXN0RmlsdGVyc0FkZCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblx0ZGlzcGxheU5hbWU6ICdMaXN0RmlsdGVyc0FkZCcsXG5cdHByb3BUeXBlczoge1xuXHRcdG1heEhlaWdodDogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcblx0fSxcblx0Z2V0RGVmYXVsdFByb3BzICgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0bWF4SGVpZ2h0OiAzNjAsXG5cdFx0fTtcblx0fSxcblx0Z2V0SW5pdGlhbFN0YXRlICgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0aW5uZXJIZWlnaHQ6IDAsXG5cdFx0XHRpc09wZW46IGZhbHNlLFxuXHRcdFx0c2VhcmNoU3RyaW5nOiAnJyxcblx0XHRcdHNlbGVjdGVkRmllbGQ6IGZhbHNlLFxuXHRcdH07XG5cdH0sXG5cdHVwZGF0ZVNlYXJjaCAoZSkge1xuXHRcdHRoaXMuc2V0U3RhdGUoeyBzZWFyY2hTdHJpbmc6IGUudGFyZ2V0LnZhbHVlIH0pO1xuXHR9LFxuXHRvcGVuUG9wb3V0ICgpIHtcblx0XHR0aGlzLnNldFN0YXRlKHsgaXNPcGVuOiB0cnVlIH0sIHRoaXMuZm9jdXNTZWFyY2gpO1xuXHR9LFxuXHRjbG9zZVBvcG91dCAoKSB7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRpbm5lckhlaWdodDogMCxcblx0XHRcdGlzT3BlbjogZmFsc2UsXG5cdFx0XHRzZWFyY2hTdHJpbmc6ICcnLFxuXHRcdFx0c2VsZWN0ZWRGaWVsZDogZmFsc2UsXG5cdFx0fSk7XG5cdH0sXG5cdHNldFBvcG91dEhlaWdodCAoaGVpZ2h0KSB7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7IGlubmVySGVpZ2h0OiBNYXRoLm1pbih0aGlzLnByb3BzLm1heEhlaWdodCwgaGVpZ2h0KSB9KTtcblx0fSxcblx0bmF2aWdhdGVCYWNrICgpIHtcblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdHNlbGVjdGVkRmllbGQ6IGZhbHNlLFxuXHRcdFx0c2VhcmNoU3RyaW5nOiAnJyxcblx0XHRcdGlubmVySGVpZ2h0OiAwLFxuXHRcdH0sIHRoaXMuZm9jdXNTZWFyY2gpO1xuXHR9LFxuXHRmb2N1c1NlYXJjaCAoKSB7XG5cdFx0ZmluZERPTU5vZGUodGhpcy5yZWZzLnNlYXJjaCkuZm9jdXMoKTtcblx0fSxcblx0c2VsZWN0RmllbGQgKGZpZWxkKSB7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRzZWxlY3RlZEZpZWxkOiBmaWVsZCxcblx0XHR9KTtcblx0fSxcblx0YXBwbHlGaWx0ZXIgKHZhbHVlKSB7XG5cdFx0dGhpcy5wcm9wcy5kaXNwYXRjaChzZXRGaWx0ZXIodGhpcy5zdGF0ZS5zZWxlY3RlZEZpZWxkLnBhdGgsIHZhbHVlKSk7XG5cdFx0dGhpcy5jbG9zZVBvcG91dCgpO1xuXHR9LFxuXHRyZW5kZXJMaXN0ICgpIHtcblx0XHRjb25zdCBhY3RpdmVGaWx0ZXJGaWVsZHMgPSB0aGlzLnByb3BzLmFjdGl2ZUZpbHRlcnMubWFwKG9iaiA9PiBvYmouZmllbGQpO1xuXHRcdGNvbnN0IGFjdGl2ZUZpbHRlclBhdGhzID0gYWN0aXZlRmlsdGVyRmllbGRzLm1hcChvYmogPT4gb2JqLnBhdGgpO1xuXHRcdGNvbnN0IHsgc2VhcmNoU3RyaW5nIH0gPSB0aGlzLnN0YXRlO1xuXHRcdGxldCBmaWx0ZXJlZEZpbHRlcnMgPSB0aGlzLnByb3BzLmF2YWlsYWJsZUZpbHRlcnM7XG5cblx0XHRpZiAoc2VhcmNoU3RyaW5nKSB7XG5cdFx0XHRmaWx0ZXJlZEZpbHRlcnMgPSBmaWx0ZXJlZEZpbHRlcnNcblx0XHRcdFx0LmZpbHRlcihmaWx0ZXIgPT4gZmlsdGVyLnR5cGUgIT09ICdoZWFkaW5nJylcblx0XHRcdFx0LmZpbHRlcihmaWx0ZXIgPT4gbmV3IFJlZ0V4cChzZWFyY2hTdHJpbmcpXG5cdFx0XHRcdFx0LnRlc3QoZmlsdGVyLmZpZWxkLmxhYmVsLnRvTG93ZXJDYXNlKCkpKTtcblx0XHR9XG5cblx0XHRjb25zdCBwb3BvdXRMaXN0ID0gZmlsdGVyZWRGaWx0ZXJzLm1hcCgoZWwsIGkpID0+IHtcblx0XHRcdGlmIChlbC50eXBlID09PSAnaGVhZGluZycpIHtcblx0XHRcdFx0cmV0dXJuIChcblx0XHRcdFx0XHQ8UG9wb3V0TGlzdC5IZWFkaW5nIGtleT17J2hlYWRpbmdfJyArIGl9PlxuXHRcdFx0XHRcdFx0e2VsLmNvbnRlbnR9XG5cdFx0XHRcdFx0PC9Qb3BvdXRMaXN0LkhlYWRpbmc+XG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGZpbHRlcklzQWN0aXZlID0gYWN0aXZlRmlsdGVyUGF0aHMubGVuZ3RoICYmIChhY3RpdmVGaWx0ZXJQYXRocy5pbmRleE9mKGVsLmZpZWxkLnBhdGgpID4gLTEpO1xuXG5cdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHQ8UG9wb3V0TGlzdC5JdGVtXG5cdFx0XHRcdFx0a2V5PXsnaXRlbV8nICsgZWwuZmllbGQucGF0aH1cblx0XHRcdFx0XHRpY29uPXtmaWx0ZXJJc0FjdGl2ZSA/ICdjaGVjaycgOiAnY2hldnJvbi1yaWdodCd9XG5cdFx0XHRcdFx0aWNvbkhvdmVyPXtmaWx0ZXJJc0FjdGl2ZSA/ICdjaGVjaycgOiAnY2hldnJvbi1yaWdodCd9XG5cdFx0XHRcdFx0aXNTZWxlY3RlZD17ISFmaWx0ZXJJc0FjdGl2ZX1cblx0XHRcdFx0XHRsYWJlbD17ZWwuZmllbGQubGFiZWx9XG5cdFx0XHRcdFx0b25DbGljaz17KCkgPT4geyB0aGlzLnNlbGVjdEZpZWxkKGVsLmZpZWxkKTsgfX0gLz5cblx0XHRcdCk7XG5cdFx0fSk7XG5cblx0XHRjb25zdCBmb3JtRmllbGRTdHlsZXMgPSB7XG5cdFx0XHRib3JkZXJCb3R0b206ICcxcHggZGFzaGVkIHJnYmEoMCwgMCwgMCwgMC4xKScsXG5cdFx0XHRtYXJnaW5Cb3R0b206ICcxZW0nLFxuXHRcdFx0cGFkZGluZ0JvdHRvbTogJzFlbScsXG5cdFx0fTtcblxuXHRcdHJldHVybiAoXG5cdFx0XHQ8UG9wb3V0LlBhbmUgb25MYXlvdXQ9e3RoaXMuc2V0UG9wb3V0SGVpZ2h0fSBrZXk9XCJsaXN0XCI+XG5cdFx0XHRcdDxQb3BvdXQuQm9keT5cblx0XHRcdFx0XHQ8ZGl2IHN0eWxlPXtmb3JtRmllbGRTdHlsZXN9PlxuXHRcdFx0XHRcdFx0PEZvcm1JbnB1dFxuXHRcdFx0XHRcdFx0XHRvbkNoYW5nZT17dGhpcy51cGRhdGVTZWFyY2h9XG5cdFx0XHRcdFx0XHRcdHBsYWNlaG9sZGVyPVwiRmluZCBhIGZpbHRlci4uLlwiXG5cdFx0XHRcdFx0XHRcdHJlZj1cInNlYXJjaFwiXG5cdFx0XHRcdFx0XHRcdHZhbHVlPXt0aGlzLnN0YXRlLnNlYXJjaFN0cmluZ31cblx0XHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0e3BvcG91dExpc3R9XG5cdFx0XHRcdDwvUG9wb3V0LkJvZHk+XG5cdFx0XHQ8L1BvcG91dC5QYW5lPlxuXHRcdCk7XG5cdH0sXG5cdHJlbmRlckZvcm0gKCkge1xuXHRcdHJldHVybiAoXG5cdFx0XHQ8UG9wb3V0LlBhbmUgb25MYXlvdXQ9e3RoaXMuc2V0UG9wb3V0SGVpZ2h0fSBrZXk9XCJmb3JtXCI+XG5cdFx0XHRcdDxMaXN0RmlsdGVyc0FkZEZvcm1cblx0XHRcdFx0XHRhY3RpdmVGaWx0ZXJzPXt0aGlzLnByb3BzLmFjdGl2ZUZpbHRlcnN9XG5cdFx0XHRcdFx0ZmllbGQ9e3RoaXMuc3RhdGUuc2VsZWN0ZWRGaWVsZH1cblx0XHRcdFx0XHRvbkFwcGx5PXt0aGlzLmFwcGx5RmlsdGVyfVxuXHRcdFx0XHRcdG9uQ2FuY2VsPXt0aGlzLmNsb3NlUG9wb3V0fVxuXHRcdFx0XHRcdG9uQmFjaz17dGhpcy5uYXZpZ2F0ZUJhY2t9XG5cdFx0XHRcdFx0bWF4SGVpZ2h0PXt0aGlzLnByb3BzLm1heEhlaWdodH1cblx0XHRcdFx0XHRvbkhlaWdodENoYW5nZT17dGhpcy5zZXRQb3BvdXRIZWlnaHR9XG5cdFx0XHRcdFx0ZGlzcGF0Y2g9e3RoaXMucHJvcHMuZGlzcGF0Y2h9XG5cdFx0XHRcdC8+XG5cdFx0XHQ8L1BvcG91dC5QYW5lPlxuXHRcdCk7XG5cdH0sXG5cdHJlbmRlciAoKSB7XG5cdFx0Y29uc3QgeyBpc09wZW4sIHNlbGVjdGVkRmllbGQgfSA9IHRoaXMuc3RhdGU7XG5cdFx0Y29uc3QgcG9wb3V0Qm9keVN0eWxlID0gdGhpcy5zdGF0ZS5pbm5lckhlaWdodFxuXHRcdFx0PyB7IGhlaWdodDogdGhpcy5zdGF0ZS5pbm5lckhlaWdodCB9XG5cdFx0XHQ6IG51bGw7XG5cdFx0Y29uc3QgcG9wb3V0UGFuZXNDbGFzc25hbWUgPSBjbGFzc25hbWVzKCdQb3BvdXRfX3BhbmVzJywge1xuXHRcdFx0J1BvcG91dF9fc2Nyb2xsYWJsZS1hcmVhJzogIXNlbGVjdGVkRmllbGQsXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gKFxuXHRcdFx0PGRpdj5cblx0XHRcdFx0PExpc3RIZWFkZXJCdXR0b25cblx0XHRcdFx0XHRhY3RpdmU9e2lzT3Blbn1cblx0XHRcdFx0XHRnbHlwaD1cImV5ZVwiXG5cdFx0XHRcdFx0aWQ9XCJsaXN0SGVhZGVyRmlsdGVyQnV0dG9uXCJcblx0XHRcdFx0XHRsYWJlbD1cIkZpbHRlclwiXG5cdFx0XHRcdFx0b25DbGljaz17aXNPcGVuID8gdGhpcy5jbG9zZVBvcG91dCA6IHRoaXMub3BlblBvcG91dH1cblx0XHRcdFx0Lz5cblx0XHRcdFx0PFBvcG91dCBpc09wZW49e2lzT3Blbn0gb25DYW5jZWw9e3RoaXMuY2xvc2VQb3BvdXR9IHJlbGF0aXZlVG9JRD1cImxpc3RIZWFkZXJGaWx0ZXJCdXR0b25cIj5cblx0XHRcdFx0XHQ8UG9wb3V0LkhlYWRlclxuXHRcdFx0XHRcdFx0bGVmdEFjdGlvbj17c2VsZWN0ZWRGaWVsZCA/IHRoaXMubmF2aWdhdGVCYWNrIDogbnVsbH1cblx0XHRcdFx0XHRcdGxlZnRJY29uPXtzZWxlY3RlZEZpZWxkID8gJ2NoZXZyb24tbGVmdCcgOiBudWxsfVxuXHRcdFx0XHRcdFx0dGl0bGU9e3NlbGVjdGVkRmllbGQgPyBzZWxlY3RlZEZpZWxkLmxhYmVsIDogJ0ZpbHRlcid9XG5cdFx0XHRcdFx0XHR0cmFuc2l0aW9uRGlyZWN0aW9uPXtzZWxlY3RlZEZpZWxkID8gJ25leHQnIDogJ3ByZXYnfSAvPlxuXHRcdFx0XHRcdDxUcmFuc2l0aW9uXG5cdFx0XHRcdFx0XHRjbGFzc05hbWU9e3BvcG91dFBhbmVzQ2xhc3NuYW1lfVxuXHRcdFx0XHRcdFx0Y29tcG9uZW50PVwiZGl2XCJcblx0XHRcdFx0XHRcdHN0eWxlPXtwb3BvdXRCb2R5U3R5bGV9XG5cdFx0XHRcdFx0XHR0cmFuc2l0aW9uTmFtZT17c2VsZWN0ZWRGaWVsZCA/ICdQb3BvdXRfX3BhbmUtbmV4dCcgOiAnUG9wb3V0X19wYW5lLXByZXYnfVxuXHRcdFx0XHRcdFx0dHJhbnNpdGlvbkVudGVyVGltZW91dD17MzYwfVxuXHRcdFx0XHRcdFx0dHJhbnNpdGlvbkxlYXZlVGltZW91dD17MzYwfVxuXHRcdFx0XHRcdD5cblx0XHRcdFx0XHRcdHtzZWxlY3RlZEZpZWxkID8gdGhpcy5yZW5kZXJGb3JtKCkgOiB0aGlzLnJlbmRlckxpc3QoKX1cblx0XHRcdFx0XHQ8L1RyYW5zaXRpb24+XG5cdFx0XHRcdDwvUG9wb3V0PlxuXHRcdFx0PC9kaXY+XG5cdFx0KTtcblx0fSxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpc3RGaWx0ZXJzQWRkO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGZpbmRET01Ob2RlIH0gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBQb3BvdXQgZnJvbSAnLi4vLi4vLi4vLi4vc2hhcmVkL1BvcG91dCc7XG5cbmltcG9ydCB7IEZpbHRlcnMgfSBmcm9tICdGaWVsZFR5cGVzJztcblxudmFyIExpc3RGaWx0ZXJzQWRkRm9ybSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblx0cHJvcFR5cGVzOiB7XG5cdFx0ZmllbGQ6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblx0XHRtYXhIZWlnaHQ6IFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXG5cdFx0b25BcHBseTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG5cdFx0b25DYW5jZWw6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuXHRcdG9uSGVpZ2h0Q2hhbmdlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcblx0fSxcblx0Z2V0SW5pdGlhbFN0YXRlICgpIHtcblx0XHRjb25zdCBmaWx0ZXJDb21wb25lbnQgPSBGaWx0ZXJzW3RoaXMucHJvcHMuZmllbGQudHlwZV07XG5cdFx0bGV0IGZpbHRlclZhbHVlID0gdGhpcy5wcm9wcy5hY3RpdmVGaWx0ZXJzLmZpbHRlcihpID0+IGkuZmllbGQucGF0aCA9PT0gdGhpcy5wcm9wcy5maWVsZC5wYXRoKVswXTtcblx0XHRpZiAoZmlsdGVyVmFsdWUpIHtcblx0XHRcdGZpbHRlclZhbHVlID0gZmlsdGVyVmFsdWUudmFsdWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZpbHRlclZhbHVlID0gZmlsdGVyQ29tcG9uZW50ICYmIGZpbHRlckNvbXBvbmVudC5nZXREZWZhdWx0VmFsdWUgPyBmaWx0ZXJDb21wb25lbnQuZ2V0RGVmYXVsdFZhbHVlKCkgOiB7fTtcblx0XHR9XG5cdFx0cmV0dXJuIHtcblx0XHRcdGZpbHRlckNvbXBvbmVudDogZmlsdGVyQ29tcG9uZW50LFxuXHRcdFx0ZmlsdGVyVmFsdWU6IGZpbHRlclZhbHVlLFxuXHRcdH07XG5cdH0sXG5cdHVwZGF0ZUhlaWdodCAoYm9keUhlaWdodCkge1xuXHRcdGJvZHlIZWlnaHQgKz0gNDA7IC8vIFRPRE86IHJlbW92ZSBtYWdpYyBudW1iZXIsIGN1cnJlbnRseSBhY2NvdW50cyBmb3IgcGFkZGluZ1xuXHRcdGNvbnN0IGZvb3RlckhlaWdodCA9IGZpbmRET01Ob2RlKHRoaXMucmVmcy5mb290ZXIpLm9mZnNldEhlaWdodDtcblx0XHRjb25zdCBtYXhCb2R5SGVpZ2h0ID0gdGhpcy5wcm9wcy5tYXhIZWlnaHQgLSBmb290ZXJIZWlnaHQ7XG5cdFx0Y29uc3QgbmV3SGVpZ2h0ID0gYm9keUhlaWdodCArIGZvb3RlckhlaWdodDtcblx0XHQvLyBjb25zb2xlLmxvZyhib2R5SGVpZ2h0LCBtYXhCb2R5SGVpZ2h0LCAnfCcsIG5ld0hlaWdodCwgdGhpcy5wcm9wcy5tYXhIZWlnaHQpO1xuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0Ym9keUhlaWdodDogTWF0aC5taW4oYm9keUhlaWdodCwgbWF4Qm9keUhlaWdodCksXG5cdFx0fSwgKCkgPT4ge1xuXHRcdFx0dGhpcy5wcm9wcy5vbkhlaWdodENoYW5nZShNYXRoLm1pbihuZXdIZWlnaHQsIHRoaXMucHJvcHMubWF4SGVpZ2h0KSk7XG5cdFx0fSk7XG5cdH0sXG5cdHVwZGF0ZVZhbHVlIChmaWx0ZXJWYWx1ZSkge1xuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0ZmlsdGVyVmFsdWU6IGZpbHRlclZhbHVlLFxuXHRcdH0pO1xuXHR9LFxuXHRoYW5kbGVGb3JtU3VibWl0IChlKSB7XG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdHRoaXMucHJvcHMub25BcHBseSh0aGlzLnN0YXRlLmZpbHRlclZhbHVlKTtcblx0fSxcblx0cmVuZGVySW52YWxpZEZpbHRlciAoKSB7XG5cdFx0cmV0dXJuIChcblx0XHRcdDxkaXY+RXJyb3I6IHR5cGUge3RoaXMucHJvcHMuZmllbGQudHlwZX0gaGFzIG5vIGZpbHRlciBVSS48L2Rpdj5cblx0XHQpO1xuXHR9LFxuXHRyZW5kZXIgKCkge1xuXHRcdHZhciBGaWx0ZXJDb21wb25lbnQgPSB0aGlzLnN0YXRlLmZpbHRlckNvbXBvbmVudDtcblx0XHRyZXR1cm4gKFxuXHRcdFx0PGZvcm0gb25TdWJtaXQ9e3RoaXMuaGFuZGxlRm9ybVN1Ym1pdH0+XG5cdFx0XHRcdDxQb3BvdXQuQm9keSByZWY9XCJib2R5XCIgc2Nyb2xsYWJsZSBzdHlsZT17eyBoZWlnaHQ6IHRoaXMuc3RhdGUuYm9keUhlaWdodCB9fT5cblx0XHRcdFx0XHR7RmlsdGVyQ29tcG9uZW50ID8gPEZpbHRlckNvbXBvbmVudCBmaWVsZD17dGhpcy5wcm9wcy5maWVsZH0gZmlsdGVyPXt0aGlzLnN0YXRlLmZpbHRlclZhbHVlfSBvbkNoYW5nZT17dGhpcy51cGRhdGVWYWx1ZX0gb25IZWlnaHRDaGFuZ2U9e3RoaXMudXBkYXRlSGVpZ2h0fSAvPiA6IHRoaXMucmVuZGVySW52YWxpZEZpbHRlcigpfVxuXHRcdFx0XHQ8L1BvcG91dC5Cb2R5PlxuXHRcdFx0XHQ8UG9wb3V0LkZvb3RlclxuXHRcdFx0XHRcdHJlZj1cImZvb3RlclwiXG5cdFx0XHRcdFx0cHJpbWFyeUJ1dHRvbklzU3VibWl0XG5cdFx0XHRcdFx0cHJpbWFyeUJ1dHRvbkxhYmVsPVwiQXBwbHlcIlxuXHRcdFx0XHRcdHNlY29uZGFyeUJ1dHRvbkFjdGlvbj17dGhpcy5wcm9wcy5vbkNhbmNlbH1cblx0XHRcdFx0XHRzZWNvbmRhcnlCdXR0b25MYWJlbD1cIkNhbmNlbFwiIC8+XG5cdFx0XHQ8L2Zvcm0+XG5cdFx0KTtcblx0fSxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpc3RGaWx0ZXJzQWRkRm9ybTtcbiIsImltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcblxuY29uc3QgREFURV9GT1JNQVQgPSAnTU1NIEQgWVlZWSc7XG5jb25zdCBEQVRFVElNRV9GT1JNQVQgPSAnTU1NIEQgWVlZWSBoOm1tOnNzJztcblxuZnVuY3Rpb24gZ2V0RmlsdGVyTGFiZWwgKGZpZWxkLCB2YWx1ZSkge1xuXHRjb25zdCBsYWJlbCA9IGZpZWxkLmxhYmVsO1xuXG5cdHN3aXRjaCAoZmllbGQudHlwZSkge1xuXHRcdC8vIEJPT0xFQU5cblx0XHRjYXNlICdib29sZWFuJzoge1xuXHRcdFx0cmV0dXJuIHZhbHVlLnZhbHVlXG5cdFx0XHRcdD8gbGFiZWxcblx0XHRcdFx0OiBgTk9UICR7bGFiZWx9YDtcblx0XHR9XG5cblx0XHQvLyBEQVRFXG5cdFx0Y2FzZSAnZGF0ZSc6IHtcblx0XHRcdHJldHVybiBgJHtsYWJlbH0gJHtyZXNvbHZlRGF0ZUZvcm1hdCh2YWx1ZSwgREFURV9GT1JNQVQpfWA7XG5cdFx0fVxuXG5cdFx0Ly8gREFURSBBUlJBWVxuXHRcdGNhc2UgJ2RhdGVhcnJheSc6IHtcblx0XHRcdGNvbnN0IHByZXNlbmNlID0gdmFsdWUucHJlc2VuY2UgPT09ICdzb21lJyA/ICdTb21lJyA6ICdObyc7XG5cblx0XHRcdHJldHVybiBgJHtwcmVzZW5jZX0gJHtsYWJlbH0gJHtyZXNvbHZlRGF0ZUZvcm1hdCh2YWx1ZSwgREFURVRJTUVfRk9STUFULCAnYXJlJyl9YDtcblx0XHR9XG5cblx0XHQvLyBEQVRFVElNRVxuXHRcdGNhc2UgJ2RhdGV0aW1lJzoge1xuXHRcdFx0cmV0dXJuIGAke2xhYmVsfSAke3Jlc29sdmVEYXRlRm9ybWF0KHZhbHVlLCBEQVRFVElNRV9GT1JNQVQpfWA7XG5cdFx0fVxuXG5cdFx0Ly8gR0VPUE9JTlRcblx0XHQvLyBUT0RPIGRpc3RhbmNlIG5lZWRzIGEgcXVhbGlmaWVyLCBjdXJyZW50bHkgZGVmYXVsdHMgdG8gXCJrbVwiP1xuXHRcdGNhc2UgJ2dlb3BvaW50Jzoge1xuXHRcdFx0Y29uc3QgbW9kZSA9IHZhbHVlLmRpc3RhbmNlLm1vZGUgPT09ICdtYXgnID8gJ2lzIHdpdGhpbicgOiAnaXMgYXQgbGVhc3QnO1xuXHRcdFx0Y29uc3QgZGlzdGFuY2UgPSBgJHt2YWx1ZS5kaXN0YW5jZS52YWx1ZX1rbWA7XG5cdFx0XHRjb25zdCBjb25qdW5jdGlvbiA9IHZhbHVlLmRpc3RhbmNlLm1vZGUgPT09ICdtYXgnID8gJ29mJyA6ICdmcm9tJztcblx0XHRcdGNvbnN0IGxhdGxvbmcgPSBgJHt2YWx1ZS5sYXR9LCAke3ZhbHVlLmxvbn1gO1xuXG5cdFx0XHRyZXR1cm4gYCR7bGFiZWx9ICR7bW9kZX0gJHtkaXN0YW5jZX0gJHtjb25qdW5jdGlvbn0gJHtsYXRsb25nfWA7XG5cdFx0fVxuXG5cdFx0Ly8gTE9DQVRJT05cblx0XHRjYXNlICdsb2NhdGlvbic6IHtcblx0XHRcdGNvbnN0IGpvaW5lciA9IHZhbHVlLmludmVydGVkID8gJ2RvZXMgTk9UIG1hdGNoJyA6ICdtYXRjaGVzJztcblxuXHRcdFx0Ly8gUmVtb3ZlIHVuZGVmaW5lZCB2YWx1ZXMgYmVmb3JlIHJlbmRlcmluZyB0aGUgdGVtcGxhdGUgbGl0ZXJhbFxuXHRcdFx0Y29uc3QgZm9ybWF0dGVkVmFsdWUgPSBbXG5cdFx0XHRcdHZhbHVlLnN0cmVldCxcblx0XHRcdFx0dmFsdWUuY2l0eSxcblx0XHRcdFx0dmFsdWUuc3RhdGUsXG5cdFx0XHRcdHZhbHVlLmNvZGUsXG5cdFx0XHRcdHZhbHVlLmNvdW50cnksXG5cdFx0XHRdLmpvaW4oJyAnKS50cmltKCk7XG5cblx0XHRcdHJldHVybiBgJHtsYWJlbH0gJHtqb2luZXJ9IFwiJHtmb3JtYXR0ZWRWYWx1ZX1cImA7XG5cdFx0fVxuXG5cdFx0Ly8gTlVNQkVSICYgTU9ORVlcblx0XHRjYXNlICdudW1iZXInOlxuXHRcdGNhc2UgJ21vbmV5Jzoge1xuXHRcdFx0cmV0dXJuIGAke2xhYmVsfSAke3Jlc29sdmVOdW1iZXJGb3JtYXQodmFsdWUpfWA7XG5cdFx0fVxuXG5cdFx0Ly8gTlVNQkVSIEFSUkFZXG5cdFx0Y2FzZSAnbnVtYmVyYXJyYXknOiB7XG5cdFx0XHRjb25zdCBwcmVzZW5jZSA9IHZhbHVlLnByZXNlbmNlID09PSAnc29tZScgPyAnU29tZScgOiAnTm8nO1xuXG5cdFx0XHRyZXR1cm4gYCR7cHJlc2VuY2V9ICR7bGFiZWx9ICR7cmVzb2x2ZU51bWJlckZvcm1hdCh2YWx1ZSwgJ2FyZScpfWA7XG5cdFx0fVxuXG5cdFx0Ly8gUEFTU1dPUkRcblx0XHRjYXNlICdwYXNzd29yZCc6IHtcblx0XHRcdHJldHVybiB2YWx1ZS5leGlzdHNcblx0XHRcdFx0PyBgJHtsYWJlbH0gaXMgc2V0YFxuXHRcdFx0XHQ6IGAke2xhYmVsfSBpcyBOT1Qgc2V0YDtcblx0XHR9XG5cblx0XHQvLyBSRUxBVElPTlNISVBcblx0XHQvLyBUT0RPIHBvcHVsYXRlIHJlbGF0aW9uc2hpcCwgY3VycmVudGx5IHJlbmRlcmluZyBhbiBJRFxuXHRcdGNhc2UgJ3JlbGF0aW9uc2hpcCc6IHtcblx0XHRcdGxldCBqb2luZXIgPSB2YWx1ZS5pbnZlcnRlZCA/ICdpcyBOT1QnIDogJ2lzJztcblx0XHRcdGxldCBmb3JtYXR0ZWRWYWx1ZSA9ICh2YWx1ZS52YWx1ZS5sZW5ndGggPiAxKVxuXHRcdFx0XHQ/IHZhbHVlLnZhbHVlLmpvaW4oJywgb3IgJylcblx0XHRcdFx0OiB2YWx1ZS52YWx1ZVswXTtcblxuXHRcdFx0cmV0dXJuIGAke2xhYmVsfSAke2pvaW5lcn0gJHtmb3JtYXR0ZWRWYWx1ZX1gO1xuXHRcdH1cblxuXHRcdC8vIFNFTEVDVFxuXHRcdGNhc2UgJ3NlbGVjdCc6IHtcblx0XHRcdGxldCBqb2luZXIgPSB2YWx1ZS5pbnZlcnRlZCA/ICdpcyBOT1QnIDogJ2lzJztcblx0XHRcdGxldCBmb3JtYXR0ZWRWYWx1ZSA9ICh2YWx1ZS52YWx1ZS5sZW5ndGggPiAxKVxuXHRcdFx0XHQ/IHZhbHVlLnZhbHVlLmpvaW4oJywgb3IgJylcblx0XHRcdFx0OiB2YWx1ZS52YWx1ZVswXTtcblxuXHRcdFx0cmV0dXJuIGAke2xhYmVsfSAke2pvaW5lcn0gJHtmb3JtYXR0ZWRWYWx1ZX1gO1xuXHRcdH1cblxuXHRcdC8vIFRFWFQtTElLRVxuXHRcdGNhc2UgJ2NvZGUnOlxuXHRcdGNhc2UgJ2NvbG9yJzpcblx0XHRjYXNlICdlbWFpbCc6XG5cdFx0Y2FzZSAnaHRtbCc6XG5cdFx0Y2FzZSAna2V5Jzpcblx0XHRjYXNlICdtYXJrZG93bic6XG5cdFx0Y2FzZSAnbmFtZSc6XG5cdFx0Y2FzZSAndGV4dCc6XG5cdFx0Y2FzZSAndGV4dGFyZWEnOlxuXHRcdGNhc2UgJ3VybCc6IHtcblx0XHRcdGxldCBtb2RlID0gJyc7XG5cdFx0XHRpZiAodmFsdWUubW9kZSA9PT0gJ2JlZ2luc1dpdGgnKSB7XG5cdFx0XHRcdG1vZGUgPSB2YWx1ZS5pbnZlcnRlZCA/ICdkb2VzIE5PVCBiZWdpbiB3aXRoJyA6ICdiZWdpbnMgd2l0aCc7XG5cdFx0XHR9IGVsc2UgaWYgKHZhbHVlLm1vZGUgPT09ICdlbmRzV2l0aCcpIHtcblx0XHRcdFx0bW9kZSA9IHZhbHVlLmludmVydGVkID8gJ2RvZXMgTk9UIGVuZCB3aXRoJyA6ICdlbmRzIHdpdGgnO1xuXHRcdFx0fSBlbHNlIGlmICh2YWx1ZS5tb2RlID09PSAnZXhhY3RseScpIHtcblx0XHRcdFx0bW9kZSA9IHZhbHVlLmludmVydGVkID8gJ2lzIE5PVCBleGFjdGx5JyA6ICdpcyBleGFjdGx5Jztcblx0XHRcdH0gZWxzZSBpZiAodmFsdWUubW9kZSA9PT0gJ2NvbnRhaW5zJykge1xuXHRcdFx0XHRtb2RlID0gdmFsdWUuaW52ZXJ0ZWQgPyAnZG9lcyBOT1QgY29udGFpbicgOiAnY29udGFpbnMnO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gYCR7bGFiZWx9ICR7bW9kZX0gXCIke3ZhbHVlLnZhbHVlfVwiYDtcblx0XHR9XG5cblx0XHQvLyBURVhUQVJSQVlcblx0XHRjYXNlICd0ZXh0YXJyYXknOiB7XG5cdFx0XHRjb25zdCBwcmVzZW5jZSA9IHZhbHVlLnByZXNlbmNlID09PSAnc29tZScgPyAnU29tZScgOiAnTm8nO1xuXHRcdFx0bGV0IG1vZGUgPSAnJztcblx0XHRcdGlmICh2YWx1ZS5tb2RlID09PSAnYmVnaW5zV2l0aCcpIHtcblx0XHRcdFx0bW9kZSA9IHZhbHVlLmludmVydGVkID8gJ2RvIE5PVCBiZWdpbiB3aXRoJyA6ICdiZWdpbiB3aXRoJztcblx0XHRcdH0gZWxzZSBpZiAodmFsdWUubW9kZSA9PT0gJ2VuZHNXaXRoJykge1xuXHRcdFx0XHRtb2RlID0gdmFsdWUuaW52ZXJ0ZWQgPyAnZG8gTk9UIGVuZCB3aXRoJyA6ICdlbmQgd2l0aCc7XG5cdFx0XHR9IGVsc2UgaWYgKHZhbHVlLm1vZGUgPT09ICdleGFjdGx5Jykge1xuXHRcdFx0XHRtb2RlID0gdmFsdWUuaW52ZXJ0ZWQgPyAnYXJlIE5PVCBleGFjdGx5JyA6ICdhcmUgZXhhY3RseSc7XG5cdFx0XHR9IGVsc2UgaWYgKHZhbHVlLm1vZGUgPT09ICdjb250YWlucycpIHtcblx0XHRcdFx0bW9kZSA9IHZhbHVlLmludmVydGVkID8gJ2RvIE5PVCBjb250YWluJyA6ICdjb250YWluJztcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGAke3ByZXNlbmNlfSAke2xhYmVsfSAke21vZGV9IFwiJHt2YWx1ZS52YWx1ZX1cImA7XG5cdFx0fVxuXG5cdFx0Ly8gQ0FUQ0hBTExcblx0XHRkZWZhdWx0OiB7XG5cdFx0XHRyZXR1cm4gYCR7bGFiZWx9IFwiJHt2YWx1ZS52YWx1ZX1cImA7XG5cdFx0fVxuXHR9XG59O1xuXG5mdW5jdGlvbiByZXNvbHZlTnVtYmVyRm9ybWF0ICh2YWx1ZSwgY29uanVuY3Rpb24gPSAnaXMnKSB7XG5cdGxldCBtb2RlID0gJyc7XG5cdGlmICh2YWx1ZS5tb2RlID09PSAnZXF1YWxzJykgbW9kZSA9IGNvbmp1bmN0aW9uO1xuXHRlbHNlIGlmICh2YWx1ZS5tb2RlID09PSAnZ3QnKSBtb2RlID0gYCR7Y29uanVuY3Rpb259IGdyZWF0ZXIgdGhhbmA7XG5cdGVsc2UgaWYgKHZhbHVlLm1vZGUgPT09ICdsdCcpIG1vZGUgPSBgJHtjb25qdW5jdGlvbn0gbGVzcyB0aGFuYDtcblxuXHRjb25zdCBmb3JtYXR0ZWRWYWx1ZSA9IHZhbHVlLm1vZGUgPT09ICdiZXR3ZWVuJ1xuXHRcdD8gYGlzIGJldHdlZW4gJHt2YWx1ZS52YWx1ZS5taW59IGFuZCAke3ZhbHVlLnZhbHVlLm1heH1gXG5cdFx0OiB2YWx1ZS52YWx1ZTtcblxuXHRyZXR1cm4gYCR7bW9kZX0gJHtmb3JtYXR0ZWRWYWx1ZX1gO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlRGF0ZUZvcm1hdCAodmFsdWUsIGZvcm1hdCwgY29uanVuY3Rpb24gPSAnaXMnKSB7XG5cdGNvbnN0IGpvaW5lciA9IHZhbHVlLmludmVydGVkID8gYCR7Y29uanVuY3Rpb259IE5PVGAgOiBjb25qdW5jdGlvbjtcblx0Y29uc3QgbW9kZSA9IHZhbHVlLm1vZGUgPT09ICdvbicgPyAnJyA6IHZhbHVlLm1vZGU7XG5cdGNvbnN0IGZvcm1hdHRlZFZhbHVlID0gdmFsdWUubW9kZSA9PT0gJ2JldHdlZW4nXG5cdFx0PyBgJHttb21lbnQodmFsdWUuYWZ0ZXIpLmZvcm1hdChmb3JtYXQpfSBhbmQgJHttb21lbnQodmFsdWUuYmVmb3JlKS5mb3JtYXQoZm9ybWF0KX1gXG5cdFx0OiBtb21lbnQodmFsdWUudmFsdWUpLmZvcm1hdChmb3JtYXQpO1xuXG5cdHJldHVybiBgJHtqb2luZXJ9ICR7bW9kZX0gJHtmb3JtYXR0ZWRWYWx1ZX1gO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEZpbHRlckxhYmVsO1xuIiwiaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5pbXBvcnQgVGFibGVSb3cgZnJvbSAnLi9JdGVtc1RhYmxlUm93JztcbmltcG9ydCBEcmFnRHJvcCBmcm9tICcuL0l0ZW1zVGFibGVEcmFnRHJvcCc7XG5cbmltcG9ydCB7IFRBQkxFX0NPTlRST0xfQ09MVU1OX1dJRFRIIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29uc3RhbnRzJztcblxuY29uc3QgSXRlbXNUYWJsZSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblx0cHJvcFR5cGVzOiB7XG5cdFx0Y2hlY2tlZEl0ZW1zOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cdFx0Y29sdW1uczogUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXG5cdFx0ZGVsZXRlVGFibGVJdGVtOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXHRcdGhhbmRsZVNvcnRTZWxlY3Q6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cdFx0aXRlbXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblx0XHRsaXN0OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cdFx0bWFuYWdlTW9kZTogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcblx0XHRyb3dBbGVydDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXHR9LFxuXHRyZW5kZXJDb2xzICgpIHtcblx0XHRsZXQgY29scyA9IHRoaXMucHJvcHMuY29sdW1ucy5tYXAoY29sID0+IChcblx0XHRcdDxjb2wga2V5PXtjb2wucGF0aH0gd2lkdGg9e2NvbC53aWR0aH0gLz5cblx0XHQpKTtcblxuXHRcdC8vIGFkZCBkZWxldGUgY29sIHdoZW4gYXZhaWxhYmxlXG5cdFx0aWYgKCF0aGlzLnByb3BzLmxpc3Qubm9kZWxldGUpIHtcblx0XHRcdGNvbHMudW5zaGlmdChcblx0XHRcdFx0PGNvbCB3aWR0aD17VEFCTEVfQ09OVFJPTF9DT0xVTU5fV0lEVEh9IGtleT1cImRlbGV0ZVwiIC8+XG5cdFx0XHQpO1xuXHRcdH1cblxuXHRcdC8vIGFkZCBzb3J0IGNvbCB3aGVuIGF2YWlsYWJsZVxuXHRcdGlmICh0aGlzLnByb3BzLmxpc3Quc29ydGFibGUpIHtcblx0XHRcdGNvbHMudW5zaGlmdChcblx0XHRcdFx0PGNvbCB3aWR0aD17VEFCTEVfQ09OVFJPTF9DT0xVTU5fV0lEVEh9IGtleT1cInNvcnRhYmxlXCIgLz5cblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIChcblx0XHRcdDxjb2xncm91cD5cblx0XHRcdFx0e2NvbHN9XG5cdFx0XHQ8L2NvbGdyb3VwPlxuXHRcdCk7XG5cdH0sXG5cdHJlbmRlckhlYWRlcnMgKCkge1xuXHRcdGxldCBsaXN0Q29udHJvbENvdW50ID0gMDtcblxuXHRcdGlmICh0aGlzLnByb3BzLmxpc3Quc29ydGFibGUpIGxpc3RDb250cm9sQ291bnQrKztcblx0XHRpZiAoIXRoaXMucHJvcHMubGlzdC5ub2RlbGV0ZSkgbGlzdENvbnRyb2xDb3VudCsrO1xuXG5cdFx0Ly8gc2V0IGFjdGl2ZSBzb3J0XG5cdFx0Y29uc3QgYWN0aXZlU29ydFBhdGggPSB0aGlzLnByb3BzLmFjdGl2ZVNvcnQucGF0aHNbMF07XG5cblx0XHQvLyBwYWQgZmlyc3QgY29sIHdoZW4gY29udHJvbHMgYXJlIGF2YWlsYWJsZVxuXHRcdGNvbnN0IGNlbGxQYWQgPSBsaXN0Q29udHJvbENvdW50ID8gKFxuXHRcdFx0PHRoIGNvbFNwYW49e2xpc3RDb250cm9sQ291bnR9IC8+XG5cdFx0KSA6IG51bGw7XG5cblx0XHQvLyBtYXAgZWFjaCBoZWFkaW5nIGNvbHVtblxuXHRcdGNvbnN0IGNlbGxNYXAgPSB0aGlzLnByb3BzLmNvbHVtbnMubWFwKGNvbCA9PiB7XG5cdFx0XHRjb25zdCBpc1NlbGVjdGVkID0gYWN0aXZlU29ydFBhdGggJiYgYWN0aXZlU29ydFBhdGgucGF0aCA9PT0gY29sLnBhdGg7XG5cdFx0XHRjb25zdCBpc0ludmVydGVkID0gaXNTZWxlY3RlZCAmJiBhY3RpdmVTb3J0UGF0aC5pbnZlcnQ7XG5cdFx0XHRjb25zdCBidXR0b25UaXRsZSA9IGBTb3J0IGJ5ICR7Y29sLmxhYmVsfSR7aXNTZWxlY3RlZCAmJiAhaXNJbnZlcnRlZCA/ICcgKGRlc2MpJyA6ICcnfWA7XG5cdFx0XHRjb25zdCBjb2xDbGFzc05hbWUgPSBjbGFzc25hbWVzKCdJdGVtTGlzdF9fc29ydC1idXR0b24gdGgtc29ydCcsIHtcblx0XHRcdFx0J3RoLXNvcnQtLWFzYyc6IGlzU2VsZWN0ZWQgJiYgIWlzSW52ZXJ0ZWQsXG5cdFx0XHRcdCd0aC1zb3J0LS1kZXNjJzogaXNJbnZlcnRlZCxcblx0XHRcdH0pO1xuXG5cdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHQ8dGgga2V5PXtjb2wucGF0aH0gY29sU3Bhbj1cIjFcIj5cblx0XHRcdFx0XHQ8YnV0dG9uXG5cdFx0XHRcdFx0XHRjbGFzc05hbWU9e2NvbENsYXNzTmFtZX1cblx0XHRcdFx0XHRcdG9uQ2xpY2s9eygpID0+IHtcblx0XHRcdFx0XHRcdFx0dGhpcy5wcm9wcy5oYW5kbGVTb3J0U2VsZWN0KFxuXHRcdFx0XHRcdFx0XHRcdGNvbC5wYXRoLFxuXHRcdFx0XHRcdFx0XHRcdGlzU2VsZWN0ZWQgJiYgIWlzSW52ZXJ0ZWRcblx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdH19XG5cdFx0XHRcdFx0XHR0aXRsZT17YnV0dG9uVGl0bGV9PlxuXHRcdFx0XHRcdFx0e2NvbC5sYWJlbH1cblx0XHRcdFx0XHRcdDxzcGFuIGNsYXNzTmFtZT1cInRoLXNvcnRfX2ljb25cIiAvPlxuXHRcdFx0XHRcdDwvYnV0dG9uPlxuXHRcdFx0XHQ8L3RoPlxuXHRcdFx0KTtcblx0XHR9KTtcblxuXHRcdHJldHVybiAoXG5cdFx0XHQ8dGhlYWQ+XG5cdFx0XHRcdDx0cj5cblx0XHRcdFx0XHR7Y2VsbFBhZH1cblx0XHRcdFx0XHR7Y2VsbE1hcH1cblx0XHRcdFx0PC90cj5cblx0XHRcdDwvdGhlYWQ+XG5cdFx0KTtcblx0fSxcblx0cmVuZGVyICgpIHtcblx0XHRjb25zdCB7IGl0ZW1zIH0gPSB0aGlzLnByb3BzO1xuXHRcdGlmICghaXRlbXMucmVzdWx0cy5sZW5ndGgpIHJldHVybiBudWxsO1xuXG5cdFx0Y29uc3QgdGFibGVCb2R5ID0gKHRoaXMucHJvcHMubGlzdC5zb3J0YWJsZSkgPyAoXG5cdFx0XHQ8RHJhZ0Ryb3Agey4uLnRoaXMucHJvcHN9IC8+XG5cdFx0KSA6IChcblx0XHRcdDx0Ym9keSA+XG5cdFx0XHRcdHtpdGVtcy5yZXN1bHRzLm1hcCgoaXRlbSwgaSkgPT4ge1xuXHRcdFx0XHRcdHJldHVybiAoXG5cdFx0XHRcdFx0XHQ8VGFibGVSb3cga2V5PXtpdGVtLmlkfVxuXHRcdFx0XHRcdFx0XHRkZWxldGVUYWJsZUl0ZW09e3RoaXMucHJvcHMuZGVsZXRlVGFibGVJdGVtfVxuXHRcdFx0XHRcdFx0XHRpbmRleD17aX1cblx0XHRcdFx0XHRcdFx0c29ydE9yZGVyPXtpdGVtLnNvcnRPcmRlciB8fCAwfVxuXHRcdFx0XHRcdFx0XHRpZD17aXRlbS5pZH1cblx0XHRcdFx0XHRcdFx0aXRlbT17aXRlbX1cblx0XHRcdFx0XHRcdFx0ey4uLnRoaXMucHJvcHN9XG5cdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH0pfVxuXHRcdFx0PC90Ym9keT5cblx0XHQpO1xuXG5cdFx0cmV0dXJuIChcblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiSXRlbUxpc3Qtd3JhcHBlclwiPlxuXHRcdFx0XHQ8dGFibGUgY2VsbFBhZGRpbmc9XCIwXCIgY2VsbFNwYWNpbmc9XCIwXCIgY2xhc3NOYW1lPVwiVGFibGUgSXRlbUxpc3RcIj5cblx0XHRcdFx0XHR7dGhpcy5yZW5kZXJDb2xzKCl9XG5cdFx0XHRcdFx0e3RoaXMucmVuZGVySGVhZGVycygpfVxuXHRcdFx0XHRcdHt0YWJsZUJvZHl9XG5cdFx0XHRcdDwvdGFibGU+XG5cdFx0XHQ8L2Rpdj5cblx0XHQpO1xuXHR9LFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IEl0ZW1zVGFibGU7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRHJhZ0Ryb3BDb250ZXh0IH0gZnJvbSAncmVhY3QtZG5kJztcbmltcG9ydCBIVE1MNUJhY2tlbmQgZnJvbSAncmVhY3QtZG5kLWh0bWw1LWJhY2tlbmQnO1xuaW1wb3J0IHsgU29ydGFibGUgfSBmcm9tICcuL0l0ZW1zVGFibGVSb3cnO1xuaW1wb3J0IERyb3Bab25lIGZyb20gJy4vSXRlbXNUYWJsZURyYWdEcm9wWm9uZSc7XG5cbnZhciBJdGVtc1RhYmxlRHJhZ0Ryb3AgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cdGRpc3BsYXlOYW1lOiAnSXRlbXNUYWJsZURyYWdEcm9wJyxcblx0cHJvcFR5cGVzOiB7XG5cdFx0Y29sdW1uczogUmVhY3QuUHJvcFR5cGVzLmFycmF5LFxuXHRcdGlkOiBSZWFjdC5Qcm9wVHlwZXMuYW55LFxuXHRcdGluZGV4OiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLFxuXHRcdGl0ZW1zOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuXHRcdGxpc3Q6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG5cdH0sXG5cdHJlbmRlciAoKSB7XG5cdFx0cmV0dXJuIChcblx0XHRcdDx0Ym9keSA+XG5cdFx0XHRcdHt0aGlzLnByb3BzLml0ZW1zLnJlc3VsdHMubWFwKChpdGVtLCBpKSA9PiB7XG5cdFx0XHRcdFx0cmV0dXJuIChcblx0XHRcdFx0XHRcdDxTb3J0YWJsZSBrZXk9e2l0ZW0uaWR9XG5cdFx0XHRcdFx0XHRcdGluZGV4PXtpfVxuXHRcdFx0XHRcdFx0XHRzb3J0T3JkZXI9e2l0ZW0uc29ydE9yZGVyIHx8IDB9XG5cdFx0XHRcdFx0XHRcdGlkPXtpdGVtLmlkfVxuXHRcdFx0XHRcdFx0XHRpdGVtPXtpdGVtfVxuXHRcdFx0XHRcdFx0XHR7Li4udGhpcy5wcm9wc31cblx0XHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fSl9XG5cdFx0XHRcdDxEcm9wWm9uZSB7Li4udGhpcy5wcm9wc30gLz5cblx0XHRcdDwvdGJvZHk+XG5cdFx0KTtcblx0fSxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERyYWdEcm9wQ29udGV4dChIVE1MNUJhY2tlbmQpKEl0ZW1zVGFibGVEcmFnRHJvcCk7XG4iLCIvKipcbiAqIFRISVMgSVMgT1JQSEFORUQgQU5EIElTTidUIFJFTkRFUkVEIEFUIFRIRSBNT01FTlRcbiAqIFRISVMgV0FTIERPTkUgVE8gRklOSVNIIFRIRSBSRURVWCBJTlRFR1JBVElPTiwgV0lMTCBSRVdSSVRFIFNPT05cbiAqIC0gQG14c3RiclxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRHJvcFpvbmVUYXJnZXQgZnJvbSAnLi9JdGVtc1RhYmxlRHJhZ0Ryb3Bab25lVGFyZ2V0JztcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuXG52YXIgSXRlbXNUYWJsZURyYWdEcm9wWm9uZSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblx0ZGlzcGxheU5hbWU6ICdJdGVtc1RhYmxlRHJhZ0Ryb3Bab25lJyxcblx0cHJvcFR5cGVzOiB7XG5cdFx0Y29sdW1uczogUmVhY3QuUHJvcFR5cGVzLmFycmF5LFxuXHRcdGNvbm5lY3REcm9wVGFyZ2V0OiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcblx0XHRpdGVtczogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcblx0XHRsaXN0OiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuXHR9LFxuXHRyZW5kZXJQYWdlRHJvcHMgKCkge1xuXHRcdGNvbnN0IHsgaXRlbXMsIGN1cnJlbnRQYWdlLCBwYWdlU2l6ZSB9ID0gdGhpcy5wcm9wcztcblxuXHRcdGNvbnN0IHRvdGFsUGFnZXMgPSBNYXRoLmNlaWwoaXRlbXMuY291bnQgLyBwYWdlU2l6ZSk7XG5cdFx0Y29uc3Qgc3R5bGUgPSB7IGRpc3BsYXk6IHRvdGFsUGFnZXMgPiAxID8gbnVsbCA6ICdub25lJyB9O1xuXG5cdFx0Y29uc3QgcGFnZXMgPSBbXTtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRvdGFsUGFnZXM7IGkrKykge1xuXHRcdFx0Y29uc3QgcGFnZSA9IGkgKyAxO1xuXHRcdFx0Y29uc3QgcGFnZUl0ZW1zID0gJycgKyAocGFnZSAqIHBhZ2VTaXplIC0gKHBhZ2VTaXplIC0gMSkpICsgJyAtICcgKyAocGFnZSAqIHBhZ2VTaXplKTtcblx0XHRcdGNvbnN0IGN1cnJlbnQgPSAocGFnZSA9PT0gY3VycmVudFBhZ2UpO1xuXHRcdFx0Y29uc3QgY2xhc3NOYW1lID0gY2xhc3NuYW1lcygnSXRlbUxpc3RfX2Ryb3B6b25lLS1wYWdlJywge1xuXHRcdFx0XHQnaXMtYWN0aXZlJzogY3VycmVudCxcblx0XHRcdH0pO1xuXHRcdFx0cGFnZXMucHVzaChcblx0XHRcdFx0PERyb3Bab25lVGFyZ2V0XG5cdFx0XHRcdFx0a2V5PXsncGFnZV8nICsgcGFnZX1cblx0XHRcdFx0XHRwYWdlPXtwYWdlfVxuXHRcdFx0XHRcdGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuXHRcdFx0XHRcdHBhZ2VJdGVtcz17cGFnZUl0ZW1zfVxuXHRcdFx0XHRcdHBhZ2VTaXplPXtwYWdlU2l6ZX1cblx0XHRcdFx0XHRjdXJyZW50UGFnZT17Y3VycmVudFBhZ2V9XG5cdFx0XHRcdFx0ZHJhZz17dGhpcy5wcm9wcy5kcmFnfVxuXHRcdFx0XHRcdGRpc3BhdGNoPXt0aGlzLnByb3BzLmRpc3BhdGNofVxuXHRcdFx0XHQvPlxuXHRcdFx0KTtcblx0XHR9XG5cblx0XHRsZXQgY29scyA9IHRoaXMucHJvcHMuY29sdW1ucy5sZW5ndGg7XG5cdFx0aWYgKHRoaXMucHJvcHMubGlzdC5zb3J0YWJsZSkgY29scysrO1xuXHRcdGlmICghdGhpcy5wcm9wcy5saXN0Lm5vZGVsZXRlKSBjb2xzKys7XG5cdFx0cmV0dXJuIChcblx0XHRcdDx0ciBzdHlsZT17c3R5bGV9PlxuXHRcdFx0XHQ8dGQgY29sU3Bhbj17Y29sc30gPlxuXHRcdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiSXRlbUxpc3RfX2Ryb3B6b25lXCIgPlxuXHRcdFx0XHRcdFx0e3BhZ2VzfVxuXHRcdFx0XHRcdFx0PGRpdiBjbGFzc05hbWU9XCJjbGVhcmZpeFwiIC8+XG5cdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdDwvdGQ+XG5cdFx0XHQ8L3RyPlxuXHRcdCk7XG5cdH0sXG5cdHJlbmRlciAoKSB7XG5cdFx0cmV0dXJuIHRoaXMucmVuZGVyUGFnZURyb3BzKCk7XG5cdH0sXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBJdGVtc1RhYmxlRHJhZ0Ryb3Bab25lO1xuIiwiLyoqXG4gKiBUSElTIElTIE9SUEhBTkVEIEFORCBJU04nVCBSRU5ERVJFRCBBVCBUSEUgTU9NRU5UXG4gKiBUSElTIFdBUyBET05FIFRPIEZJTklTSCBUSEUgUkVEVVggSU5URUdSQVRJT04sIFdJTEwgUkVXUklURSBTT09OXG4gKiAtIEBteHN0YnJcbiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRHJvcFRhcmdldCB9IGZyb20gJ3JlYWN0LWRuZCc7XG5cbmltcG9ydCB7IHNldEN1cnJlbnRQYWdlIH0gZnJvbSAnLi4vLi4vYWN0aW9ucyc7XG5cbmxldCB0aW1lb3V0SUQgPSBmYWxzZTtcblxuLy8gZHJvcCB0YXJnZXRcbnZhciBJdGVtc1RhYmxlRHJhZ0Ryb3Bab25lVGFyZ2V0ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuXHRkaXNwbGF5TmFtZTogJ0l0ZW1zVGFibGVEcmFnRHJvcFpvbmVUYXJnZXQnLFxuXHRwcm9wVHlwZXM6IHtcblx0XHRjbGFzc05hbWU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG5cdFx0Y29ubmVjdERyb3BUYXJnZXQ6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuXHRcdGlzT3ZlcjogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG5cdFx0cGFnZUl0ZW1zOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuXHR9LFxuXHRjb21wb25lbnREaWRVcGRhdGUgKCkge1xuXHRcdGlmICh0aW1lb3V0SUQgJiYgIXRoaXMucHJvcHMuaXNPdmVyKSB7XG5cdFx0XHRjbGVhclRpbWVvdXQodGltZW91dElEKTtcblx0XHRcdHRpbWVvdXRJRCA9IGZhbHNlO1xuXHRcdH1cblx0fSxcblx0cmVuZGVyICgpIHtcblx0XHRjb25zdCB7IHBhZ2VJdGVtcywgcGFnZSwgaXNPdmVyLCBkaXNwYXRjaCB9ID0gdGhpcy5wcm9wcztcblx0XHRsZXQgeyBjbGFzc05hbWUgfSA9IHRoaXMucHJvcHM7XG5cdFx0aWYgKGlzT3Zlcikge1xuXHRcdFx0Y2xhc3NOYW1lICs9IChwYWdlID09PSB0aGlzLnByb3BzLmN1cnJlbnRQYWdlKSA/ICcgaXMtYXZhaWxhYmxlICcgOiAnIGlzLXdhaXRpbmcgJztcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMucHJvcHMuY29ubmVjdERyb3BUYXJnZXQoXG5cdFx0XHQ8ZGl2XG5cdFx0XHRcdGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuXHRcdFx0XHRvbkNsaWNrPXsoZSkgPT4ge1xuXHRcdFx0XHRcdGRpc3BhdGNoKHNldEN1cnJlbnRQYWdlKHBhZ2UpKTtcblx0XHRcdFx0fX1cblx0XHRcdD5cblx0XHRcdFx0e3BhZ2VJdGVtc31cblx0XHRcdDwvZGl2Pik7XG5cdH0sXG59KTtcblxuLyoqXG4gKiBJbXBsZW1lbnRzIGRyYWcgdGFyZ2V0LlxuICovXG5jb25zdCBkcm9wVGFyZ2V0ID0ge1xuXHRkcm9wIChwcm9wcywgbW9uaXRvciwgY29tcG9uZW50KSB7XG5cdFx0Ly8gd2Ugc2VuZCBtYW51YWwgZGF0YSB0byBlbmREcmFnIHRvIHNlbmQgdGhpcyBpdGVtIHRvIHRoZSBjb3JyZWN0IHBhZ2Vcblx0XHRjb25zdCB7IHBhZ2UgfSA9IHByb3BzLmRyYWc7XG5cdFx0Y29uc3QgdGFyZ2V0UGFnZSA9IHByb3BzLnBhZ2U7XG5cdFx0Y29uc3QgcGFnZVNpemUgPSBwcm9wcy5wYWdlU2l6ZTtcblxuXHRcdGNvbnN0IGl0ZW0gPSBtb25pdG9yLmdldEl0ZW0oKTtcblx0XHRpdGVtLmdvVG9QYWdlID0gcHJvcHMucGFnZTtcblx0XHRpdGVtLnByZXZTb3J0T3JkZXIgPSBpdGVtLnNvcnRPcmRlcjtcblx0XHQvLyBXb3JrIG91dCB0aGUgbmV3IHNvcnQgb3JkZXIuIElmIHRoZSBuZXcgcGFnZSBpcyBncmVhdGVyLCB3ZSdsbCBwdXQgaXQgYXQgdGhlIHN0YXJ0IG9mIHRoZSBwYWdlLCBhbmRcblx0XHQvLyBpZiBpdCdzIHNtYWxsZXIgd2UnbGwgcHV0IGl0IGF0IHRoZSBlbmQgb2YgdGhlIHBhZ2UuXG5cdFx0aXRlbS5uZXdTb3J0T3JkZXIgPSAodGFyZ2V0UGFnZSA8IHBhZ2UpID8gKHRhcmdldFBhZ2UgKiBwYWdlU2l6ZSkgOiAodGFyZ2V0UGFnZSAqIHBhZ2VTaXplIC0gKHBhZ2VTaXplIC0gMSkpO1xuXHRcdHJldHVybiBpdGVtO1xuXHR9LFxuXHQvKlxuXHQqIFRPRE8gV29yayBvdXQgaWYgaXQncyBwb3NzaWJsZSB0byBpbXBsZW1lbnQgdGhpcyBpbiBhIHdheSB0aGF0IHdvcmtzLlxuXHRob3ZlciAocHJvcHMsIG1vbml0b3IsIGNvbXBvbmVudCkge1xuXHRcdGlmICh0aW1lb3V0SUQpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Y29uc3QgeyBwYWdlLCBjdXJyZW50UGFnZSB9ID0gcHJvcHM7XG5cblx0XHQvLyBzZWxmXG5cdFx0aWYgKHBhZ2UgPT09IGN1cnJlbnRQYWdlKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKG1vbml0b3IuaXNPdmVyKCkpIHtcblx0XHRcdHRpbWVvdXRJRCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHQvLyBJZiB1c2VyIGhvdmVycyBvdmVyIHRoZSB0YXJnZXQgZm9yIGEgd2hpbGUgY2hhbmdlIHRoZSBwYWdlLlxuXHRcdFx0XHQvLyBUT0RPIEdldCB0aGlzIHdvcmtpbmcuIEN1cnJlbnRseSwgaXQgbG9va3MgbGlrZSBpdCdzIGdvaW5nIHRvIHdvcmssIGJ1dCB3aGVuIHlvdVxuXHRcdFx0XHQvLyBkcm9wIG9udG8gYSBuZXcgcGFnZSwgbm8gZHJvcCBldmVudHMgYXJlIGZpcmVkLCBhbmQgcmVhY3QtZG5kIGRvZXNuJ3QgaGF2ZSBhIHdheSB0b1xuXHRcdFx0XHQvLyBtYW51YWxseSBmb3JjZSB0aGVtIHRvIGhhcHBlbi4gTm90IHN1cmUgd2hhdCB0byBkbyBoZXJlLlxuXHRcdFx0XHRwcm9wcy5kaXNwYXRjaChzZXRDdXJyZW50UGFnZShwcm9wcy5wYWdlKSk7XG5cblxuXHRcdFx0XHRjbGVhclRpbWVvdXQodGltZW91dElEKTtcblx0XHRcdFx0dGltZW91dElEID0gZmFsc2U7XG5cdFx0XHR9LCA3NTApO1xuXHRcdH1cblx0fSxcblx0Ki9cbn07XG4vKipcbiAqIFNwZWNpZmllcyB0aGUgcHJvcHMgdG8gaW5qZWN0IGludG8geW91ciBjb21wb25lbnQuXG4gKi9cbmZ1bmN0aW9uIGRyb3BQcm9wcyAoY29ubmVjdCwgbW9uaXRvcikge1xuXHRyZXR1cm4ge1xuXHRcdGNvbm5lY3REcm9wVGFyZ2V0OiBjb25uZWN0LmRyb3BUYXJnZXQoKSxcblx0XHRpc092ZXI6IG1vbml0b3IuaXNPdmVyKCksXG5cdH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IERyb3BUYXJnZXQoJ2l0ZW0nLCBkcm9wVGFyZ2V0LCBkcm9wUHJvcHMpKEl0ZW1zVGFibGVEcmFnRHJvcFpvbmVUYXJnZXQpO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5pbXBvcnQgTGlzdENvbnRyb2wgZnJvbSAnLi4vTGlzdENvbnRyb2wnO1xuXG5pbXBvcnQgeyBDb2x1bW5zIH0gZnJvbSAnRmllbGRUeXBlcyc7XG5pbXBvcnQgeyBEcm9wVGFyZ2V0LCBEcmFnU291cmNlIH0gZnJvbSAncmVhY3QtZG5kJztcblxuaW1wb3J0IHtcblx0c2V0RHJhZ0Jhc2UsXG5cdHJlc2V0SXRlbXMsXG5cdHJlb3JkZXJJdGVtcyxcblx0c2V0Um93QWxlcnQsXG5cdG1vdmVJdGVtLFxufSBmcm9tICcuLi8uLi9hY3Rpb25zJztcblxuY29uc3QgSXRlbXNSb3cgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cdHByb3BUeXBlczoge1xuXHRcdGNvbHVtbnM6IFJlYWN0LlByb3BUeXBlcy5hcnJheSxcblx0XHRpZDogUmVhY3QuUHJvcFR5cGVzLmFueSxcblx0XHRpbmRleDogUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcblx0XHRpdGVtczogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcblx0XHRsaXN0OiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuXHRcdC8vIEluamVjdGVkIGJ5IFJlYWN0IERuRDpcblx0XHRpc0RyYWdnaW5nOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCwgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC9zb3J0LXByb3AtdHlwZXNcblx0XHRjb25uZWN0RHJhZ1NvdXJjZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3Qvc29ydC1wcm9wLXR5cGVzXG5cdFx0Y29ubmVjdERyb3BUYXJnZXQ6IFJlYWN0LlByb3BUeXBlcy5mdW5jLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlYWN0L3NvcnQtcHJvcC10eXBlc1xuXHRcdGNvbm5lY3REcmFnUHJldmlldzogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3Qvc29ydC1wcm9wLXR5cGVzXG5cdH0sXG5cdHJlbmRlclJvdyAoaXRlbSkge1xuXHRcdGNvbnN0IGl0ZW1JZCA9IGl0ZW0uaWQ7XG5cdFx0Y29uc3Qgcm93Q2xhc3NuYW1lID0gY2xhc3NuYW1lcyh7XG5cdFx0XHQnSXRlbUxpc3RfX3Jvdy0tZHJhZ2dpbmcnOiB0aGlzLnByb3BzLmlzRHJhZ2dpbmcsXG5cdFx0XHQnSXRlbUxpc3RfX3Jvdy0tc2VsZWN0ZWQnOiB0aGlzLnByb3BzLmNoZWNrZWRJdGVtc1tpdGVtSWRdLFxuXHRcdFx0J0l0ZW1MaXN0X19yb3ctLW1hbmFnZSc6IHRoaXMucHJvcHMubWFuYWdlTW9kZSxcblx0XHRcdCdJdGVtTGlzdF9fcm93LS1zdWNjZXNzJzogdGhpcy5wcm9wcy5yb3dBbGVydC5zdWNjZXNzID09PSBpdGVtSWQsXG5cdFx0XHQnSXRlbUxpc3RfX3Jvdy0tZmFpbHVyZSc6IHRoaXMucHJvcHMucm93QWxlcnQuZmFpbCA9PT0gaXRlbUlkLFxuXHRcdH0pO1xuXHRcdC8vIGl0ZW0gZmllbGRzXG5cdFx0dmFyIGNlbGxzID0gdGhpcy5wcm9wcy5jb2x1bW5zLm1hcCgoY29sLCBpKSA9PiB7XG5cdFx0XHR2YXIgQ29sdW1uVHlwZSA9IENvbHVtbnNbY29sLnR5cGVdIHx8IENvbHVtbnMuX191bnJlY29nbmlzZWRfXztcblx0XHRcdHZhciBsaW5rVG8gPSAhaSA/IGAke0tleXN0b25lLmFkbWluUGF0aH0vJHt0aGlzLnByb3BzLmxpc3QucGF0aH0vJHtpdGVtSWR9YCA6IHVuZGVmaW5lZDtcblx0XHRcdHJldHVybiA8Q29sdW1uVHlwZSBrZXk9e2NvbC5wYXRofSBsaXN0PXt0aGlzLnByb3BzLmxpc3R9IGNvbD17Y29sfSBkYXRhPXtpdGVtfSBsaW5rVG89e2xpbmtUb30gLz47XG5cdFx0fSk7XG5cblx0XHQvLyBhZGQgc29ydGFibGUgaWNvbiB3aGVuIGFwcGxpY2FibGVcblx0XHRpZiAodGhpcy5wcm9wcy5saXN0LnNvcnRhYmxlKSB7XG5cdFx0XHRjZWxscy51bnNoaWZ0KDxMaXN0Q29udHJvbCBrZXk9XCJfc29ydFwiIHR5cGU9XCJzb3J0YWJsZVwiIGRyYWdTb3VyY2U9e3RoaXMucHJvcHMuY29ubmVjdERyYWdTb3VyY2V9IC8+KTtcblx0XHR9XG5cblx0XHQvLyBhZGQgZGVsZXRlL2NoZWNrIGljb24gd2hlbiBhcHBsaWNhYmxlXG5cdFx0aWYgKCF0aGlzLnByb3BzLmxpc3Qubm9kZWxldGUpIHtcblx0XHRcdGNlbGxzLnVuc2hpZnQodGhpcy5wcm9wcy5tYW5hZ2VNb2RlID8gKFxuXHRcdFx0XHQ8TGlzdENvbnRyb2wga2V5PVwiX2NoZWNrXCIgdHlwZT1cImNoZWNrXCIgYWN0aXZlPXt0aGlzLnByb3BzLmNoZWNrZWRJdGVtc1tpdGVtSWRdfSAvPlxuXHRcdFx0KSA6IChcblx0XHRcdFx0PExpc3RDb250cm9sIGtleT1cIl9kZWxldGVcIiBvbkNsaWNrPXsoZSkgPT4gdGhpcy5wcm9wcy5kZWxldGVUYWJsZUl0ZW0oaXRlbSwgZSl9IHR5cGU9XCJkZWxldGVcIiAvPlxuXHRcdFx0KSk7XG5cdFx0fVxuXG5cdFx0dmFyIGFkZFJvdyA9ICg8dHIga2V5PXsnaScgKyBpdGVtLmlkfSBvbkNsaWNrPXt0aGlzLnByb3BzLm1hbmFnZU1vZGUgPyAoZSkgPT4gdGhpcy5wcm9wcy5jaGVja1RhYmxlSXRlbShpdGVtLCBlKSA6IG51bGx9IGNsYXNzTmFtZT17cm93Q2xhc3NuYW1lfT57Y2VsbHN9PC90cj4pO1xuXG5cdFx0aWYgKHRoaXMucHJvcHMubGlzdC5zb3J0YWJsZSkge1xuXHRcdFx0cmV0dXJuIChcblx0XHRcdFx0Ly8gd2UgY291bGQgYWRkIGEgcHJldmlldyBjb250YWluZXIvaW1hZ2Vcblx0XHRcdFx0Ly8gdGhpcy5wcm9wcy5jb25uZWN0RHJhZ1ByZXZpZXcodGhpcy5wcm9wcy5jb25uZWN0RHJvcFRhcmdldChhZGRSb3cpKVxuXHRcdFx0XHR0aGlzLnByb3BzLmNvbm5lY3REcm9wVGFyZ2V0KGFkZFJvdylcblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiAoYWRkUm93KTtcblx0XHR9XG5cdH0sXG5cdHJlbmRlciAoKSB7XG5cdFx0cmV0dXJuIHRoaXMucmVuZGVyUm93KHRoaXMucHJvcHMuaXRlbSk7XG5cdH0sXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gSXRlbXNSb3c7XG5cbi8vIEV4cG9zZSBTb3J0YWJsZVxuXG4vKipcbiAqIEltcGxlbWVudHMgZHJhZyBzb3VyY2UuXG4gKi9cbmNvbnN0IGRyYWdJdGVtID0ge1xuXHRiZWdpbkRyYWcgKHByb3BzKSB7XG5cdFx0Y29uc3Qgc2VuZCA9IHsgLi4ucHJvcHMgfTtcblx0XHRwcm9wcy5kaXNwYXRjaChzZXREcmFnQmFzZShwcm9wcy5pdGVtLCBwcm9wcy5pbmRleCkpO1xuXHRcdHJldHVybiB7IC4uLnNlbmQgfTtcblx0fSxcblx0ZW5kRHJhZyAocHJvcHMsIG1vbml0b3IsIGNvbXBvbmVudCkge1xuXHRcdGlmICghbW9uaXRvci5kaWREcm9wKCkpIHtcblx0XHRcdHByb3BzLmRpc3BhdGNoKHJlc2V0SXRlbXMocHJvcHMuaWQpKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Y29uc3QgcGFnZSA9IHByb3BzLmN1cnJlbnRQYWdlO1xuXHRcdGNvbnN0IHBhZ2VTaXplID0gcHJvcHMucGFnZVNpemU7XG5cblx0XHQvLyBJZiB3ZSB3ZXJlIGRyb3BwZWQgb250byBhIHBhZ2UgY2hhbmdlIHRhcmdldCwgdGhlbiBkcm9wcGVkT24ucHJldlNvcnRPcmRlciBldGMgd2lsbCBiZVxuXHRcdC8vIHNldCBieSB0aGF0IHRhcmdldCwgYW5kIHdlIHNob3VsZCB1c2UgdGhvc2UgdmFsdWVzLiBJZiB3ZSB3ZXJlIGp1c3QgZHJvcHBlZCBvbnRvIGEgbmV3IHJvd1xuXHRcdC8vIHRoZW4gd2UgbmVlZCB0byBjYWxjdWxhdGUgdGhlc2UgdmFsdWVzIG91cnNlbHZlcy5cblx0XHRjb25zdCBkcm9wcGVkT24gPSBtb25pdG9yLmdldERyb3BSZXN1bHQoKTtcblxuXHRcdGNvbnN0IHByZXZTb3J0T3JkZXIgPSBkcm9wcGVkT24ucHJldlNvcnRPcmRlciB8fCBwcm9wcy5zb3J0T3JkZXI7XG5cdFx0Ly8gVG8gZXhwbGFpbiB0aGUgZm9sbG93aW5nIGxpbmUsIHN1cHBvc2Ugd2UgYXJlIG9uIHBhZ2UgMyBhbmQgdGhlcmUgYXJlIDEwIGl0ZW1zIHBlciBwYWdlLlxuXHRcdC8vIFByZXZpb3VzIHRvIHRoaXMgcGFnZSwgdGhlcmUgYXJlICgzIC0gMSkqMTAgPSAyMCBpdGVtcyBiZWZvcmUgdXMuIElmIHdlIGhhdmUgaW5kZXggNlxuXHRcdC8vIG9uIHRoaXMgcGFnZSwgdGhlbiB3ZSdyZSB0aGUgN3RoIGl0ZW0gdG8gZGlzcGxheSAoaW5kZXggc3RhcnRzIGZyb20gMCksIGFuZCBzbyB3ZVxuXHRcdC8vIHdhbnQgdG8gdXBkYXRlIHRoZSBkaXNwbGF5IG9yZGVyIHRvIDIwICsgNyA9IDI3LlxuXHRcdGNvbnN0IG5ld1NvcnRPcmRlciA9IGRyb3BwZWRPbi5uZXdTb3J0T3JkZXIgfHwgKHBhZ2UgLSAxKSAqIHBhZ2VTaXplICsgZHJvcHBlZE9uLmluZGV4ICsgMTtcblxuXHRcdC8vIElmIHdlIHdlcmUgZHJvcHBlZCBvbiBhIHBhZ2UgY2hhbmdlIHRhcmdldCwgdGhlbiBkcm9wcGVkT24uZ290VG9QYWdlIHdpbGwgYmUgc2V0LCBhbmQgd2Ugc2hvdWxkXG5cdFx0Ly8gcGFzcyB0aGlzIHRvIHJlb3JkZXJJdGVtcywgd2hpY2ggd2lsbCB0aGVuIGNoYW5nZSB0aGUgcGFnZSBmb3IgdGhlIHVzZXIuXG5cdFx0cHJvcHMuZGlzcGF0Y2gocmVvcmRlckl0ZW1zKHByb3BzLml0ZW0sIHByZXZTb3J0T3JkZXIsIG5ld1NvcnRPcmRlciwgTnVtYmVyKGRyb3BwZWRPbi5nb1RvUGFnZSkpKTtcblx0fSxcbn07XG4vKipcbiAqIEltcGxlbWVudHMgZHJhZyB0YXJnZXQuXG4gKi9cbmNvbnN0IGRyb3BJdGVtID0ge1xuXHRkcm9wIChwcm9wcywgbW9uaXRvciwgY29tcG9uZW50KSB7XG5cdFx0cmV0dXJuIHsgLi4ucHJvcHMgfTtcblx0fSxcblx0aG92ZXIgKHByb3BzLCBtb25pdG9yLCBjb21wb25lbnQpIHtcblx0XHQvLyByZXNldCByb3cgYWxlcnRzXG5cdFx0aWYgKHByb3BzLnJvd0FsZXJ0LnN1Y2Nlc3MgfHwgcHJvcHMucm93QWxlcnQuZmFpbCkge1xuXHRcdFx0cHJvcHMuZGlzcGF0Y2goc2V0Um93QWxlcnQoe1xuXHRcdFx0XHRyZXNldDogdHJ1ZSxcblx0XHRcdH0pKTtcblx0XHR9XG5cblx0XHRjb25zdCBkcmFnZ2VkID0gbW9uaXRvci5nZXRJdGVtKCkuaW5kZXg7XG5cdFx0Y29uc3Qgb3ZlciA9IHByb3BzLmluZGV4O1xuXG5cdFx0Ly8gc2VsZlxuXHRcdGlmIChkcmFnZ2VkID09PSBvdmVyKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0cHJvcHMuZGlzcGF0Y2gobW92ZUl0ZW0oZHJhZ2dlZCwgb3ZlciwgcHJvcHMpKTtcblx0XHRtb25pdG9yLmdldEl0ZW0oKS5pbmRleCA9IG92ZXI7XG5cdH0sXG59O1xuXG4vKipcbiAqIFNwZWNpZmllcyB0aGUgcHJvcHMgdG8gaW5qZWN0IGludG8geW91ciBjb21wb25lbnQuXG4gKi9cbmZ1bmN0aW9uIGRyYWdQcm9wcyAoY29ubmVjdCwgbW9uaXRvcikge1xuXHRyZXR1cm4ge1xuXHRcdGNvbm5lY3REcmFnU291cmNlOiBjb25uZWN0LmRyYWdTb3VyY2UoKSxcblx0XHRpc0RyYWdnaW5nOiBtb25pdG9yLmlzRHJhZ2dpbmcoKSxcblx0XHRjb25uZWN0RHJhZ1ByZXZpZXc6IGNvbm5lY3QuZHJhZ1ByZXZpZXcoKSxcblx0fTtcbn1cblxuZnVuY3Rpb24gZHJvcFByb3BzIChjb25uZWN0KSB7XG5cdHJldHVybiB7XG5cdFx0Y29ubmVjdERyb3BUYXJnZXQ6IGNvbm5lY3QuZHJvcFRhcmdldCgpLFxuXHR9O1xufTtcblxuZXhwb3J0cy5Tb3J0YWJsZSA9IERyYWdTb3VyY2UoJ2l0ZW0nLCBkcmFnSXRlbSwgZHJhZ1Byb3BzKShEcm9wVGFyZ2V0KCdpdGVtJywgZHJvcEl0ZW0sIGRyb3BQcm9wcykoSXRlbXNSb3cpKTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgYXNzaWduIGZyb20gJ29iamVjdC1hc3NpZ24nO1xuXG5pbXBvcnQgUG9wb3V0IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9Qb3BvdXQnO1xuaW1wb3J0IFBvcG91dExpc3QgZnJvbSAnLi4vLi4vLi4vc2hhcmVkL1BvcG91dC9Qb3BvdXRMaXN0JztcbmltcG9ydCB7IEZvcm1JbnB1dCB9IGZyb20gJy4uLy4uLy4uL2VsZW1lbnRhbCc7XG5pbXBvcnQgTGlzdEhlYWRlckJ1dHRvbiBmcm9tICcuL0xpc3RIZWFkZXJCdXR0b24nO1xuXG5pbXBvcnQgeyBzZXRBY3RpdmVDb2x1bW5zIH0gZnJvbSAnLi4vYWN0aW9ucyc7XG5cbnZhciBMaXN0Q29sdW1uc0Zvcm0gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cdGRpc3BsYXlOYW1lOiAnTGlzdENvbHVtbnNGb3JtJyxcblx0Z2V0SW5pdGlhbFN0YXRlICgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VsZWN0ZWRDb2x1bW5zOiB7fSxcblx0XHRcdHNlYXJjaFN0cmluZzogJycsXG5cdFx0fTtcblx0fSxcblx0Z2V0U2VsZWN0ZWRDb2x1bW5zRnJvbVN0b3JlICgpIHtcblx0XHR2YXIgc2VsZWN0ZWRDb2x1bW5zID0ge307XG5cdFx0dGhpcy5wcm9wcy5hY3RpdmVDb2x1bW5zLmZvckVhY2goY29sID0+IHtcblx0XHRcdHNlbGVjdGVkQ29sdW1uc1tjb2wucGF0aF0gPSB0cnVlO1xuXHRcdH0pO1xuXHRcdHJldHVybiBzZWxlY3RlZENvbHVtbnM7XG5cdH0sXG5cdHRvZ2dsZVBvcG91dCAodmlzaWJsZSkge1xuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0c2VsZWN0ZWRDb2x1bW5zOiB0aGlzLmdldFNlbGVjdGVkQ29sdW1uc0Zyb21TdG9yZSgpLFxuXHRcdFx0aXNPcGVuOiB2aXNpYmxlLFxuXHRcdFx0c2VhcmNoU3RyaW5nOiAnJyxcblx0XHR9KTtcblx0fSxcblx0dG9nZ2xlQ29sdW1uIChwYXRoLCB2YWx1ZSkge1xuXHRcdGNvbnN0IG5ld0NvbHVtbnMgPSBhc3NpZ24oe30sIHRoaXMuc3RhdGUuc2VsZWN0ZWRDb2x1bW5zKTtcblxuXHRcdGlmICh2YWx1ZSkge1xuXHRcdFx0bmV3Q29sdW1uc1twYXRoXSA9IHZhbHVlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkZWxldGUgbmV3Q29sdW1uc1twYXRoXTtcblx0XHR9XG5cblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdHNlbGVjdGVkQ29sdW1uczogbmV3Q29sdW1ucyxcblx0XHR9KTtcblx0fSxcblx0YXBwbHlDb2x1bW5zICgpIHtcblx0XHR0aGlzLnByb3BzLmRpc3BhdGNoKHNldEFjdGl2ZUNvbHVtbnMoT2JqZWN0LmtleXModGhpcy5zdGF0ZS5zZWxlY3RlZENvbHVtbnMpKSk7XG5cdFx0dGhpcy50b2dnbGVQb3BvdXQoZmFsc2UpO1xuXHR9LFxuXHR1cGRhdGVTZWFyY2ggKGUpIHtcblx0XHR0aGlzLnNldFN0YXRlKHsgc2VhcmNoU3RyaW5nOiBlLnRhcmdldC52YWx1ZSB9KTtcblx0fSxcblx0cmVuZGVyQ29sdW1ucyAoKSB7XG5cdFx0Y29uc3QgYXZhaWxhYmxlQ29sdW1ucyA9IHRoaXMucHJvcHMuYXZhaWxhYmxlQ29sdW1ucztcblx0XHRjb25zdCB7IHNlYXJjaFN0cmluZyB9ID0gdGhpcy5zdGF0ZTtcblx0XHRsZXQgZmlsdGVyZWRDb2x1bW5zID0gYXZhaWxhYmxlQ29sdW1ucztcblxuXHRcdGlmIChzZWFyY2hTdHJpbmcpIHtcblx0XHRcdGZpbHRlcmVkQ29sdW1ucyA9IGZpbHRlcmVkQ29sdW1uc1xuXHRcdFx0XHQuZmlsdGVyKGNvbHVtbiA9PiBjb2x1bW4udHlwZSAhPT0gJ2hlYWRpbmcnKVxuXHRcdFx0XHQuZmlsdGVyKGNvbHVtbiA9PiBuZXcgUmVnRXhwKHNlYXJjaFN0cmluZykudGVzdChjb2x1bW4uZmllbGQubGFiZWwudG9Mb3dlckNhc2UoKSkpO1xuXHRcdH1cblxuXHRcdHJldHVybiBmaWx0ZXJlZENvbHVtbnMubWFwKChlbCwgaSkgPT4ge1xuXHRcdFx0aWYgKGVsLnR5cGUgPT09ICdoZWFkaW5nJykge1xuXHRcdFx0XHRyZXR1cm4gPFBvcG91dExpc3QuSGVhZGluZyBrZXk9eydoZWFkaW5nXycgKyBpfT57ZWwuY29udGVudH08L1BvcG91dExpc3QuSGVhZGluZz47XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHBhdGggPSBlbC5maWVsZC5wYXRoO1xuXHRcdFx0Y29uc3Qgc2VsZWN0ZWQgPSB0aGlzLnN0YXRlLnNlbGVjdGVkQ29sdW1uc1twYXRoXTtcblxuXHRcdFx0cmV0dXJuIChcblx0XHRcdFx0PFBvcG91dExpc3QuSXRlbVxuXHRcdFx0XHRcdGtleT17J2NvbHVtbl8nICsgZWwuZmllbGQucGF0aH1cblx0XHRcdFx0XHRpY29uPXtzZWxlY3RlZCA/ICdjaGVjaycgOiAnZGFzaCd9XG5cdFx0XHRcdFx0aWNvbkhvdmVyPXtzZWxlY3RlZCA/ICdkYXNoJyA6ICdjaGVjayd9XG5cdFx0XHRcdFx0aXNTZWxlY3RlZD17ISFzZWxlY3RlZH1cblx0XHRcdFx0XHRsYWJlbD17ZWwuZmllbGQubGFiZWx9XG5cdFx0XHRcdFx0b25DbGljaz17KCkgPT4geyB0aGlzLnRvZ2dsZUNvbHVtbihwYXRoLCAhc2VsZWN0ZWQpOyB9fSAvPlxuXHRcdFx0KTtcblx0XHR9KTtcblx0fSxcblx0cmVuZGVyICgpIHtcblx0XHRjb25zdCBmb3JtRmllbGRTdHlsZXMgPSB7XG5cdFx0XHRib3JkZXJCb3R0b206ICcxcHggZGFzaGVkIHJnYmEoMCwwLDAsMC4xKScsXG5cdFx0XHRtYXJnaW5Cb3R0b206ICcxZW0nLFxuXHRcdFx0cGFkZGluZ0JvdHRvbTogJzFlbScsXG5cdFx0fTtcblx0XHRyZXR1cm4gKFxuXHRcdFx0PGRpdj5cblx0XHRcdFx0PExpc3RIZWFkZXJCdXR0b25cblx0XHRcdFx0XHRhY3RpdmU9e3RoaXMuc3RhdGUuaXNPcGVufVxuXHRcdFx0XHRcdGlkPVwibGlzdEhlYWRlckNvbHVtbkJ1dHRvblwiXG5cdFx0XHRcdFx0Z2x5cGg9XCJsaXN0LXVub3JkZXJlZFwiXG5cdFx0XHRcdFx0bGFiZWw9XCJDb2x1bW5zXCJcblx0XHRcdFx0XHRvbkNsaWNrPXsoKSA9PiB0aGlzLnRvZ2dsZVBvcG91dCghdGhpcy5zdGF0ZS5pc09wZW4pfVxuXHRcdFx0XHQvPlxuXHRcdFx0XHQ8UG9wb3V0IGlzT3Blbj17dGhpcy5zdGF0ZS5pc09wZW59IG9uQ2FuY2VsPXsoKSA9PiB0aGlzLnRvZ2dsZVBvcG91dChmYWxzZSl9IHJlbGF0aXZlVG9JRD1cImxpc3RIZWFkZXJDb2x1bW5CdXR0b25cIj5cblx0XHRcdFx0XHQ8UG9wb3V0LkhlYWRlciB0aXRsZT1cIkNvbHVtbnNcIiAvPlxuXHRcdFx0XHRcdDxQb3BvdXQuQm9keSBzY3JvbGxhYmxlPlxuXHRcdFx0XHRcdFx0PGRpdiBzdHlsZT17Zm9ybUZpZWxkU3R5bGVzfT5cblx0XHRcdFx0XHRcdFx0PEZvcm1JbnB1dFxuXHRcdFx0XHRcdFx0XHRcdGF1dG9Gb2N1c1xuXHRcdFx0XHRcdFx0XHRcdG9uQ2hhbmdlPXt0aGlzLnVwZGF0ZVNlYXJjaH1cblx0XHRcdFx0XHRcdFx0XHRwbGFjZWhvbGRlcj1cIkZpbmQgYSBjb2x1bW4uLi5cIlxuXHRcdFx0XHRcdFx0XHRcdHZhbHVlPXt0aGlzLnN0YXRlLnNlYXJjaFN0cmluZ31cblx0XHRcdFx0XHRcdFx0Lz5cblx0XHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdFx0PFBvcG91dExpc3Q+XG5cdFx0XHRcdFx0XHRcdHt0aGlzLnJlbmRlckNvbHVtbnMoKX1cblx0XHRcdFx0XHRcdDwvUG9wb3V0TGlzdD5cblx0XHRcdFx0XHQ8L1BvcG91dC5Cb2R5PlxuXHRcdFx0XHRcdDxQb3BvdXQuRm9vdGVyXG5cdFx0XHRcdFx0XHRwcmltYXJ5QnV0dG9uQWN0aW9uPXt0aGlzLmFwcGx5Q29sdW1uc31cblx0XHRcdFx0XHRcdHByaW1hcnlCdXR0b25MYWJlbD1cIkFwcGx5XCJcblx0XHRcdFx0XHRcdHNlY29uZGFyeUJ1dHRvbkFjdGlvbj17KCkgPT4gdGhpcy50b2dnbGVQb3BvdXQoZmFsc2UpfVxuXHRcdFx0XHRcdFx0c2Vjb25kYXJ5QnV0dG9uTGFiZWw9XCJDYW5jZWxcIiAvPlxuXHRcdFx0XHQ8L1BvcG91dD5cblx0XHRcdDwvZGl2PlxuXHRcdCk7XG5cdH0sXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBMaXN0Q29sdW1uc0Zvcm07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5cbnZhciBMaXN0Q29udHJvbCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblx0cHJvcFR5cGVzOiB7XG5cdFx0ZHJhZ1NvdXJjZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG5cdFx0b25DbGljazogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG5cdFx0dHlwZTogUmVhY3QuUHJvcFR5cGVzLm9uZU9mKFsnY2hlY2snLCAnZGVsZXRlJywgJ3NvcnRhYmxlJ10pLmlzUmVxdWlyZWQsXG5cdH0sXG5cdHJlbmRlckNvbnRyb2wgKCkge1xuXHRcdHZhciBpY29uID0gJ29jdGljb24gb2N0aWNvbi0nO1xuXHRcdHZhciBjbGFzc05hbWUgPSBjbGFzc25hbWVzKCdJdGVtTGlzdF9fY29udHJvbCBJdGVtTGlzdF9fY29udHJvbC0tJyArIHRoaXMucHJvcHMudHlwZSwge1xuXHRcdFx0J2lzLWFjdGl2ZSc6IHRoaXMucHJvcHMuYWN0aXZlLFxuXHRcdH0pO1xuXHRcdHZhciB0YWJpbmRleCA9IHRoaXMucHJvcHMudHlwZSA9PT0gJ3NvcnRhYmxlJyA/IC0xIDogbnVsbDtcblxuXHRcdGlmICh0aGlzLnByb3BzLnR5cGUgPT09ICdjaGVjaycpIHtcblx0XHRcdGljb24gKz0gJ2NoZWNrJztcblx0XHR9XG5cdFx0aWYgKHRoaXMucHJvcHMudHlwZSA9PT0gJ2RlbGV0ZScpIHtcblx0XHRcdGljb24gKz0gJ3RyYXNoY2FuJztcblx0XHR9XG5cdFx0aWYgKHRoaXMucHJvcHMudHlwZSA9PT0gJ3NvcnRhYmxlJykge1xuXHRcdFx0aWNvbiArPSAndGhyZWUtYmFycyc7XG5cdFx0fVxuXG5cdFx0dmFyIHJlbmRlckJ1dHRvbiA9IChcblx0XHRcdDxidXR0b24gdHlwZT1cImJ1dHRvblwiIG9uQ2xpY2s9e3RoaXMucHJvcHMub25DbGlja30gY2xhc3NOYW1lPXtjbGFzc05hbWV9IHRhYkluZGV4PXt0YWJpbmRleH0+XG5cdFx0XHRcdDxzcGFuIGNsYXNzTmFtZT17aWNvbn0gLz5cblx0XHRcdDwvYnV0dG9uPlxuXHRcdCk7XG5cdFx0aWYgKHRoaXMucHJvcHMuZHJhZ1NvdXJjZSkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHJvcHMuZHJhZ1NvdXJjZShyZW5kZXJCdXR0b24pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gcmVuZGVyQnV0dG9uO1xuXHRcdH1cblx0fSxcblx0cmVuZGVyICgpIHtcblx0XHR2YXIgY2xhc3NOYW1lID0gJ0l0ZW1MaXN0X19jb2wtLWNvbnRyb2wgSXRlbUxpc3RfX2NvbC0tJyArIHRoaXMucHJvcHMudHlwZTtcblxuXHRcdHJldHVybiAoXG5cdFx0XHQ8dGQgY2xhc3NOYW1lPXtjbGFzc05hbWV9PlxuXHRcdFx0XHR7dGhpcy5yZW5kZXJDb250cm9sKCl9XG5cdFx0XHQ8L3RkPlxuXHRcdCk7XG5cdH0sXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBMaXN0Q29udHJvbDtcbiIsImltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgYXNzaWduIGZyb20gJ29iamVjdC1hc3NpZ24nO1xuaW1wb3J0IFBvcG91dCBmcm9tICcuLi8uLi8uLi9zaGFyZWQvUG9wb3V0JztcbmltcG9ydCBQb3BvdXRMaXN0IGZyb20gJy4uLy4uLy4uL3NoYXJlZC9Qb3BvdXQvUG9wb3V0TGlzdCc7XG5pbXBvcnQgTGlzdEhlYWRlckJ1dHRvbiBmcm9tICcuL0xpc3RIZWFkZXJCdXR0b24nO1xuaW1wb3J0IHsgTGFiZWxsZWRDb250cm9sLCBGb3JtLCBGb3JtRmllbGQsIFNlZ21lbnRlZENvbnRyb2wgfSBmcm9tICcuLi8uLi8uLi9lbGVtZW50YWwnO1xuXG5pbXBvcnQgeyBkb3dubG9hZEl0ZW1zIH0gZnJvbSAnLi4vYWN0aW9ucyc7XG5jb25zdCBGT1JNQVRfT1BUSU9OUyA9IFtcblx0eyBsYWJlbDogJ0NTVicsIHZhbHVlOiAnY3N2JyB9LFxuXHR7IGxhYmVsOiAnSlNPTicsIHZhbHVlOiAnanNvbicgfSxcbl07XG5cbnZhciBMaXN0RG93bmxvYWRGb3JtID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuXHRwcm9wVHlwZXM6IHtcblx0XHRhY3RpdmVDb2x1bW5zOiBQcm9wVHlwZXMuYXJyYXksXG5cdFx0ZGlzcGF0Y2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cdFx0bGlzdDogUHJvcFR5cGVzLm9iamVjdCxcblx0fSxcblx0Z2V0SW5pdGlhbFN0YXRlICgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Zm9ybWF0OiBGT1JNQVRfT1BUSU9OU1swXS52YWx1ZSxcblx0XHRcdGlzT3BlbjogZmFsc2UsXG5cdFx0XHR1c2VDdXJyZW50Q29sdW1uczogdHJ1ZSxcblx0XHRcdHNlbGVjdGVkQ29sdW1uczogdGhpcy5nZXREZWZhdWx0U2VsZWN0ZWRDb2x1bW5zKCksXG5cdFx0fTtcblx0fSxcblx0Z2V0RGVmYXVsdFNlbGVjdGVkQ29sdW1ucyAoKSB7XG5cdFx0dmFyIHNlbGVjdGVkQ29sdW1ucyA9IHt9O1xuXHRcdHRoaXMucHJvcHMuYWN0aXZlQ29sdW1ucy5mb3JFYWNoKGNvbCA9PiB7XG5cdFx0XHRzZWxlY3RlZENvbHVtbnNbY29sLnBhdGhdID0gdHJ1ZTtcblx0XHR9KTtcblx0XHRyZXR1cm4gc2VsZWN0ZWRDb2x1bW5zO1xuXHR9LFxuXHRnZXRMaXN0VUlFbGVtZW50cyAoKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJvcHMubGlzdC51aUVsZW1lbnRzLm1hcCgoZWwpID0+IHtcblx0XHRcdHJldHVybiBlbC50eXBlID09PSAnZmllbGQnID8ge1xuXHRcdFx0XHR0eXBlOiAnZmllbGQnLFxuXHRcdFx0XHRmaWVsZDogdGhpcy5wcm9wcy5saXN0LmZpZWxkc1tlbC5maWVsZF0sXG5cdFx0XHR9IDogZWw7XG5cdFx0fSk7XG5cdH0sXG5cdGFsbENvbHVtbnNTZWxlY3RlZCAoKSB7XG5cdFx0Y29uc3Qgc2VsZWN0ZWRDb2x1bW5zID0gT2JqZWN0LmtleXModGhpcy5zdGF0ZS5zZWxlY3RlZENvbHVtbnMpLmxlbmd0aDtcblx0XHRjb25zdCBjb2x1bW5BbW91bnQgPSB0aGlzLmdldExpc3RVSUVsZW1lbnRzKCkuZmlsdGVyKChlbCkgPT4gZWwudHlwZSAhPT0gJ2hlYWRpbmcnKS5sZW5ndGg7XG5cdFx0cmV0dXJuIHNlbGVjdGVkQ29sdW1ucyA9PT0gY29sdW1uQW1vdW50O1xuXHR9LFxuXHR0b2dnbGVQb3BvdXQgKHZpc2libGUpIHtcblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdGlzT3BlbjogdmlzaWJsZSxcblx0XHR9KTtcblx0fSxcblx0dG9nZ2xlQ29sdW1uIChjb2x1bW4sIHZhbHVlKSB7XG5cdFx0Y29uc3QgbmV3Q29sdW1ucyA9IGFzc2lnbih7fSwgdGhpcy5zdGF0ZS5zZWxlY3RlZENvbHVtbnMpO1xuXHRcdGlmICh2YWx1ZSkge1xuXHRcdFx0bmV3Q29sdW1uc1tjb2x1bW5dID0gdmFsdWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRlbGV0ZSBuZXdDb2x1bW5zW2NvbHVtbl07XG5cdFx0fVxuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0c2VsZWN0ZWRDb2x1bW5zOiBuZXdDb2x1bW5zLFxuXHRcdH0pO1xuXHR9LFxuXHRjaGFuZ2VGb3JtYXQgKHZhbHVlKSB7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRmb3JtYXQ6IHZhbHVlLFxuXHRcdH0pO1xuXHR9LFxuXHR0b2dnbGVDdXJyZW50bHlTZWxlY3RlZENvbHVtbnMgKGUpIHtcblx0XHRjb25zdCBuZXdTdGF0ZSA9IHtcblx0XHRcdHVzZUN1cnJlbnRDb2x1bW5zOiBlLnRhcmdldC5jaGVja2VkLFxuXHRcdFx0c2VsZWN0ZWRDb2x1bW5zOiB0aGlzLmdldERlZmF1bHRTZWxlY3RlZENvbHVtbnMoKSxcblx0XHR9O1xuXHRcdHRoaXMuc2V0U3RhdGUobmV3U3RhdGUpO1xuXHR9LFxuXHRjbGlja1NlbGVjdEFsbCAoKSB7XG5cdFx0aWYgKHRoaXMuYWxsQ29sdW1uc1NlbGVjdGVkKCkpIHtcblx0XHRcdHRoaXMuc2VsZWN0Tm9Db2x1bW5zKCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuc2VsZWN0QWxsQ29sdW1ucygpO1xuXHRcdH1cblx0fSxcblx0c2VsZWN0QWxsQ29sdW1ucyAoKSB7XG5cdFx0Y29uc3QgbmV3Q29sdW1ucyA9IHt9O1xuXHRcdHRoaXMuZ2V0TGlzdFVJRWxlbWVudHMoKS5tYXAoKGVsKSA9PiB7XG5cdFx0XHRpZiAoZWwudHlwZSAhPT0gJ2hlYWRpbmcnKSB7XG5cdFx0XHRcdG5ld0NvbHVtbnNbZWwuZmllbGQucGF0aF0gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0c2VsZWN0ZWRDb2x1bW5zOiBuZXdDb2x1bW5zLFxuXHRcdH0pO1xuXHR9LFxuXHRzZWxlY3ROb0NvbHVtbnMgKCkge1xuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0c2VsZWN0ZWRDb2x1bW5zOiB7fSxcblx0XHR9KTtcblx0fSxcblx0aGFuZGxlRG93bmxvYWRSZXF1ZXN0ICgpIHtcblx0XHR0aGlzLnByb3BzLmRpc3BhdGNoKGRvd25sb2FkSXRlbXModGhpcy5zdGF0ZS5mb3JtYXQsIE9iamVjdC5rZXlzKHRoaXMuc3RhdGUuc2VsZWN0ZWRDb2x1bW5zKSkpO1xuXHRcdHRoaXMudG9nZ2xlUG9wb3V0KGZhbHNlKTtcblx0fSxcblx0cmVuZGVyQ29sdW1uU2VsZWN0ICgpIHtcblx0XHRpZiAodGhpcy5zdGF0ZS51c2VDdXJyZW50Q29sdW1ucykgcmV0dXJuIG51bGw7XG5cblx0XHRjb25zdCBwb3NzaWJsZUNvbHVtbnMgPSB0aGlzLmdldExpc3RVSUVsZW1lbnRzKCkubWFwKChlbCwgaSkgPT4ge1xuXHRcdFx0aWYgKGVsLnR5cGUgPT09ICdoZWFkaW5nJykge1xuXHRcdFx0XHRyZXR1cm4gPFBvcG91dExpc3QuSGVhZGluZyBrZXk9eydoZWFkaW5nXycgKyBpfT57ZWwuY29udGVudH08L1BvcG91dExpc3QuSGVhZGluZz47XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGNvbHVtbktleSA9IGVsLmZpZWxkLnBhdGg7XG5cdFx0XHRjb25zdCBjb2x1bW5WYWx1ZSA9IHRoaXMuc3RhdGUuc2VsZWN0ZWRDb2x1bW5zW2NvbHVtbktleV07XG5cblx0XHRcdHJldHVybiAoXG5cdFx0XHRcdDxQb3BvdXRMaXN0Lkl0ZW1cblx0XHRcdFx0XHRrZXk9eydpdGVtXycgKyBlbC5maWVsZC5wYXRofVxuXHRcdFx0XHRcdGljb249e2NvbHVtblZhbHVlID8gJ2NoZWNrJyA6ICdkYXNoJ31cblx0XHRcdFx0XHRpY29uSG92ZXI9e2NvbHVtblZhbHVlID8gJ2Rhc2gnIDogJ2NoZWNrJ31cblx0XHRcdFx0XHRpc1NlbGVjdGVkPXtjb2x1bW5WYWx1ZX1cblx0XHRcdFx0XHRsYWJlbD17ZWwuZmllbGQubGFiZWx9XG5cdFx0XHRcdFx0b25DbGljaz17KCkgPT4gdGhpcy50b2dnbGVDb2x1bW4oY29sdW1uS2V5LCAhY29sdW1uVmFsdWUpfSAvPlxuXHRcdFx0KTtcblx0XHR9KTtcblxuXHRcdGNvbnN0IGFsbENvbHVtbnNTZWxlY3RlZCA9IHRoaXMuYWxsQ29sdW1uc1NlbGVjdGVkKCk7XG5cdFx0Y29uc3QgY2hlY2tib3hMYWJlbCA9IGFsbENvbHVtbnNTZWxlY3RlZCA/ICdTZWxlY3QgTm9uZScgOiAnU2VsZWN0IEFsbCc7XG5cblx0XHRyZXR1cm4gKFxuXHRcdFx0PGRpdj5cblx0XHRcdFx0PEZvcm1GaWVsZCBvZmZzZXRBYnNlbnRMYWJlbD5cblx0XHRcdFx0XHQ8TGFiZWxsZWRDb250cm9sXG5cdFx0XHRcdFx0XHRjaGVja2VkPXthbGxDb2x1bW5zU2VsZWN0ZWR9XG5cdFx0XHRcdFx0XHRsYWJlbD17Y2hlY2tib3hMYWJlbH1cblx0XHRcdFx0XHRcdG9uQ2hhbmdlPXt0aGlzLmNsaWNrU2VsZWN0QWxsfVxuXHRcdFx0XHRcdFx0dHlwZT1cImNoZWNrYm94XCJcblx0XHRcdFx0XHRcdHZhbHVlXG5cdFx0XHRcdFx0Lz5cblx0XHRcdFx0PC9Gb3JtRmllbGQ+XG5cdFx0XHRcdDxkaXYgc3R5bGU9e3sgYm9yZGVyVG9wOiAnMXB4IGRhc2hlZCByZ2JhKDAsMCwwLDAuMSknLCBtYXJnaW5Ub3A6ICcxZW0nLCBwYWRkaW5nVG9wOiAnMWVtJyB9fT5cblx0XHRcdFx0XHR7cG9zc2libGVDb2x1bW5zfVxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdDwvZGl2PlxuXHRcdCk7XG5cdH0sXG5cdHJlbmRlciAoKSB7XG5cdFx0Y29uc3QgeyB1c2VDdXJyZW50Q29sdW1ucyB9ID0gdGhpcy5zdGF0ZTtcblxuXHRcdHJldHVybiAoXG5cdFx0XHQ8ZGl2PlxuXHRcdFx0XHQ8TGlzdEhlYWRlckJ1dHRvblxuXHRcdFx0XHRcdGFjdGl2ZT17dGhpcy5zdGF0ZS5pc09wZW59XG5cdFx0XHRcdFx0aWQ9XCJsaXN0SGVhZGVyRG93bmxvYWRCdXR0b25cIlxuXHRcdFx0XHRcdGdseXBoPVwiY2xvdWQtZG93bmxvYWRcIlxuXHRcdFx0XHRcdGxhYmVsPVwiRG93bmxvYWRcIlxuXHRcdFx0XHRcdG9uQ2xpY2s9eygpID0+IHRoaXMudG9nZ2xlUG9wb3V0KCF0aGlzLnN0YXRlLmlzT3Blbil9XG5cdFx0XHRcdC8+XG5cdFx0XHRcdDxQb3BvdXQgaXNPcGVuPXt0aGlzLnN0YXRlLmlzT3Blbn0gb25DYW5jZWw9eygpID0+IHRoaXMudG9nZ2xlUG9wb3V0KGZhbHNlKX0gcmVsYXRpdmVUb0lEPVwibGlzdEhlYWRlckRvd25sb2FkQnV0dG9uXCI+XG5cdFx0XHRcdFx0PFBvcG91dC5IZWFkZXIgdGl0bGU9XCJEb3dubG9hZFwiIC8+XG5cdFx0XHRcdFx0PFBvcG91dC5Cb2R5IHNjcm9sbGFibGU+XG5cdFx0XHRcdFx0XHQ8Rm9ybSBsYXlvdXQ9XCJob3Jpem9udGFsXCIgbGFiZWxXaWR0aD17MTAwfSBjb21wb25lbnQ9XCJkaXZcIj5cblx0XHRcdFx0XHRcdFx0PEZvcm1GaWVsZCBsYWJlbD1cIkZpbGUgZm9ybWF0OlwiPlxuXHRcdFx0XHRcdFx0XHRcdDxTZWdtZW50ZWRDb250cm9sXG5cdFx0XHRcdFx0XHRcdFx0XHRlcXVhbFdpZHRoU2VnbWVudHNcblx0XHRcdFx0XHRcdFx0XHRcdG9uQ2hhbmdlPXt0aGlzLmNoYW5nZUZvcm1hdH1cblx0XHRcdFx0XHRcdFx0XHRcdG9wdGlvbnM9e0ZPUk1BVF9PUFRJT05TfVxuXHRcdFx0XHRcdFx0XHRcdFx0dmFsdWU9e3RoaXMuc3RhdGUuZm9ybWF0fVxuXHRcdFx0XHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0XHRcdDwvRm9ybUZpZWxkPlxuXHRcdFx0XHRcdFx0XHQ8Rm9ybUZpZWxkIGxhYmVsPVwiQ29sdW1uczpcIiBzdHlsZT17eyBtYXJnaW5Cb3R0b206IDAgfX0+XG5cdFx0XHRcdFx0XHRcdFx0PExhYmVsbGVkQ29udHJvbFxuXHRcdFx0XHRcdFx0XHRcdFx0YXV0b0ZvY3VzXG5cdFx0XHRcdFx0XHRcdFx0XHRjaGVja2VkPXt1c2VDdXJyZW50Q29sdW1uc31cblx0XHRcdFx0XHRcdFx0XHRcdGxhYmVsPVwiVXNlIGN1cnJlbnRseSBzZWxlY3RlZFwiXG5cdFx0XHRcdFx0XHRcdFx0XHRvbkNoYW5nZT17dGhpcy50b2dnbGVDdXJyZW50bHlTZWxlY3RlZENvbHVtbnN9XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlPVwiY2hlY2tib3hcIlxuXHRcdFx0XHRcdFx0XHRcdFx0dmFsdWVcblx0XHRcdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0XHQ8L0Zvcm1GaWVsZD5cblx0XHRcdFx0XHRcdFx0e3RoaXMucmVuZGVyQ29sdW1uU2VsZWN0KCl9XG5cdFx0XHRcdFx0XHQ8L0Zvcm0+XG5cdFx0XHRcdFx0PC9Qb3BvdXQuQm9keT5cblx0XHRcdFx0XHQ8UG9wb3V0LkZvb3RlclxuXHRcdFx0XHRcdFx0cHJpbWFyeUJ1dHRvbkFjdGlvbj17dGhpcy5oYW5kbGVEb3dubG9hZFJlcXVlc3R9XG5cdFx0XHRcdFx0XHRwcmltYXJ5QnV0dG9uTGFiZWw9XCJEb3dubG9hZFwiXG5cdFx0XHRcdFx0XHRzZWNvbmRhcnlCdXR0b25BY3Rpb249eygpID0+IHRoaXMudG9nZ2xlUG9wb3V0KGZhbHNlKX1cblx0XHRcdFx0XHRcdHNlY29uZGFyeUJ1dHRvbkxhYmVsPVwiQ2FuY2VsXCIgLz5cblx0XHRcdFx0PC9Qb3BvdXQ+XG5cdFx0XHQ8L2Rpdj5cblx0XHQpO1xuXHR9LFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gTGlzdERvd25sb2FkRm9ybTtcbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2dsYW1vcic7XG5pbXBvcnQgUmVhY3QsIHsgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRHJvcGRvd25CdXR0b24sIEdseXBoIH0gZnJvbSAnLi4vLi4vLi4vZWxlbWVudGFsJztcblxuZnVuY3Rpb24gTGlzdEhlYWRlckJ1dHRvbiAoeyBjbGFzc05hbWUsIGxhYmVsLCBnbHlwaCwgLi4ucHJvcHMgfSkge1xuXHRyZXR1cm4gKFxuXHRcdDxEcm9wZG93bkJ1dHRvbiBibG9jayB7Li4ucHJvcHN9PlxuXHRcdFx0PEdseXBoIG5hbWU9e2dseXBofSBjc3NTdHlsZXM9e2NsYXNzZXMuZ2x5cGh9IC8+XG5cdFx0XHQ8c3BhbiBjbGFzc05hbWU9e2NzcyhjbGFzc2VzLmxhYmVsKX0+e2xhYmVsfTwvc3Bhbj5cblx0XHQ8L0Ryb3Bkb3duQnV0dG9uPlxuXHQpO1xufTtcblxuTGlzdEhlYWRlckJ1dHRvbi5wcm9wVHlwZXMgPSB7XG5cdGdseXBoOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG59O1xuXG4vLyBzaG93IGFuIGljb24gb24gc21hbGwgc2NyZWVucyB3aGVyZSByZWFsIGVzdGF0ZSBpcyBwcmVjaW91c1xuLy8gb3RoZXJ3aXNlIHJlbmRlciB0aGUgbGFiZWxcbmNvbnN0IGNsYXNzZXMgPSB7XG5cdGdseXBoOiB7XG5cdFx0J2Rpc3BsYXknOiAnbm9uZScsXG5cblx0XHQnQG1lZGlhIChtYXgtd2lkdGg6IDUwMHB4KSc6IHtcblx0XHRcdGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuXHRcdH0sXG5cdH0sXG5cdGxhYmVsOiB7XG5cdFx0J2Rpc3BsYXknOiAnaW5saW5lLWJsb2NrJyxcblxuXHRcdCdAbWVkaWEgKG1heC13aWR0aDogNTAwcHgpJzoge1xuXHRcdFx0ZGlzcGxheTogJ25vbmUnLFxuXHRcdH0sXG5cdH0sXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpc3RIZWFkZXJCdXR0b247XG4iLCJpbXBvcnQgeyBjc3MgfSBmcm9tICdnbGFtb3InO1xuaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi8uLi8uLi90aGVtZSc7XG5pbXBvcnQgeyBkYXJrZW4gfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy9jb2xvcic7XG5cbmltcG9ydCB7IEZvcm1JbnB1dCwgR2x5cGggfSBmcm9tICcuLi8uLi8uLi9lbGVtZW50YWwnO1xuXG5mdW5jdGlvbiBMaXN0SGVhZGVyU2VhcmNoICh7XG5cdGZvY3VzSW5wdXQsXG5cdGhhbmRsZUNoYW5nZSxcblx0aGFuZGxlQ2xlYXIsXG5cdGhhbmRsZUtleXVwLFxuXHR2YWx1ZSxcblx0Li4ucHJvcHNcbn0pIHtcblx0cmV0dXJuIChcblx0XHQ8ZGl2IHsuLi5wcm9wc30gY2xhc3NOYW1lPXtjc3MoY2xhc3Nlcy53cmFwcGVyKX0+XG5cdFx0XHQ8Rm9ybUlucHV0XG5cdFx0XHRcdGRhdGEtc2VhcmNoLWlucHV0LWZpZWxkXG5cdFx0XHRcdG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XG5cdFx0XHRcdG9uS2V5VXA9e2hhbmRsZUtleXVwfVxuXHRcdFx0XHRwbGFjZWhvbGRlcj1cIlNlYXJjaFwiXG5cdFx0XHRcdHZhbHVlPXt2YWx1ZX1cblx0XHRcdC8+XG5cdFx0XHQ8YnV0dG9uXG5cdFx0XHRcdGNsYXNzTmFtZT17Y3NzKGNsYXNzZXMuaWNvbiwgISF2YWx1ZS5sZW5ndGggJiYgY2xhc3Nlcy5pY29uV2hlbkNsZWFyKX1cblx0XHRcdFx0ZGF0YS1zZWFyY2gtaW5wdXQtZmllbGQtY2xlYXItaWNvblxuXHRcdFx0XHRkaXNhYmxlZD17IXZhbHVlLmxlbmd0aH1cblx0XHRcdFx0b25DbGljaz17dmFsdWUubGVuZ3RoICYmIGhhbmRsZUNsZWFyfVxuXHRcdFx0XHR0aXRsZT1cIkNsZWFyIHNlYXJjaCBxdWVyeVwiXG5cdFx0XHRcdHR5cGU9XCJidXR0b25cIlxuXHRcdFx0PlxuXHRcdFx0XHQ8R2x5cGggbmFtZT17dmFsdWUubGVuZ3RoID8gJ3gnIDogJ3NlYXJjaCd9IC8+XG5cdFx0XHQ8L2J1dHRvbj5cblx0XHQ8L2Rpdj5cblx0KTtcbn07XG5cbkxpc3RIZWFkZXJTZWFyY2gucHJvcFR5cGVzID0ge1xuXHRmb2N1c0lucHV0OiBQcm9wVHlwZXMuYm9vbCxcblx0aGFuZGxlQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXHRoYW5kbGVDbGVhcjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcblx0aGFuZGxlS2V5dXA6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cdHZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcblxuY29uc3QgY2xlYXJIb3ZlckFuZEZvY3VzU3R5bGVzID0ge1xuXHRjb2xvcjogdGhlbWUuY29sb3IuZGFuZ2VyLFxuXHRvdXRsaW5lOiAwLFxuXHR0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxufTtcblxuY29uc3QgY2xhc3NlcyA9IHtcblx0d3JhcHBlcjoge1xuXHRcdHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuXHR9LFxuXHRpY29uOiB7XG5cdFx0YmFja2dyb3VuZDogJ25vbmUnLFxuXHRcdGJvcmRlcjogJ25vbmUnLFxuXHRcdGNvbG9yOiB0aGVtZS5jb2xvci5ncmF5NDAsXG5cdFx0aGVpZ2h0OiAnMTAwJScsXG5cdFx0cG9zaXRpb246ICdhYnNvbHV0ZScsXG5cdFx0cmlnaHQ6IDAsXG5cdFx0dGV4dEFsaWduOiAnY2VudGVyJyxcblx0XHR0b3A6IDAsXG5cdFx0d2lkdGg6ICcyLjJlbScsXG5cdFx0ekluZGV4OiAyLCAvLyBhYm92ZSB0aGUgZm9ybSBmaWVsZCBvbiBmb2N1c1xuXHR9LFxuXHRpY29uV2hlbkNsZWFyOiB7XG5cdFx0Jzpob3Zlcic6IGNsZWFySG92ZXJBbmRGb2N1c1N0eWxlcyxcblx0XHQnOmZvY3VzJzogY2xlYXJIb3ZlckFuZEZvY3VzU3R5bGVzLFxuXHRcdCc6YWN0aXZlJzoge1xuXHRcdFx0Y29sb3I6IGRhcmtlbih0aGVtZS5jb2xvci5kYW5nZXIsIDEwKSxcblx0XHR9LFxuXHR9LFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBMaXN0SGVhZGVyU2VhcmNoO1xuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcbmltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdGhlbWUgZnJvbSAnLi4vLi4vLi4vLi4vdGhlbWUnO1xuXG5pbXBvcnQgTGlzdFNvcnQgZnJvbSAnLi9MaXN0U29ydCc7XG5cbmZ1bmN0aW9uIExpc3RIZWFkZXJUaXRsZSAoe1xuXHRhY3RpdmVTb3J0LFxuXHRhdmFpbGFibGVDb2x1bW5zLFxuXHRoYW5kbGVTb3J0U2VsZWN0LFxuXHR0aXRsZSxcblx0Li4ucHJvcHNcbn0pIHtcblx0cmV0dXJuIChcblx0XHQ8aDIgY2xhc3NOYW1lPXtjc3MoY2xhc3Nlcy5oZWFkaW5nKX0gey4uLnByb3BzfT5cblx0XHRcdHt0aXRsZX1cblx0XHRcdDxMaXN0U29ydFxuXHRcdFx0XHRhY3RpdmVTb3J0PXthY3RpdmVTb3J0fVxuXHRcdFx0XHRhdmFpbGFibGVDb2x1bW5zPXthdmFpbGFibGVDb2x1bW5zfVxuXHRcdFx0XHRoYW5kbGVTb3J0U2VsZWN0PXtoYW5kbGVTb3J0U2VsZWN0fVxuXHRcdFx0Lz5cblx0XHQ8L2gyPlxuXHQpO1xufTtcblxuTGlzdEhlYWRlclRpdGxlLnByb3BUeXBlcyA9IHtcblx0YWN0aXZlU29ydDogUHJvcFR5cGVzLm9iamVjdCxcblx0YXZhaWxhYmxlQ29sdW1uczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9iamVjdCksXG5cdGhhbmRsZVNvcnRTZWxlY3Q6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cdHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcblxuY29uc3QgY2xhc3NlcyA9IHtcblx0aGVhZGluZzoge1xuXHRcdFtgQG1lZGlhIChtYXgtd2lkdGg6ICR7dGhlbWUuYnJlYWtwb2ludC5tb2JpbGVNYXh9KWBdOiB7XG5cdFx0XHRmb250U2l6ZTogJzEuMjVlbScsXG5cdFx0XHRmb250V2VpZ2h0OiA1MDAsXG5cdFx0fSxcblx0fSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTGlzdEhlYWRlclRpdGxlO1xuIiwiaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7XG5cdEdseXBoQnV0dG9uLFxuXHRJbmxpbmVHcm91cCBhcyBHcm91cCxcblx0SW5saW5lR3JvdXBTZWN0aW9uIGFzIFNlY3Rpb24sXG5cdFJlc3BvbnNpdmVUZXh0LFxufSBmcm9tICcuLi8uLi8uLi9lbGVtZW50YWwnO1xuaW1wb3J0IHRoZW1lIGZyb20gJy4uLy4uLy4uLy4uL3RoZW1lJztcblxuaW1wb3J0IExpc3RDb2x1bW5zRm9ybSBmcm9tICcuL0xpc3RDb2x1bW5zRm9ybSc7XG5pbXBvcnQgTGlzdERvd25sb2FkRm9ybSBmcm9tICcuL0xpc3REb3dubG9hZEZvcm0nO1xuaW1wb3J0IExpc3RIZWFkZXJTZWFyY2ggZnJvbSAnLi9MaXN0SGVhZGVyU2VhcmNoJztcblxuaW1wb3J0IExpc3RGaWx0ZXJzQWRkIGZyb20gJy4vRmlsdGVyaW5nL0xpc3RGaWx0ZXJzQWRkJztcblxuZnVuY3Rpb24gQnV0dG9uRGl2aWRlciAoeyBzdHlsZSwgLi4ucHJvcHMgfSkge1xuXHRwcm9wcy5zdHlsZSA9IHtcblx0XHRib3JkZXJMZWZ0OiAnMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xKScsXG5cdFx0cGFkZGluZ0xlZnQ6ICcwLjc1ZW0nLFxuXHRcdC4uLnN0eWxlLFxuXHR9O1xuXG5cdHJldHVybiA8ZGl2IHsuLi5wcm9wc30gLz47XG59O1xuXG5mdW5jdGlvbiBDcmVhdGVCdXR0b24gKHsgbGlzdE5hbWUsIG9uQ2xpY2ssIC4uLnByb3BzIH0pIHtcblx0cmV0dXJuIChcblx0XHQ8R2x5cGhCdXR0b25cblx0XHRcdGJsb2NrXG5cdFx0XHRjb2xvcj1cInN1Y2Nlc3NcIlxuXHRcdFx0ZGF0YS1lMmUtbGlzdC1jcmVhdGUtYnV0dG9uPVwiaGVhZGVyXCJcblx0XHRcdGdseXBoPVwicGx1c1wiXG5cdFx0XHRvbkNsaWNrPXtvbkNsaWNrfVxuXHRcdFx0cG9zaXRpb249XCJsZWZ0XCJcblx0XHRcdHRpdGxlPXtgQ3JlYXRlICR7bGlzdE5hbWV9YH1cblx0XHRcdHsuLi5wcm9wc31cblx0XHQ+XG5cdFx0XHQ8UmVzcG9uc2l2ZVRleHRcblx0XHRcdFx0dmlzaWJsZVNNPVwiQ3JlYXRlXCJcblx0XHRcdFx0dmlzaWJsZU1EPVwiQ3JlYXRlXCJcblx0XHRcdFx0dmlzaWJsZUxHPXtgQ3JlYXRlICR7bGlzdE5hbWV9YH1cblx0XHRcdC8+XG5cdFx0PC9HbHlwaEJ1dHRvbj5cblx0KTtcbn07XG5cbmZ1bmN0aW9uIExpc3RIZWFkZXJUb29sYmFyICh7XG5cdC8vIGNvbW1vblxuXHRkaXNwYXRjaCxcblx0bGlzdCxcblxuXHQvLyBleHBhbmRcblx0ZXhwYW5kSXNBY3RpdmUsXG5cdGV4cGFuZE9uQ2xpY2ssXG5cblx0Ly8gbGlzdFxuXHRjcmVhdGVJc0F2YWlsYWJsZSxcblx0Y3JlYXRlTGlzdE5hbWUsXG5cdGNyZWF0ZU9uQ2xpY2ssXG5cblx0Ly8gc2VhcmNoXG5cdHNlYXJjaEhhbmRsZUNoYW5nZSxcblx0c2VhcmNoSGFuZGxlQ2xlYXIsXG5cdHNlYXJjaEhhbmRsZUtleXVwLFxuXHRzZWFyY2hWYWx1ZSxcblxuXHQvLyBmaWx0ZXJzXG5cdGZpbHRlcnNBY3RpdmUsXG5cdGZpbHRlcnNBdmFpbGFibGUsXG5cblx0Ly8gY29sdW1uc1xuXHRjb2x1bW5zQXZhaWxhYmxlLFxuXHRjb2x1bW5zQWN0aXZlLFxuXG5cdC4uLnByb3BzXG59KSB7XG5cdHJldHVybiAoXG5cdFx0PEdyb3VwIGJsb2NrIGNzc1N0eWxlcz17Y2xhc3Nlcy53cmFwcGVyfT5cblx0XHRcdDxTZWN0aW9uIGdyb3cgY3NzU3R5bGVzPXtjbGFzc2VzLnNlYXJjaH0+XG5cdFx0XHRcdDxMaXN0SGVhZGVyU2VhcmNoXG5cdFx0XHRcdFx0aGFuZGxlQ2hhbmdlPXtzZWFyY2hIYW5kbGVDaGFuZ2V9XG5cdFx0XHRcdFx0aGFuZGxlQ2xlYXI9e3NlYXJjaEhhbmRsZUNsZWFyfVxuXHRcdFx0XHRcdGhhbmRsZUtleXVwPXtzZWFyY2hIYW5kbGVLZXl1cH1cblx0XHRcdFx0XHR2YWx1ZT17c2VhcmNoVmFsdWV9XG5cdFx0XHRcdC8+XG5cdFx0XHQ8L1NlY3Rpb24+XG5cdFx0XHQ8U2VjdGlvbiBncm93IGNzc1N0eWxlcz17Y2xhc3Nlcy5idXR0b25zfT5cblx0XHRcdFx0PEdyb3VwIGJsb2NrPlxuXHRcdFx0XHRcdDxTZWN0aW9uIGNzc1N0eWxlcz17Y2xhc3Nlcy5maWx0ZXJ9PlxuXHRcdFx0XHRcdFx0PExpc3RGaWx0ZXJzQWRkXG5cdFx0XHRcdFx0XHRcdGRpc3BhdGNoPXtkaXNwYXRjaH1cblx0XHRcdFx0XHRcdFx0YWN0aXZlRmlsdGVycz17ZmlsdGVyc0FjdGl2ZX1cblx0XHRcdFx0XHRcdFx0YXZhaWxhYmxlRmlsdGVycz17ZmlsdGVyc0F2YWlsYWJsZX1cblx0XHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0PC9TZWN0aW9uPlxuXHRcdFx0XHRcdDxTZWN0aW9uIGNzc1N0eWxlcz17Y2xhc3Nlcy5jb2x1bW5zfT5cblx0XHRcdFx0XHRcdDxMaXN0Q29sdW1uc0Zvcm1cblx0XHRcdFx0XHRcdFx0YXZhaWxhYmxlQ29sdW1ucz17Y29sdW1uc0F2YWlsYWJsZX1cblx0XHRcdFx0XHRcdFx0YWN0aXZlQ29sdW1ucz17Y29sdW1uc0FjdGl2ZX1cblx0XHRcdFx0XHRcdFx0ZGlzcGF0Y2g9e2Rpc3BhdGNofVxuXHRcdFx0XHRcdFx0Lz5cblx0XHRcdFx0XHQ8L1NlY3Rpb24+XG5cdFx0XHRcdFx0PFNlY3Rpb24gY3NzU3R5bGVzPXtjbGFzc2VzLmRvd25sb2FkfT5cblx0XHRcdFx0XHRcdDxMaXN0RG93bmxvYWRGb3JtXG5cdFx0XHRcdFx0XHRcdGFjdGl2ZUNvbHVtbnM9e2NvbHVtbnNBY3RpdmV9XG5cdFx0XHRcdFx0XHRcdGRpc3BhdGNoPXtkaXNwYXRjaH1cblx0XHRcdFx0XHRcdFx0bGlzdD17bGlzdH1cblx0XHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0PC9TZWN0aW9uPlxuXHRcdFx0XHRcdDxTZWN0aW9uIGNzc1N0eWxlcz17Y2xhc3Nlcy5leHBhbmR9PlxuXHRcdFx0XHRcdFx0PEJ1dHRvbkRpdmlkZXI+XG5cdFx0XHRcdFx0XHRcdDxHbHlwaEJ1dHRvblxuXHRcdFx0XHRcdFx0XHRcdGFjdGl2ZT17ZXhwYW5kSXNBY3RpdmV9XG5cdFx0XHRcdFx0XHRcdFx0Z2x5cGg9XCJtaXJyb3JcIlxuXHRcdFx0XHRcdFx0XHRcdG9uQ2xpY2s9e2V4cGFuZE9uQ2xpY2t9XG5cdFx0XHRcdFx0XHRcdFx0dGl0bGU9XCJFeHBhbmQgdGFibGUgd2lkdGhcIlxuXHRcdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0PC9CdXR0b25EaXZpZGVyPlxuXHRcdFx0XHRcdDwvU2VjdGlvbj5cblx0XHRcdFx0XHR7Y3JlYXRlSXNBdmFpbGFibGUgJiYgPFNlY3Rpb24gY3NzU3R5bGVzPXtjbGFzc2VzLmNyZWF0ZX0+XG5cdFx0XHRcdFx0XHQ8QnV0dG9uRGl2aWRlcj5cblx0XHRcdFx0XHRcdFx0PENyZWF0ZUJ1dHRvblxuXHRcdFx0XHRcdFx0XHRcdGxpc3ROYW1lPXtjcmVhdGVMaXN0TmFtZX1cblx0XHRcdFx0XHRcdFx0XHRvbkNsaWNrPXtjcmVhdGVPbkNsaWNrfVxuXHRcdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0PC9CdXR0b25EaXZpZGVyPlxuXHRcdFx0XHRcdDwvU2VjdGlvbj59XG5cdFx0XHRcdDwvR3JvdXA+XG5cdFx0XHQ8L1NlY3Rpb24+XG5cdFx0PC9Hcm91cD5cblx0KTtcbn07XG5cbkxpc3RIZWFkZXJUb29sYmFyLnByb3BUeXBlcyA9IHtcblx0Y29sdW1uc0FjdGl2ZTogUHJvcFR5cGVzLmFycmF5LFxuXHRjb2x1bW5zQXZhaWxhYmxlOiBQcm9wVHlwZXMuYXJyYXksXG5cdGNyZWF0ZUlzQXZhaWxhYmxlOiBQcm9wVHlwZXMuYm9vbCxcblx0Y3JlYXRlTGlzdE5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cdGNyZWF0ZU9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cdGRpc3BhdGNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXHRleHBhbmRJc0FjdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG5cdGV4cGFuZE9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cdGZpbHRlcnNBY3RpdmU6IFByb3BUeXBlcy5hcnJheSxcblx0ZmlsdGVyc0F2YWlsYWJsZTogUHJvcFR5cGVzLmFycmF5LFxuXHRsaXN0OiBQcm9wVHlwZXMub2JqZWN0LFxuXHRzZWFyY2hIYW5kbGVDaGFuZ2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cdHNlYXJjaEhhbmRsZUNsZWFyOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXHRzZWFyY2hIYW5kbGVLZXl1cDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcblx0c2VhcmNoVmFsdWU6IFByb3BUeXBlcy5zdHJpbmcsXG59O1xuXG5jb25zdCB0YWJsZXRHcm93U3R5bGVzID0ge1xuXHRbYEBtZWRpYSAobWF4LXdpZHRoOiAke3RoZW1lLmJyZWFrcG9pbnQudGFibGV0UG9ydHJhaXRNYXh9KWBdOiB7XG5cdFx0ZmxleEdyb3c6IDEsXG5cdH0sXG59O1xuXG5jb25zdCBjbGFzc2VzID0ge1xuXHQvLyBtYWluIHdyYXBwZXJcblx0d3JhcHBlcjoge1xuXHRcdFtgQG1lZGlhIChtYXgtd2lkdGg6ICR7dGhlbWUuYnJlYWtwb2ludC50YWJsZXRQb3J0cmFpdE1heH0pYF06IHtcblx0XHRcdGZsZXhXcmFwOiAnd3JhcCcsXG5cdFx0fSxcblx0fSxcblxuXHQvLyBidXR0b24gd3JhcHBlclxuXHRidXR0b25zOiB7XG5cdFx0W2BAbWVkaWEgKG1heC13aWR0aDogJHt0aGVtZS5icmVha3BvaW50LnRhYmxldFBvcnRyYWl0TWF4fSlgXToge1xuXHRcdFx0cGFkZGluZ0xlZnQ6IDAsXG5cdFx0fSxcblx0fSxcblxuXHQvLyBjb2xzXG5cdGV4cGFuZDoge1xuXHRcdFtgQG1lZGlhIChtYXgtd2lkdGg6ICR7dGhlbWUuYnJlYWtwb2ludC5kZXNrdG9wTWF4fSlgXToge1xuXHRcdFx0ZGlzcGxheTogJ25vbmUnLFxuXHRcdH0sXG5cdH0sXG5cdGZpbHRlcjoge1xuXHRcdFtgQG1lZGlhIChtYXgtd2lkdGg6ICR7dGhlbWUuYnJlYWtwb2ludC50YWJsZXRQb3J0cmFpdE1heH0pYF06IHtcblx0XHRcdHBhZGRpbmdMZWZ0OiAwLFxuXHRcdFx0ZmxleEdyb3c6IDEsXG5cdFx0fSxcblx0fSxcblx0Y29sdW1uczogdGFibGV0R3Jvd1N0eWxlcyxcblx0Y3JlYXRlOiB0YWJsZXRHcm93U3R5bGVzLFxuXHRkb3dubG9hZDogdGFibGV0R3Jvd1N0eWxlcyxcblx0c2VhcmNoOiB7XG5cdFx0W2BAbWVkaWEgKG1heC13aWR0aDogJHt0aGVtZS5icmVha3BvaW50LnRhYmxldFBvcnRyYWl0TWF4fSlgXToge1xuXHRcdFx0bWFyZ2luQm90dG9tOiAnMC43NWVtJyxcblx0XHRcdG1pbldpZHRoOiAnMTAwJScsXG5cdFx0fSxcblx0fSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTGlzdEhlYWRlclRvb2xiYXI7XG4iLCJpbXBvcnQgUmVhY3QsIHsgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcblx0QnV0dG9uLFxuXHRHbHlwaEJ1dHRvbixcblx0SW5saW5lR3JvdXAgYXMgR3JvdXAsXG5cdElubGluZUdyb3VwU2VjdGlvbiBhcyBTZWN0aW9uLFxuXHRTcGlubmVyLFxufSBmcm9tICcuLi8uLi8uLi9lbGVtZW50YWwnO1xuXG5mdW5jdGlvbiBMaXN0TWFuYWdlbWVudCAoe1xuXHRjaGVja2VkSXRlbUNvdW50LFxuXHRoYW5kbGVEZWxldGUsXG5cdGhhbmRsZVNlbGVjdCxcblx0aGFuZGxlVG9nZ2xlLFxuXHRpc09wZW4sXG5cdGl0ZW1Db3VudCxcblx0aXRlbXNQZXJQYWdlLFxuXHRub2RlbGV0ZSxcblx0bm9lZGl0LFxuXHRzZWxlY3RBbGxJdGVtc0xvYWRpbmcsXG5cdC4uLnByb3BzXG59KSB7XG5cdC8vIGRvIG5vdCByZW5kZXIgaWYgdGhlcmUncyBubyByZXN1bHRzXG5cdC8vIG9yIGlmIGVkaXQvZGVsZXRlIHVuYXZhaWxhYmxlIG9uIHRoZSBsaXN0XG5cdGlmICghaXRlbUNvdW50IHx8IChub2RlbGV0ZSAmJiBub2VkaXQpKSByZXR1cm4gbnVsbDtcblxuXHRjb25zdCBidXR0b25Ob3RlU3R5bGVzID0geyBjb2xvcjogJyM5OTknLCBmb250V2VpZ2h0OiAnbm9ybWFsJyB9O1xuXG5cdC8vIGRlbGV0ZSBidXR0b25cblx0Y29uc3QgYWN0aW9uQnV0dG9ucyA9IGlzT3BlbiAmJiAoXG5cdFx0PFNlY3Rpb24+XG5cdFx0XHQ8R2x5cGhCdXR0b25cblx0XHRcdFx0Y29sb3I9XCJjYW5jZWxcIlxuXHRcdFx0XHRkaXNhYmxlZD17IWNoZWNrZWRJdGVtQ291bnR9XG5cdFx0XHRcdGdseXBoPVwidHJhc2hjYW5cIlxuXHRcdFx0XHRvbkNsaWNrPXtoYW5kbGVEZWxldGV9XG5cdFx0XHRcdHBvc2l0aW9uPVwibGVmdFwiXG5cdFx0XHRcdHZhcmlhbnQ9XCJsaW5rXCJcblx0XHRcdFx0YWx0PVwiZGVsZXRlXCI+XG5cdFx0XHRcdERlbGV0ZVxuXHRcdFx0PC9HbHlwaEJ1dHRvbj5cblx0XHQ8L1NlY3Rpb24+XG5cdCk7XG5cblx0Ly8gc2VsZWN0IGJ1dHRvbnNcblx0Y29uc3QgYWxsVmlzaWJsZUJ1dHRvbklzQWN0aXZlID0gY2hlY2tlZEl0ZW1Db3VudCA9PT0gaXRlbUNvdW50O1xuXHRjb25zdCBwYWdlVmlzaWJsZUJ1dHRvbklzQWN0aXZlID0gY2hlY2tlZEl0ZW1Db3VudCA9PT0gaXRlbXNQZXJQYWdlO1xuXHRjb25zdCBub25lQnV0dG9uSXNBY3RpdmUgPSAhY2hlY2tlZEl0ZW1Db3VudDtcblx0Y29uc3Qgc2VsZWN0QWxsQnV0dG9uID0gaXRlbUNvdW50ID4gaXRlbXNQZXJQYWdlICYmIChcblx0XHQ8U2VjdGlvbj5cblx0XHRcdDxCdXR0b25cblx0XHRcdFx0YWN0aXZlPXthbGxWaXNpYmxlQnV0dG9uSXNBY3RpdmV9XG5cdFx0XHRcdG9uQ2xpY2s9eygpID0+IGhhbmRsZVNlbGVjdCgnYWxsJyl9XG5cdFx0XHRcdHRpdGxlPVwiU2VsZWN0IGFsbCByb3dzIChpbmNsdWRpbmcgdGhvc2Ugbm90IHZpc2libGUpXCI+XG5cdFx0XHRcdHtzZWxlY3RBbGxJdGVtc0xvYWRpbmcgPyA8U3Bpbm5lci8+IDogJ0FsbCd9IDxzbWFsbCBzdHlsZT17YnV0dG9uTm90ZVN0eWxlc30+KHtpdGVtQ291bnR9KTwvc21hbGw+XG5cdFx0XHQ8L0J1dHRvbj5cblx0XHQ8L1NlY3Rpb24+XG5cdCk7XG5cblx0Y29uc3Qgc2VsZWN0QnV0dG9ucyA9IGlzT3BlbiA/IChcblx0XHQ8U2VjdGlvbj5cblx0XHRcdDxHcm91cCBjb250aWd1b3VzPlxuXHRcdFx0XHR7c2VsZWN0QWxsQnV0dG9ufVxuXHRcdFx0XHQ8U2VjdGlvbj5cblx0XHRcdFx0XHQ8QnV0dG9uIGFjdGl2ZT17cGFnZVZpc2libGVCdXR0b25Jc0FjdGl2ZX0gb25DbGljaz17KCkgPT4gaGFuZGxlU2VsZWN0KCd2aXNpYmxlJyl9IHRpdGxlPVwiU2VsZWN0IGFsbCByb3dzXCI+XG5cdFx0XHRcdFx0XHR7aXRlbUNvdW50ID4gaXRlbXNQZXJQYWdlID8gJ1BhZ2UgJyA6ICdBbGwgJ31cblx0XHRcdFx0XHRcdDxzbWFsbCBzdHlsZT17YnV0dG9uTm90ZVN0eWxlc30+KHtpdGVtQ291bnQgPiBpdGVtc1BlclBhZ2UgPyBpdGVtc1BlclBhZ2UgOiBpdGVtQ291bnR9KTwvc21hbGw+XG5cdFx0XHRcdFx0PC9CdXR0b24+XG5cdFx0XHRcdDwvU2VjdGlvbj5cblx0XHRcdFx0PFNlY3Rpb24+XG5cdFx0XHRcdFx0PEJ1dHRvbiBhY3RpdmU9e25vbmVCdXR0b25Jc0FjdGl2ZX0gb25DbGljaz17KCkgPT4gaGFuZGxlU2VsZWN0KCdub25lJyl9IHRpdGxlPVwiRGVzZWxlY3QgYWxsIHJvd3NcIj5Ob25lPC9CdXR0b24+XG5cdFx0XHRcdDwvU2VjdGlvbj5cblx0XHRcdDwvR3JvdXA+XG5cdFx0PC9TZWN0aW9uPlxuXHQpIDogbnVsbDtcblxuXHQvLyBzZWxlY3RlZCBjb3VudCB0ZXh0XG5cdGNvbnN0IHNlbGVjdGVkQ291bnRUZXh0ID0gaXNPcGVuID8gKFxuXHRcdDxTZWN0aW9uPlxuXHRcdFx0PHNwYW4gc3R5bGU9e3sgY29sb3I6ICcjNjY2JywgZGlzcGxheTogJ2lubGluZS1ibG9jaycsIGxpbmVIZWlnaHQ6ICcyLjRlbScsIG1hcmdpbjogMSB9fT5cblx0XHRcdFx0e2NoZWNrZWRJdGVtQ291bnR9IHNlbGVjdGVkXG5cdFx0XHQ8L3NwYW4+XG5cdFx0PC9TZWN0aW9uPlxuXHQpIDogbnVsbDtcblxuXHQvLyBwdXQgaXQgYWxsIHRvZ2V0aGVyXG5cdHJldHVybiAoXG5cdFx0PGRpdj5cblx0XHRcdDxHcm91cCBzdHlsZT17eyBmbG9hdDogJ2xlZnQnLCBtYXJnaW5SaWdodDogJy43NWVtJywgbWFyZ2luQm90dG9tOiAwIH19PlxuXHRcdFx0XHQ8U2VjdGlvbj5cblx0XHRcdFx0XHQ8QnV0dG9uIGFjdGl2ZT17aXNPcGVufSBvbkNsaWNrPXsoKSA9PiBoYW5kbGVUb2dnbGUoIWlzT3Blbil9PlxuXHRcdFx0XHRcdFx0TWFuYWdlXG5cdFx0XHRcdFx0PC9CdXR0b24+XG5cdFx0XHRcdDwvU2VjdGlvbj5cblx0XHRcdFx0e3NlbGVjdEJ1dHRvbnN9XG5cdFx0XHRcdHthY3Rpb25CdXR0b25zfVxuXHRcdFx0XHR7c2VsZWN0ZWRDb3VudFRleHR9XG5cdFx0XHQ8L0dyb3VwPlxuXHRcdDwvZGl2PlxuXHQpO1xufTtcblxuTGlzdE1hbmFnZW1lbnQucHJvcFR5cGVzID0ge1xuXHRjaGVja2VkSXRlbXM6IFByb3BUeXBlcy5udW1iZXIsXG5cdGhhbmRsZURlbGV0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcblx0aGFuZGxlU2VsZWN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXHRoYW5kbGVUb2dnbGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cdGlzT3BlbjogUHJvcFR5cGVzLmJvb2wsXG5cdGl0ZW1Db3VudDogUHJvcFR5cGVzLm51bWJlcixcblx0aXRlbXNQZXJQYWdlOiBQcm9wVHlwZXMubnVtYmVyLFxuXHRub2RlbGV0ZTogUHJvcFR5cGVzLmJvb2wsXG5cdG5vZWRpdDogUHJvcFR5cGVzLmJvb2wsXG5cdHNlbGVjdEFsbEl0ZW1zTG9hZGluZzogUHJvcFR5cGVzLmJvb2wsXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpc3RNYW5hZ2VtZW50O1xuIiwiaW1wb3J0IHsgRm9ybU5vdGUsIEZvcm1GaWVsZCwgRm9ybUlucHV0IH0gZnJvbSAnLi4vLi4vLi4vZWxlbWVudGFsJztcbmltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdmtleSBmcm9tICd2a2V5JztcblxuaW1wb3J0IEtiZCBmcm9tICcuLi8uLi8uLi9zaGFyZWQvS2JkJztcbmltcG9ydCBQb3BvdXQgZnJvbSAnLi4vLi4vLi4vc2hhcmVkL1BvcG91dCc7XG5pbXBvcnQgUG9wb3V0TGlzdCBmcm9tICcuLi8uLi8uLi9zaGFyZWQvUG9wb3V0L1BvcG91dExpc3QnO1xuXG52YXIgTGlzdFNvcnQgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cdGRpc3BsYXlOYW1lOiAnTGlzdFNvcnQnLFxuXHRwcm9wVHlwZXM6IHtcblx0XHRoYW5kbGVTb3J0U2VsZWN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuXHR9LFxuXHRnZXRJbml0aWFsU3RhdGUgKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRhbHREb3duOiBmYWxzZSxcblx0XHRcdHBvcG91dElzT3BlbjogZmFsc2UsXG5cdFx0XHRzZWFyY2hTdHJpbmc6ICcnLFxuXHRcdH07XG5cdH0sXG5cdGNvbXBvbmVudERpZE1vdW50ICgpIHtcblx0XHRkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmhhbmRsZUtleURvd24sIGZhbHNlKTtcblx0XHRkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5oYW5kbGVLZXlVcCwgZmFsc2UpO1xuXHR9LFxuXHRjb21wb25lbnRXaWxsVW5tb3VudCAoKSB7XG5cdFx0ZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5oYW5kbGVLZXlEb3duKTtcblx0XHRkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5oYW5kbGVLZXlVcCk7XG5cdH0sXG5cdGhhbmRsZUtleURvd24gKGUpIHtcblx0XHRpZiAodmtleVtlLmtleUNvZGVdICE9PSAnPGFsdD4nKSByZXR1cm47XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRhbHREb3duOiB0cnVlLFxuXHRcdH0pO1xuXHR9LFxuXHRoYW5kbGVLZXlVcCAoZSkge1xuXHRcdGlmICh2a2V5W2Uua2V5Q29kZV0gIT09ICc8YWx0PicpIHJldHVybjtcblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdGFsdERvd246IGZhbHNlLFxuXHRcdH0pO1xuXHR9LFxuXHRoYW5kbGVTb3J0U2VsZWN0IChwYXRoLCBpbnZlcnRlZCkge1xuXHRcdGlmICh0aGlzLnN0YXRlLmFsdERvd24pIGludmVydGVkID0gdHJ1ZTtcblx0XHR0aGlzLnByb3BzLmhhbmRsZVNvcnRTZWxlY3QocGF0aCwgaW52ZXJ0ZWQpO1xuXHRcdHRoaXMuY2xvc2VQb3BvdXQoKTtcblx0fSxcblx0b3BlblBvcG91dCAoKSB7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRwb3BvdXRJc09wZW46IHRydWUsXG5cdFx0fSk7XG5cdH0sXG5cdGNsb3NlUG9wb3V0ICgpIHtcblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdHBvcG91dElzT3BlbjogZmFsc2UsXG5cdFx0XHRzZWFyY2hTdHJpbmc6ICcnLFxuXHRcdH0pO1xuXHR9LFxuXHR1cGRhdGVTZWFyY2ggKGUpIHtcblx0XHR0aGlzLnNldFN0YXRlKHsgc2VhcmNoU3RyaW5nOiBlLnRhcmdldC52YWx1ZSB9KTtcblx0fSxcblx0cmVuZGVyU29ydE9wdGlvbnMgKCkge1xuXHRcdC8vIFRPRE86IEhhbmRsZSBtdWx0aXBsZSBzb3J0IHBhdGhzXG5cdFx0Y29uc3QgYWN0aXZlU29ydFBhdGggPSB0aGlzLnByb3BzLmFjdGl2ZVNvcnQucGF0aHNbMF07XG5cdFx0Y29uc3QgYXZhaWxpYmxlQ29sdW1ucyA9IHRoaXMucHJvcHMuYXZhaWxhYmxlQ29sdW1ucztcblx0XHRjb25zdCB7IHNlYXJjaFN0cmluZyB9ID0gdGhpcy5zdGF0ZTtcblx0XHRsZXQgZmlsdGVyZWRDb2x1bW5zID0gYXZhaWxpYmxlQ29sdW1ucztcblxuXHRcdGlmIChzZWFyY2hTdHJpbmcpIHtcblx0XHRcdGZpbHRlcmVkQ29sdW1ucyA9IGZpbHRlcmVkQ29sdW1uc1xuXHRcdFx0XHQuZmlsdGVyKGNvbHVtbiA9PiBjb2x1bW4udHlwZSAhPT0gJ2hlYWRpbmcnKVxuXHRcdFx0XHQuZmlsdGVyKGNvbHVtbiA9PiBuZXcgUmVnRXhwKHNlYXJjaFN0cmluZykudGVzdChjb2x1bW4uZmllbGQubGFiZWwudG9Mb3dlckNhc2UoKSkpO1xuXHRcdH1cblxuXHRcdHJldHVybiBmaWx0ZXJlZENvbHVtbnMubWFwKChlbCwgaSkgPT4ge1xuXHRcdFx0aWYgKGVsLnR5cGUgPT09ICdoZWFkaW5nJykge1xuXHRcdFx0XHRyZXR1cm4gPFBvcG91dExpc3QuSGVhZGluZyBrZXk9eydoZWFkaW5nXycgKyBpfT57ZWwuY29udGVudH08L1BvcG91dExpc3QuSGVhZGluZz47XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHBhdGggPSBlbC5maWVsZC5wYXRoO1xuXHRcdFx0Y29uc3QgaXNTZWxlY3RlZCA9IGFjdGl2ZVNvcnRQYXRoICYmIGFjdGl2ZVNvcnRQYXRoLnBhdGggPT09IHBhdGg7XG5cdFx0XHRjb25zdCBpc0ludmVydGVkID0gaXNTZWxlY3RlZCAmJiBhY3RpdmVTb3J0UGF0aC5pbnZlcnQ7XG5cdFx0XHRjb25zdCBpY29uID0gdGhpcy5zdGF0ZS5hbHREb3duIHx8IChpc1NlbGVjdGVkICYmICFpc0ludmVydGVkKSA/ICdjaGV2cm9uLXVwJyA6ICdjaGV2cm9uLWRvd24nO1xuXG5cdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHQ8UG9wb3V0TGlzdC5JdGVtXG5cdFx0XHRcdFx0a2V5PXsnY29sdW1uXycgKyBlbC5maWVsZC5wYXRofVxuXHRcdFx0XHRcdGljb249e2ljb259XG5cdFx0XHRcdFx0aXNTZWxlY3RlZD17aXNTZWxlY3RlZH1cblx0XHRcdFx0XHRsYWJlbD17ZWwuZmllbGQubGFiZWx9XG5cdFx0XHRcdFx0b25DbGljaz17KCkgPT4ge1xuXHRcdFx0XHRcdFx0dGhpcy5oYW5kbGVTb3J0U2VsZWN0KHBhdGgsIGlzU2VsZWN0ZWQgJiYgIWlzSW52ZXJ0ZWQpO1xuXHRcdFx0XHRcdH19IC8+XG5cdFx0XHQpO1xuXHRcdH0pO1xuXHR9LFxuXHRyZW5kZXIgKCkge1xuXHRcdC8vIFRPRE86IEhhbmRsZSBtdWx0aXBsZSBzb3J0IHBhdGhzXG5cdFx0Y29uc3QgYWN0aXZlU29ydFBhdGggPSB0aGlzLnByb3BzLmFjdGl2ZVNvcnQucGF0aHNbMF07XG5cdFx0Y29uc3QgZm9ybUZpZWxkU3R5bGVzID0geyBib3JkZXJCb3R0b206ICcxcHggZGFzaGVkIHJnYmEoMCwwLDAsMC4xKScsIHBhZGRpbmdCb3R0b206ICcxZW0nIH07XG5cblx0XHRyZXR1cm4gKFxuXHRcdFx0PHNwYW4+XG5cdFx0XHRcdHthY3RpdmVTb3J0UGF0aCAmJiAoXG5cdFx0XHRcdFx0PHNwYW4+XG5cdFx0XHRcdFx0XHQ8c3BhbiBzdHlsZT17eyBjb2xvcjogJyM5OTknIH19PiBzb3J0ZWQgYnkgPC9zcGFuPlxuXHRcdFx0XHRcdFx0PGEgaWQ9XCJsaXN0SGVhZGVyU29ydEJ1dHRvblwiIGhyZWY9XCJqYXZhc2NyaXB0OjtcIiBvbkNsaWNrPXt0aGlzLm9wZW5Qb3BvdXR9PlxuXHRcdFx0XHRcdFx0XHR7YWN0aXZlU29ydFBhdGgubGFiZWwudG9Mb3dlckNhc2UoKX1cblx0XHRcdFx0XHRcdFx0e2FjdGl2ZVNvcnRQYXRoLmludmVydCA/ICcgKGRlc2NlbmRpbmcpJyA6ICcnfVxuXHRcdFx0XHRcdFx0XHQ8c3BhbiBjbGFzc05hbWU9XCJkaXNjbG9zdXJlLWFycm93XCIgLz5cblx0XHRcdFx0XHRcdDwvYT5cblx0XHRcdFx0XHQ8L3NwYW4+XG5cdFx0XHRcdCl9XG5cdFx0XHRcdDxQb3BvdXQgaXNPcGVuPXt0aGlzLnN0YXRlLnBvcG91dElzT3Blbn0gb25DYW5jZWw9e3RoaXMuY2xvc2VQb3BvdXR9IHJlbGF0aXZlVG9JRD1cImxpc3RIZWFkZXJTb3J0QnV0dG9uXCI+XG5cdFx0XHRcdFx0PFBvcG91dC5IZWFkZXIgdGl0bGU9XCJTb3J0XCIgLz5cblxuXHRcdFx0XHRcdDxQb3BvdXQuQm9keSBzY3JvbGxhYmxlPlxuXHRcdFx0XHRcdFx0PEZvcm1GaWVsZCBzdHlsZT17Zm9ybUZpZWxkU3R5bGVzfT5cblx0XHRcdFx0XHRcdFx0PEZvcm1JbnB1dFxuXHRcdFx0XHRcdFx0XHRcdGF1dG9Gb2N1c1xuXHRcdFx0XHRcdFx0XHRcdHZhbHVlPXt0aGlzLnN0YXRlLnNlYXJjaFN0cmluZ31cblx0XHRcdFx0XHRcdFx0XHRvbkNoYW5nZT17dGhpcy51cGRhdGVTZWFyY2h9XG5cdFx0XHRcdFx0XHRcdFx0cGxhY2Vob2xkZXI9XCJGaW5kIGEgZmllbGQuLi5cIlxuXHRcdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0PC9Gb3JtRmllbGQ+XG5cdFx0XHRcdFx0XHQ8UG9wb3V0TGlzdD5cblx0XHRcdFx0XHRcdFx0e3RoaXMucmVuZGVyU29ydE9wdGlvbnMoKX1cblx0XHRcdFx0XHRcdDwvUG9wb3V0TGlzdD5cblx0XHRcdFx0XHQ8L1BvcG91dC5Cb2R5PlxuXG5cdFx0XHRcdFx0PFBvcG91dC5Gb290ZXI+XG5cdFx0XHRcdFx0XHQ8Rm9ybU5vdGU+SG9sZCA8S2JkPmFsdDwvS2JkPiB0byB0b2dnbGUgYXNjZW5kaW5nL2Rlc2NlbmRpbmc8L0Zvcm1Ob3RlPlxuXHRcdFx0XHRcdDwvUG9wb3V0LkZvb3Rlcj5cblx0XHRcdFx0PC9Qb3BvdXQ+XG5cdFx0XHQ8L3NwYW4+XG5cdFx0KTtcblx0fSxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpc3RTb3J0O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBTZWxlY3QgZnJvbSAncmVhY3Qtc2VsZWN0JztcbmltcG9ydCB7IGZpbmRET01Ob2RlIH0gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBhc3NpZ24gZnJvbSAnb2JqZWN0LWFzc2lnbic7XG5pbXBvcnQgeyBGaWVsZHMgfSBmcm9tICdGaWVsZFR5cGVzJztcbmltcG9ydCBJbnZhbGlkRmllbGRUeXBlIGZyb20gJy4uLy4uLy4uL3NoYXJlZC9JbnZhbGlkRmllbGRUeXBlJztcbmltcG9ydCB7IHBsdXJhbCB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL3N0cmluZyc7XG5pbXBvcnQgeyBCbGFua1N0YXRlLCBCdXR0b24sIEZvcm0sIE1vZGFsIH0gZnJvbSAnLi4vLi4vLi4vZWxlbWVudGFsJztcblxudmFyIFVwZGF0ZUZvcm0gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cdGRpc3BsYXlOYW1lOiAnVXBkYXRlRm9ybScsXG5cdHByb3BUeXBlczoge1xuXHRcdGlzT3BlbjogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG5cdFx0aXRlbUlkczogUmVhY3QuUHJvcFR5cGVzLmFycmF5LFxuXHRcdGxpc3Q6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG5cdFx0b25DYW5jZWw6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuXHR9LFxuXHRnZXREZWZhdWx0UHJvcHMgKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRpc09wZW46IGZhbHNlLFxuXHRcdH07XG5cdH0sXG5cdGdldEluaXRpYWxTdGF0ZSAoKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGZpZWxkczogW10sXG5cdFx0fTtcblx0fSxcblx0Y29tcG9uZW50RGlkTW91bnQgKCkge1xuXHRcdHRoaXMuZG9Gb2N1cygpO1xuXHR9LFxuXHRjb21wb25lbnREaWRVcGRhdGUgKCkge1xuXHRcdHRoaXMuZG9Gb2N1cygpO1xuXHR9LFxuXHRkb0ZvY3VzICgpIHtcblx0XHRpZiAodGhpcy5yZWZzLmZvY3VzVGFyZ2V0KSB7XG5cdFx0XHRmaW5kRE9NTm9kZSh0aGlzLnJlZnMuZm9jdXNUYXJnZXQpLmZvY3VzKCk7XG5cdFx0fVxuXHR9LFxuXHRnZXRPcHRpb25zICgpIHtcblx0XHRjb25zdCB7IGZpZWxkcyB9ID0gdGhpcy5wcm9wcy5saXN0O1xuXHRcdHJldHVybiBPYmplY3Qua2V5cyhmaWVsZHMpLm1hcChrZXkgPT4gKHsgdmFsdWU6IGZpZWxkc1trZXldLnBhdGgsIGxhYmVsOiBmaWVsZHNba2V5XS5sYWJlbCB9KSk7XG5cdH0sXG5cdGdldEZpZWxkUHJvcHMgKGZpZWxkKSB7XG5cdFx0dmFyIHByb3BzID0gYXNzaWduKHt9LCBmaWVsZCk7XG5cdFx0cHJvcHMudmFsdWUgPSB0aGlzLnN0YXRlLmZpZWxkc1tmaWVsZC5wYXRoXTtcblx0XHRwcm9wcy52YWx1ZXMgPSB0aGlzLnN0YXRlLmZpZWxkcztcblx0XHRwcm9wcy5vbkNoYW5nZSA9IHRoaXMuaGFuZGxlQ2hhbmdlO1xuXHRcdHByb3BzLm1vZGUgPSAnY3JlYXRlJztcblx0XHRwcm9wcy5rZXkgPSBmaWVsZC5wYXRoO1xuXHRcdHJldHVybiBwcm9wcztcblx0fSxcblx0dXBkYXRlT3B0aW9ucyAoZmllbGRzKSB7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRmaWVsZHM6IGZpZWxkcyxcblx0XHR9LCB0aGlzLmRvRm9jdXMpO1xuXHR9LFxuXHRoYW5kbGVDaGFuZ2UgKHZhbHVlKSB7XG5cdFx0Y29uc29sZS5sb2coJ2hhbmRsZUNoYW5nZTonLCB2YWx1ZSk7XG5cdH0sXG5cdGhhbmRsZUNsb3NlICgpIHtcblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdGZpZWxkczogW10sXG5cdFx0fSk7XG5cdFx0dGhpcy5wcm9wcy5vbkNhbmNlbCgpO1xuXHR9LFxuXG5cdHJlbmRlckZpZWxkcyAoKSB7XG5cdFx0Y29uc3QgeyBsaXN0IH0gPSB0aGlzLnByb3BzO1xuXHRcdGNvbnN0IHsgZmllbGRzIH0gPSB0aGlzLnN0YXRlO1xuXHRcdGNvbnN0IGZvcm1GaWVsZHMgPSBbXTtcblx0XHRsZXQgZm9jdXNSZWY7XG5cblx0XHRmaWVsZHMuZm9yRWFjaCgoZmllbGRPcHRpb24pID0+IHtcblx0XHRcdGNvbnN0IGZpZWxkID0gbGlzdC5maWVsZHNbZmllbGRPcHRpb24udmFsdWVdO1xuXG5cdFx0XHRpZiAodHlwZW9mIEZpZWxkc1tmaWVsZC50eXBlXSAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRmb3JtRmllbGRzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChJbnZhbGlkRmllbGRUeXBlLCB7IHR5cGU6IGZpZWxkLnR5cGUsIHBhdGg6IGZpZWxkLnBhdGgsIGtleTogZmllbGQucGF0aCB9KSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdHZhciBmaWVsZFByb3BzID0gdGhpcy5nZXRGaWVsZFByb3BzKGZpZWxkKTtcblx0XHRcdGlmICghZm9jdXNSZWYpIHtcblx0XHRcdFx0ZmllbGRQcm9wcy5yZWYgPSBmb2N1c1JlZiA9ICdmb2N1c1RhcmdldCc7XG5cdFx0XHR9XG5cdFx0XHRmb3JtRmllbGRzLnB1c2goUmVhY3QuY3JlYXRlRWxlbWVudChGaWVsZHNbZmllbGQudHlwZV0sIGZpZWxkUHJvcHMpKTtcblx0XHR9KTtcblxuXHRcdGNvbnN0IGZpZWxkc1VJID0gZm9ybUZpZWxkcy5sZW5ndGggPyBmb3JtRmllbGRzIDogKFxuXHRcdFx0PEJsYW5rU3RhdGVcblx0XHRcdFx0aGVhZGluZz1cIkNob29zZSBhIGZpZWxkIGFib3ZlIHRvIGJlZ2luXCJcblx0XHRcdFx0c3R5bGU9e3sgcGFkZGluZzogJzNlbSAyZW0nIH19XG5cdFx0XHQvPlxuXHRcdCk7XG5cblx0XHRyZXR1cm4gKFxuXHRcdFx0PGRpdiBzdHlsZT17eyBib3JkZXJUb3A6ICcxcHggZGFzaGVkIHJnYmEoMCwwLDAsMC4xKScsIG1hcmdpblRvcDogMjAsIHBhZGRpbmdUb3A6IDIwIH19PlxuXHRcdFx0XHR7ZmllbGRzVUl9XG5cdFx0XHQ8L2Rpdj5cblx0XHQpO1xuXHR9LFxuXHRyZW5kZXJGb3JtICgpIHtcblx0XHRjb25zdCB7IGl0ZW1JZHMsIGxpc3QgfSA9IHRoaXMucHJvcHM7XG5cdFx0Y29uc3QgaXRlbUNvdW50ID0gcGx1cmFsKGl0ZW1JZHMsICgnKiAnICsgbGlzdC5zaW5ndWxhciksICgnKiAnICsgbGlzdC5wbHVyYWwpKTtcblx0XHRjb25zdCBmb3JtQWN0aW9uID0gYCR7S2V5c3RvbmUuYWRtaW5QYXRofS8ke2xpc3QucGF0aH1gO1xuXG5cdFx0cmV0dXJuIChcblx0XHRcdDxGb3JtIGxheW91dD1cImhvcml6b250YWxcIiBhY3Rpb249e2Zvcm1BY3Rpb259IG5vVmFsaWRhdGU9XCJ0cnVlXCI+XG5cdFx0XHRcdDxNb2RhbC5IZWFkZXJcblx0XHRcdFx0XHRvbkNsb3NlPXt0aGlzLmhhbmRsZUNsb3NlfVxuXHRcdFx0XHRcdHNob3dDbG9zZUJ1dHRvblxuXHRcdFx0XHRcdHRleHQ9eydVcGRhdGUgJyArIGl0ZW1Db3VudH1cblx0XHRcdFx0Lz5cblx0XHRcdFx0PE1vZGFsLkJvZHk+XG5cdFx0XHRcdFx0PFNlbGVjdFxuXHRcdFx0XHRcdFx0a2V5PVwiZmllbGQtc2VsZWN0XCJcblx0XHRcdFx0XHRcdG11bHRpXG5cdFx0XHRcdFx0XHRvbkNoYW5nZT17dGhpcy51cGRhdGVPcHRpb25zfVxuXHRcdFx0XHRcdFx0b3B0aW9ucz17dGhpcy5nZXRPcHRpb25zKCl9XG5cdFx0XHRcdFx0XHRyZWY9XCJpbml0aWFsRm9jdXNUYXJnZXRcIlxuXHRcdFx0XHRcdFx0dmFsdWU9e3RoaXMuc3RhdGUuZmllbGRzfVxuXHRcdFx0XHRcdC8+XG5cdFx0XHRcdFx0e3RoaXMucmVuZGVyRmllbGRzKCl9XG5cdFx0XHRcdDwvTW9kYWwuQm9keT5cblx0XHRcdFx0PE1vZGFsLkZvb3Rlcj5cblx0XHRcdFx0XHQ8QnV0dG9uIGNvbG9yPVwicHJpbWFyeVwiIHN1Ym1pdD5VcGRhdGU8L0J1dHRvbj5cblx0XHRcdFx0XHQ8QnV0dG9uIGNvbG9yPVwiY2FuY2VsXCIgdmFyaWFudD1cImxpbmtcIiBvbkNsaWNrPXt0aGlzLmhhbmRsZUNsb3NlfT5DYW5jZWw8L0J1dHRvbj5cblx0XHRcdFx0PC9Nb2RhbC5Gb290ZXI+XG5cdFx0XHQ8L0Zvcm0+XG5cdFx0KTtcblx0fSxcblx0cmVuZGVyICgpIHtcblx0XHRyZXR1cm4gKFxuXHRcdFx0PE1vZGFsLkRpYWxvZyBpc09wZW49e3RoaXMucHJvcHMuaXNPcGVufSBvbkNsb3NlPXt0aGlzLmhhbmRsZUNsb3NlfSBiYWNrZHJvcENsb3Nlc01vZGFsPlxuXHRcdFx0XHR7dGhpcy5yZW5kZXJGb3JtKCl9XG5cdFx0XHQ8L01vZGFsLkRpYWxvZz5cblx0XHQpO1xuXHR9LFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gVXBkYXRlRm9ybTtcbiIsIi8vIEdlbmVyYWxcbmV4cG9ydCBjb25zdCBTRUxFQ1RfTElTVCA9ICdhcHAvTGlzdC9TRUxFQ1RfTElTVCc7XG5leHBvcnQgY29uc3QgU0VUX0NVUlJFTlRfUEFHRSA9ICdhcHAvTGlzdC9TRVRfQ1VSUkVOVF9QQUdFJztcbmV4cG9ydCBjb25zdCBJTklUSUFMX0xJU1RfTE9BRCA9ICdhcHAvTGlzdC9JTklUSUFMX0xJU1RfTE9BRCc7XG4vLyBJdGVtc1xuZXhwb3J0IGNvbnN0IExPQURfSVRFTVMgPSAnYXBwL0xpc3QvTE9BRF9JVEVNUyc7XG5leHBvcnQgY29uc3QgTE9BRElOR19JVEVNUyA9ICdhcHAvTGlzdC9MT0FESU5HX0lURU1TJztcbmV4cG9ydCBjb25zdCBJVEVNU19MT0FERUQgPSAnYXBwL0xpc3QvSVRFTVNfTE9BREVEJztcbmV4cG9ydCBjb25zdCBJVEVNX0xPQURJTkdfRVJST1IgPSAnYXBwL0xpc3QvSVRFTV9MT0FESU5HX0VSUk9SJztcbi8vIEFjdGl2ZVxuZXhwb3J0IGNvbnN0IFNFTEVDVF9BQ1RJVkVfU09SVCA9ICdhcHAvTGlzdC9TRUxFQ1RfQUNUSVZFX1NPUlQnO1xuZXhwb3J0IGNvbnN0IFNFTEVDVF9BQ1RJVkVfQ09MVU1OUyA9ICdhcHAvTGlzdC9TRUxFQ1RfQUNUSVZFX0NPTFVNTlMnO1xuZXhwb3J0IGNvbnN0IFNFTEVDVF9GSUxURVIgPSAnYXBwL0xpc3QvU0VMRUNUX0ZJTFRFUic7XG5cbmV4cG9ydCBjb25zdCBTRVRfQUNUSVZFX1NFQVJDSCA9ICdhcHAvTGlzdC9TRVRfQUNUSVZFX1NFQVJDSCc7XG5leHBvcnQgY29uc3QgU0VUX0FDVElWRV9TT1JUID0gJ2FwcC9MaXN0L1NFVF9BQ1RJVkVfU09SVCc7XG5leHBvcnQgY29uc3QgU0VUX0FDVElWRV9DT0xVTU5TID0gJ2FwcC9MaXN0L1NFVF9BQ1RJVkVfQ09MVU1OUyc7XG5leHBvcnQgY29uc3QgU0VUX0FDVElWRV9MSVNUID0gJ2FwcC9MaXN0L1NFVF9BQ1RJVkVfTElTVCc7XG5cbi8vIFF1ZXJ5IFBhcmFtc1xuZXhwb3J0IGNvbnN0IFFVRVJZX0hBU19DSEFOR0VEID0gJ2FwcC9MaXN0L1FVRVJZX0hBU19DSEFOR0VEJztcbmV4cG9ydCBjb25zdCBRVUVSWV9IQVNfTk9UX0NIQU5HRUQgPSAnYXBwL0xpc3QvUVVFUllfSEFTX05PVF9DSEFOR0VEJztcbmV4cG9ydCBjb25zdCBSRVBMQUNFX0NBQ0hFRF9RVUVSWSA9ICdhcHAvTGlzdC9SRVBMQUNFX0NBQ0hFRF9RVUVSWSc7XG5leHBvcnQgY29uc3QgQ0xFQVJfQ0FDSEVEX1FVRVJZID0gJ2FwcC9MaXN0L0NMRUFSX0NBQ0hFRF9RVUVSWSc7XG5cbi8vIEZpbHRlcmluZ1xuZXhwb3J0IGNvbnN0IEFERF9GSUxURVIgPSAnYXBwL0xpc3QvQUREX0ZJTFRFUic7XG5leHBvcnQgY29uc3QgQ0xFQVJfRklMVEVSID0gJ2FwcC9MaXN0L0NMRUFSX0ZJTFRFUic7XG5leHBvcnQgY29uc3QgQ0xFQVJfQUxMX0ZJTFRFUlMgPSAnYXBwL0xpc3QvQ0xFQVJfQUxMX0ZJTFRFUlMnO1xuZXhwb3J0IGNvbnN0IFNFVF9GSUxURVJTID0gJ2FwcC9MaXN0L1NFVF9GSUxURVJTJztcbi8vIERyYWdcbmV4cG9ydCBjb25zdCBTRVRfUk9XX0FMRVJUID0gJ2FwcC9MaXN0L1NFVF9ST1dfQUxFUlQnO1xuZXhwb3J0IGNvbnN0IFJFU0VUX0RSQUdfUEFHRSA9ICdhcHAvTGlzdC9SRVNFVF9EUkFHX1BBR0UnO1xuZXhwb3J0IGNvbnN0IFJFU0VUX0RSQUdfSVRFTVMgPSAnYXBwL0xpc3QvUkVTRVRfRFJBR19JVEVNUyc7XG5leHBvcnQgY29uc3QgU0VUX0RSQUdfSVRFTSA9ICdhcHAvTGlzdC9TRVRfRFJBR19JVEVNJztcbmV4cG9ydCBjb25zdCBTRVRfRFJBR19JTkRFWCA9ICdhcHAvTGlzdC9TRVRfRFJBR19JTkRFWCc7XG5leHBvcnQgY29uc3QgRFJBR19NT1ZFX0lURU0gPSAnYXBwL0xpc3QvRFJBR19NT1ZFX0lURU0nO1xuIiwiLyoqXG4gKiBUaGUgbGlzdCB2aWV3IGlzIGEgcGFnaW5hdGVkIHRhYmxlIG9mIGFsbCBpdGVtcyBpbiB0aGUgbGlzdC4gSXQgY2FuIHNob3cgYVxuICogdmFyaWV0eSBvZiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgaW5kaXZpZHVhbCBpdGVtcyBpbiBjb2x1bW5zLlxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG4vLyBpbXBvcnQgeyBmaW5kRE9NTm9kZSB9IGZyb20gJ3JlYWN0LWRvbSc7IC8vIFRPRE8gcmUtaW1wbGVtZW50IGZvY3VzIHdoZW4gcmVhZHlcbmltcG9ydCBudW1lcmFsIGZyb20gJ251bWVyYWwnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcblxuaW1wb3J0IHtcblx0QmxhbmtTdGF0ZSxcblx0Q2VudGVyLFxuXHRDb250YWluZXIsXG5cdEdseXBoLFxuXHRHbHlwaEJ1dHRvbixcblx0UGFnaW5hdGlvbixcblx0U3Bpbm5lcixcbn0gZnJvbSAnLi4vLi4vZWxlbWVudGFsJztcblxuaW1wb3J0IExpc3RGaWx0ZXJzIGZyb20gJy4vY29tcG9uZW50cy9GaWx0ZXJpbmcvTGlzdEZpbHRlcnMnO1xuaW1wb3J0IExpc3RIZWFkZXJUaXRsZSBmcm9tICcuL2NvbXBvbmVudHMvTGlzdEhlYWRlclRpdGxlJztcbmltcG9ydCBMaXN0SGVhZGVyVG9vbGJhciBmcm9tICcuL2NvbXBvbmVudHMvTGlzdEhlYWRlclRvb2xiYXInO1xuaW1wb3J0IExpc3RNYW5hZ2VtZW50IGZyb20gJy4vY29tcG9uZW50cy9MaXN0TWFuYWdlbWVudCc7XG5cbmltcG9ydCBDb25maXJtYXRpb25EaWFsb2cgZnJvbSAnLi4vLi4vc2hhcmVkL0NvbmZpcm1hdGlvbkRpYWxvZyc7XG5pbXBvcnQgQ3JlYXRlRm9ybSBmcm9tICcuLi8uLi9zaGFyZWQvQ3JlYXRlRm9ybSc7XG5pbXBvcnQgRmxhc2hNZXNzYWdlcyBmcm9tICcuLi8uLi9zaGFyZWQvRmxhc2hNZXNzYWdlcyc7XG5pbXBvcnQgSXRlbXNUYWJsZSBmcm9tICcuL2NvbXBvbmVudHMvSXRlbXNUYWJsZS9JdGVtc1RhYmxlJztcbmltcG9ydCBVcGRhdGVGb3JtIGZyb20gJy4vY29tcG9uZW50cy9VcGRhdGVGb3JtJztcbmltcG9ydCB7IHBsdXJhbCBhcyBwbHVyYWxpemUgfSBmcm9tICcuLi8uLi8uLi91dGlscy9zdHJpbmcnO1xuaW1wb3J0IHsgbGlzdHNCeVBhdGggfSBmcm9tICcuLi8uLi8uLi91dGlscy9saXN0cyc7XG5pbXBvcnQgeyBjaGVja0ZvclF1ZXJ5Q2hhbmdlIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvcXVlcnlQYXJhbXMnO1xuXG5pbXBvcnQge1xuXHRkZWxldGVJdGVtcyxcblx0c2V0QWN0aXZlU2VhcmNoLFxuXHRzZXRBY3RpdmVTb3J0LFxuXHRzZXRDdXJyZW50UGFnZSxcblx0c2VsZWN0TGlzdCxcblx0Y2xlYXJDYWNoZWRRdWVyeSxcbn0gZnJvbSAnLi9hY3Rpb25zJztcblxuaW1wb3J0IHtcblx0ZGVsZXRlSXRlbSxcbn0gZnJvbSAnLi4vSXRlbS9hY3Rpb25zJztcblxuY29uc3QgRVNDX0tFWV9DT0RFID0gMjc7XG5cbmNvbnN0IExpc3RWaWV3ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuXHRjb250ZXh0VHlwZXM6IHtcblx0XHRyb3V0ZXI6IFJlYWN0LlByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblx0fSxcblx0Z2V0SW5pdGlhbFN0YXRlICgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Y29uZmlybWF0aW9uRGlhbG9nOiB7XG5cdFx0XHRcdGlzT3BlbjogZmFsc2UsXG5cdFx0XHR9LFxuXHRcdFx0Y2hlY2tlZEl0ZW1zOiB7fSxcblx0XHRcdGNvbnN0cmFpblRhYmxlV2lkdGg6IHRydWUsXG5cdFx0XHRtYW5hZ2VNb2RlOiBmYWxzZSxcblx0XHRcdHNob3dDcmVhdGVGb3JtOiBmYWxzZSxcblx0XHRcdHNob3dVcGRhdGVGb3JtOiBmYWxzZSxcblx0XHR9O1xuXHR9LFxuXHRjb21wb25lbnRXaWxsTW91bnQgKCkge1xuXHRcdC8vIFdoZW4gd2UgZGlyZWN0bHkgbmF2aWdhdGUgdG8gYSBsaXN0IHdpdGhvdXQgY29taW5nIGZyb20gYW5vdGhlciBjbGllbnRcblx0XHQvLyBzaWRlIHJvdXRlZCBwYWdlIGJlZm9yZSwgd2UgbmVlZCB0byBpbml0aWFsaXplIHRoZSBsaXN0IGFuZCBwYXJzZVxuXHRcdC8vIHBvc3NpYmx5IHNwZWNpZmllZCBxdWVyeSBwYXJhbWV0ZXJzXG5cblx0XHR0aGlzLnByb3BzLmRpc3BhdGNoKHNlbGVjdExpc3QodGhpcy5wcm9wcy5wYXJhbXMubGlzdElkKSk7XG5cblx0XHRjb25zdCBpc05vQ3JlYXRlID0gdGhpcy5wcm9wcy5saXN0cy5kYXRhW3RoaXMucHJvcHMucGFyYW1zLmxpc3RJZF0ubm9jcmVhdGU7XG5cdFx0Y29uc3Qgc2hvdWxkT3BlbkNyZWF0ZSA9IHRoaXMucHJvcHMubG9jYXRpb24uc2VhcmNoID09PSAnP2NyZWF0ZSc7XG5cblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdHNob3dDcmVhdGVGb3JtOiAoc2hvdWxkT3BlbkNyZWF0ZSAmJiAhaXNOb0NyZWF0ZSkgfHwgS2V5c3RvbmUuY3JlYXRlRm9ybUVycm9ycyxcblx0XHR9KTtcblxuXHR9LFxuXHRjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIChuZXh0UHJvcHMpIHtcblx0XHQvLyBXZSd2ZSBvcGVuZWQgYSBuZXcgbGlzdCBmcm9tIHRoZSBjbGllbnQgc2lkZSByb3V0aW5nLCBzbyBpbml0aWFsaXplXG5cdFx0Ly8gYWdhaW4gd2l0aCB0aGUgbmV3IGxpc3QgaWRcblx0XHRjb25zdCBpc1JlYWR5ID0gdGhpcy5wcm9wcy5saXN0cy5yZWFkeSAmJiBuZXh0UHJvcHMubGlzdHMucmVhZHk7XG5cdFx0aWYgKGlzUmVhZHkgJiYgY2hlY2tGb3JRdWVyeUNoYW5nZShuZXh0UHJvcHMsIHRoaXMucHJvcHMpKSB7XG5cdFx0XHR0aGlzLnByb3BzLmRpc3BhdGNoKHNlbGVjdExpc3QobmV4dFByb3BzLnBhcmFtcy5saXN0SWQpKTtcblx0XHR9XG5cdH0sXG5cdGNvbXBvbmVudFdpbGxVbm1vdW50ICgpIHtcblx0XHR0aGlzLnByb3BzLmRpc3BhdGNoKGNsZWFyQ2FjaGVkUXVlcnkoKSk7XG5cdH0sXG5cblx0Ly8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cdC8vIEhFQURFUlxuXHQvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblx0Ly8gQ2FsbGVkIHdoZW4gYSBuZXcgaXRlbSBpcyBjcmVhdGVkXG5cdG9uQ3JlYXRlIChpdGVtKSB7XG5cdFx0Ly8gSGlkZSB0aGUgY3JlYXRlIGZvcm1cblx0XHR0aGlzLnRvZ2dsZUNyZWF0ZU1vZGFsKGZhbHNlKTtcblx0XHQvLyBSZWRpcmVjdCB0byBuZXdseSBjcmVhdGVkIGl0ZW0gcGF0aFxuXHRcdGNvbnN0IGxpc3QgPSB0aGlzLnByb3BzLmN1cnJlbnRMaXN0O1xuXHRcdHRoaXMuY29udGV4dC5yb3V0ZXIucHVzaChgJHtLZXlzdG9uZS5hZG1pblBhdGh9LyR7bGlzdC5wYXRofS8ke2l0ZW0uaWR9YCk7XG5cdH0sXG5cdGNyZWF0ZUF1dG9jcmVhdGUgKCkge1xuXHRcdGNvbnN0IGxpc3QgPSB0aGlzLnByb3BzLmN1cnJlbnRMaXN0O1xuXHRcdGxpc3QuY3JlYXRlSXRlbShudWxsLCAoZXJyLCBkYXRhKSA9PiB7XG5cdFx0XHRpZiAoZXJyKSB7XG5cdFx0XHRcdC8vIFRPRE8gUHJvcGVyIGVycm9yIGhhbmRsaW5nXG5cdFx0XHRcdGFsZXJ0KCdTb21ldGhpbmcgd2VudCB3cm9uZywgcGxlYXNlIHRyeSBhZ2FpbiEnKTtcblx0XHRcdFx0Y29uc29sZS5sb2coZXJyKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuY29udGV4dC5yb3V0ZXIucHVzaChgJHtLZXlzdG9uZS5hZG1pblBhdGh9LyR7bGlzdC5wYXRofS8ke2RhdGEuaWR9YCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cdHVwZGF0ZVNlYXJjaCAoZSkge1xuXHRcdHRoaXMucHJvcHMuZGlzcGF0Y2goc2V0QWN0aXZlU2VhcmNoKGUudGFyZ2V0LnZhbHVlKSk7XG5cdH0sXG5cdGhhbmRsZVNlYXJjaENsZWFyICgpIHtcblx0XHR0aGlzLnByb3BzLmRpc3BhdGNoKHNldEFjdGl2ZVNlYXJjaCgnJykpO1xuXG5cdFx0Ly8gVE9ETyByZS1pbXBsZW1lbnQgZm9jdXMgd2hlbiByZWFkeVxuXHRcdC8vIGZpbmRET01Ob2RlKHRoaXMucmVmcy5saXN0U2VhcmNoSW5wdXQpLmZvY3VzKCk7XG5cdH0sXG5cdGhhbmRsZVNlYXJjaEtleSAoZSkge1xuXHRcdC8vIGNsZWFyIG9uIGVzY1xuXHRcdGlmIChlLndoaWNoID09PSBFU0NfS0VZX0NPREUpIHtcblx0XHRcdHRoaXMuaGFuZGxlU2VhcmNoQ2xlYXIoKTtcblx0XHR9XG5cdH0sXG5cdGhhbmRsZVBhZ2VTZWxlY3QgKGkpIHtcblx0XHQvLyBJZiB0aGUgY3VycmVudCBwYWdlIGluZGV4IGlzIHRoZSBzYW1lIGFzIHRoZSBpbmRleCB3ZSBhcmUgaW50ZW5kaW5nIHRvIHBhc3MgdG8gcmVkdXgsIGJhaWwgb3V0LlxuXHRcdGlmIChpID09PSB0aGlzLnByb3BzLmxpc3RzLnBhZ2UuaW5kZXgpIHJldHVybjtcblx0XHRyZXR1cm4gdGhpcy5wcm9wcy5kaXNwYXRjaChzZXRDdXJyZW50UGFnZShpKSk7XG5cdH0sXG5cdHRvZ2dsZU1hbmFnZU1vZGUgKGZpbHRlciA9ICF0aGlzLnN0YXRlLm1hbmFnZU1vZGUpIHtcblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdG1hbmFnZU1vZGU6IGZpbHRlcixcblx0XHRcdGNoZWNrZWRJdGVtczoge30sXG5cdFx0fSk7XG5cdH0sXG5cdHRvZ2dsZVVwZGF0ZU1vZGFsIChmaWx0ZXIgPSAhdGhpcy5zdGF0ZS5zaG93VXBkYXRlRm9ybSkge1xuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0c2hvd1VwZGF0ZUZvcm06IGZpbHRlcixcblx0XHR9KTtcblx0fSxcblx0bWFzc1VwZGF0ZSAoKSB7XG5cdFx0Ly8gVE9ETzogSW1wbGVtZW50IHVwZGF0ZSBtdWx0aS1pdGVtXG5cdFx0Y29uc29sZS5sb2coJ1VwZGF0ZSBBTEwgdGhlIHRoaW5ncyEnKTtcblx0fSxcblx0bWFzc0RlbGV0ZSAoKSB7XG5cdFx0Y29uc3QgeyBjaGVja2VkSXRlbXMgfSA9IHRoaXMuc3RhdGU7XG5cdFx0Y29uc3QgbGlzdCA9IHRoaXMucHJvcHMuY3VycmVudExpc3Q7XG5cdFx0Y29uc3QgaXRlbUNvdW50ID0gcGx1cmFsaXplKGNoZWNrZWRJdGVtcywgKCcqICcgKyBsaXN0LnNpbmd1bGFyLnRvTG93ZXJDYXNlKCkpLCAoJyogJyArIGxpc3QucGx1cmFsLnRvTG93ZXJDYXNlKCkpKTtcblx0XHRjb25zdCBpdGVtSWRzID0gT2JqZWN0LmtleXMoY2hlY2tlZEl0ZW1zKTtcblxuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0Y29uZmlybWF0aW9uRGlhbG9nOiB7XG5cdFx0XHRcdGlzT3BlbjogdHJ1ZSxcblx0XHRcdFx0bGFiZWw6ICdEZWxldGUnLFxuXHRcdFx0XHRib2R5OiAoXG5cdFx0XHRcdFx0PGRpdj5cblx0XHRcdFx0XHRcdEFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUge2l0ZW1Db3VudH0/XG5cdFx0XHRcdFx0XHQ8YnIgLz5cblx0XHRcdFx0XHRcdDxiciAvPlxuXHRcdFx0XHRcdFx0VGhpcyBjYW5ub3QgYmUgdW5kb25lLlxuXHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQpLFxuXHRcdFx0XHRvbkNvbmZpcm1hdGlvbjogKCkgPT4ge1xuXHRcdFx0XHRcdHRoaXMucHJvcHMuZGlzcGF0Y2goZGVsZXRlSXRlbXMoaXRlbUlkcykpO1xuXHRcdFx0XHRcdHRoaXMudG9nZ2xlTWFuYWdlTW9kZSgpO1xuXHRcdFx0XHRcdHRoaXMucmVtb3ZlQ29uZmlybWF0aW9uRGlhbG9nKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHR9LFxuXHRcdH0pO1xuXHR9LFxuXHRoYW5kbGVNYW5hZ2VtZW50U2VsZWN0IChzZWxlY3Rpb24pIHtcblx0XHRpZiAoc2VsZWN0aW9uID09PSAnYWxsJykgdGhpcy5jaGVja0FsbEl0ZW1zKCk7XG5cdFx0aWYgKHNlbGVjdGlvbiA9PT0gJ25vbmUnKSB0aGlzLnVuY2hlY2tBbGxUYWJsZUl0ZW1zKCk7XG5cdFx0aWYgKHNlbGVjdGlvbiA9PT0gJ3Zpc2libGUnKSB0aGlzLmNoZWNrQWxsVGFibGVJdGVtcygpO1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcblx0cmVuZGVyQ29uZmlybWF0aW9uRGlhbG9nICgpIHtcblx0XHRjb25zdCBwcm9wcyA9IHRoaXMuc3RhdGUuY29uZmlybWF0aW9uRGlhbG9nO1xuXHRcdHJldHVybiAoXG5cdFx0XHQ8Q29uZmlybWF0aW9uRGlhbG9nXG5cdFx0XHRcdGNvbmZpcm1hdGlvbkxhYmVsPXtwcm9wcy5sYWJlbH1cblx0XHRcdFx0aXNPcGVuPXtwcm9wcy5pc09wZW59XG5cdFx0XHRcdG9uQ2FuY2VsPXt0aGlzLnJlbW92ZUNvbmZpcm1hdGlvbkRpYWxvZ31cblx0XHRcdFx0b25Db25maXJtYXRpb249e3Byb3BzLm9uQ29uZmlybWF0aW9ufVxuXHRcdFx0PlxuXHRcdFx0XHR7cHJvcHMuYm9keX1cblx0XHRcdDwvQ29uZmlybWF0aW9uRGlhbG9nPlxuXHRcdCk7XG5cdH0sXG5cdHJlbmRlck1hbmFnZW1lbnQgKCkge1xuXHRcdGNvbnN0IHsgY2hlY2tlZEl0ZW1zLCBtYW5hZ2VNb2RlLCBzZWxlY3RBbGxJdGVtc0xvYWRpbmcgfSA9IHRoaXMuc3RhdGU7XG5cdFx0Y29uc3QgeyBjdXJyZW50TGlzdCB9ID0gdGhpcy5wcm9wcztcblxuXHRcdHJldHVybiAoXG5cdFx0XHQ8TGlzdE1hbmFnZW1lbnRcblx0XHRcdFx0Y2hlY2tlZEl0ZW1Db3VudD17T2JqZWN0LmtleXMoY2hlY2tlZEl0ZW1zKS5sZW5ndGh9XG5cdFx0XHRcdGhhbmRsZURlbGV0ZT17dGhpcy5tYXNzRGVsZXRlfVxuXHRcdFx0XHRoYW5kbGVTZWxlY3Q9e3RoaXMuaGFuZGxlTWFuYWdlbWVudFNlbGVjdH1cblx0XHRcdFx0aGFuZGxlVG9nZ2xlPXsoKSA9PiB0aGlzLnRvZ2dsZU1hbmFnZU1vZGUoIW1hbmFnZU1vZGUpfVxuXHRcdFx0XHRpc09wZW49e21hbmFnZU1vZGV9XG5cdFx0XHRcdGl0ZW1Db3VudD17dGhpcy5wcm9wcy5pdGVtcy5jb3VudH1cblx0XHRcdFx0aXRlbXNQZXJQYWdlPXt0aGlzLnByb3BzLmxpc3RzLnBhZ2Uuc2l6ZX1cblx0XHRcdFx0bm9kZWxldGU9e2N1cnJlbnRMaXN0Lm5vZGVsZXRlfVxuXHRcdFx0XHRub2VkaXQ9e2N1cnJlbnRMaXN0Lm5vZWRpdH1cblx0XHRcdFx0c2VsZWN0QWxsSXRlbXNMb2FkaW5nPXtzZWxlY3RBbGxJdGVtc0xvYWRpbmd9XG5cdFx0XHQvPlxuXHRcdCk7XG5cdH0sXG5cdHJlbmRlclBhZ2luYXRpb24gKCkge1xuXHRcdGNvbnN0IGl0ZW1zID0gdGhpcy5wcm9wcy5pdGVtcztcblx0XHRpZiAodGhpcy5zdGF0ZS5tYW5hZ2VNb2RlIHx8ICFpdGVtcy5jb3VudCkgcmV0dXJuO1xuXG5cdFx0Y29uc3QgbGlzdCA9IHRoaXMucHJvcHMuY3VycmVudExpc3Q7XG5cdFx0Y29uc3QgY3VycmVudFBhZ2UgPSB0aGlzLnByb3BzLmxpc3RzLnBhZ2UuaW5kZXg7XG5cdFx0Y29uc3QgcGFnZVNpemUgPSB0aGlzLnByb3BzLmxpc3RzLnBhZ2Uuc2l6ZTtcblxuXHRcdHJldHVybiAoXG5cdFx0XHQ8UGFnaW5hdGlvblxuXHRcdFx0XHRjdXJyZW50UGFnZT17Y3VycmVudFBhZ2V9XG5cdFx0XHRcdG9uUGFnZVNlbGVjdD17dGhpcy5oYW5kbGVQYWdlU2VsZWN0fVxuXHRcdFx0XHRwYWdlU2l6ZT17cGFnZVNpemV9XG5cdFx0XHRcdHBsdXJhbD17bGlzdC5wbHVyYWx9XG5cdFx0XHRcdHNpbmd1bGFyPXtsaXN0LnNpbmd1bGFyfVxuXHRcdFx0XHRzdHlsZT17eyBtYXJnaW5Cb3R0b206IDAgfX1cblx0XHRcdFx0dG90YWw9e2l0ZW1zLmNvdW50fVxuXHRcdFx0XHRsaW1pdD17MTB9XG5cdFx0XHQvPlxuXHRcdCk7XG5cdH0sXG5cdHJlbmRlckhlYWRlciAoKSB7XG5cdFx0Y29uc3QgaXRlbXMgPSB0aGlzLnByb3BzLml0ZW1zO1xuXHRcdGNvbnN0IHsgYXV0b2NyZWF0ZSwgbm9jcmVhdGUsIHBsdXJhbCwgc2luZ3VsYXIgfSA9IHRoaXMucHJvcHMuY3VycmVudExpc3Q7XG5cblx0XHRyZXR1cm4gKFxuXHRcdFx0PENvbnRhaW5lciBzdHlsZT17eyBwYWRkaW5nVG9wOiAnMmVtJyB9fT5cblx0XHRcdFx0PExpc3RIZWFkZXJUaXRsZVxuXHRcdFx0XHRcdGFjdGl2ZVNvcnQ9e3RoaXMucHJvcHMuYWN0aXZlLnNvcnR9XG5cdFx0XHRcdFx0YXZhaWxhYmxlQ29sdW1ucz17dGhpcy5wcm9wcy5jdXJyZW50TGlzdC5jb2x1bW5zfVxuXHRcdFx0XHRcdGhhbmRsZVNvcnRTZWxlY3Q9e3RoaXMuaGFuZGxlU29ydFNlbGVjdH1cblx0XHRcdFx0XHR0aXRsZT17YFxuXHRcdFx0XHRcdFx0JHtudW1lcmFsKGl0ZW1zLmNvdW50KS5mb3JtYXQoKX1cblx0XHRcdFx0XHRcdCR7cGx1cmFsaXplKGl0ZW1zLmNvdW50LCAnICcgKyBzaW5ndWxhciwgJyAnICsgcGx1cmFsKX1cblx0XHRcdFx0XHRgfVxuXHRcdFx0XHQvPlxuXHRcdFx0XHQ8TGlzdEhlYWRlclRvb2xiYXJcblx0XHRcdFx0XHQvLyBjb21tb25cblx0XHRcdFx0XHRkaXNwYXRjaD17dGhpcy5wcm9wcy5kaXNwYXRjaH1cblx0XHRcdFx0XHRsaXN0PXtsaXN0c0J5UGF0aFt0aGlzLnByb3BzLnBhcmFtcy5saXN0SWRdfVxuXG5cdFx0XHRcdFx0Ly8gZXhwYW5kXG5cdFx0XHRcdFx0ZXhwYW5kSXNBY3RpdmU9eyF0aGlzLnN0YXRlLmNvbnN0cmFpblRhYmxlV2lkdGh9XG5cdFx0XHRcdFx0ZXhwYW5kT25DbGljaz17dGhpcy50b2dnbGVUYWJsZVdpZHRofVxuXG5cdFx0XHRcdFx0Ly8gY3JlYXRlXG5cdFx0XHRcdFx0Y3JlYXRlSXNBdmFpbGFibGU9eyFub2NyZWF0ZX1cblx0XHRcdFx0XHRjcmVhdGVMaXN0TmFtZT17c2luZ3VsYXJ9XG5cdFx0XHRcdFx0Y3JlYXRlT25DbGljaz17YXV0b2NyZWF0ZVxuXHRcdFx0XHRcdFx0PyB0aGlzLmNyZWF0ZUF1dG9jcmVhdGVcblx0XHRcdFx0XHRcdDogdGhpcy5vcGVuQ3JlYXRlTW9kYWx9XG5cblx0XHRcdFx0XHQvLyBzZWFyY2hcblx0XHRcdFx0XHRzZWFyY2hIYW5kbGVDaGFuZ2U9e3RoaXMudXBkYXRlU2VhcmNofVxuXHRcdFx0XHRcdHNlYXJjaEhhbmRsZUNsZWFyPXt0aGlzLmhhbmRsZVNlYXJjaENsZWFyfVxuXHRcdFx0XHRcdHNlYXJjaEhhbmRsZUtleXVwPXt0aGlzLmhhbmRsZVNlYXJjaEtleX1cblx0XHRcdFx0XHRzZWFyY2hWYWx1ZT17dGhpcy5wcm9wcy5hY3RpdmUuc2VhcmNofVxuXG5cdFx0XHRcdFx0Ly8gZmlsdGVyc1xuXHRcdFx0XHRcdGZpbHRlcnNBY3RpdmU9e3RoaXMucHJvcHMuYWN0aXZlLmZpbHRlcnN9XG5cdFx0XHRcdFx0ZmlsdGVyc0F2YWlsYWJsZT17dGhpcy5wcm9wcy5jdXJyZW50TGlzdC5jb2x1bW5zLmZpbHRlcigoY29sKSA9PiAoXG5cdFx0XHRcdFx0XHRjb2wuZmllbGQgJiYgY29sLmZpZWxkLmhhc0ZpbHRlck1ldGhvZCkgfHwgY29sLnR5cGUgPT09ICdoZWFkaW5nJ1xuXHRcdFx0XHRcdCl9XG5cblx0XHRcdFx0XHQvLyBjb2x1bW5zXG5cdFx0XHRcdFx0Y29sdW1uc0FjdGl2ZT17dGhpcy5wcm9wcy5hY3RpdmUuY29sdW1uc31cblx0XHRcdFx0XHRjb2x1bW5zQXZhaWxhYmxlPXt0aGlzLnByb3BzLmN1cnJlbnRMaXN0LmNvbHVtbnN9XG5cdFx0XHRcdC8+XG5cdFx0XHRcdDxMaXN0RmlsdGVyc1xuXHRcdFx0XHRcdGRpc3BhdGNoPXt0aGlzLnByb3BzLmRpc3BhdGNofVxuXHRcdFx0XHRcdGZpbHRlcnM9e3RoaXMucHJvcHMuYWN0aXZlLmZpbHRlcnN9XG5cdFx0XHRcdC8+XG5cdFx0XHQ8L0NvbnRhaW5lcj5cblx0XHQpO1xuXHR9LFxuXG5cdC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXHQvLyBUQUJMRVxuXHQvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuXHRjaGVja1RhYmxlSXRlbSAoaXRlbSwgZSkge1xuXHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRjb25zdCBuZXdDaGVja2VkSXRlbXMgPSB7IC4uLnRoaXMuc3RhdGUuY2hlY2tlZEl0ZW1zIH07XG5cdFx0Y29uc3QgaXRlbUlkID0gaXRlbS5pZDtcblx0XHRpZiAodGhpcy5zdGF0ZS5jaGVja2VkSXRlbXNbaXRlbUlkXSkge1xuXHRcdFx0ZGVsZXRlIG5ld0NoZWNrZWRJdGVtc1tpdGVtSWRdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRuZXdDaGVja2VkSXRlbXNbaXRlbUlkXSA9IHRydWU7XG5cdFx0fVxuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0Y2hlY2tlZEl0ZW1zOiBuZXdDaGVja2VkSXRlbXMsXG5cdFx0fSk7XG5cdH0sXG5cdGNoZWNrQWxsVGFibGVJdGVtcyAoKSB7XG5cdFx0Y29uc3QgY2hlY2tlZEl0ZW1zID0ge307XG5cdFx0dGhpcy5wcm9wcy5pdGVtcy5yZXN1bHRzLmZvckVhY2goaXRlbSA9PiB7XG5cdFx0XHRjaGVja2VkSXRlbXNbaXRlbS5pZF0gPSB0cnVlO1xuXHRcdH0pO1xuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0Y2hlY2tlZEl0ZW1zOiBjaGVja2VkSXRlbXMsXG5cdFx0fSk7XG5cdH0sXG5cdGNoZWNrQWxsSXRlbXMgKCkge1xuXHRcdGNvbnN0IGNoZWNrZWRJdGVtcyA9IHsgLi4udGhpcy5zdGF0ZS5jaGVja2VkSXRlbXMgfTtcblx0XHQvLyBKdXN0IGluIGNhc2UgdGhpcyBBUEkgY2FsbCB0YWtlcyBhIGxvbmcgdGltZSwgd2UnbGwgdXBkYXRlIHRoZSBzZWxlY3QgYWxsIGJ1dHRvbiB3aXRoXG5cdFx0Ly8gYSBzcGlubmVyLlxuXHRcdHRoaXMuc2V0U3RhdGUoeyBzZWxlY3RBbGxJdGVtc0xvYWRpbmc6IHRydWUgfSk7XG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xuXHRcdHRoaXMucHJvcHMuY3VycmVudExpc3QubG9hZEl0ZW1zKHsgZXhwYW5kUmVsYXRpb25zaGlwRmlsdGVyczogZmFsc2UsIGZpbHRlcnM6IHt9IH0sIGZ1bmN0aW9uIChlcnIsIGRhdGEpIHtcblx0XHRcdGRhdGEucmVzdWx0cy5mb3JFYWNoKGl0ZW0gPT4ge1xuXHRcdFx0XHRjaGVja2VkSXRlbXNbaXRlbS5pZF0gPSB0cnVlO1xuXHRcdFx0fSk7XG5cdFx0XHRzZWxmLnNldFN0YXRlKHtcblx0XHRcdFx0Y2hlY2tlZEl0ZW1zOiBjaGVja2VkSXRlbXMsXG5cdFx0XHRcdHNlbGVjdEFsbEl0ZW1zTG9hZGluZzogZmFsc2UsXG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fSxcblx0dW5jaGVja0FsbFRhYmxlSXRlbXMgKCkge1xuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0Y2hlY2tlZEl0ZW1zOiB7fSxcblx0XHR9KTtcblx0fSxcblx0ZGVsZXRlVGFibGVJdGVtIChpdGVtLCBlKSB7XG5cdFx0aWYgKGUuYWx0S2V5KSB7XG5cdFx0XHR0aGlzLnByb3BzLmRpc3BhdGNoKGRlbGV0ZUl0ZW0oaXRlbS5pZCkpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGUucHJldmVudERlZmF1bHQoKTtcblxuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0Y29uZmlybWF0aW9uRGlhbG9nOiB7XG5cdFx0XHRcdGlzT3BlbjogdHJ1ZSxcblx0XHRcdFx0bGFiZWw6ICdEZWxldGUnLFxuXHRcdFx0XHRib2R5OiAoXG5cdFx0XHRcdFx0PGRpdj5cblx0XHRcdFx0XHRcdEFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgPHN0cm9uZz57aXRlbS5uYW1lfTwvc3Ryb25nPj9cblx0XHRcdFx0XHRcdDxiciAvPlxuXHRcdFx0XHRcdFx0PGJyIC8+XG5cdFx0XHRcdFx0XHRUaGlzIGNhbm5vdCBiZSB1bmRvbmUuXG5cdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdCksXG5cdFx0XHRcdG9uQ29uZmlybWF0aW9uOiAoKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5wcm9wcy5kaXNwYXRjaChkZWxldGVJdGVtKGl0ZW0uaWQpKTtcblx0XHRcdFx0XHR0aGlzLnJlbW92ZUNvbmZpcm1hdGlvbkRpYWxvZygpO1xuXHRcdFx0XHR9LFxuXHRcdFx0fSxcblx0XHR9KTtcblx0fSxcblx0cmVtb3ZlQ29uZmlybWF0aW9uRGlhbG9nICgpIHtcblx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdGNvbmZpcm1hdGlvbkRpYWxvZzoge1xuXHRcdFx0XHRpc09wZW46IGZhbHNlLFxuXHRcdFx0fSxcblx0XHR9KTtcblx0fSxcblx0dG9nZ2xlVGFibGVXaWR0aCAoKSB7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRjb25zdHJhaW5UYWJsZVdpZHRoOiAhdGhpcy5zdGF0ZS5jb25zdHJhaW5UYWJsZVdpZHRoLFxuXHRcdH0pO1xuXHR9LFxuXG5cdC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXHQvLyBDT01NT05cblx0Ly8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cblx0aGFuZGxlU29ydFNlbGVjdCAocGF0aCwgaW52ZXJ0ZWQpIHtcblx0XHRpZiAoaW52ZXJ0ZWQpIHBhdGggPSAnLScgKyBwYXRoO1xuXHRcdHRoaXMucHJvcHMuZGlzcGF0Y2goc2V0QWN0aXZlU29ydChwYXRoKSk7XG5cdH0sXG5cdHRvZ2dsZUNyZWF0ZU1vZGFsICh2aXNpYmxlKSB7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRzaG93Q3JlYXRlRm9ybTogdmlzaWJsZSxcblx0XHR9KTtcblx0fSxcblx0b3BlbkNyZWF0ZU1vZGFsICgpIHtcblx0XHR0aGlzLnRvZ2dsZUNyZWF0ZU1vZGFsKHRydWUpO1xuXHR9LFxuXHRjbG9zZUNyZWF0ZU1vZGFsICgpIHtcblx0XHR0aGlzLnRvZ2dsZUNyZWF0ZU1vZGFsKGZhbHNlKTtcblx0fSxcblx0c2hvd0JsYW5rU3RhdGUgKCkge1xuXHRcdHJldHVybiAhdGhpcy5wcm9wcy5sb2FkaW5nXG5cdFx0XHRcdCYmICF0aGlzLnByb3BzLml0ZW1zLnJlc3VsdHMubGVuZ3RoXG5cdFx0XHRcdCYmICF0aGlzLnByb3BzLmFjdGl2ZS5zZWFyY2hcblx0XHRcdFx0JiYgIXRoaXMucHJvcHMuYWN0aXZlLmZpbHRlcnMubGVuZ3RoO1xuXHR9LFxuXHRyZW5kZXJCbGFua1N0YXRlICgpIHtcblx0XHRjb25zdCB7IGN1cnJlbnRMaXN0IH0gPSB0aGlzLnByb3BzO1xuXG5cdFx0aWYgKCF0aGlzLnNob3dCbGFua1N0YXRlKCkpIHJldHVybiBudWxsO1xuXG5cdFx0Ly8gY3JlYXRlIGFuZCBuYXYgZGlyZWN0bHkgdG8gdGhlIGl0ZW0gdmlldywgb3Igb3BlbiB0aGUgY3JlYXRlIG1vZGFsXG5cdFx0Y29uc3Qgb25DbGljayA9IGN1cnJlbnRMaXN0LmF1dG9jcmVhdGVcblx0XHRcdD8gdGhpcy5jcmVhdGVBdXRvY3JlYXRlXG5cdFx0XHQ6IHRoaXMub3BlbkNyZWF0ZU1vZGFsO1xuXG5cdFx0Ly8gZGlzcGxheSB0aGUgYnV0dG9uIGlmIGNyZWF0ZSBhbGxvd2VkXG5cdFx0Y29uc3QgYnV0dG9uID0gIWN1cnJlbnRMaXN0Lm5vY3JlYXRlID8gKFxuXHRcdFx0PEdseXBoQnV0dG9uIGNvbG9yPVwic3VjY2Vzc1wiIGdseXBoPVwicGx1c1wiIHBvc2l0aW9uPVwibGVmdFwiIG9uQ2xpY2s9e29uQ2xpY2t9IGRhdGEtZTJlLWxpc3QtY3JlYXRlLWJ1dHRvbj1cIm5vLXJlc3VsdHNcIj5cblx0XHRcdFx0Q3JlYXRlIHtjdXJyZW50TGlzdC5zaW5ndWxhcn1cblx0XHRcdDwvR2x5cGhCdXR0b24+XG5cdFx0KSA6IG51bGw7XG5cblx0XHRyZXR1cm4gKFxuXHRcdFx0PENvbnRhaW5lcj5cblx0XHRcdFx0eyh0aGlzLnByb3BzLmVycm9yKSA/IChcblx0XHRcdFx0XHQ8Rmxhc2hNZXNzYWdlc1xuXHRcdFx0XHRcdFx0bWVzc2FnZXM9e3sgZXJyb3I6IFt7XG5cdFx0XHRcdFx0XHRcdHRpdGxlOiBcIlRoZXJlIGlzIGEgcHJvYmxlbSB3aXRoIHRoZSBuZXR3b3JrLCB3ZSdyZSB0cnlpbmcgdG8gcmVjb25uZWN0Li4uXCIsXG5cdFx0XHRcdFx0XHR9XSB9fVxuXHRcdFx0XHRcdC8+XG5cdFx0XHRcdCkgOiBudWxsfVxuXHRcdFx0XHQ8QmxhbmtTdGF0ZSBoZWFkaW5nPXtgTm8gJHt0aGlzLnByb3BzLmN1cnJlbnRMaXN0LnBsdXJhbC50b0xvd2VyQ2FzZSgpfSBmb3VuZC4uLmB9IHN0eWxlPXt7IG1hcmdpblRvcDogNDAgfX0+XG5cdFx0XHRcdFx0e2J1dHRvbn1cblx0XHRcdFx0PC9CbGFua1N0YXRlPlxuXHRcdFx0PC9Db250YWluZXI+XG5cdFx0KTtcblx0fSxcblx0cmVuZGVyQWN0aXZlU3RhdGUgKCkge1xuXHRcdGlmICh0aGlzLnNob3dCbGFua1N0YXRlKCkpIHJldHVybiBudWxsO1xuXG5cdFx0Y29uc3QgY29udGFpbmVyU3R5bGUgPSB7XG5cdFx0XHR0cmFuc2l0aW9uOiAnbWF4LXdpZHRoIDE2MG1zIGVhc2Utb3V0Jyxcblx0XHRcdG1zVHJhbnNpdGlvbjogJ21heC13aWR0aCAxNjBtcyBlYXNlLW91dCcsXG5cdFx0XHRNb3pUcmFuc2l0aW9uOiAnbWF4LXdpZHRoIDE2MG1zIGVhc2Utb3V0Jyxcblx0XHRcdFdlYmtpdFRyYW5zaXRpb246ICdtYXgtd2lkdGggMTYwbXMgZWFzZS1vdXQnLFxuXHRcdH07XG5cdFx0aWYgKCF0aGlzLnN0YXRlLmNvbnN0cmFpblRhYmxlV2lkdGgpIHtcblx0XHRcdGNvbnRhaW5lclN0eWxlLm1heFdpZHRoID0gJzEwMCUnO1xuXHRcdH1cblx0XHRyZXR1cm4gKFxuXHRcdFx0PGRpdj5cblx0XHRcdFx0e3RoaXMucmVuZGVySGVhZGVyKCl9XG5cdFx0XHRcdDxDb250YWluZXI+XG5cdFx0XHRcdFx0PGRpdiBzdHlsZT17eyBoZWlnaHQ6IDM1LCBtYXJnaW5Cb3R0b206ICcxZW0nLCBtYXJnaW5Ub3A6ICcxZW0nIH19PlxuXHRcdFx0XHRcdFx0e3RoaXMucmVuZGVyTWFuYWdlbWVudCgpfVxuXHRcdFx0XHRcdFx0e3RoaXMucmVuZGVyUGFnaW5hdGlvbigpfVxuXHRcdFx0XHRcdFx0PHNwYW4gc3R5bGU9e3sgY2xlYXI6ICdib3RoJywgZGlzcGxheTogJ3RhYmxlJyB9fSAvPlxuXHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQ8L0NvbnRhaW5lcj5cblx0XHRcdFx0PENvbnRhaW5lciBzdHlsZT17Y29udGFpbmVyU3R5bGV9PlxuXHRcdFx0XHRcdHsodGhpcy5wcm9wcy5lcnJvcikgPyAoXG5cdFx0XHRcdFx0XHQ8Rmxhc2hNZXNzYWdlc1xuXHRcdFx0XHRcdFx0XHRtZXNzYWdlcz17eyBlcnJvcjogW3tcblx0XHRcdFx0XHRcdFx0XHR0aXRsZTogXCJUaGVyZSBpcyBhIHByb2JsZW0gd2l0aCB0aGUgbmV0d29yaywgd2UncmUgdHJ5aW5nIHRvIHJlY29ubmVjdC4uXCIsXG5cdFx0XHRcdFx0XHRcdH1dIH19XG5cdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdCkgOiBudWxsfVxuXHRcdFx0XHRcdHsodGhpcy5wcm9wcy5sb2FkaW5nKSA/IChcblx0XHRcdFx0XHRcdDxDZW50ZXIgaGVpZ2h0PVwiNTB2aFwiPlxuXHRcdFx0XHRcdFx0XHQ8U3Bpbm5lciAvPlxuXHRcdFx0XHRcdFx0PC9DZW50ZXI+XG5cdFx0XHRcdFx0KSA6IChcblx0XHRcdFx0XHRcdDxkaXY+XG5cdFx0XHRcdFx0XHRcdDxJdGVtc1RhYmxlXG5cdFx0XHRcdFx0XHRcdFx0YWN0aXZlU29ydD17dGhpcy5wcm9wcy5hY3RpdmUuc29ydH1cblx0XHRcdFx0XHRcdFx0XHRjaGVja2VkSXRlbXM9e3RoaXMuc3RhdGUuY2hlY2tlZEl0ZW1zfVxuXHRcdFx0XHRcdFx0XHRcdGNoZWNrVGFibGVJdGVtPXt0aGlzLmNoZWNrVGFibGVJdGVtfVxuXHRcdFx0XHRcdFx0XHRcdGNvbHVtbnM9e3RoaXMucHJvcHMuYWN0aXZlLmNvbHVtbnN9XG5cdFx0XHRcdFx0XHRcdFx0ZGVsZXRlVGFibGVJdGVtPXt0aGlzLmRlbGV0ZVRhYmxlSXRlbX1cblx0XHRcdFx0XHRcdFx0XHRoYW5kbGVTb3J0U2VsZWN0PXt0aGlzLmhhbmRsZVNvcnRTZWxlY3R9XG5cdFx0XHRcdFx0XHRcdFx0aXRlbXM9e3RoaXMucHJvcHMuaXRlbXN9XG5cdFx0XHRcdFx0XHRcdFx0bGlzdD17dGhpcy5wcm9wcy5jdXJyZW50TGlzdH1cblx0XHRcdFx0XHRcdFx0XHRtYW5hZ2VNb2RlPXt0aGlzLnN0YXRlLm1hbmFnZU1vZGV9XG5cdFx0XHRcdFx0XHRcdFx0cm93QWxlcnQ9e3RoaXMucHJvcHMucm93QWxlcnR9XG5cdFx0XHRcdFx0XHRcdFx0Y3VycmVudFBhZ2U9e3RoaXMucHJvcHMubGlzdHMucGFnZS5pbmRleH1cblx0XHRcdFx0XHRcdFx0XHRwYWdlU2l6ZT17dGhpcy5wcm9wcy5saXN0cy5wYWdlLnNpemV9XG5cdFx0XHRcdFx0XHRcdFx0ZHJhZz17dGhpcy5wcm9wcy5saXN0cy5kcmFnfVxuXHRcdFx0XHRcdFx0XHRcdGRpc3BhdGNoPXt0aGlzLnByb3BzLmRpc3BhdGNofVxuXHRcdFx0XHRcdFx0XHQvPlxuXHRcdFx0XHRcdFx0XHR7dGhpcy5yZW5kZXJOb1NlYXJjaFJlc3VsdHMoKX1cblx0XHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdCl9XG5cdFx0XHRcdDwvQ29udGFpbmVyPlxuXHRcdFx0PC9kaXY+XG5cdFx0KTtcblx0fSxcblx0cmVuZGVyTm9TZWFyY2hSZXN1bHRzICgpIHtcblx0XHRpZiAodGhpcy5wcm9wcy5pdGVtcy5yZXN1bHRzLmxlbmd0aCkgcmV0dXJuIG51bGw7XG5cdFx0bGV0IG1hdGNoaW5nID0gdGhpcy5wcm9wcy5hY3RpdmUuc2VhcmNoO1xuXHRcdGlmICh0aGlzLnByb3BzLmFjdGl2ZS5maWx0ZXJzLmxlbmd0aCkge1xuXHRcdFx0bWF0Y2hpbmcgKz0gKG1hdGNoaW5nID8gJyBhbmQgJyA6ICcnKSArIHBsdXJhbGl6ZSh0aGlzLnByb3BzLmFjdGl2ZS5maWx0ZXJzLmxlbmd0aCwgJyogZmlsdGVyJywgJyogZmlsdGVycycpO1xuXHRcdH1cblx0XHRtYXRjaGluZyA9IG1hdGNoaW5nID8gJyBmb3VuZCBtYXRjaGluZyAnICsgbWF0Y2hpbmcgOiAnLic7XG5cdFx0cmV0dXJuIChcblx0XHRcdDxCbGFua1N0YXRlIHN0eWxlPXt7IG1hcmdpblRvcDogMjAsIG1hcmdpbkJvdHRvbTogMjAgfX0+XG5cdFx0XHRcdDxHbHlwaFxuXHRcdFx0XHRcdG5hbWU9XCJzZWFyY2hcIlxuXHRcdFx0XHRcdHNpemU9XCJtZWRpdW1cIlxuXHRcdFx0XHRcdHN0eWxlPXt7IG1hcmdpbkJvdHRvbTogMjAgfX1cblx0XHRcdFx0Lz5cblx0XHRcdFx0PGgyIHN0eWxlPXt7IGNvbG9yOiAnaW5oZXJpdCcgfX0+XG5cdFx0XHRcdFx0Tm8ge3RoaXMucHJvcHMuY3VycmVudExpc3QucGx1cmFsLnRvTG93ZXJDYXNlKCl9e21hdGNoaW5nfVxuXHRcdFx0XHQ8L2gyPlxuXHRcdFx0PC9CbGFua1N0YXRlPlxuXHRcdCk7XG5cdH0sXG5cdHJlbmRlciAoKSB7XG5cdFx0aWYgKCF0aGlzLnByb3BzLnJlYWR5KSB7XG5cdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHQ8Q2VudGVyIGhlaWdodD1cIjUwdmhcIiBkYXRhLXNjcmVlbi1pZD1cImxpc3RcIj5cblx0XHRcdFx0XHQ8U3Bpbm5lciAvPlxuXHRcdFx0XHQ8L0NlbnRlcj5cblx0XHRcdCk7XG5cdFx0fVxuXHRcdHJldHVybiAoXG5cdFx0XHQ8ZGl2IGRhdGEtc2NyZWVuLWlkPVwibGlzdFwiPlxuXHRcdFx0XHR7dGhpcy5yZW5kZXJCbGFua1N0YXRlKCl9XG5cdFx0XHRcdHt0aGlzLnJlbmRlckFjdGl2ZVN0YXRlKCl9XG5cdFx0XHRcdDxDcmVhdGVGb3JtXG5cdFx0XHRcdFx0ZXJyPXtLZXlzdG9uZS5jcmVhdGVGb3JtRXJyb3JzfVxuXHRcdFx0XHRcdGlzT3Blbj17dGhpcy5zdGF0ZS5zaG93Q3JlYXRlRm9ybX1cblx0XHRcdFx0XHRsaXN0PXt0aGlzLnByb3BzLmN1cnJlbnRMaXN0fVxuXHRcdFx0XHRcdG9uQ2FuY2VsPXt0aGlzLmNsb3NlQ3JlYXRlTW9kYWx9XG5cdFx0XHRcdFx0b25DcmVhdGU9e3RoaXMub25DcmVhdGV9XG5cdFx0XHRcdC8+XG5cdFx0XHRcdDxVcGRhdGVGb3JtXG5cdFx0XHRcdFx0aXNPcGVuPXt0aGlzLnN0YXRlLnNob3dVcGRhdGVGb3JtfVxuXHRcdFx0XHRcdGl0ZW1JZHM9e09iamVjdC5rZXlzKHRoaXMuc3RhdGUuY2hlY2tlZEl0ZW1zKX1cblx0XHRcdFx0XHRsaXN0PXt0aGlzLnByb3BzLmN1cnJlbnRMaXN0fVxuXHRcdFx0XHRcdG9uQ2FuY2VsPXsoKSA9PiB0aGlzLnRvZ2dsZVVwZGF0ZU1vZGFsKGZhbHNlKX1cblx0XHRcdFx0Lz5cblx0XHRcdFx0e3RoaXMucmVuZGVyQ29uZmlybWF0aW9uRGlhbG9nKCl9XG5cdFx0XHQ8L2Rpdj5cblx0XHQpO1xuXHR9LFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gY29ubmVjdCgoc3RhdGUpID0+IHtcblx0cmV0dXJuIHtcblx0XHRsaXN0czogc3RhdGUubGlzdHMsXG5cdFx0bG9hZGluZzogc3RhdGUubGlzdHMubG9hZGluZyxcblx0XHRlcnJvcjogc3RhdGUubGlzdHMuZXJyb3IsXG5cdFx0Y3VycmVudExpc3Q6IHN0YXRlLmxpc3RzLmN1cnJlbnRMaXN0LFxuXHRcdGl0ZW1zOiBzdGF0ZS5saXN0cy5pdGVtcyxcblx0XHRwYWdlOiBzdGF0ZS5saXN0cy5wYWdlLFxuXHRcdHJlYWR5OiBzdGF0ZS5saXN0cy5yZWFkeSxcblx0XHRyb3dBbGVydDogc3RhdGUubGlzdHMucm93QWxlcnQsXG5cdFx0YWN0aXZlOiBzdGF0ZS5hY3RpdmUsXG5cdH07XG59KShMaXN0Vmlldyk7XG4iLCJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IGFzc2lnbiBmcm9tICdvYmplY3QtYXNzaWduJztcblxuaW1wb3J0IHtcblx0QUREX0ZJTFRFUixcblx0Q0xFQVJfRklMVEVSLFxuXHRDTEVBUl9BTExfRklMVEVSUyxcblx0U0VUX0FDVElWRV9TRUFSQ0gsXG5cdFNFVF9BQ1RJVkVfU09SVCxcblx0U0VUX0FDVElWRV9DT0xVTU5TLFxuXHRTRVRfQUNUSVZFX0xJU1QsXG5cdFNFVF9GSUxURVJTLFxuXHRRVUVSWV9IQVNfQ0hBTkdFRCxcblx0UkVQTEFDRV9DQUNIRURfUVVFUlksXG5cdENMRUFSX0NBQ0hFRF9RVUVSWSxcbn0gZnJvbSAnLi4vY29uc3RhbnRzJztcblxuY29uc3QgaW5pdGlhbFN0YXRlID0ge1xuXHRjb2x1bW5zOiBbXSxcblx0ZmlsdGVyczogW10sXG5cdHNlYXJjaDogJycsXG5cdHNvcnQ6IHtcblx0XHRpbnB1dDogJycsXG5cdFx0aXNEZWZhdWx0U29ydDogZmFsc2UsXG5cdFx0cGF0aHM6IFtdLFxuXHRcdHJhd0lucHV0OiAnJyxcblx0fSxcblx0Y2FjaGVkUXVlcnk6IHt9LFxufTtcblxuLyoqXG4gKiBNYW5hZ2UgdGhlIGFjdGl2ZSBzdGF0ZVxuICovXG5mdW5jdGlvbiBhY3RpdmUgKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb24pIHtcblx0c3dpdGNoIChhY3Rpb24udHlwZSkge1xuXHRcdGNhc2UgU0VUX0FDVElWRV9MSVNUOlxuXHRcdFx0cmV0dXJuIGFzc2lnbih7fSwgc3RhdGUsIHtcblx0XHRcdFx0aWQ6IGFjdGlvbi5pZCxcblx0XHRcdFx0Y29sdW1uczogYWN0aW9uLmxpc3QuZXhwYW5kQ29sdW1ucyhhY3Rpb24ubGlzdC5kZWZhdWx0Q29sdW1ucyksXG5cdFx0XHRcdGZpbHRlcnM6IFtdLFxuXHRcdFx0XHRzZWFyY2g6ICcnLFxuXHRcdFx0XHRzb3J0OiBhY3Rpb24ubGlzdC5leHBhbmRTb3J0KGFjdGlvbi5saXN0LmRlZmF1bHRTb3J0KSxcblx0XHRcdH0pO1xuXHRcdGNhc2UgU0VUX0FDVElWRV9TRUFSQ0g6XG5cdFx0XHRyZXR1cm4gYXNzaWduKHt9LCBzdGF0ZSwge1xuXHRcdFx0XHRzZWFyY2g6IGFjdGlvbi5zZWFyY2hTdHJpbmcsXG5cdFx0XHR9KTtcblx0XHRjYXNlIFNFVF9BQ1RJVkVfU09SVDpcblx0XHRcdHJldHVybiBhc3NpZ24oe30sIHN0YXRlLCB7XG5cdFx0XHRcdHNvcnQ6IGFjdGlvbi5zb3J0LFxuXHRcdFx0fSk7XG5cdFx0Y2FzZSBTRVRfQUNUSVZFX0NPTFVNTlM6XG5cdFx0XHRyZXR1cm4gYXNzaWduKHt9LCBzdGF0ZSwge1xuXHRcdFx0XHRjb2x1bW5zOiBhY3Rpb24uY29sdW1ucyxcblx0XHRcdH0pO1xuXHRcdGNhc2UgQUREX0ZJTFRFUjpcblx0XHRcdHJldHVybiBhc3NpZ24oe30sIHN0YXRlLCB7XG5cdFx0XHRcdC8vIE92ZXJyaWRlIGV4aXN0aW5nIGZpbHRlciB3aXRoIGZpZWxkIHBhdGgsXG5cdFx0XHRcdC8vIG90aGVyd2lzZSBhZGQgdG8gZmlsdGVycyBhcnJheVxuXHRcdFx0XHRmaWx0ZXJzOiBfLnVuaW9uV2l0aChbYWN0aW9uLmZpbHRlcl0sIHN0YXRlLmZpbHRlcnMsIChzdGF0ZUZpbHRlciwgYWN0aW9uRmlsdGVyKSA9PiB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlRmlsdGVyLmZpZWxkLnBhdGggPT09IGFjdGlvbkZpbHRlci5maWVsZC5wYXRoO1xuXHRcdFx0XHR9KSxcblx0XHRcdH0pO1xuXHRcdGNhc2UgU0VUX0ZJTFRFUlM6XG5cdFx0XHRyZXR1cm4gYXNzaWduKHt9LCBzdGF0ZSwge1xuXHRcdFx0XHRmaWx0ZXJzOiBhY3Rpb24uZmlsdGVycyxcblx0XHRcdH0pO1xuXHRcdGNhc2UgQ0xFQVJfRklMVEVSOlxuXHRcdFx0bGV0IG5ld0ZpbHRlcnMgPSBfLmZpbHRlcihzdGF0ZS5maWx0ZXJzLCAoZmlsdGVyKSA9PiB7XG5cdFx0XHRcdHJldHVybiBmaWx0ZXIuZmllbGQucGF0aCAhPT0gYWN0aW9uLnBhdGg7XG5cdFx0XHR9KTtcblx0XHRcdHJldHVybiBhc3NpZ24oe30sIHN0YXRlLCB7XG5cdFx0XHRcdGZpbHRlcnM6IG5ld0ZpbHRlcnMsXG5cdFx0XHR9KTtcblx0XHRjYXNlIENMRUFSX0FMTF9GSUxURVJTOlxuXHRcdFx0cmV0dXJuIGFzc2lnbih7fSwgc3RhdGUsIHtcblx0XHRcdFx0ZmlsdGVyczogW10sXG5cdFx0XHR9KTtcblx0XHRjYXNlIFFVRVJZX0hBU19DSEFOR0VEOlxuXHRcdFx0Y29uc3Qge1xuXHRcdFx0XHRzZWFyY2gsXG5cdFx0XHRcdHNvcnQsXG5cdFx0XHRcdGZpbHRlcnMsXG5cdFx0XHRcdGNvbHVtbnMsXG5cdFx0XHR9ID0gYWN0aW9uLnBhcnNlZFF1ZXJ5O1xuXG5cdFx0XHRyZXR1cm4gYXNzaWduKHt9LCBzdGF0ZSwge1xuXHRcdFx0XHRzZWFyY2gsXG5cdFx0XHRcdHNvcnQ6IHNvcnQgfHwgaW5pdGlhbFN0YXRlLnNvcnQsXG5cdFx0XHRcdGZpbHRlcnM6IGZpbHRlcnMgfHwgaW5pdGlhbFN0YXRlLmZpbHRlcnMsXG5cdFx0XHRcdGNvbHVtbnM6IGNvbHVtbnMgfHwgaW5pdGlhbFN0YXRlLmNvbHVtbnMsXG5cdFx0XHR9KTtcblx0XHRjYXNlIFJFUExBQ0VfQ0FDSEVEX1FVRVJZOlxuXHRcdFx0cmV0dXJuIGFzc2lnbih7fSwgc3RhdGUsIHtcblx0XHRcdFx0Y2FjaGVkUXVlcnk6IGFjdGlvbi5jYWNoZWRRdWVyeSxcblx0XHRcdH0pO1xuXHRcdGNhc2UgQ0xFQVJfQ0FDSEVEX1FVRVJZOlxuXHRcdFx0cmV0dXJuIGFzc2lnbih7fSwgc3RhdGUsIHtcblx0XHRcdFx0Y2FjaGVkUXVlcnk6IHt9LFxuXHRcdFx0fSk7XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHJldHVybiBzdGF0ZTtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCBhY3RpdmU7XG4iLCJpbXBvcnQgYXNzaWduIGZyb20gJ29iamVjdC1hc3NpZ24nO1xuaW1wb3J0IExpc3QgZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvTGlzdCc7XG5pbXBvcnQge1xuXHRTRUxFQ1RfTElTVCxcblx0SVRFTVNfTE9BREVELFxuXHRMT0FEX0lURU1TLFxuXHRJVEVNX0xPQURJTkdfRVJST1IsXG5cdFNFVF9DVVJSRU5UX1BBR0UsXG5cdFFVRVJZX0hBU19DSEFOR0VELFxuXHRTRVRfUk9XX0FMRVJULFxuXHRSRVNFVF9EUkFHX1BBR0UsXG5cdFJFU0VUX0RSQUdfSVRFTVMsXG5cdFNFVF9EUkFHX0lURU0sXG5cdFNFVF9EUkFHX0lOREVYLFxuXHREUkFHX01PVkVfSVRFTSxcbn0gZnJvbSAnLi4vY29uc3RhbnRzJztcblxuaW1wb3J0IHtcblx0REVMRVRFX0lURU0sXG59IGZyb20gJy4uLy4uL0l0ZW0vY29uc3RhbnRzJztcblxuY29uc3QgaW5pdGlhbFN0YXRlID0ge1xuXHRsb2FkaW5nUmVmOiBudWxsLFxuXHRsb2FkQ291bnRlcjogMCxcblx0Y3VycmVudExpc3Q6IG51bGwsXG5cdGxvYWRpbmc6IGZhbHNlLFxuXHRyZWFkeTogZmFsc2UsXG5cdGVycm9yOiBudWxsLFxuXHRkYXRhOiB7fSxcblx0aXRlbXM6IHtcblx0XHRyZXN1bHRzOiBbXSxcblx0XHRjb3VudDogbnVsbCxcblx0fSxcblx0cGFnZToge1xuXHRcdHNpemU6IG51bGwsXG5cdFx0aW5kZXg6IHVuZGVmaW5lZCxcblx0fSxcblx0cm93QWxlcnQ6IHtcblx0XHRzdWNjZXNzOiBmYWxzZSxcblx0XHRmYWlsOiBmYWxzZSxcblx0fSxcblx0ZHJhZzoge1xuXHRcdHBhZ2U6IDEsXG5cdFx0aXRlbTogZmFsc2UsXG5cdFx0Y2xvbmVkSXRlbXM6IGZhbHNlLFxuXHRcdGluZGV4OiBmYWxzZSxcblx0fSxcbn07XG5cbi8vIFJla2V5IHRoZSBsaXN0cyBpbiB0aGUgc3RhdGUgd2l0aCB0aGVpciBwYXRocyBmb3IgZWFzaWVyIG1hdGNoaW5nIHdpdGggdGhlXG4vLyBVUkwgcGFyYW1ldGVyc1xuY29uc3QgaW5pdGlhbExpc3RzID0gS2V5c3RvbmUubGlzdHM7XG5mb3IgKGNvbnN0IG5hbWUgaW4gaW5pdGlhbExpc3RzKSB7XG5cdGlmICh7fS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGluaXRpYWxMaXN0cywgbmFtZSkpIHtcblx0XHRjb25zdCBjdXJyZW50TGlzdCA9IGluaXRpYWxMaXN0c1tuYW1lXTtcblx0XHRpbml0aWFsU3RhdGUuZGF0YVtjdXJyZW50TGlzdC5wYXRoXSA9IG5ldyBMaXN0KGN1cnJlbnRMaXN0KTtcblx0XHRpbml0aWFsU3RhdGUuZGF0YVtjdXJyZW50TGlzdC5wYXRoXS5pdGVtcyA9IHtcblx0XHRcdHJlc3VsdHM6IFtdLFxuXHRcdFx0Y291bnQ6IG51bGwsXG5cdFx0fTtcblx0fVxufVxuXG4vKipcbiAqIE1hbmFnZSBhbGwgbGlzdHNcbiAqL1xuZnVuY3Rpb24gbGlzdHMgKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb24pIHtcblx0c3dpdGNoIChhY3Rpb24udHlwZSkge1xuXHRcdGNhc2UgU0VMRUNUX0xJU1Q6XG5cdFx0XHRjb25zdCBsaXN0ID0gc3RhdGUuZGF0YVthY3Rpb24uaWRdO1xuXHRcdFx0bGlzdC5pZCA9IGFjdGlvbi5pZDtcblx0XHRcdGxldCBpdGVtcyA9IHtcblx0XHRcdFx0cmVzdWx0czogW10sXG5cdFx0XHRcdGNvdW50OiBudWxsLFxuXHRcdFx0fTtcblx0XHRcdC8vIElmIHdlIGhhdmUgY2FjaGVkIGl0ZW1zLCBpbnN0ZWFkIG9mIHJlc2V0dGluZyBzdGF0ZS5pdGVtcyBwdXQgdGhlXG5cdFx0XHQvLyBjYWNoZWQgaXRlbXMgaW4gdGhlIHN0YXRlXG5cdFx0XHRpZiAobGlzdC5pdGVtcy5jb3VudCAhPT0gbnVsbCkge1xuXHRcdFx0XHRpdGVtcyA9IGxpc3QuaXRlbXM7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gYXNzaWduKHt9LCBzdGF0ZSwge1xuXHRcdFx0XHRjdXJyZW50TGlzdDogbGlzdCxcblx0XHRcdFx0cmVhZHk6IGZhbHNlLFxuXHRcdFx0XHRpdGVtczogaXRlbXMsXG5cdFx0XHRcdHBhZ2U6IHtcblx0XHRcdFx0XHQuLi5zdGF0ZS5wYWdlLFxuXHRcdFx0XHRcdGluZGV4OiAxLFxuXHRcdFx0XHRcdHNpemU6IGxpc3QucGVyUGFnZSxcblx0XHRcdFx0fSxcblx0XHRcdH0pO1xuXHRcdGNhc2UgTE9BRF9JVEVNUzpcblx0XHRcdGxldCBsb2FkaW5nID0gdHJ1ZTtcblx0XHRcdGxldCByZWFkeSA9IHN0YXRlLnJlYWR5O1xuXHRcdFx0Ly8gSWYgd2UgaGF2ZSBjYWNoZWQgaXRlbXMgcmVhZHksIGRvbid0IHNob3cgYSBsb2FkaW5nIGluZGljYXRvclxuXHRcdFx0Ly8gd2hpbGUgd2UgZmV0Y2ggdGhlIG5ldyBpdGVtcyBpbiB0aGUgYmFja2dyb3VuZFxuXHRcdFx0aWYgKHN0YXRlLml0ZW1zLmNvdW50ICE9PSBudWxsICYmIGxvYWRpbmcgPT09IGZhbHNlKSB7XG5cdFx0XHRcdGxvYWRpbmcgPSBmYWxzZTtcblx0XHRcdFx0cmVhZHkgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGFzc2lnbih7fSwgc3RhdGUsIHtcblx0XHRcdFx0bG9hZGluZyxcblx0XHRcdFx0cmVhZHksXG5cdFx0XHRcdGxvYWRDb3VudGVyOiBhY3Rpb24ubG9hZENvdW50ZXIsXG5cdFx0XHR9KTtcblx0XHRjYXNlIElURU1TX0xPQURFRDpcblx0XHRcdC8vIENhY2hlIHRoZSBpdGVtcyBpbiBzdGF0ZS5kYXRhIHNvIHdlIGNhbiBzaG93IHRoZSBhbHJlYWR5IGV4aXN0aW5nXG5cdFx0XHQvLyBpdGVtcyBvbiB0aGUgbmV4dCByb3VuZCB0cmlwIHdoaWxlIGZldGNoaW5nIHRoZSBuZXcgaXRlbXMgaW4gdGhlXG5cdFx0XHQvLyBiYWNrZ3JvdW5kXG5cdFx0XHRjb25zdCBjYWNoZWRMaXN0ID0gc3RhdGUuZGF0YVtzdGF0ZS5jdXJyZW50TGlzdC5pZF07XG5cdFx0XHRjYWNoZWRMaXN0Lml0ZW1zID0gYWN0aW9uLml0ZW1zO1xuXHRcdFx0cmV0dXJuIGFzc2lnbih7fSwgc3RhdGUsIHtcblx0XHRcdFx0bG9hZGluZzogZmFsc2UsXG5cdFx0XHRcdHJlYWR5OiB0cnVlLFxuXHRcdFx0XHRlcnJvcjogbnVsbCxcblx0XHRcdFx0aXRlbXM6IGFjdGlvbi5pdGVtcyxcblx0XHRcdFx0ZGF0YToge1xuXHRcdFx0XHRcdC4uLnN0YXRlLmRhdGEsXG5cdFx0XHRcdFx0W3N0YXRlLmN1cnJlbnRMaXN0LmlkXTogY2FjaGVkTGlzdCxcblx0XHRcdFx0fSxcblx0XHRcdFx0bG9hZENvdW50ZXI6IDAsXG5cdFx0XHR9KTtcblx0XHRjYXNlIElURU1fTE9BRElOR19FUlJPUjpcblx0XHRcdHJldHVybiBhc3NpZ24oe30sIHN0YXRlLCB7XG5cdFx0XHRcdGxvYWRpbmc6IHRydWUsXG5cdFx0XHRcdHJlYWR5OiB0cnVlLFxuXHRcdFx0XHRlcnJvcjogYWN0aW9uLmVycixcblx0XHRcdFx0bG9hZENvdW50ZXI6IDAsXG5cdFx0XHR9KTtcblx0XHRjYXNlIERFTEVURV9JVEVNOlxuXHRcdFx0Y29uc3QgbmV3SXRlbXMgPSB7XG5cdFx0XHRcdHJlc3VsdHM6IHN0YXRlLml0ZW1zLnJlc3VsdHMuZmlsdGVyKChlbCkgPT4gKGVsLmlkICE9PSBhY3Rpb24uaWQpKSxcblx0XHRcdFx0Y291bnQ6IHN0YXRlLml0ZW1zLmNvdW50IC0gMSxcblx0XHRcdH07XG5cdFx0XHRjb25zdCBuZXdDYWNoZWRMaXN0ID0gc3RhdGUuZGF0YVtzdGF0ZS5jdXJyZW50TGlzdC5pZF07XG5cdFx0XHRuZXdDYWNoZWRMaXN0Lml0ZW1zID0gbmV3SXRlbXM7XG5cdFx0XHRyZXR1cm4gYXNzaWduKHt9LCBzdGF0ZSwge1xuXHRcdFx0XHRpdGVtczogbmV3SXRlbXMsXG5cdFx0XHRcdGRhdGE6IHtcblx0XHRcdFx0XHQuLi5zdGF0ZS5kYXRhLFxuXHRcdFx0XHRcdFtzdGF0ZS5jdXJyZW50TGlzdC5pZF06IG5ld0NhY2hlZExpc3QsXG5cdFx0XHRcdH0sXG5cdFx0XHR9KTtcblx0XHRjYXNlIFNFVF9DVVJSRU5UX1BBR0U6XG5cdFx0XHRjb25zb2xlLmxvZyhhY3Rpb24uaW5kZXgpO1xuXHRcdFx0cmV0dXJuIGFzc2lnbih7fSwgc3RhdGUsIHtcblx0XHRcdFx0bG9hZGluZzogdHJ1ZSxcblx0XHRcdFx0cGFnZToge1xuXHRcdFx0XHRcdC4uLnN0YXRlLnBhZ2UsXG5cdFx0XHRcdFx0aW5kZXg6IGFjdGlvbi5pbmRleCxcblx0XHRcdFx0fSxcblx0XHRcdH0pO1xuXHRcdGNhc2UgU0VUX1JPV19BTEVSVDpcblx0XHRcdGlmIChhY3Rpb24uZGF0YS5yZXNldCA9PT0gdHJ1ZSkge1xuXHRcdFx0XHRyZXR1cm4gYXNzaWduKHt9LCBzdGF0ZSwge1xuXHRcdFx0XHRcdHJvd0FsZXJ0OiB7XG5cdFx0XHRcdFx0XHRzdWNjZXNzOiBmYWxzZSxcblx0XHRcdFx0XHRcdGZhaWw6IGZhbHNlLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGFzc2lnbih7fSwgc3RhdGUsIHtcblx0XHRcdFx0cm93QWxlcnQ6IHtcblx0XHRcdFx0XHQuLi5zdGF0ZS5yb3dBbGVydCxcblx0XHRcdFx0XHQuLi5hY3Rpb24uZGF0YSxcblx0XHRcdFx0fSxcblx0XHRcdH0pO1xuXHRcdGNhc2UgUkVTRVRfRFJBR19QQUdFOlxuXHRcdFx0cmV0dXJuIGFzc2lnbih7fSwgc3RhdGUsIHtcblx0XHRcdFx0ZHJhZzoge1xuXHRcdFx0XHRcdC4uLnN0YXRlLmRyYWcsXG5cdFx0XHRcdFx0cGFnZTogc3RhdGUucGFnZS5pbmRleCxcblx0XHRcdFx0fSxcblx0XHRcdH0pO1xuXHRcdGNhc2UgUkVTRVRfRFJBR19JVEVNUzpcblx0XHRcdHJldHVybiBhc3NpZ24oe30sIHN0YXRlLCB7XG5cdFx0XHRcdGRyYWc6IHtcblx0XHRcdFx0XHQuLi5zdGF0ZS5kcmFnLFxuXHRcdFx0XHRcdGNsb25lZEl0ZW1zOiBzdGF0ZS5pdGVtcyxcblx0XHRcdFx0fSxcblx0XHRcdH0pO1xuXHRcdGNhc2UgU0VUX0RSQUdfSVRFTTpcblx0XHRcdHJldHVybiBhc3NpZ24oe30sIHN0YXRlLCB7XG5cdFx0XHRcdGRyYWc6IHtcblx0XHRcdFx0XHQuLi5zdGF0ZS5kcmFnLFxuXHRcdFx0XHRcdGl0ZW06IGFjdGlvbi5pdGVtLFxuXHRcdFx0XHR9LFxuXHRcdFx0fSk7XG5cdFx0Y2FzZSBTRVRfRFJBR19JTkRFWDpcblx0XHRcdHJldHVybiBhc3NpZ24oe30sIHN0YXRlLCB7XG5cdFx0XHRcdGRyYWc6IHtcblx0XHRcdFx0XHQuLi5zdGF0ZS5kcmFnLFxuXHRcdFx0XHRcdGluZGV4OiBhY3Rpb24uaW5kZXgsXG5cdFx0XHRcdH0sXG5cdFx0XHR9KTtcblx0XHRjYXNlIFFVRVJZX0hBU19DSEFOR0VEOlxuXHRcdFx0Y29uc3QgaW5kZXggPSBwYXJzZUludChhY3Rpb24ucGFyc2VkUXVlcnkuY3VycmVudFBhZ2UpIHx8IDE7XG5cdFx0XHRyZXR1cm4gYXNzaWduKHt9LCBzdGF0ZSwge1xuXHRcdFx0XHRsb2FkaW5nOiB0cnVlLFxuXHRcdFx0XHRwYWdlOiB7XG5cdFx0XHRcdFx0Li4uc3RhdGUucGFnZSxcblx0XHRcdFx0XHRpbmRleCxcblx0XHRcdFx0fSxcblx0XHRcdH0pO1xuXHRcdGNhc2UgRFJBR19NT1ZFX0lURU06XG5cdFx0XHQvLyBUT0RPOiBvcHRpb24gdG8gdXNlIG1hbmFnZU1vZGUgZm9yIHNvcnRPcmRlclxuXHRcdFx0Y29uc3QgY3VycmVudEl0ZW1zID0gc3RhdGUuaXRlbXMucmVzdWx0cztcblx0XHRcdGNvbnN0IGl0ZW0gPSBjdXJyZW50SXRlbXNbYWN0aW9uLnByZXZJbmRleF07XG5cdFx0XHQvLyBSZW1vdmUgaXRlbSBhdCBwcmV2SW5kZXggZnJvbSBhcnJheSBhbmQgc2F2ZSB0aGF0IGFycmF5IGluXG5cdFx0XHQvLyBpdGVtc1dpdGhvdXRJdGVtXG5cdFx0XHRsZXQgaXRlbXNXaXRob3V0SXRlbSA9IGN1cnJlbnRJdGVtc1xuXHRcdFx0XHQuc2xpY2UoMCwgYWN0aW9uLnByZXZJbmRleClcblx0XHRcdFx0LmNvbmNhdChcblx0XHRcdFx0XHRjdXJyZW50SXRlbXMuc2xpY2UoXG5cdFx0XHRcdFx0XHRhY3Rpb24ucHJldkluZGV4ICsgMSxcblx0XHRcdFx0XHRcdGN1cnJlbnRJdGVtcy5sZW5ndGhcblx0XHRcdFx0XHQpXG5cdFx0XHRcdCk7XG5cdFx0XHQvLyBBZGQgaXRlbSBiYWNrIGluIGF0IG5ldyBpbmRleFxuXHRcdFx0aXRlbXNXaXRob3V0SXRlbS5zcGxpY2UoYWN0aW9uLm5ld0luZGV4LCAwLCBpdGVtKTtcblx0XHRcdHJldHVybiBhc3NpZ24oe30sIHN0YXRlLCB7XG5cdFx0XHRcdGl0ZW1zOiB7XG5cdFx0XHRcdFx0Li4uc3RhdGUuaXRlbXMsXG5cdFx0XHRcdFx0cmVzdWx0czogaXRlbXNXaXRob3V0SXRlbSxcblx0XHRcdFx0fSxcblx0XHRcdH0pO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gc3RhdGU7XG5cdH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgbGlzdHM7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQWxlcnQgfSBmcm9tICcuLi9lbGVtZW50YWwnO1xuXG5pbXBvcnQgeyB1cGNhc2UgfSBmcm9tICcuLi8uLi91dGlscy9zdHJpbmcnO1xuXG4vKipcbiAqIFRoaXMgcmVuZGVycyBhbGVydHMgZm9yIEFQSSBzdWNjZXNzIGFuZCBlcnJvciByZXNwb25zZXMuXG4gKiAgIEVycm9yIGZvcm1hdDoge1xuICogICAgIGVycm9yOiAndmFsaWRhdGlvbiBlcnJvcnMnIC8vIFRoZSB1bmlxdWUgZXJyb3IgdHlwZSBpZGVudGlmaWVyXG4gKiAgICAgZGV0YWlsOiB7IC4uLiB9IC8vIE9wdGlvbmFsIGRldGFpbHMgc3BlY2lmaWMgdG8gdGhhdCBlcnJvciB0eXBlXG4gKiAgIH1cbiAqICAgU3VjY2VzcyBmb3JtYXQ6IHtcbiAqICAgICBzdWNjZXNzOiAnaXRlbSB1cGRhdGVkJywgLy8gVGhlIHVuaXF1ZSBzdWNjZXNzIHR5cGUgaWRlbnRpZmllclxuICogICAgIGRldGFpbHM6IHsgLi4uIH0gLy8gT3B0aW9uYWwgZGV0YWlscyBzcGVjaWZpYyB0byB0aGF0IHN1Y2Nlc3MgdHlwZVxuICogICB9XG4gKiAgIEV2ZW50dWFsbHkgc3VjY2VzcyBhbmQgZXJyb3IgcmVzcG9uc2VzIHNob3VsZCBiZSBoYW5kbGVkIGluZGl2aWR1YWxseVxuICogICBiYXNlZCBvbiB0aGVpciB0eXBlLiBGb3IgZXhhbXBsZTogdmFsaWRhdGlvbiBlcnJvcnMgc2hvdWxkIGJlIGRpc3BsYXllZCBuZXh0XG4gKiAgIHRvIGVhY2ggaW52YWxpZCBmaWVsZCBhbmQgc2lnbmluIGVycm9ycyBzaG91bGQgcHJvbXQgdGhlIHVzZXIgdG8gc2lnbiBpbi5cbiAqL1xudmFyIEFsZXJ0TWVzc2FnZXMgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cdGRpc3BsYXlOYW1lOiAnQWxlcnRNZXNzYWdlcycsXG5cdHByb3BUeXBlczoge1xuXHRcdGFsZXJ0czogUmVhY3QuUHJvcFR5cGVzLnNoYXBlKHtcblx0XHRcdGVycm9yOiBSZWFjdC5Qcm9wVHlwZXMuT2JqZWN0LFxuXHRcdFx0c3VjY2VzczogUmVhY3QuUHJvcFR5cGVzLk9iamVjdCxcblx0XHR9KSxcblx0fSxcblx0Z2V0RGVmYXVsdFByb3BzICgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0YWxlcnRzOiB7fSxcblx0XHR9O1xuXHR9LFxuXHRyZW5kZXJWYWxpZGF0aW9uRXJyb3JzICgpIHtcblx0XHRsZXQgZXJyb3JzID0gdGhpcy5wcm9wcy5hbGVydHMuZXJyb3IuZGV0YWlsO1xuXHRcdGlmIChlcnJvcnMubmFtZSA9PT0gJ1ZhbGlkYXRpb25FcnJvcicpIHtcblx0XHRcdGVycm9ycyA9IGVycm9ycy5lcnJvcnM7XG5cdFx0fVxuXHRcdGxldCBlcnJvckNvdW50ID0gT2JqZWN0LmtleXMoZXJyb3JzKS5sZW5ndGg7XG5cdFx0bGV0IGFsZXJ0Q29udGVudDtcblx0XHRsZXQgbWVzc2FnZXMgPSBPYmplY3Qua2V5cyhlcnJvcnMpLm1hcCgocGF0aCkgPT4ge1xuXHRcdFx0aWYgKGVycm9yQ291bnQgPiAxKSB7XG5cdFx0XHRcdHJldHVybiAoXG5cdFx0XHRcdFx0PGxpIGtleT17cGF0aH0+XG5cdFx0XHRcdFx0XHR7dXBjYXNlKGVycm9yc1twYXRoXS5lcnJvciB8fCBlcnJvcnNbcGF0aF0ubWVzc2FnZSl9XG5cdFx0XHRcdFx0PC9saT5cblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiAoXG5cdFx0XHRcdFx0PGRpdiBrZXk9e3BhdGh9PlxuXHRcdFx0XHRcdFx0e3VwY2FzZShlcnJvcnNbcGF0aF0uZXJyb3IgfHwgZXJyb3JzW3BhdGhdLm1lc3NhZ2UpfVxuXHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0aWYgKGVycm9yQ291bnQgPiAxKSB7XG5cdFx0XHRhbGVydENvbnRlbnQgPSAoXG5cdFx0XHRcdDxkaXY+XG5cdFx0XHRcdFx0PGg0PlRoZXJlIHdlcmUge2Vycm9yQ291bnR9IGVycm9ycyBjcmVhdGluZyB0aGUgbmV3IGl0ZW06PC9oND5cblx0XHRcdFx0XHQ8dWw+e21lc3NhZ2VzfTwvdWw+XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0YWxlcnRDb250ZW50ID0gbWVzc2FnZXM7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIDxBbGVydCBjb2xvcj1cImRhbmdlclwiPnthbGVydENvbnRlbnR9PC9BbGVydD47XG5cdH0sXG5cdHJlbmRlciAoKSB7XG5cdFx0bGV0IHsgZXJyb3IsIHN1Y2Nlc3MgfSA9IHRoaXMucHJvcHMuYWxlcnRzO1xuXG5cdFx0aWYgKGVycm9yKSB7XG5cdFx0XHQvLyBSZW5kZXIgZXJyb3IgYWxlcnRzXG5cdFx0XHRzd2l0Y2ggKGVycm9yLmVycm9yKSB7XG5cdFx0XHRcdGNhc2UgJ3ZhbGlkYXRpb24gZXJyb3JzJzpcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5yZW5kZXJWYWxpZGF0aW9uRXJyb3JzKCk7XG5cdFx0XHRcdGNhc2UgJ2Vycm9yJzpcblx0XHRcdFx0XHRpZiAoZXJyb3IuZGV0YWlsLm5hbWUgPT09ICdWYWxpZGF0aW9uRXJyb3InKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5yZW5kZXJWYWxpZGF0aW9uRXJyb3JzKCk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiA8QWxlcnQgY29sb3I9XCJkYW5nZXJcIj57dXBjYXNlKGVycm9yLmVycm9yKX08L0FsZXJ0Pjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0cmV0dXJuIDxBbGVydCBjb2xvcj1cImRhbmdlclwiPnt1cGNhc2UoZXJyb3IuZXJyb3IpfTwvQWxlcnQ+O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChzdWNjZXNzKSB7XG5cdFx0XHQvLyBSZW5kZXIgc3VjY2VzcyBhbGVydHNcblx0XHRcdHJldHVybiA8QWxlcnQgY29sb3I9XCJzdWNjZXNzXCI+e3VwY2FzZShzdWNjZXNzLnN1Y2Nlc3MpfTwvQWxlcnQ+O1xuXHRcdH1cblxuXHRcdHJldHVybiBudWxsOyAvLyBObyBhbGVydHMsIHJlbmRlciBub3RoaW5nXG5cdH0sXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBbGVydE1lc3NhZ2VzO1xuIiwiLyoqXG4gKiBSZW5kZXJzIGEgY29uZmlybWF0aW9uIGRpYWxvZyBtb2RhbFxuICovXG5cbmltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBCdXR0b24sIE1vZGFsIH0gZnJvbSAnLi4vZWxlbWVudGFsJztcblxuZnVuY3Rpb24gQ29uZmlybWF0aW9uRGlhbG9nICh7XG5cdGNhbmNlbExhYmVsLFxuXHRjaGlsZHJlbixcblx0Y29uZmlybWF0aW9uTGFiZWwsXG5cdGNvbmZpcm1hdGlvblR5cGUsXG5cdGh0bWwsXG5cdGlzT3Blbixcblx0b25DYW5jZWwsXG5cdG9uQ29uZmlybWF0aW9uLFxuXHQuLi5wcm9wc1xufSkge1xuXHQvLyBQcm9wZXJ0eSBWaW9sYXRpb25cblx0aWYgKGNoaWxkcmVuICYmIGh0bWwpIHtcblx0XHRjb25zb2xlLmVycm9yKCdXYXJuaW5nOiBGb3JtTm90ZSBjYW5ub3QgcmVuZGVyIGBjaGlsZHJlbmAgYW5kIGBodG1sYC4gWW91IG11c3QgcHJvdmlkZSBvbmUgb3IgdGhlIG90aGVyLicpO1xuXHR9XG5cblx0cmV0dXJuIChcblx0XHQ8TW9kYWwuRGlhbG9nXG5cdFx0XHRiYWNrZHJvcENsb3Nlc01vZGFsXG5cdFx0XHRpc09wZW49e2lzT3Blbn1cblx0XHRcdG9uQ2xvc2U9e29uQ2FuY2VsfVxuXHRcdFx0d2lkdGg9ezQwMH1cblx0XHQ+XG5cdFx0XHR7aHRtbCA/IChcblx0XHRcdFx0PE1vZGFsLkJvZHkgey4uLnByb3BzfSBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IGh0bWwgfX0gLz5cblx0XHRcdCkgOiAoXG5cdFx0XHRcdDxNb2RhbC5Cb2R5IHsuLi5wcm9wc30+e2NoaWxkcmVufTwvTW9kYWwuQm9keT5cblx0XHRcdCl9XG5cdFx0XHQ8TW9kYWwuRm9vdGVyPlxuXHRcdFx0XHQ8QnV0dG9uIGF1dG9Gb2N1cyBzaXplPVwic21hbGxcIiBkYXRhLWJ1dHRvbi10eXBlPVwiY29uZmlybVwiIGNvbG9yPXtjb25maXJtYXRpb25UeXBlfSBvbkNsaWNrPXtvbkNvbmZpcm1hdGlvbn0+XG5cdFx0XHRcdFx0e2NvbmZpcm1hdGlvbkxhYmVsfVxuXHRcdFx0XHQ8L0J1dHRvbj5cblx0XHRcdFx0PEJ1dHRvbiBzaXplPVwic21hbGxcIiBkYXRhLWJ1dHRvbi10eXBlPVwiY2FuY2VsXCIgdmFyaWFudD1cImxpbmtcIiBjb2xvcj1cImNhbmNlbFwiIG9uQ2xpY2s9e29uQ2FuY2VsfT5cblx0XHRcdFx0XHR7Y2FuY2VsTGFiZWx9XG5cdFx0XHRcdDwvQnV0dG9uPlxuXHRcdFx0PC9Nb2RhbC5Gb290ZXI+XG5cdFx0PC9Nb2RhbC5EaWFsb2c+XG5cdCk7XG59O1xuQ29uZmlybWF0aW9uRGlhbG9nLnByb3BUeXBlcyA9IHtcblx0Ym9keTogUHJvcFR5cGVzLnN0cmluZyxcblx0Y2FuY2VsTGFiZWw6IFByb3BUeXBlcy5zdHJpbmcsXG5cdGNvbmZpcm1hdGlvbkxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxuXHRjb25maXJtYXRpb25UeXBlOiBQcm9wVHlwZXMub25lT2YoWydkYW5nZXInLCAncHJpbWFyeScsICdzdWNjZXNzJywgJ3dhcm5pbmcnXSksXG5cdG9uQ2FuY2VsOiBQcm9wVHlwZXMuZnVuYyxcblx0b25Db25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxufTtcbkNvbmZpcm1hdGlvbkRpYWxvZy5kZWZhdWx0UHJvcHMgPSB7XG5cdGNhbmNlbExhYmVsOiAnQ2FuY2VsJyxcblx0Y29uZmlybWF0aW9uTGFiZWw6ICdPa2F5Jyxcblx0Y29uZmlybWF0aW9uVHlwZTogJ2RhbmdlcicsXG5cdGlzT3BlbjogZmFsc2UsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBDb25maXJtYXRpb25EaWFsb2c7XG4iLCIvKipcbiAqIFRoZSBmb3JtIHRoYXQncyB2aXNpYmxlIHdoZW4gXCJDcmVhdGUgPEl0ZW1OYW1lPlwiIGlzIGNsaWNrZWQgb24gZWl0aGVyIHRoZVxuICogTGlzdCBzY3JlZW4gb3IgdGhlIEl0ZW0gc2NyZWVuXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBhc3NpZ24gZnJvbSAnb2JqZWN0LWFzc2lnbic7XG5pbXBvcnQgdmtleSBmcm9tICd2a2V5JztcbmltcG9ydCBBbGVydE1lc3NhZ2VzIGZyb20gJy4vQWxlcnRNZXNzYWdlcyc7XG5pbXBvcnQgeyBGaWVsZHMgfSBmcm9tICdGaWVsZFR5cGVzJztcbmltcG9ydCBJbnZhbGlkRmllbGRUeXBlIGZyb20gJy4vSW52YWxpZEZpZWxkVHlwZSc7XG5pbXBvcnQgeyBCdXR0b24sIEZvcm0sIE1vZGFsIH0gZnJvbSAnLi4vZWxlbWVudGFsJztcblxuY29uc3QgQ3JlYXRlRm9ybSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblx0ZGlzcGxheU5hbWU6ICdDcmVhdGVGb3JtJyxcblx0cHJvcFR5cGVzOiB7XG5cdFx0ZXJyOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuXHRcdGlzT3BlbjogUmVhY3QuUHJvcFR5cGVzLmJvb2wsXG5cdFx0bGlzdDogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcblx0XHRvbkNhbmNlbDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG5cdFx0b25DcmVhdGU6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuXHR9LFxuXHRnZXREZWZhdWx0UHJvcHMgKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRlcnI6IG51bGwsXG5cdFx0XHRpc09wZW46IGZhbHNlLFxuXHRcdH07XG5cdH0sXG5cdGdldEluaXRpYWxTdGF0ZSAoKSB7XG5cdFx0Ly8gU2V0IHRoZSBmaWVsZCB2YWx1ZXMgdG8gdGhlaXIgZGVmYXVsdCB2YWx1ZXMgd2hlbiBmaXJzdCByZW5kZXJpbmcgdGhlXG5cdFx0Ly8gZm9ybS4gKElmIHRoZXkgaGF2ZSBhIGRlZmF1bHQgdmFsdWUsIHRoYXQgaXMpXG5cdFx0dmFyIHZhbHVlcyA9IHt9O1xuXHRcdE9iamVjdC5rZXlzKHRoaXMucHJvcHMubGlzdC5maWVsZHMpLmZvckVhY2goa2V5ID0+IHtcblx0XHRcdHZhciBmaWVsZCA9IHRoaXMucHJvcHMubGlzdC5maWVsZHNba2V5XTtcblx0XHRcdHZhciBGaWVsZENvbXBvbmVudCA9IEZpZWxkc1tmaWVsZC50eXBlXTtcblx0XHRcdHZhbHVlc1tmaWVsZC5wYXRoXSA9IEZpZWxkQ29tcG9uZW50LmdldERlZmF1bHRWYWx1ZShmaWVsZCk7XG5cdFx0fSk7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHZhbHVlczogdmFsdWVzLFxuXHRcdFx0YWxlcnRzOiB7fSxcblx0XHR9O1xuXHR9LFxuXHRjb21wb25lbnREaWRNb3VudCAoKSB7XG5cdFx0ZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIHRoaXMuaGFuZGxlS2V5UHJlc3MsIGZhbHNlKTtcblx0fSxcblx0Y29tcG9uZW50V2lsbFVubW91bnQgKCkge1xuXHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLmhhbmRsZUtleVByZXNzLCBmYWxzZSk7XG5cdH0sXG5cdGhhbmRsZUtleVByZXNzIChldnQpIHtcblx0XHRpZiAodmtleVtldnQua2V5Q29kZV0gPT09ICc8ZXNjYXBlPicpIHtcblx0XHRcdHRoaXMucHJvcHMub25DYW5jZWwoKTtcblx0XHR9XG5cdH0sXG5cdC8vIEhhbmRsZSBpbnB1dCBjaGFuZ2UgZXZlbnRzXG5cdGhhbmRsZUNoYW5nZSAoZXZlbnQpIHtcblx0XHR2YXIgdmFsdWVzID0gYXNzaWduKHt9LCB0aGlzLnN0YXRlLnZhbHVlcyk7XG5cdFx0dmFsdWVzW2V2ZW50LnBhdGhdID0gZXZlbnQudmFsdWU7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHR2YWx1ZXM6IHZhbHVlcyxcblx0XHR9KTtcblx0fSxcblx0Ly8gU2V0IHRoZSBwcm9wcyBvZiBhIGZpZWxkXG5cdGdldEZpZWxkUHJvcHMgKGZpZWxkKSB7XG5cdFx0dmFyIHByb3BzID0gYXNzaWduKHt9LCBmaWVsZCk7XG5cdFx0cHJvcHMudmFsdWUgPSB0aGlzLnN0YXRlLnZhbHVlc1tmaWVsZC5wYXRoXTtcblx0XHRwcm9wcy52YWx1ZXMgPSB0aGlzLnN0YXRlLnZhbHVlcztcblx0XHRwcm9wcy5vbkNoYW5nZSA9IHRoaXMuaGFuZGxlQ2hhbmdlO1xuXHRcdHByb3BzLm1vZGUgPSAnY3JlYXRlJztcblx0XHRwcm9wcy5rZXkgPSBmaWVsZC5wYXRoO1xuXHRcdHJldHVybiBwcm9wcztcblx0fSxcblx0Ly8gQ3JlYXRlIGEgbmV3IGl0ZW0gd2hlbiB0aGUgZm9ybSBpcyBzdWJtaXR0ZWRcblx0c3VibWl0Rm9ybSAoZXZlbnQpIHtcblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdGNvbnN0IGNyZWF0ZUZvcm0gPSBldmVudC50YXJnZXQ7XG5cdFx0Y29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoY3JlYXRlRm9ybSk7XG5cdFx0dGhpcy5wcm9wcy5saXN0LmNyZWF0ZUl0ZW0oZm9ybURhdGEsIChlcnIsIGRhdGEpID0+IHtcblx0XHRcdGlmIChkYXRhKSB7XG5cdFx0XHRcdGlmICh0aGlzLnByb3BzLm9uQ3JlYXRlKSB7XG5cdFx0XHRcdFx0dGhpcy5wcm9wcy5vbkNyZWF0ZShkYXRhKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyBDbGVhciBmb3JtXG5cdFx0XHRcdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRcdFx0XHR2YWx1ZXM6IHt9LFxuXHRcdFx0XHRcdFx0YWxlcnRzOiB7XG5cdFx0XHRcdFx0XHRcdHN1Y2Nlc3M6IHtcblx0XHRcdFx0XHRcdFx0XHRzdWNjZXNzOiAnSXRlbSBjcmVhdGVkJyxcblx0XHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmICghZXJyKSB7XG5cdFx0XHRcdFx0ZXJyID0ge1xuXHRcdFx0XHRcdFx0ZXJyb3I6ICdjb25uZWN0aW9uIGVycm9yJyxcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIElmIHdlIGdldCBhIGRhdGFiYXNlIGVycm9yLCBzaG93IHRoZSBkYXRhYmFzZSBlcnJvciBtZXNzYWdlXG5cdFx0XHRcdC8vIGluc3RlYWQgb2Ygb25seSBzYXlpbmcgXCJEYXRhYmFzZSBlcnJvclwiXG5cdFx0XHRcdGlmIChlcnIuZXJyb3IgPT09ICdkYXRhYmFzZSBlcnJvcicpIHtcblx0XHRcdFx0XHRlcnIuZXJyb3IgPSBlcnIuZGV0YWlsLmVycm1zZztcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLnNldFN0YXRlKHtcblx0XHRcdFx0XHRhbGVydHM6IHtcblx0XHRcdFx0XHRcdGVycm9yOiBlcnIsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cdC8vIFJlbmRlciB0aGUgZm9ybSBpdHNlbGZcblx0cmVuZGVyRm9ybSAoKSB7XG5cdFx0aWYgKCF0aGlzLnByb3BzLmlzT3BlbikgcmV0dXJuO1xuXG5cdFx0dmFyIGZvcm0gPSBbXTtcblx0XHR2YXIgbGlzdCA9IHRoaXMucHJvcHMubGlzdDtcblx0XHR2YXIgbmFtZUZpZWxkID0gdGhpcy5wcm9wcy5saXN0Lm5hbWVGaWVsZDtcblx0XHR2YXIgZm9jdXNXYXNTZXQ7XG5cblx0XHQvLyBJZiB0aGUgbmFtZSBmaWVsZCBpcyBhbiBpbml0aWFsIG9uZSwgd2UgbmVlZCB0byByZW5kZXIgYSBwcm9wZXJcblx0XHQvLyBpbnB1dCBmb3IgaXRcblx0XHRpZiAobGlzdC5uYW1lSXNJbml0aWFsKSB7XG5cdFx0XHR2YXIgbmFtZUZpZWxkUHJvcHMgPSB0aGlzLmdldEZpZWxkUHJvcHMobmFtZUZpZWxkKTtcblx0XHRcdG5hbWVGaWVsZFByb3BzLmF1dG9Gb2N1cyA9IGZvY3VzV2FzU2V0ID0gdHJ1ZTtcblx0XHRcdGlmIChuYW1lRmllbGQudHlwZSA9PT0gJ3RleHQnKSB7XG5cdFx0XHRcdG5hbWVGaWVsZFByb3BzLmNsYXNzTmFtZSA9ICdpdGVtLW5hbWUtZmllbGQnO1xuXHRcdFx0XHRuYW1lRmllbGRQcm9wcy5wbGFjZWhvbGRlciA9IG5hbWVGaWVsZC5sYWJlbDtcblx0XHRcdFx0bmFtZUZpZWxkUHJvcHMubGFiZWwgPSAnJztcblx0XHRcdH1cblx0XHRcdGZvcm0ucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KEZpZWxkc1tuYW1lRmllbGQudHlwZV0sIG5hbWVGaWVsZFByb3BzKSk7XG5cdFx0fVxuXG5cdFx0Ly8gUmVuZGVyIGlucHV0cyBmb3IgYWxsIGluaXRpYWwgZmllbGRzXG5cdFx0T2JqZWN0LmtleXMobGlzdC5pbml0aWFsRmllbGRzKS5mb3JFYWNoKGtleSA9PiB7XG5cdFx0XHR2YXIgZmllbGQgPSBsaXN0LmZpZWxkc1tsaXN0LmluaXRpYWxGaWVsZHNba2V5XV07XG5cdFx0XHQvLyBJZiB0aGVyZSdzIHNvbWV0aGluZyB3ZWlyZCBwYXNzZWQgaW4gYXMgZmllbGQgdHlwZSwgcmVuZGVyIHRoZVxuXHRcdFx0Ly8gaW52YWxpZCBmaWVsZCB0eXBlIGNvbXBvbmVudFxuXHRcdFx0aWYgKHR5cGVvZiBGaWVsZHNbZmllbGQudHlwZV0gIT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0Zm9ybS5wdXNoKFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW52YWxpZEZpZWxkVHlwZSwgeyB0eXBlOiBmaWVsZC50eXBlLCBwYXRoOiBmaWVsZC5wYXRoLCBrZXk6IGZpZWxkLnBhdGggfSkpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHQvLyBHZXQgdGhlIHByb3BzIGZvciB0aGUgaW5wdXQgZmllbGRcblx0XHRcdHZhciBmaWVsZFByb3BzID0gdGhpcy5nZXRGaWVsZFByb3BzKGZpZWxkKTtcblx0XHRcdC8vIElmIHRoZXJlIHdhcyBubyBmb2N1c1JlZiBzZXQgcHJldmlvdXNseSwgc2V0IHRoZSBjdXJyZW50IGZpZWxkIHRvXG5cdFx0XHQvLyBiZSB0aGUgb25lIHRvIGJlIGZvY3Vzc2VkLiBHZW5lcmFsbHkgdGhlIGZpcnN0IGlucHV0IGZpZWxkLCBpZlxuXHRcdFx0Ly8gdGhlcmUncyBhbiBpbml0aWFsIG5hbWUgZmllbGQgdGhhdCB0YWtlcyBwcmVjZWRlbmNlLlxuXHRcdFx0aWYgKCFmb2N1c1dhc1NldCkge1xuXHRcdFx0XHRmaWVsZFByb3BzLmF1dG9Gb2N1cyA9IGZvY3VzV2FzU2V0ID0gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdGZvcm0ucHVzaChSZWFjdC5jcmVhdGVFbGVtZW50KEZpZWxkc1tmaWVsZC50eXBlXSwgZmllbGRQcm9wcykpO1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIChcblx0XHRcdDxGb3JtIGxheW91dD1cImhvcml6b250YWxcIiBvblN1Ym1pdD17dGhpcy5zdWJtaXRGb3JtfT5cblx0XHRcdFx0PE1vZGFsLkhlYWRlclxuXHRcdFx0XHRcdHRleHQ9eydDcmVhdGUgYSBuZXcgJyArIGxpc3Quc2luZ3VsYXJ9XG5cdFx0XHRcdFx0c2hvd0Nsb3NlQnV0dG9uXG5cdFx0XHRcdC8+XG5cdFx0XHRcdDxNb2RhbC5Cb2R5PlxuXHRcdFx0XHRcdDxBbGVydE1lc3NhZ2VzIGFsZXJ0cz17dGhpcy5zdGF0ZS5hbGVydHN9IC8+XG5cdFx0XHRcdFx0e2Zvcm19XG5cdFx0XHRcdDwvTW9kYWwuQm9keT5cblx0XHRcdFx0PE1vZGFsLkZvb3Rlcj5cblx0XHRcdFx0XHQ8QnV0dG9uIGNvbG9yPVwic3VjY2Vzc1wiIHR5cGU9XCJzdWJtaXRcIiBkYXRhLWJ1dHRvbi10eXBlPVwic3VibWl0XCI+XG5cdFx0XHRcdFx0XHRDcmVhdGVcblx0XHRcdFx0XHQ8L0J1dHRvbj5cblx0XHRcdFx0XHQ8QnV0dG9uXG5cdFx0XHRcdFx0XHR2YXJpYW50PVwibGlua1wiXG5cdFx0XHRcdFx0XHRjb2xvcj1cImNhbmNlbFwiXG5cdFx0XHRcdFx0XHRkYXRhLWJ1dHRvbi10eXBlPVwiY2FuY2VsXCJcblx0XHRcdFx0XHRcdG9uQ2xpY2s9e3RoaXMucHJvcHMub25DYW5jZWx9XG5cdFx0XHRcdFx0PlxuXHRcdFx0XHRcdFx0Q2FuY2VsXG5cdFx0XHRcdFx0PC9CdXR0b24+XG5cdFx0XHRcdDwvTW9kYWwuRm9vdGVyPlxuXHRcdFx0PC9Gb3JtPlxuXHRcdCk7XG5cdH0sXG5cdHJlbmRlciAoKSB7XG5cdFx0cmV0dXJuIChcblx0XHRcdDxNb2RhbC5EaWFsb2dcblx0XHRcdFx0aXNPcGVuPXt0aGlzLnByb3BzLmlzT3Blbn1cblx0XHRcdFx0b25DbG9zZT17dGhpcy5wcm9wcy5vbkNhbmNlbH1cblx0XHRcdFx0YmFja2Ryb3BDbG9zZXNNb2RhbFxuXHRcdFx0PlxuXHRcdFx0XHR7dGhpcy5yZW5kZXJGb3JtKCl9XG5cdFx0XHQ8L01vZGFsLkRpYWxvZz5cblx0XHQpO1xuXHR9LFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ3JlYXRlRm9ybTtcbiIsIi8qKlxuICogQSBzaW5nbGUgZmxhc2ggbWVzc2FnZSBjb21wb25lbnQuIFVzZWQgYnkgRmxhc2hNZXNzYWdlcy5qc1xuICovXG5cbmltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBBbGVydCB9IGZyb20gJy4uL2VsZW1lbnRhbCc7XG5cbmNvbnN0IEZsYXNoTWVzc2FnZSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblx0cHJvcFR5cGVzOiB7XG5cdFx0bWVzc2FnZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG5cdFx0XHRQcm9wVHlwZXMub2JqZWN0LFxuXHRcdFx0UHJvcFR5cGVzLnN0cmluZyxcblx0XHRdKS5pc1JlcXVpcmVkLFxuXHRcdHR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG5cdH0sXG5cdC8vIFJlbmRlciB0aGUgbWVzc2FnZVxuXHRyZW5kZXJNZXNzYWdlIChtZXNzYWdlKSB7XG5cdFx0Ly8gSWYgdGhlIG1lc3NhZ2UgaXMgb25seSBhIHN0cmluZywgcmVuZGVyIHRoZSBzdHJpbmdcblx0XHRpZiAodHlwZW9mIG1lc3NhZ2UgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHQ8c3Bhbj5cblx0XHRcdFx0XHR7bWVzc2FnZX1cblx0XHRcdFx0PC9zcGFuPlxuXHRcdFx0KTtcblx0XHR9XG5cblx0XHQvLyBHZXQgdGhlIHRpdGxlIGFuZCB0aGUgZGV0YWlsIG9mIHRoZSBtZXNzYWdlXG5cdFx0Y29uc3QgdGl0bGUgPSBtZXNzYWdlLnRpdGxlID8gPGg0PnttZXNzYWdlLnRpdGxlfTwvaDQ+IDogbnVsbDtcblx0XHRjb25zdCBkZXRhaWwgPSBtZXNzYWdlLmRldGFpbCA/IDxwPnttZXNzYWdlLmRldGFpbH08L3A+IDogbnVsbDtcblx0XHQvLyBJZiB0aGUgbWVzc2FnZSBoYXMgYSBsaXN0IGF0dGFjaGVkLCByZW5kZXIgYSA8dWw+XG5cdFx0Y29uc3QgbGlzdCA9IG1lc3NhZ2UubGlzdCA/IChcblx0XHRcdDx1bCBzdHlsZT17eyBtYXJnaW5Cb3R0b206IDAgfX0+XG5cdFx0XHRcdHttZXNzYWdlLmxpc3QubWFwKChpdGVtLCBpKSA9PiA8bGkga2V5PXtgaSR7aX1gfT57aXRlbX08L2xpPil9XG5cdFx0XHQ8L3VsPlxuXHRcdCkgOiBudWxsO1xuXG5cdFx0cmV0dXJuIChcblx0XHRcdDxzcGFuPlxuXHRcdFx0XHR7dGl0bGV9XG5cdFx0XHRcdHtkZXRhaWx9XG5cdFx0XHRcdHtsaXN0fVxuXHRcdFx0PC9zcGFuPlxuXHRcdCk7XG5cdH0sXG5cdHJlbmRlciAoKSB7XG5cdFx0Y29uc3QgeyBtZXNzYWdlLCB0eXBlIH0gPSB0aGlzLnByb3BzO1xuXG5cdFx0cmV0dXJuIChcblx0XHRcdDxBbGVydCBjb2xvcj17dHlwZX0+XG5cdFx0XHRcdHt0aGlzLnJlbmRlck1lc3NhZ2UobWVzc2FnZSl9XG5cdFx0XHQ8L0FsZXJ0PlxuXHRcdCk7XG5cdH0sXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBGbGFzaE1lc3NhZ2U7XG4iLCIvKipcbiAqIFJlbmRlciBhIGZldyBmbGFzaCBtZXNzYWdlcywgZS5nLiBlcnJvcnMsIHN1Y2Nlc3MgbWVzc2FnZXMsIHdhcm5pbmdzLC4uLlxuICpcbiAqIFVzZSBsaWtlIHRoaXM6XG4gKiA8Rmxhc2hNZXNzYWdlc1xuICogICBtZXNzYWdlcz17e1xuICpcdCAgIGVycm9yOiBbe1xuICpcdCAgICAgdGl0bGU6ICdUaGVyZSBpcyBhIG5ldHdvcmsgcHJvYmxlbScsXG4gKlx0ICAgICBkZXRhaWw6ICdQbGVhc2UgdHJ5IGFnYWluIGxhdGVyLi4uJyxcbiAqXHQgICB9XSxcbiAqICAgfX1cbiAqIC8+XG4gKlxuICogSW5zdGVhZCBvZiBlcnJvciwgaXQgY2FuIGFsc28gYmUgaGlsaWdodCwgaW5mbywgc3VjY2VzcyBvciB3YXJuaW5nXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCBGbGFzaE1lc3NhZ2UgZnJvbSAnLi9GbGFzaE1lc3NhZ2UnO1xuXG52YXIgRmxhc2hNZXNzYWdlcyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblx0ZGlzcGxheU5hbWU6ICdGbGFzaE1lc3NhZ2VzJyxcblx0cHJvcFR5cGVzOiB7XG5cdFx0bWVzc2FnZXM6IFJlYWN0LlByb3BUeXBlcy5vbmVPZlR5cGUoW1xuXHRcdFx0UmVhY3QuUHJvcFR5cGVzLmJvb2wsXG5cdFx0XHRSZWFjdC5Qcm9wVHlwZXMuc2hhcGUoe1xuXHRcdFx0XHRlcnJvcjogUmVhY3QuUHJvcFR5cGVzLmFycmF5LFxuXHRcdFx0XHRoaWxpZ2h0OiBSZWFjdC5Qcm9wVHlwZXMuYXJyYXksXG5cdFx0XHRcdGluZm86IFJlYWN0LlByb3BUeXBlcy5hcnJheSxcblx0XHRcdFx0c3VjY2VzczogUmVhY3QuUHJvcFR5cGVzLmFycmF5LFxuXHRcdFx0XHR3YXJuaW5nOiBSZWFjdC5Qcm9wVHlwZXMuYXJyYXksXG5cdFx0XHR9KSxcblx0XHRdKSxcblx0fSxcblx0Ly8gUmVuZGVyIG1lc3NhZ2VzIGJ5IHRoZWlyIHR5cGVcblx0cmVuZGVyTWVzc2FnZXMgKG1lc3NhZ2VzLCB0eXBlKSB7XG5cdFx0aWYgKCFtZXNzYWdlcyB8fCAhbWVzc2FnZXMubGVuZ3RoKSByZXR1cm4gbnVsbDtcblxuXHRcdHJldHVybiBtZXNzYWdlcy5tYXAoKG1lc3NhZ2UsIGkpID0+IHtcblx0XHRcdHJldHVybiA8Rmxhc2hNZXNzYWdlIG1lc3NhZ2U9e21lc3NhZ2V9IHR5cGU9e3R5cGV9IGtleT17YGkke2l9YH0gLz47XG5cdFx0fSk7XG5cdH0sXG5cdC8vIFJlbmRlciB0aGUgaW5kaXZpZHVhbCBtZXNzYWdlcyBiYXNlZCBvbiB0aGVpciB0eXBlXG5cdHJlbmRlclR5cGVzICh0eXBlcykge1xuXHRcdHJldHVybiBPYmplY3Qua2V5cyh0eXBlcykubWFwKHR5cGUgPT4gdGhpcy5yZW5kZXJNZXNzYWdlcyh0eXBlc1t0eXBlXSwgdHlwZSkpO1xuXHR9LFxuXHRyZW5kZXIgKCkge1xuXHRcdGlmICghdGhpcy5wcm9wcy5tZXNzYWdlcykgcmV0dXJuIG51bGw7XG5cblx0XHRyZXR1cm4gKFxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJmbGFzaC1tZXNzYWdlc1wiPlxuXHRcdFx0XHR7Xy5pc1BsYWluT2JqZWN0KHRoaXMucHJvcHMubWVzc2FnZXMpICYmIHRoaXMucmVuZGVyVHlwZXModGhpcy5wcm9wcy5tZXNzYWdlcyl9XG5cdFx0XHQ8L2Rpdj5cblx0XHQpO1xuXHR9LFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gRmxhc2hNZXNzYWdlcztcbiIsIi8qKlxuICogUmVuZGVycyBhbiBcIkludmFsaWQgRmllbGQgVHlwZVwiIGVycm9yXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuY29uc3QgSW52YWxpZEZpZWxkVHlwZSA9IGZ1bmN0aW9uIChwcm9wcykge1xuXHRyZXR1cm4gKFxuXHRcdDxkaXYgY2xhc3NOYW1lPVwiYWxlcnQgYWxlcnQtZGFuZ2VyXCI+XG5cdFx0XHRJbnZhbGlkIGZpZWxkIHR5cGUgPHN0cm9uZz57cHJvcHMudHlwZX08L3N0cm9uZz4gYXQgcGF0aCA8c3Ryb25nPntwcm9wcy5wYXRofTwvc3Ryb25nPlxuXHRcdDwvZGl2PlxuXHQpO1xufTtcblxuSW52YWxpZEZpZWxkVHlwZS5wcm9wVHlwZXMgPSB7XG5cdHBhdGg6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG5cdHR5cGU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludmFsaWRGaWVsZFR5cGU7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcbmltcG9ydCB0aGVtZSBmcm9tICcuLi8uLi90aGVtZSc7XG5pbXBvcnQgeyBkYXJrZW4sIGxpZ2h0ZW4gfSBmcm9tICcuLi8uLi91dGlscy9jb2xvcic7XG5cbmZ1bmN0aW9uIEtiZCAoeyBjbGFzc05hbWUsIC4uLnByb3BzIH0pIHtcblx0cHJvcHMuY2xhc3NOYW1lID0gY3NzKGNsYXNzZXMua2JkKTtcblxuXHRyZXR1cm4gPGtiZCB7Li4ucHJvcHN9IC8+O1xufTtcblxuY29uc3QgY2xhc3NlcyA9IHtcblx0a2JkOiB7XG5cdFx0YmFja2dyb3VuZENvbG9yOiB0aGVtZS5jb2xvci5ib2R5LFxuXHRcdGJvcmRlclJhZGl1czogMyxcblx0XHRib3JkZXI6IGAxcHggc29saWQgI2NjY2AsXG5cdFx0Ym9yZGVyQm90dG9tQ29sb3I6IGRhcmtlbignI2NjYycsIDQpLFxuXHRcdGJvcmRlclRvcENvbG9yOiBsaWdodGVuKCcjY2NjJywgNCksXG5cdFx0Ym94U2hhZG93OiBgMCAxcHggMXB4IHJnYmEoMCwgMCwgMCwgMC4xMiksIDAgMnB4IDAgMCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNykgaW5zZXRgLFxuXHRcdGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuXHRcdGZvbnRGYW1pbHk6ICdDb25zb2xhcywgXCJMaWJlcmF0aW9uIE1vbm9cIiwgQ291cmllciwgbW9ub3NwYWNlJyxcblx0XHRmb250U2l6ZTogJzAuODVlbScsXG5cdFx0Zm9udFdlaWdodDogNzAwLFxuXHRcdGxpbmVIZWlnaHQ6ICdpbmhlcml0Jyxcblx0XHRwYWRkaW5nOiAnMXB4IDRweCcsXG5cdFx0d2hpdGVTcGFjZTogJ25vd3JhcCcsXG5cblx0XHQvLyBsaXR0bGUgaGFjayB0byB0d2VhayBcInZpc3VhbC1taWRkbGVcIiBhbGlnbm1lbnRcblx0XHRwb3NpdGlvbjogJ3JlbGF0aXZlJyxcblx0XHR0b3A6IC0xLFxuXHR9LFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBLYmQ7XG4iLCIvKipcbiAqIFJlbmRlciB0aGUgYm9keSBvZiBhIHBvcG91dFxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgYmxhY2tsaXN0IGZyb20gJ2JsYWNrbGlzdCc7XG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcblxudmFyIFBvcG91dEJvZHkgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cdGRpc3BsYXlOYW1lOiAnUG9wb3V0Qm9keScsXG5cdHByb3BUeXBlczoge1xuXHRcdGNoaWxkcmVuOiBSZWFjdC5Qcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuXHRcdGNsYXNzTmFtZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcblx0XHRzY3JvbGxhYmxlOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcblx0fSxcblx0cmVuZGVyICgpIHtcblx0XHRjb25zdCBjbGFzc05hbWUgPSBjbGFzc25hbWVzKCdQb3BvdXRfX2JvZHknLCB7XG5cdFx0XHQnUG9wb3V0X19zY3JvbGxhYmxlLWFyZWEnOiB0aGlzLnByb3BzLnNjcm9sbGFibGUsXG5cdFx0fSwgdGhpcy5wcm9wcy5jbGFzc05hbWUpO1xuXHRcdGNvbnN0IHByb3BzID0gYmxhY2tsaXN0KHRoaXMucHJvcHMsICdjbGFzc05hbWUnLCAnc2Nyb2xsYWJsZScpO1xuXG5cdFx0cmV0dXJuIChcblx0XHRcdDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWV9IHsuLi5wcm9wc30gLz5cblx0XHQpO1xuXHR9LFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUG9wb3V0Qm9keTtcbiIsIi8qKlxuICogUmVuZGVyIGEgZm9vdGVyIGZvciBhIHBvcG91dFxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IEJVVFRPTl9CQVNFX0NMQVNTTkFNRSA9ICdQb3BvdXRfX2Zvb3Rlcl9fYnV0dG9uIFBvcG91dF9fZm9vdGVyX19idXR0b24tLSc7XG5cbmNvbnN0IFBvcG91dEZvb3RlciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblx0ZGlzcGxheU5hbWU6ICdQb3BvdXRGb290ZXInLFxuXHRwcm9wVHlwZXM6IHtcblx0XHRjaGlsZHJlbjogUmVhY3QuUHJvcFR5cGVzLm5vZGUsXG5cdFx0cHJpbWFyeUJ1dHRvbkFjdGlvbjogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG5cdFx0cHJpbWFyeUJ1dHRvbklzU3VibWl0OiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcblx0XHRwcmltYXJ5QnV0dG9uTGFiZWw6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG5cdFx0c2Vjb25kYXJ5QnV0dG9uQWN0aW9uOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcblx0XHRzZWNvbmRhcnlCdXR0b25MYWJlbDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcblx0fSxcblx0Ly8gUmVuZGVyIGEgcHJpbWFyeSBidXR0b25cblx0cmVuZGVyUHJpbWFyeUJ1dHRvbiAoKSB7XG5cdFx0aWYgKCF0aGlzLnByb3BzLnByaW1hcnlCdXR0b25MYWJlbCkgcmV0dXJuIG51bGw7XG5cblx0XHRyZXR1cm4gKFxuXHRcdFx0PGJ1dHRvblxuXHRcdFx0XHR0eXBlPXt0aGlzLnByb3BzLnByaW1hcnlCdXR0b25Jc1N1Ym1pdCA/ICdzdWJtaXQnIDogJ2J1dHRvbid9XG5cdFx0XHRcdGNsYXNzTmFtZT17QlVUVE9OX0JBU0VfQ0xBU1NOQU1FICsgJ3ByaW1hcnknfVxuXHRcdFx0XHRvbkNsaWNrPXt0aGlzLnByb3BzLnByaW1hcnlCdXR0b25BY3Rpb259XG5cdFx0XHQ+XG5cdFx0XHRcdHt0aGlzLnByb3BzLnByaW1hcnlCdXR0b25MYWJlbH1cblx0XHRcdDwvYnV0dG9uPlxuXHRcdCk7XG5cdH0sXG5cdC8vIFJlbmRlciBhIHNlY29uZGFyeSBidXR0b25cblx0cmVuZGVyU2Vjb25kYXJ5QnV0dG9uICgpIHtcblx0XHRpZiAoIXRoaXMucHJvcHMuc2Vjb25kYXJ5QnV0dG9uQWN0aW9uIHx8ICF0aGlzLnByb3BzLnNlY29uZGFyeUJ1dHRvbkxhYmVsKSByZXR1cm4gbnVsbDtcblxuXHRcdHJldHVybiAoXG5cdFx0XHQ8YnV0dG9uXG5cdFx0XHRcdHR5cGU9XCJidXR0b25cIlxuXHRcdFx0XHRjbGFzc05hbWU9e0JVVFRPTl9CQVNFX0NMQVNTTkFNRSArICdzZWNvbmRhcnknfVxuXHRcdFx0XHRvbkNsaWNrPXt0aGlzLnByb3BzLnNlY29uZGFyeUJ1dHRvbkFjdGlvbn1cblx0XHRcdD5cblx0XHRcdFx0e3RoaXMucHJvcHMuc2Vjb25kYXJ5QnV0dG9uTGFiZWx9XG5cdFx0XHQ8L2J1dHRvbj5cblx0XHQpO1xuXHR9LFxuXHRyZW5kZXIgKCkge1xuXHRcdHJldHVybiAoXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cIlBvcG91dF9fZm9vdGVyXCI+XG5cdFx0XHRcdHt0aGlzLnJlbmRlclByaW1hcnlCdXR0b24oKX1cblx0XHRcdFx0e3RoaXMucmVuZGVyU2Vjb25kYXJ5QnV0dG9uKCl9XG5cdFx0XHRcdHt0aGlzLnByb3BzLmNoaWxkcmVufVxuXHRcdFx0PC9kaXY+XG5cdFx0KTtcblx0fSxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBvcG91dEZvb3RlcjtcbiIsIi8qKlxuICogUmVuZGVyIGEgaGVhZGVyIGZvciBhIHBvcG91dFxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgVHJhbnNpdGlvbiBmcm9tICdyZWFjdC1hZGRvbnMtY3NzLXRyYW5zaXRpb24tZ3JvdXAnO1xuXG5jb25zdCBQb3BvdXRIZWFkZXIgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cdGRpc3BsYXlOYW1lOiAnUG9wb3V0SGVhZGVyJyxcblx0cHJvcFR5cGVzOiB7XG5cdFx0bGVmdEFjdGlvbjogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG5cdFx0bGVmdEljb246IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG5cdFx0dGl0bGU6IFJlYWN0LlByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcblx0XHR0cmFuc2l0aW9uRGlyZWN0aW9uOiBSZWFjdC5Qcm9wVHlwZXMub25lT2YoWyduZXh0JywgJ3ByZXYnXSksXG5cdH0sXG5cdHJlbmRlciAoKSB7XG5cdFx0Ly8gSWYgd2UgaGF2ZSBhIGxlZnQgYWN0aW9uIGFuZCBhIGxlZnQgaWNvbiwgcmVuZGVyIGEgaGVhZGVyIGJ1dHRvblxuXHRcdHZhciBoZWFkZXJCdXR0b24gPSAodGhpcy5wcm9wcy5sZWZ0QWN0aW9uICYmIHRoaXMucHJvcHMubGVmdEljb24pID8gKFxuXHRcdFx0PGJ1dHRvblxuXHRcdFx0XHRrZXk9eydidXR0b25fJyArIHRoaXMucHJvcHMudHJhbnNpdGlvbkRpcmVjdGlvbn1cblx0XHRcdFx0dHlwZT1cImJ1dHRvblwiXG5cdFx0XHRcdGNsYXNzTmFtZT17J1BvcG91dF9faGVhZGVyX19idXR0b24gb2N0aWNvbiBvY3RpY29uLScgKyB0aGlzLnByb3BzLmxlZnRJY29ufVxuXHRcdFx0XHRvbkNsaWNrPXt0aGlzLnByb3BzLmxlZnRBY3Rpb259XG5cdFx0XHQvPlxuXHRcdCkgOiBudWxsO1xuXHRcdC8vIElmIHdlIGhhdmUgYSB0aXRsZSwgcmVuZGVyIGl0XG5cdFx0dmFyIGhlYWRlclRpdGxlID0gdGhpcy5wcm9wcy50aXRsZSA/IChcblx0XHRcdDxzcGFuXG5cdFx0XHRcdGtleT17J3RpdGxlXycgKyB0aGlzLnByb3BzLnRyYW5zaXRpb25EaXJlY3Rpb259XG5cdFx0XHRcdGNsYXNzTmFtZT1cIlBvcG91dF9faGVhZGVyX19sYWJlbFwiXG5cdFx0XHQ+XG5cdFx0XHRcdHt0aGlzLnByb3BzLnRpdGxlfVxuXHRcdFx0PC9zcGFuPlxuXHRcdCkgOiBudWxsO1xuXG5cdFx0cmV0dXJuIChcblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiUG9wb3V0X19oZWFkZXJcIj5cblx0XHRcdFx0PFRyYW5zaXRpb25cblx0XHRcdFx0XHR0cmFuc2l0aW9uTmFtZT1cIlBvcG91dF9faGVhZGVyX19idXR0b25cIlxuXHRcdFx0XHRcdHRyYW5zaXRpb25FbnRlclRpbWVvdXQ9ezIwMH1cblx0XHRcdFx0XHR0cmFuc2l0aW9uTGVhdmVUaW1lb3V0PXsyMDB9XG5cdFx0XHRcdD5cblx0XHRcdFx0XHR7aGVhZGVyQnV0dG9ufVxuXHRcdFx0XHQ8L1RyYW5zaXRpb24+XG5cdFx0XHRcdDxUcmFuc2l0aW9uXG5cdFx0XHRcdFx0dHJhbnNpdGlvbk5hbWU9eydQb3BvdXRfX3BhbmUtJyArIHRoaXMucHJvcHMudHJhbnNpdGlvbkRpcmVjdGlvbn1cblx0XHRcdFx0XHR0cmFuc2l0aW9uRW50ZXJUaW1lb3V0PXszNjB9XG5cdFx0XHRcdFx0dHJhbnNpdGlvbkxlYXZlVGltZW91dD17MzYwfVxuXHRcdFx0XHQ+XG5cdFx0XHRcdFx0e2hlYWRlclRpdGxlfVxuXHRcdFx0XHQ8L1RyYW5zaXRpb24+XG5cdFx0XHQ8L2Rpdj5cblx0XHQpO1xuXHR9LFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUG9wb3V0SGVhZGVyO1xuIiwiLyoqXG4gKiBSZW5kZXIgYSBwb3BvdXQgbGlzdC4gQ2FuIGFsc28gdXNlIFBvcG91dExpc3RJdGVtIGFuZCBQb3BvdXRMaXN0SGVhZGluZ1xuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgYmxhY2tsaXN0IGZyb20gJ2JsYWNrbGlzdCc7XG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcblxuY29uc3QgUG9wb3V0TGlzdCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblx0ZGlzcGxheU5hbWU6ICdQb3BvdXRMaXN0Jyxcblx0cHJvcFR5cGVzOiB7XG5cdFx0Y2hpbGRyZW46IFJlYWN0LlByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG5cdFx0Y2xhc3NOYW1lOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuXHR9LFxuXHRyZW5kZXIgKCkge1xuXHRcdGNvbnN0IGNsYXNzTmFtZSA9IGNsYXNzbmFtZXMoJ1BvcG91dExpc3QnLCB0aGlzLnByb3BzLmNsYXNzTmFtZSk7XG5cdFx0Y29uc3QgcHJvcHMgPSBibGFja2xpc3QodGhpcy5wcm9wcywgJ2NsYXNzTmFtZScpO1xuXG5cdFx0cmV0dXJuIChcblx0XHRcdDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWV9IHsuLi5wcm9wc30gLz5cblx0XHQpO1xuXHR9LFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUG9wb3V0TGlzdDtcblxuLy8gZXhwb3NlIHRoZSBjaGlsZCB0byB0aGUgdG9wIGxldmVsIGV4cG9ydFxubW9kdWxlLmV4cG9ydHMuSXRlbSA9IHJlcXVpcmUoJy4vUG9wb3V0TGlzdEl0ZW0nKTtcbm1vZHVsZS5leHBvcnRzLkhlYWRpbmcgPSByZXF1aXJlKCcuL1BvcG91dExpc3RIZWFkaW5nJyk7XG4iLCIvKipcbiAqIFJlbmRlciBhIHBvcG91dCBsaXN0IGhlYWRpbmdcbiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGJsYWNrbGlzdCBmcm9tICdibGFja2xpc3QnO1xuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5cbnZhciBQb3BvdXRMaXN0SGVhZGluZyA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblx0ZGlzcGxheU5hbWU6ICdQb3BvdXRMaXN0SGVhZGluZycsXG5cdHByb3BUeXBlczoge1xuXHRcdGNoaWxkcmVuOiBSZWFjdC5Qcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuXHRcdGNsYXNzTmFtZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcblx0fSxcblx0cmVuZGVyICgpIHtcblx0XHRjb25zdCBjbGFzc05hbWUgPSBjbGFzc25hbWVzKCdQb3BvdXRMaXN0X19oZWFkaW5nJywgdGhpcy5wcm9wcy5jbGFzc05hbWUpO1xuXHRcdGNvbnN0IHByb3BzID0gYmxhY2tsaXN0KHRoaXMucHJvcHMsICdjbGFzc05hbWUnKTtcblxuXHRcdHJldHVybiAoXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lfSB7Li4ucHJvcHN9IC8+XG5cdFx0KTtcblx0fSxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBvcG91dExpc3RIZWFkaW5nO1xuIiwiLyoqXG4gKiBSZW5kZXIgYSBwb3BvdXQgbGlzdCBpdGVtXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBibGFja2xpc3QgZnJvbSAnYmxhY2tsaXN0JztcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuXG52YXIgUG9wb3V0TGlzdEl0ZW0gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cdGRpc3BsYXlOYW1lOiAnUG9wb3V0TGlzdEl0ZW0nLFxuXHRwcm9wVHlwZXM6IHtcblx0XHRpY29uOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuXHRcdGljb25Ib3ZlcjogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcblx0XHRpc1NlbGVjdGVkOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcblx0XHRsYWJlbDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuXHRcdG9uQ2xpY2s6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuXHR9LFxuXHRnZXRJbml0aWFsU3RhdGUgKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRob3ZlcjogZmFsc2UsXG5cdFx0fTtcblx0fSxcblx0aG92ZXIgKCkge1xuXHRcdHRoaXMuc2V0U3RhdGUoeyBob3ZlcjogdHJ1ZSB9KTtcblx0fSxcblx0dW5ob3ZlciAoKSB7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7IGhvdmVyOiBmYWxzZSB9KTtcblx0fSxcblx0Ly8gUmVuZGVyIGFuIGljb25cblx0cmVuZGVySWNvbiAoKSB7XG5cdFx0aWYgKCF0aGlzLnByb3BzLmljb24pIHJldHVybiBudWxsO1xuXHRcdGNvbnN0IGljb24gPSB0aGlzLnN0YXRlLmhvdmVyICYmIHRoaXMucHJvcHMuaWNvbkhvdmVyID8gdGhpcy5wcm9wcy5pY29uSG92ZXIgOiB0aGlzLnByb3BzLmljb247XG5cdFx0Y29uc3QgaWNvbkNsYXNzbmFtZSA9IGNsYXNzbmFtZXMoJ1BvcG91dExpc3RfX2l0ZW1fX2ljb24gb2N0aWNvbicsICgnb2N0aWNvbi0nICsgaWNvbikpO1xuXG5cdFx0cmV0dXJuIDxzcGFuIGNsYXNzTmFtZT17aWNvbkNsYXNzbmFtZX0gLz47XG5cdH0sXG5cdHJlbmRlciAoKSB7XG5cdFx0Y29uc3QgaXRlbUNsYXNzbmFtZSA9IGNsYXNzbmFtZXMoJ1BvcG91dExpc3RfX2l0ZW0nLCB7XG5cdFx0XHQnaXMtc2VsZWN0ZWQnOiB0aGlzLnByb3BzLmlzU2VsZWN0ZWQsXG5cdFx0fSk7XG5cdFx0Y29uc3QgcHJvcHMgPSBibGFja2xpc3QodGhpcy5wcm9wcywgJ2NsYXNzTmFtZScsICdpY29uJywgJ2ljb25Ib3ZlcicsICdpc1NlbGVjdGVkJywgJ2xhYmVsJyk7XG5cdFx0cmV0dXJuIChcblx0XHRcdDxidXR0b25cblx0XHRcdFx0dHlwZT1cImJ1dHRvblwiXG5cdFx0XHRcdHRpdGxlPXt0aGlzLnByb3BzLmxhYmVsfVxuXHRcdFx0XHRjbGFzc05hbWU9e2l0ZW1DbGFzc25hbWV9XG5cdFx0XHRcdG9uRm9jdXM9e3RoaXMuaG92ZXJ9XG5cdFx0XHRcdG9uQmx1cj17dGhpcy51bmhvdmVyfVxuXHRcdFx0XHRvbk1vdXNlT3Zlcj17dGhpcy5ob3Zlcn1cblx0XHRcdFx0b25Nb3VzZU91dD17dGhpcy51bmhvdmVyfVxuXHRcdFx0XHR7Li4ucHJvcHN9XG5cdFx0XHQ+XG5cdFx0XHRcdHt0aGlzLnJlbmRlckljb24oKX1cblx0XHRcdFx0PHNwYW4gY2xhc3NOYW1lPVwiUG9wb3V0TGlzdF9faXRlbV9fbGFiZWxcIj5cblx0XHRcdFx0XHR7dGhpcy5wcm9wcy5sYWJlbH1cblx0XHRcdFx0PC9zcGFuPlxuXHRcdFx0PC9idXR0b24+XG5cdFx0KTtcblx0fSxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBvcG91dExpc3RJdGVtO1xuIiwiLyoqXG4gKiBSZW5kZXIgYSBwb3BvdXQgcGFuZSwgY2FsbHMgcHJvcHMub25MYXlvdXQgd2hlbiB0aGUgY29tcG9uZW50IG1vdW50c1xuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgYmxhY2tsaXN0IGZyb20gJ2JsYWNrbGlzdCc7XG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcblxudmFyIFBvcG91dFBhbmUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cdGRpc3BsYXlOYW1lOiAnUG9wb3V0UGFuZScsXG5cdHByb3BUeXBlczoge1xuXHRcdGNoaWxkcmVuOiBSZWFjdC5Qcm9wVHlwZXMubm9kZS5pc1JlcXVpcmVkLFxuXHRcdGNsYXNzTmFtZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcblx0XHRvbkxheW91dDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG5cdH0sXG5cdGdldERlZmF1bHRQcm9wcyAoKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdG9uTGF5b3V0OiAoKSA9PiB7fSxcblx0XHR9O1xuXHR9LFxuXHRjb21wb25lbnREaWRNb3VudCAoKSB7XG5cdFx0dGhpcy5wcm9wcy5vbkxheW91dCh0aGlzLnJlZnMuZWwub2Zmc2V0SGVpZ2h0KTtcblx0fSxcblx0cmVuZGVyICgpIHtcblx0XHRjb25zdCBjbGFzc05hbWUgPSBjbGFzc25hbWVzKCdQb3BvdXRfX3BhbmUnLCB0aGlzLnByb3BzLmNsYXNzTmFtZSk7XG5cdFx0Y29uc3QgcHJvcHMgPSBibGFja2xpc3QodGhpcy5wcm9wcywgJ2NsYXNzTmFtZScsICdvbkxheW91dCcpO1xuXG5cdFx0cmV0dXJuIChcblx0XHRcdDxkaXYgcmVmPVwiZWxcIiBjbGFzc05hbWU9e2NsYXNzTmFtZX0gey4uLnByb3BzfSAvPlxuXHRcdCk7XG5cdH0sXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBQb3BvdXRQYW5lO1xuIiwiLyoqXG4gKiBBIFBvcG91dCBjb21wb25lbnQuXG4gKiBPbmUgY2FuIGFsc28gYWRkIGEgSGVhZGVyIChQb3BvdXQvSGVhZGVyKSwgYSBGb290ZXJcbiAqIChQb3BvdXQvRm9vdGVyKSwgYSBCb2R5IChQb3BvdXQvQm9keSkgYW5kIGEgUGFuIChQb3BvdXQvUGFuZSkuXG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQb3J0YWwgZnJvbSAnLi4vUG9ydGFsJztcbmltcG9ydCBUcmFuc2l0aW9uIGZyb20gJ3JlYWN0LWFkZG9ucy1jc3MtdHJhbnNpdGlvbi1ncm91cCc7XG5cbmNvbnN0IFNJWkVTID0ge1xuXHRhcnJvd0hlaWdodDogMTIsXG5cdGFycm93V2lkdGg6IDE2LFxuXHRob3Jpem9udGFsTWFyZ2luOiAyMCxcbn07XG5cbnZhciBQb3BvdXQgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cdGRpc3BsYXlOYW1lOiAnUG9wb3V0Jyxcblx0cHJvcFR5cGVzOiB7XG5cdFx0aXNPcGVuOiBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcblx0XHRvbkNhbmNlbDogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXG5cdFx0b25TdWJtaXQ6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxuXHRcdHJlbGF0aXZlVG9JRDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuXHRcdHdpZHRoOiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLFxuXHR9LFxuXHRnZXREZWZhdWx0UHJvcHMgKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHR3aWR0aDogMzIwLFxuXHRcdH07XG5cdH0sXG5cdGdldEluaXRpYWxTdGF0ZSAoKSB7XG5cdFx0cmV0dXJuIHt9O1xuXHR9LFxuXHRjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIChuZXh0UHJvcHMpIHtcblx0XHRpZiAoIXRoaXMucHJvcHMuaXNPcGVuICYmIG5leHRQcm9wcy5pc09wZW4pIHtcblx0XHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmNhbGN1bGF0ZVBvc2l0aW9uKTtcblx0XHRcdHRoaXMuY2FsY3VsYXRlUG9zaXRpb24obmV4dFByb3BzLmlzT3Blbik7XG5cdFx0fSBlbHNlIGlmICh0aGlzLnByb3BzLmlzT3BlbiAmJiAhbmV4dFByb3BzLmlzT3Blbikge1xuXHRcdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuY2FsY3VsYXRlUG9zaXRpb24pO1xuXHRcdH1cblx0fSxcblx0Z2V0UG9ydGFsRE9NTm9kZSAoKSB7XG5cdFx0cmV0dXJuIHRoaXMucmVmcy5wb3J0YWwuZ2V0UG9ydGFsRE9NTm9kZSgpO1xuXHR9LFxuXHRjYWxjdWxhdGVQb3NpdGlvbiAoaXNPcGVuKSB7XG5cdFx0aWYgKCFpc09wZW4pIHJldHVybjtcblx0XHRsZXQgcG9zTm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMucHJvcHMucmVsYXRpdmVUb0lEKTtcblxuXHRcdGNvbnN0IHBvcyA9IHtcblx0XHRcdHRvcDogMCxcblx0XHRcdGxlZnQ6IDAsXG5cdFx0XHR3aWR0aDogcG9zTm9kZS5vZmZzZXRXaWR0aCxcblx0XHRcdGhlaWdodDogcG9zTm9kZS5vZmZzZXRIZWlnaHQsXG5cdFx0fTtcblx0XHR3aGlsZSAocG9zTm9kZS5vZmZzZXRQYXJlbnQpIHtcblx0XHRcdHBvcy50b3AgKz0gcG9zTm9kZS5vZmZzZXRUb3A7XG5cdFx0XHRwb3MubGVmdCArPSBwb3NOb2RlLm9mZnNldExlZnQ7XG5cdFx0XHRwb3NOb2RlID0gcG9zTm9kZS5vZmZzZXRQYXJlbnQ7XG5cdFx0fVxuXG5cdFx0bGV0IGxlZnRPZmZzZXQgPSBNYXRoLm1heChwb3MubGVmdCArIChwb3Mud2lkdGggLyAyKSAtICh0aGlzLnByb3BzLndpZHRoIC8gMiksIFNJWkVTLmhvcml6b250YWxNYXJnaW4pO1xuXHRcdGxldCB0b3BPZmZzZXQgPSBwb3MudG9wICsgcG9zLmhlaWdodCArIFNJWkVTLmFycm93SGVpZ2h0O1xuXG5cdFx0dmFyIHNwYWNlT25SaWdodCA9IHdpbmRvdy5pbm5lcldpZHRoIC0gKGxlZnRPZmZzZXQgKyB0aGlzLnByb3BzLndpZHRoICsgU0laRVMuaG9yaXpvbnRhbE1hcmdpbik7XG5cdFx0aWYgKHNwYWNlT25SaWdodCA8IDApIHtcblx0XHRcdGxlZnRPZmZzZXQgPSBsZWZ0T2Zmc2V0ICsgc3BhY2VPblJpZ2h0O1xuXHRcdH1cblxuXHRcdGNvbnN0IGFycm93TGVmdE9mZnNldCA9IGxlZnRPZmZzZXQgPT09IFNJWkVTLmhvcml6b250YWxNYXJnaW5cblx0XHRcdD8gcG9zLmxlZnQgKyAocG9zLndpZHRoIC8gMikgLSAoU0laRVMuYXJyb3dXaWR0aCAvIDIpIC0gU0laRVMuaG9yaXpvbnRhbE1hcmdpblxuXHRcdFx0OiBudWxsO1xuXG5cdFx0Y29uc3QgbmV3U3RhdGVBdmFsaWFibGUgPSB0aGlzLnN0YXRlLmxlZnRPZmZzZXQgIT09IGxlZnRPZmZzZXRcblx0XHRcdHx8IHRoaXMuc3RhdGUudG9wT2Zmc2V0ICE9PSB0b3BPZmZzZXRcblx0XHRcdHx8IHRoaXMuc3RhdGUuYXJyb3dMZWZ0T2Zmc2V0ICE9PSBhcnJvd0xlZnRPZmZzZXQ7XG5cblx0XHRpZiAobmV3U3RhdGVBdmFsaWFibGUpIHtcblx0XHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0XHRsZWZ0T2Zmc2V0OiBsZWZ0T2Zmc2V0LFxuXHRcdFx0XHR0b3BPZmZzZXQ6IHRvcE9mZnNldCxcblx0XHRcdFx0YXJyb3dMZWZ0T2Zmc2V0OiBhcnJvd0xlZnRPZmZzZXQsXG5cdFx0XHR9KTtcblx0XHR9XG5cdH0sXG5cdHJlbmRlclBvcG91dCAoKSB7XG5cdFx0aWYgKCF0aGlzLnByb3BzLmlzT3BlbikgcmV0dXJuIG51bGw7XG5cblx0XHRjb25zdCB7IHdpZHRoIH0gPSB0aGlzLnByb3BzO1xuXHRcdGNvbnN0IHsgYXJyb3dMZWZ0T2Zmc2V0LCBsZWZ0T2Zmc2V0OiBsZWZ0LCB0b3BPZmZzZXQ6IHRvcCB9ID0gdGhpcy5zdGF0ZTtcblxuXHRcdGNvbnN0IGFycm93U3R5bGVzID0gYXJyb3dMZWZ0T2Zmc2V0XG5cdFx0XHQ/IHsgbGVmdDogMCwgbWFyZ2luTGVmdDogYXJyb3dMZWZ0T2Zmc2V0IH1cblx0XHRcdDogbnVsbDtcblxuXHRcdHJldHVybiAoXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cIlBvcG91dFwiIHN0eWxlPXt7IGxlZnQsIHRvcCwgd2lkdGggfX0+XG5cdFx0XHRcdDxzcGFuIGNsYXNzTmFtZT1cIlBvcG91dF9fYXJyb3dcIiBzdHlsZT17YXJyb3dTdHlsZXN9IC8+XG5cdFx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiUG9wb3V0X19pbm5lclwiPlxuXHRcdFx0XHRcdHt0aGlzLnByb3BzLmNoaWxkcmVufVxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdDwvZGl2PlxuXHRcdCk7XG5cdH0sXG5cdHJlbmRlckJsb2Nrb3V0ICgpIHtcblx0XHRpZiAoIXRoaXMucHJvcHMuaXNPcGVuKSByZXR1cm47XG5cdFx0cmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwiYmxvY2tvdXRcIiBvbkNsaWNrPXt0aGlzLnByb3BzLm9uQ2FuY2VsfSAvPjtcblx0fSxcblx0cmVuZGVyICgpIHtcblx0XHRyZXR1cm4gKFxuXHRcdFx0PFBvcnRhbCBjbGFzc05hbWU9XCJQb3BvdXQtd3JhcHBlclwiIHJlZj1cInBvcnRhbFwiPlxuXHRcdFx0XHQ8VHJhbnNpdGlvblxuXHRcdFx0XHRcdHRyYW5zaXRpb25FbnRlclRpbWVvdXQ9ezIwMH1cblx0XHRcdFx0XHR0cmFuc2l0aW9uTGVhdmVUaW1lb3V0PXsyMDB9XG5cdFx0XHRcdFx0dHJhbnNpdGlvbk5hbWU9XCJQb3BvdXRcIlxuXHRcdFx0XHQ+XG5cdFx0XHRcdFx0e3RoaXMucmVuZGVyUG9wb3V0KCl9XG5cdFx0XHRcdDwvVHJhbnNpdGlvbj5cblx0XHRcdFx0e3RoaXMucmVuZGVyQmxvY2tvdXQoKX1cblx0XHRcdDwvUG9ydGFsPlxuXHRcdCk7XG5cdH0sXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBQb3BvdXQ7XG5cbi8vIGV4cG9zZSB0aGUgY2hpbGQgdG8gdGhlIHRvcCBsZXZlbCBleHBvcnRcbm1vZHVsZS5leHBvcnRzLkhlYWRlciA9IHJlcXVpcmUoJy4vUG9wb3V0SGVhZGVyJyk7XG5tb2R1bGUuZXhwb3J0cy5Cb2R5ID0gcmVxdWlyZSgnLi9Qb3BvdXRCb2R5Jyk7XG5tb2R1bGUuZXhwb3J0cy5Gb290ZXIgPSByZXF1aXJlKCcuL1BvcG91dEZvb3RlcicpO1xubW9kdWxlLmV4cG9ydHMuUGFuZSA9IHJlcXVpcmUoJy4vUG9wb3V0UGFuZScpO1xuIiwiLyoqXG4gKiBVc2VkIGJ5IHRoZSBQb3BvdXQgY29tcG9uZW50IGFuZCB0aGUgTGlnaHRib3ggY29tcG9uZW50IG9mIHRoZSBmaWVsZHMgZm9yXG4gKiBwb3BvdXRzLiBSZW5kZXJzIGEgbm9uLXJlYWN0IERPTSBub2RlLlxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cdGRpc3BsYXlOYW1lOiAnUG9ydGFsJyxcblx0cG9ydGFsRWxlbWVudDogbnVsbCwgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC9zb3J0LWNvbXBcblx0Y29tcG9uZW50RGlkTW91bnQgKCkge1xuXHRcdGNvbnN0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbCk7XG5cdFx0dGhpcy5wb3J0YWxFbGVtZW50ID0gZWw7XG5cdFx0dGhpcy5jb21wb25lbnREaWRVcGRhdGUoKTtcblx0fSxcblx0Y29tcG9uZW50V2lsbFVubW91bnQgKCkge1xuXHRcdGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodGhpcy5wb3J0YWxFbGVtZW50KTtcblx0fSxcblx0Y29tcG9uZW50RGlkVXBkYXRlICgpIHtcblx0XHRSZWFjdERPTS5yZW5kZXIoPGRpdiB7Li4udGhpcy5wcm9wc30gLz4sIHRoaXMucG9ydGFsRWxlbWVudCk7XG5cdH0sXG5cdGdldFBvcnRhbERPTU5vZGUgKCkge1xuXHRcdHJldHVybiB0aGlzLnBvcnRhbEVsZW1lbnQ7XG5cdH0sXG5cdHJlbmRlciAoKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH0sXG59KTtcbiIsImltcG9ydCB7IHJvdXRlclJlZHVjZXIsIHJvdXRlck1pZGRsZXdhcmUgfSBmcm9tICdyZWFjdC1yb3V0ZXItcmVkdXgnO1xuaW1wb3J0IHsgY3JlYXRlU3RvcmUsIGNvbWJpbmVSZWR1Y2VycywgYXBwbHlNaWRkbGV3YXJlLCBjb21wb3NlIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHsgYnJvd3Nlckhpc3RvcnkgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuaW1wb3J0IHRodW5rIGZyb20gJ3JlZHV4LXRodW5rJztcbmltcG9ydCBjcmVhdGVTYWdhTWlkZGxld2FyZSBmcm9tICdyZWR1eC1zYWdhJztcblxuaW1wb3J0IGxpc3RzUmVkdWNlciBmcm9tICcuL3NjcmVlbnMvTGlzdC9yZWR1Y2Vycy9tYWluJztcbmltcG9ydCBhY3RpdmVSZWR1Y2VyIGZyb20gJy4vc2NyZWVucy9MaXN0L3JlZHVjZXJzL2FjdGl2ZSc7XG5pbXBvcnQgaXRlbVJlZHVjZXIgZnJvbSAnLi9zY3JlZW5zL0l0ZW0vcmVkdWNlcic7XG5pbXBvcnQgaG9tZVJlZHVjZXIgZnJvbSAnLi9zY3JlZW5zL0hvbWUvcmVkdWNlcic7XG5cbmltcG9ydCByb290U2FnYSBmcm9tICcuL3NhZ2FzJztcblxuXG4vLyBDb21iaW5lIHRoZSByZWR1Y2VycyB0byBvbmUgc3RhdGVcbmNvbnN0IHJlZHVjZXJzID0gY29tYmluZVJlZHVjZXJzKHtcblx0bGlzdHM6IGxpc3RzUmVkdWNlcixcblx0YWN0aXZlOiBhY3RpdmVSZWR1Y2VyLFxuXHRpdGVtOiBpdGVtUmVkdWNlcixcblx0aG9tZTogaG9tZVJlZHVjZXIsXG5cdHJvdXRpbmc6IHJvdXRlclJlZHVjZXIsXG59KTtcblxuY29uc3Qgc2FnYU1pZGRsZXdhcmUgPSBjcmVhdGVTYWdhTWlkZGxld2FyZSgpO1xuXG4vLyBDcmVhdGUgdGhlIHN0b3JlXG5jb25zdCBzdG9yZSA9IGNyZWF0ZVN0b3JlKFxuXHRyZWR1Y2Vycyxcblx0Y29tcG9zZShcblx0XHRhcHBseU1pZGRsZXdhcmUoXG5cdFx0XHQvLyBTdXBwb3J0IHRodW5rZWQgYWN0aW9ucyBhbmQgcmVhY3Qtcm91dGVyLXJlZHV4XG5cdFx0XHR0aHVuayxcblx0XHRcdHJvdXRlck1pZGRsZXdhcmUoYnJvd3Nlckhpc3RvcnkpLFxuXHRcdFx0c2FnYU1pZGRsZXdhcmVcblx0XHQpLFxuXHRcdC8vIFN1cHBvcnQgdGhlIENocm9tZSBEZXZUb29scyBleHRlbnNpb25cblx0XHR3aW5kb3cuZGV2VG9vbHNFeHRlbnNpb24gPyB3aW5kb3cuZGV2VG9vbHNFeHRlbnNpb24oKSA6IGYgPT4gZlxuXHQpXG4pO1xuXG5zYWdhTWlkZGxld2FyZS5ydW4ocm9vdFNhZ2EpO1xuXG5leHBvcnQgZGVmYXVsdCBzdG9yZTtcbiIsIi8qKlxuICogQ29uc3RhbnRzXG4gKi9cblxuLy8gYnJlYWtwb2ludHNcbmV4cG9ydHMuYnJlYWtwb2ludCA9IHtcblx0eHM6IDQ4MCxcblx0c206IDc2OCxcblx0bWQ6IDk5Mixcblx0bGc6IDEyMDAsXG59O1xuXG4vLyBib3JkZXIgcmFkaWlcbmV4cG9ydHMuYm9yZGVyUmFkaXVzID0ge1xuXHR4czogMixcblx0c206IDQsXG5cdG1kOiA4LFxuXHRsZzogMTYsXG5cdHhsOiAzMixcbn07XG5cbi8vIGNvbG9yXG5leHBvcnRzLmNvbG9yID0ge1xuXHRhcHBEYW5nZXI6ICcjZDY0MjQyJyxcblx0YXBwSW5mbzogJyM1NmNkZmMnLFxuXHRhcHBQcmltYXJ5OiAnIzEzODVlNScsXG5cdGFwcFN1Y2Nlc3M6ICcjMzRjMjQwJyxcblx0YXBwV2FybmluZzogJyNmYTlmNDcnLFxufTtcblxuLy8gc3BhY2luZ1xuZXhwb3J0cy5zcGFjaW5nID0ge1xuXHR4czogNSxcblx0c206IDEwLFxuXHRtZDogMjAsXG5cdGxnOiA0MCxcblx0eGw6IDgwLFxufTtcblxuLy8gdGFibGUgY29uc3RhbnRzXG5cbmV4cG9ydHMuVEFCTEVfQ09OVFJPTF9DT0xVTU5fV0lEVEggPSAyNjsgLy8gaWNvbiArIHBhZGRpbmdcbmV4cG9ydHMuTkVUV09SS19FUlJPUl9SRVRSWV9ERUxBWSA9IDUwMDsgLy8gaW4gbXNcbiIsIi8qIGVzbGludC1kaXNhYmxlIGtleS1zcGFjaW5nICovXG5jb25zdCB0aGVtZSA9IHt9O1xuY29uc3QgeyBibGVuZCwgZGFya2VuLCBmYWRlLCBsaWdodGVuIH0gPSByZXF1aXJlKCcuL3V0aWxzL2NvbG9yJyk7XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gQ09NTU9OXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLy8gYnJlYWtwb2ludFxuXG50aGVtZS5icmVha3BvaW50TnVtZXJpYyA9IHtcblx0bW9iaWxlOiAgICAgICAgICAgNDgwLFxuXHR0YWJsZXRQb3J0cmFpdDogICA3NjgsXG5cdHRhYmxldExhbmRzY2FwZTogIDk5Mixcblx0ZGVza3RvcDogICAgICAgICAgMTIwMCxcbn07XG50aGVtZS5icmVha3BvaW50ID0ge1xuXHR0YWJsZXRQb3J0cmFpdE1pbjogICh0aGVtZS5icmVha3BvaW50TnVtZXJpYy5tb2JpbGUgKyAxKSArICdweCcsXG5cdHRhYmxldExhbmRzY2FwZU1pbjogKHRoZW1lLmJyZWFrcG9pbnROdW1lcmljLnRhYmxldFBvcnRyYWl0ICsgMSkgKyAncHgnLFxuXHRkZXNrdG9wTWluOiAgICAgICAgICh0aGVtZS5icmVha3BvaW50TnVtZXJpYy50YWJsZXRMYW5kc2NhcGUgKyAxKSArICdweCcsXG5cdGRlc2t0b3BMYXJnZU1pbjogICAgKHRoZW1lLmJyZWFrcG9pbnROdW1lcmljLmRlc2t0b3AgKyAxKSArICdweCcsXG5cblx0bW9iaWxlTWF4OiAgICAgICAgICAgdGhlbWUuYnJlYWtwb2ludE51bWVyaWMubW9iaWxlICsgJ3B4Jyxcblx0dGFibGV0UG9ydHJhaXRNYXg6ICAgdGhlbWUuYnJlYWtwb2ludE51bWVyaWMudGFibGV0UG9ydHJhaXQgKyAncHgnLFxuXHR0YWJsZXRMYW5kc2NhcGVNYXg6ICB0aGVtZS5icmVha3BvaW50TnVtZXJpYy50YWJsZXRMYW5kc2NhcGUgKyAncHgnLFxuXHRkZXNrdG9wTWF4OiAgICAgICAgICB0aGVtZS5icmVha3BvaW50TnVtZXJpYy5kZXNrdG9wICsgJ3B4Jyxcbn07XG5cbi8vIGNvbnRhaW5lclxuXG50aGVtZS5jb250YWluZXIgPSB7XG5cdGd1dHRlcjogMjAsXG5cdHNpemU6IHtcblx0XHRzbWFsbDogIDc1MCxcblx0XHRtZWRpdW06IDk3MCxcblx0XHRsYXJnZTogMTE3MCxcblx0fSxcbn07XG5cbi8vIGNvbG9yXG5cbnRoZW1lLmNvbG9yID0ge1xuXHRib2R5OiAgICAgICAgICAgICAgICAnI2ZhZmFmYScsXG5cdGxpbms6ICAgICAgICAgICAgICAgICcjMTM4NWU1Jyxcblx0bGlua0hvdmVyOiAgICAgICAgICAgbGlnaHRlbignIzEzODVlNScsIDEwKSxcblx0dGV4dDogICAgICAgICAgICAgICAgJyMxQTFBMUEnLFxuXG5cdC8vIGNvbnRleHR1YWxcblx0c3VjY2VzczogICAgICAgICAgICAgJyMzNGMyNDAnLFxuXHRjcmVhdGU6ICAgICAgICAgICAgICAnIzM0YzI0MCcsIC8vIGFsaWFzIGZvciBzdWNjZXNzXG5cdHByaW1hcnk6ICAgICAgICAgICAgICcjMTM4NWU1Jyxcblx0aW5mbzogICAgICAgICAgICAgICAgJyMxMzg1ZTUnLCAvLyBhbGlhcyBmb3IgcHJpbWFyeVxuXHR3YXJuaW5nOiAgICAgICAgICAgICAnI0ZBMycsXG5cdGRhbmdlcjogICAgICAgICAgICAgICcjZDY0MjQyJyxcblx0ZXJyb3I6ICAgICAgICAgICAgICAgJyNkNjQyNDInLCAvLyBhbGlhcyBmb3IgZGFuZ2VyXG5cblx0Ly8gbmV1dHJhbHNcblx0Z3JheTkwOiAgICAgICAgICAgICAgJyMxQTFBMUEnLFxuXHRncmF5ODA6ICAgICAgICAgICAgICAnIzMzMycsXG5cdGdyYXk3MDogICAgICAgICAgICAgICcjNEQ0RDREJyxcblx0Z3JheTYwOiAgICAgICAgICAgICAgJyM2NjYnLFxuXHRncmF5NTA6ICAgICAgICAgICAgICAnIzdGN0Y3RicsXG5cdGdyYXk0MDogICAgICAgICAgICAgICcjOTk5Jyxcblx0Z3JheTMwOiAgICAgICAgICAgICAgJyNCM0IzQjMnLFxuXHRncmF5MjA6ICAgICAgICAgICAgICAnI0NDQycsXG5cdGdyYXkxNTogICAgICAgICAgICAgICcjRDlEOUQ5Jyxcblx0Z3JheTEwOiAgICAgICAgICAgICAgJyNFNUU1RTUnLFxuXHRncmF5MDU6ICAgICAgICAgICAgICAnI0YyRjJGMicsXG5cblx0Ly8gc29jaWFsXG5cdGZhY2Vib29rOiAgICAgICAgICAgICcjM0I1OTk4Jyxcblx0Z29vZ2xlOiAgICAgICAgICAgICAgJyNEQzRFNDEnLFxuXHRpbnN0YWdyYW06ICAgICAgICAgICAnIzNmNzI5YicsXG5cdHBpbnRlcmVzdDogICAgICAgICAgICcjYmQwODFjJyxcblx0dHVtYmxyOiAgICAgICAgICAgICAgJyMzNTQ2NWMnLFxuXHR0d2l0dGVyOiAgICAgICAgICAgICAnIzU1QUNFRScsXG5cdHlvdXR1YmU6ICAgICAgICAgICAgICcjY2QyMDFmJyxcblx0dmltZW86ICAgICAgICAgICAgICAgJyMxYWI3ZWEnLFxufTtcblxuLy8gYm9yZGVyIHJhZGlpXG5cbnRoZW1lLmJvcmRlclJhZGl1cyA9IHtcblx0c21hbGw6ICcwLjEyNXJlbScsXG5cdGRlZmF1bHQ6ICcwLjNyZW0nLFxuXHRsYXJnZTogJzAuNXJlbScsXG59O1xuXG4vLyBzcGFjaW5nXG5cbnRoZW1lLnNwYWNpbmcgPSB7XG5cdHhzbWFsbDogICAgICA1LFxuXHRzbWFsbDogICAgICAgMTAsXG5cdGRlZmF1bHQ6ICAgICAyMCxcblx0bGFyZ2U6ICAgICAgIDMwLFxuXHR4bGFyZ2U6ICAgICAgNDAsXG5cdHh4bGFyZ2U6ICAgICA2MCxcbn07XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gRUxFTUVOVEFMIFNQRUNJRklDXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLy8gYnV0dG9uXG5cbnRoZW1lLmJ1dHRvbiA9IHtcblx0Ym9yZGVyUmFkaXVzOiB0aGVtZS5ib3JkZXJSYWRpdXMuZGVmYXVsdCxcblx0Ym9yZGVyV2lkdGg6IDEsXG5cdGZvbnQ6IHtcblx0XHR3ZWlnaHQ6IDUwMCxcblx0fSxcblx0cGFkZGluZ0hvcml6b250YWw6ICcxZW0nLFxuXHRkZWZhdWx0OiB7XG5cdFx0YmdDb2xvcjogdGhlbWUuY29sb3IucHJpbWFyeSxcblx0XHRib3JkZXJDb2xvcjogYmxlbmQodGhlbWUuY29sb3IucHJpbWFyeSwgdGhlbWUuY29sb3IuYm9keSwgNjApLFxuXHRcdHRleHRDb2xvcjogdGhlbWUuY29sb3IucHJpbWFyeSxcblx0fSxcblx0cHJpbWFyeToge1xuXHRcdGJnQ29sb3I6IHRoZW1lLmNvbG9yLnByaW1hcnksXG5cdFx0Ym9yZGVyQ29sb3I6IGJsZW5kKHRoZW1lLmNvbG9yLnByaW1hcnksIHRoZW1lLmNvbG9yLmJvZHksIDYwKSxcblx0XHR0ZXh0Q29sb3I6IHRoZW1lLmNvbG9yLnByaW1hcnksXG5cdH0sXG5cdHN1Y2Nlc3M6IHtcblx0XHRiZ0NvbG9yOiB0aGVtZS5jb2xvci5zdWNjZXNzLFxuXHRcdGJvcmRlckNvbG9yOiBibGVuZCh0aGVtZS5jb2xvci5zdWNjZXNzLCB0aGVtZS5jb2xvci5ib2R5LCA2MCksXG5cdFx0dGV4dENvbG9yOiB0aGVtZS5jb2xvci5zdWNjZXNzLFxuXHR9LFxuXHR3YXJuaW5nOiB7XG5cdFx0YmdDb2xvcjogdGhlbWUuY29sb3Iud2FybmluZyxcblx0XHRib3JkZXJDb2xvcjogYmxlbmQodGhlbWUuY29sb3Iud2FybmluZywgdGhlbWUuY29sb3IuYm9keSwgNjApLFxuXHRcdHRleHRDb2xvcjogdGhlbWUuY29sb3Iud2FybmluZyxcblx0fSxcblx0ZGFuZ2VyOiB7XG5cdFx0YmdDb2xvcjogdGhlbWUuY29sb3IuZGFuZ2VyLFxuXHRcdGJvcmRlckNvbG9yOiBibGVuZCh0aGVtZS5jb2xvci5kYW5nZXIsIHRoZW1lLmNvbG9yLmJvZHksIDYwKSxcblx0XHR0ZXh0Q29sb3I6IHRoZW1lLmNvbG9yLmRhbmdlcixcblx0fSxcbn07XG5cbi8vIGJsYW5rIHN0YXRlXG5cbnRoZW1lLmJsYW5rc3RhdGUgPSB7XG5cdGJhY2tncm91bmQ6IGRhcmtlbih0aGVtZS5jb2xvci5ib2R5LCA0KSxcblx0Ym9yZGVyUmFkaXVzOiB0aGVtZS5ib3JkZXJSYWRpdXMuZGVmYXVsdCxcblx0Y29sb3I6IHRoZW1lLmNvbG9yLmdyYXk0MCxcblx0cGFkZGluZ0hvcml6b250YWw6ICcyZW0nLFxuXHRwYWRkaW5nVmVydGljYWw6ICc0ZW0nLFxufTtcblxuLy8gZm9udFxuXG50aGVtZS5mb250ID0ge1xuXHRmYW1pbHk6IHtcblx0XHRtb25vOiAnTWVubG8sIE1vbmFjbywgQ29uc29sYXMsIFwiQ291cmllciBOZXdcIiwgbW9ub3NwYWNlJyxcblx0XHRzYW5zU2VyaWY6ICdcIkhlbHZldGljYSBOZXVlXCIsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWYnLFxuXHRcdHNlcmlmOiAnR2VvcmdpYSwgVGltZXMgTmV3IFJvbWFuLCBUaW1lcywgc2VyaWYnLFxuXHR9LFxuXHRzaXplOiB7XG5cdFx0eHhzbWFsbDogJzAuNjVyZW0nLFxuXHRcdHhzbWFsbDogJzAuNzVyZW0nLFxuXHRcdHNtYWxsOiAnMC44NXJlbScsXG5cdFx0ZGVmYXVsdDogJzFyZW0nLFxuXHRcdG1lZGl1bTogJzEuMnJlbScsXG5cdFx0bGFyZ2U6ICcxLjZyZW0nLFxuXHRcdHhsYXJnZTogJzIuNHJlbScsXG5cdFx0eHhsYXJnZTogJzMuMnJlbScsXG5cdH0sXG59O1xuXG4vLyBmb3JtXG5cbnRoZW1lLmZvcm0gPSB7XG5cdGxhYmVsOiB7XG5cdFx0Y29sb3I6IHRoZW1lLmNvbG9yLmdyYXk1MCxcblx0XHRmb250U2l6ZTogJzFyZW0nLFxuXHRcdGZvbnRXZWlnaHQ6ICdub3JtYWwnLFxuXHRcdHdpZHRoOiAxODAsXG5cdH0sXG5cdG5vdGU6IHtcblx0XHRjb2xvcjogdGhlbWUuY29sb3IuZ3JheTQwLFxuXHRcdGZvbnRTaXplOiAnMC45ZW0nLFxuXHR9LFxufTtcblxuLy8gY29tcG9uZW50XG5cbnRoZW1lLmNvbXBvbmVudCA9IHtcblx0bGluZUhlaWdodDogJzIuM2VtJyxcblx0aGVpZ2h0OiAnMi40ZW0nLFxuXHRwYWRkaW5nOiAnMWVtJyxcbn07XG5cbi8vIGlucHV0XG5cbnRoZW1lLmlucHV0ID0ge1xuXHRiYWNrZ3JvdW5kOiB7XG5cdFx0ZGVmYXVsdDogJ3doaXRlJyxcblx0XHRkaXNhYmxlZDogJyNmYWZhZmEnLFxuXHRcdG5vZWRpdDogZGFya2VuKHRoZW1lLmNvbG9yLmJvZHksIDIpLFxuXHR9LFxuXHRwbGFjZWhvbGRlckNvbG9yOiAnI2FhYScsXG5cdGxpbmVIZWlnaHQ6IHRoZW1lLmNvbXBvbmVudC5saW5lSGVpZ2h0LFxuXHRoZWlnaHQ6IHRoZW1lLmNvbXBvbmVudC5oZWlnaHQsXG5cdGJvcmRlcjoge1xuXHRcdGNvbG9yOiB7XG5cdFx0XHRkZWZhdWx0OiAnI2NjYycsXG5cdFx0XHRmb2N1czogdGhlbWUuY29sb3IuaW5mbyxcblx0XHRcdGhvdmVyOiAnI2JiYicsXG5cdFx0XHRub2VkaXQ6IGRhcmtlbih0aGVtZS5jb2xvci5ib2R5LCA4KSxcblx0XHR9LFxuXHRcdHJhZGl1czogdGhlbWUuYm9yZGVyUmFkaXVzLmRlZmF1bHQsXG5cdFx0d2lkdGg6IDEsXG5cdH0sXG5cdGJveFNoYWRvdzogJ2luc2V0IDAgMXB4IDFweCByZ2JhKDAsIDAsIDAsIDAuMDc1KScsXG5cdGJveFNoYWRvd0ZvY3VzOiBgaW5zZXQgMCAxcHggMXB4IHJnYmEoMCwgMCwgMCwgMC4wNzUpLCAwIDAgMCAzcHggJHtmYWRlKHRoZW1lLmNvbG9yLmluZm8sIDEwKX1gLFxuXHRwYWRkaW5nSG9yaXpvbnRhbDogJy43NWVtJyxcbn07XG5cbi8vIHNlbGVjdFxuXG50aGVtZS5zZWxlY3QgPSB7XG5cdGJveFNoYWRvdzogJzAgMXB4IDFweCByZ2JhKDAsIDAsIDAsIDAuMDc1KScsXG59O1xuXG4vLyBhbGVydFxuXG50aGVtZS5hbGVydCA9IHtcblx0cGFkZGluZzogJzAuNzVlbSAgMWVtJyxcblx0bWFyZ2luOiAnMCAwIDFlbScsXG5cdGJvcmRlcldpZHRoOiAxLFxuXHRib3JkZXJSYWRpdXM6IHRoZW1lLmJvcmRlclJhZGl1cy5kZWZhdWx0LFxuXG5cdGNvbG9yOiB7XG5cdFx0ZGFuZ2VyOiB7XG5cdFx0XHRiYWNrZ3JvdW5kOiBmYWRlKHRoZW1lLmNvbG9yLmRhbmdlciwgMTApLFxuXHRcdFx0Ym9yZGVyOiBmYWRlKHRoZW1lLmNvbG9yLmRhbmdlciwgMTApLFxuXHRcdFx0dGV4dDogdGhlbWUuY29sb3IuZGFuZ2VyLFxuXHRcdH0sXG5cdFx0aW5mbzoge1xuXHRcdFx0YmFja2dyb3VuZDogZmFkZSh0aGVtZS5jb2xvci5wcmltYXJ5LCAxMCksXG5cdFx0XHRib3JkZXI6IGZhZGUodGhlbWUuY29sb3IucHJpbWFyeSwgMTApLFxuXHRcdFx0dGV4dDogdGhlbWUuY29sb3IucHJpbWFyeSxcblx0XHR9LFxuXHRcdHN1Y2Nlc3M6IHtcblx0XHRcdGJhY2tncm91bmQ6IGZhZGUodGhlbWUuY29sb3Iuc3VjY2VzcywgMTApLFxuXHRcdFx0Ym9yZGVyOiBmYWRlKHRoZW1lLmNvbG9yLnN1Y2Nlc3MsIDEwKSxcblx0XHRcdHRleHQ6IHRoZW1lLmNvbG9yLnN1Y2Nlc3MsXG5cdFx0fSxcblx0XHR3YXJuaW5nOiB7XG5cdFx0XHRiYWNrZ3JvdW5kOiBmYWRlKHRoZW1lLmNvbG9yLndhcm5pbmcsIDEwKSxcblx0XHRcdGJvcmRlcjogZmFkZSh0aGVtZS5jb2xvci53YXJuaW5nLCAxMCksXG5cdFx0XHR0ZXh0OiB0aGVtZS5jb2xvci53YXJuaW5nLFxuXHRcdH0sXG5cdH0sXG59O1xuXG4vLyBnbHlwaFxuXG50aGVtZS5nbHlwaCA9IHtcblx0Y29sb3I6IHtcblx0XHRkYW5nZXI6IHRoZW1lLmNvbG9yLmRhbmdlcixcblx0XHRpbmhlcml0OiAnaW5oZXJpdCcsXG5cdFx0aW52ZXJ0ZWQ6ICd3aGl0ZScsXG5cdFx0cHJpbWFyeTogdGhlbWUuY29sb3IucHJpbWFyeSxcblx0XHRzdWNjZXNzOiB0aGVtZS5jb2xvci5zdWNjZXNzLFxuXHRcdHdhcm5pbmc6IHRoZW1lLmNvbG9yLndhcm5pbmcsXG5cdH0sXG5cdHNpemU6IHtcblx0XHRzbWFsbDogMTYsXG5cdFx0bWVkaXVtOiAzMixcblx0XHRsYXJnZTogNjQsXG5cdH0sXG59O1xuXG4vLyBtb2RhbFxuXG50aGVtZS5tb2RhbCA9IHtcblx0YmFja2dyb3VuZDogJ3JnYmEoMCwgMCwgMCwgMC44KScsXG5cdHpJbmRleDogMTAwLFxuXHRwYWRkaW5nOiB7XG5cdFx0ZGlhbG9nOiB7XG5cdFx0XHRob3Jpem9udGFsOiAnMWVtJyxcblx0XHRcdHZlcnRpY2FsOiAwLFxuXHRcdH0sXG5cdFx0Ym9keToge1xuXHRcdFx0aG9yaXpvbnRhbDogMCxcblx0XHRcdHZlcnRpY2FsOiAnMWVtJyxcblx0XHR9LFxuXHRcdGZvb3Rlcjoge1xuXHRcdFx0aG9yaXpvbnRhbDogMCxcblx0XHRcdHZlcnRpY2FsOiAnMWVtJyxcblx0XHR9LFxuXHRcdGhlYWRlcjoge1xuXHRcdFx0aG9yaXpvbnRhbDogMCxcblx0XHRcdHZlcnRpY2FsOiAnMC42ZW0nLFxuXHRcdH0sXG5cdH0sXG59O1xuXG4vLyBwYWdpbmF0aW9uXG5cbnRoZW1lLnBhZ2luYXRpb24gPSB7XG5cdGNvbG9yOiB0aGVtZS5jb2xvci5ncmF5NjAsXG5cblx0aG92ZXI6IHtcblx0XHRiYWNrZ3JvdW5kOiAnd2hpdGUnLFxuXHRcdGJvcmRlcjogJ3JnYmEoMCwgMCwgMCwgMC4xKScsXG5cdFx0Y29sb3I6IHRoZW1lLmNvbG9yLmdyYXk2MCxcblx0fSxcblx0c2VsZWN0ZWQ6IHtcblx0XHRiYWNrZ3JvdW5kOiAncmdiYSgwLCAwLCAwLCAwLjA1KScsXG5cdFx0Ym9yZGVyOiAndHJhbnNwYXJlbnQnLFxuXHRcdGNvbG9yOiB0aGVtZS5jb2xvci5ncmF5NjAsXG5cdH0sXG5cdGRpc2FibGVkOiB7XG5cdFx0YmFja2dyb3VuZDogJ3RyYW5zcGFyZW50Jyxcblx0XHRjb2xvcjogdGhlbWUuY29sb3IuZ3JheTQwLFxuXHR9LFxufTtcblxuLy8gc3Bpbm5lclxuXG50aGVtZS5zcGlubmVyID0ge1xuXHRjb2xvcjoge1xuXHRcdGRhbmdlcjogdGhlbWUuY29sb3IuZGFuZ2VyLFxuXHRcdGRlZmF1bHQ6IHRoZW1lLmNvbG9yLmdyYXk0MCxcblx0XHRpbnZlcnRlZDogJ3doaXRlJyxcblx0XHRwcmltYXJ5OiB0aGVtZS5jb2xvci5wcmltYXJ5LFxuXHRcdHN1Y2Nlc3M6IHRoZW1lLmNvbG9yLnN1Y2Nlc3MsXG5cdFx0d2FybmluZzogdGhlbWUuY29sb3Iud2FybmluZyxcblx0fSxcblx0c2l6ZToge1xuXHRcdHNtYWxsOlx0NCxcblx0XHRtZWRpdW06XHQ4LFxuXHRcdGxhcmdlOlx0MTYsXG5cdH0sXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHRoZW1lO1xuIiwiLyoqXG4gKiBIZWxwZXIgbWV0aG9kIHRvIGhhbmRsZSBMaXN0IG9wZXJhdGlvbnMsIGUuZy4gY3JlYXRpbmcgaXRlbXMsIGRlbGV0aW5nIGl0ZW1zLFxuICogZ2V0dGluZyBpbmZvcm1hdGlvbiBhYm91dCB0aG9zZSBsaXN0cywgZXRjLlxuICovXG5cbmNvbnN0IGxpc3RUb0FycmF5ID0gcmVxdWlyZSgnbGlzdC10by1hcnJheScpO1xuY29uc3QgcXMgPSByZXF1aXJlKCdxcycpO1xuY29uc3QgeGhyID0gcmVxdWlyZSgneGhyJyk7XG5jb25zdCBhc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG4vLyBGaWx0ZXJzIGZvciB0cnV0aHkgZWxlbWVudHMgaW4gYW4gYXJyYXlcbmNvbnN0IHRydXRoeSA9IChpKSA9PiBpO1xuXG4vKipcbiAqIEdldCB0aGUgY29sdW1ucyBvZiBhIGxpc3QsIHN0cnVjdHVyZWQgYnkgZmllbGRzIGFuZCBoZWFkaW5nc1xuICpcbiAqIEBwYXJhbSAge09iamVjdH0gbGlzdCBUaGUgbGlzdCB3ZSB3YW50IHRoZSBjb2x1bW5zIG9mXG4gKlxuICogQHJldHVybiB7QXJyYXl9ICAgICAgIFRoZSBjb2x1bW5zXG4gKi9cbmZ1bmN0aW9uIGdldENvbHVtbnMgKGxpc3QpIHtcblx0cmV0dXJuIGxpc3QudWlFbGVtZW50cy5tYXAoKGNvbCkgPT4ge1xuXHRcdGlmIChjb2wudHlwZSA9PT0gJ2hlYWRpbmcnKSB7XG5cdFx0XHRyZXR1cm4geyB0eXBlOiAnaGVhZGluZycsIGNvbnRlbnQ6IGNvbC5jb250ZW50IH07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBmaWVsZCA9IGxpc3QuZmllbGRzW2NvbC5maWVsZF07XG5cdFx0XHRyZXR1cm4gZmllbGQgPyB7IHR5cGU6ICdmaWVsZCcsIGZpZWxkOiBmaWVsZCwgdGl0bGU6IGZpZWxkLmxhYmVsLCBwYXRoOiBmaWVsZC5wYXRoIH0gOiBudWxsO1xuXHRcdH1cblx0fSkuZmlsdGVyKHRydXRoeSk7XG59XG5cbi8qKlxuICogTWFrZSBhbiBhcnJheSBvZiBmaWx0ZXJzIGFuIG9iamVjdCBrZXllZCBieSB0aGUgZmlsdGVyaW5nIHBhdGhcbiAqXG4gKiBAcGFyYW0gIHtBcnJheX0gZmlsdGVyQXJyYXkgVGhlIGFycmF5IG9mIGZpbHRlcnNcbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgICAgICAgVGhlIGNvcnJlY3RlZCBmaWx0ZXJzLCBrZXllZCBieSBwYXRoXG4gKi9cbmZ1bmN0aW9uIGdldEZpbHRlcnMgKGZpbHRlckFycmF5KSB7XG5cdHZhciBmaWx0ZXJzID0ge307XG5cdGZpbHRlckFycmF5LmZvckVhY2goKGZpbHRlcikgPT4ge1xuXHRcdGZpbHRlcnNbZmlsdGVyLmZpZWxkLnBhdGhdID0gZmlsdGVyLnZhbHVlO1xuXHR9KTtcblx0cmV0dXJuIGZpbHRlcnM7XG59O1xuXG4vKipcbiAqIEdldCB0aGUgc29ydGluZyBzdHJpbmcgZm9yIHRoZSBVUklcbiAqXG4gKiBAcGFyYW0gIHtBcnJheX0gc29ydC5wYXRocyBUaGUgcGF0aHMgd2Ugd2FudCB0byBzb3J0XG4gKlxuICogQHJldHVybiB7U3RyaW5nfSAgICAgICAgICAgQWxsIHRoZSBzb3J0aW5nIHF1ZXJpZXMgd2Ugd2FudCBhcyBhIHN0cmluZ1xuICovXG5mdW5jdGlvbiBnZXRTb3J0U3RyaW5nIChzb3J0KSB7XG5cdHJldHVybiBzb3J0LnBhdGhzLm1hcChpID0+IHtcblx0XHQvLyBJZiB3ZSB3YW50IHRvIHNvcnQgaW52ZXJ0ZWQsIHdlIHByZWZpeCBhIFwiLVwiIGJlZm9yZSB0aGUgc29ydCBwYXRoXG5cdFx0cmV0dXJuIGkuaW52ZXJ0ID8gJy0nICsgaS5wYXRoIDogaS5wYXRoO1xuXHR9KS5maWx0ZXIodHJ1dGh5KS5qb2luKCcsJyk7XG59O1xuXG4vKipcbiAqIEJ1aWxkIGEgcXVlcnkgc3RyaW5nIGZyb20gYSBidW5jaCBvZiBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIGJ1aWxkUXVlcnlTdHJpbmcgKG9wdGlvbnMpIHtcblx0Y29uc3QgcXVlcnkgPSB7fTtcblx0aWYgKG9wdGlvbnMuc2VhcmNoKSBxdWVyeS5zZWFyY2ggPSBvcHRpb25zLnNlYXJjaDtcblx0aWYgKG9wdGlvbnMuZmlsdGVycy5sZW5ndGgpIHF1ZXJ5LmZpbHRlcnMgPSBKU09OLnN0cmluZ2lmeShnZXRGaWx0ZXJzKG9wdGlvbnMuZmlsdGVycykpO1xuXHRpZiAob3B0aW9ucy5jb2x1bW5zKSBxdWVyeS5maWVsZHMgPSBvcHRpb25zLmNvbHVtbnMubWFwKGkgPT4gaS5wYXRoKS5qb2luKCcsJyk7XG5cdGlmIChvcHRpb25zLnBhZ2UgJiYgb3B0aW9ucy5wYWdlLnNpemUpIHF1ZXJ5LmxpbWl0ID0gb3B0aW9ucy5wYWdlLnNpemU7XG5cdGlmIChvcHRpb25zLnBhZ2UgJiYgb3B0aW9ucy5wYWdlLmluZGV4ID4gMSkgcXVlcnkuc2tpcCA9IChvcHRpb25zLnBhZ2UuaW5kZXggLSAxKSAqIG9wdGlvbnMucGFnZS5zaXplO1xuXHRpZiAob3B0aW9ucy5zb3J0KSBxdWVyeS5zb3J0ID0gZ2V0U29ydFN0cmluZyhvcHRpb25zLnNvcnQpO1xuXHRxdWVyeS5leHBhbmRSZWxhdGlvbnNoaXBGaWVsZHMgPSB0cnVlO1xuXHRyZXR1cm4gJz8nICsgcXMuc3RyaW5naWZ5KHF1ZXJ5KTtcbn07XG5cbi8qKlxuICogVGhlIG1haW4gbGlzdCBoZWxwZXIgY2xhc3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICovXG5jb25zdCBMaXN0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcblx0Ly8gVE9ETyB0aGVzZSBvcHRpb25zIGFyZSBwb3NzaWJseSB1bnVzZWRcblx0YXNzaWduKHRoaXMsIG9wdGlvbnMpO1xuXHR0aGlzLmNvbHVtbnMgPSBnZXRDb2x1bW5zKHRoaXMpO1xuXHR0aGlzLmV4cGFuZGVkRGVmYXVsdENvbHVtbnMgPSB0aGlzLmV4cGFuZENvbHVtbnModGhpcy5kZWZhdWx0Q29sdW1ucyk7XG5cdHRoaXMuZGVmYXVsdENvbHVtblBhdGhzID0gdGhpcy5leHBhbmRlZERlZmF1bHRDb2x1bW5zLm1hcChpID0+IGkucGF0aCkuam9pbignLCcpO1xufTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaXRlbSB2aWEgdGhlIEFQSVxuICpcbiAqIEBwYXJhbSAge0Zvcm1EYXRhfSBmb3JtRGF0YSBUaGUgc3VibWl0dGVkIGZvcm0gZGF0YVxuICogQHBhcmFtICB7RnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciB0aGUgQVBJIGNhbGxcbiAqL1xuTGlzdC5wcm90b3R5cGUuY3JlYXRlSXRlbSA9IGZ1bmN0aW9uIChmb3JtRGF0YSwgY2FsbGJhY2spIHtcblx0eGhyKHtcblx0XHR1cmw6IGAke0tleXN0b25lLmFkbWluUGF0aH0vYXBpLyR7dGhpcy5wYXRofS9jcmVhdGVgLFxuXHRcdHJlc3BvbnNlVHlwZTogJ2pzb24nLFxuXHRcdG1ldGhvZDogJ1BPU1QnLFxuXHRcdGhlYWRlcnM6IGFzc2lnbih7fSwgS2V5c3RvbmUuY3NyZi5oZWFkZXIpLFxuXHRcdGJvZHk6IGZvcm1EYXRhLFxuXHR9LCAoZXJyLCByZXNwLCBkYXRhKSA9PiB7XG5cdFx0aWYgKGVycikgY2FsbGJhY2soZXJyKTtcblx0XHRpZiAocmVzcC5zdGF0dXNDb2RlID09PSAyMDApIHtcblx0XHRcdGNhbGxiYWNrKG51bGwsIGRhdGEpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBOT1RFOiB4aHIgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgd2l0aCBhbiBFcnJvciBpZlxuXHRcdFx0Ly8gIHRoZXJlIGlzIGFuIGVycm9yIGluIHRoZSBicm93c2VyIHRoYXQgcHJldmVudHNcblx0XHRcdC8vICBzZW5kaW5nIHRoZSByZXF1ZXN0LiBBIEhUVFAgNTAwIHJlc3BvbnNlIGlzIG5vdFxuXHRcdFx0Ly8gIGdvaW5nIHRvIGNhdXNlIGFuIGVycm9yIHRvIGJlIHJldHVybmVkLlxuXHRcdFx0Y2FsbGJhY2soZGF0YSwgbnVsbCk7XG5cdFx0fVxuXHR9KTtcbn07XG5cbi8qKlxuICogVXBkYXRlIGEgc3BlY2lmaWMgaXRlbVxuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gICBpZCAgICAgICBUaGUgaWQgb2YgdGhlIGl0ZW0gd2Ugd2FudCB0byB1cGRhdGVcbiAqIEBwYXJhbSAge0Zvcm1EYXRhfSBmb3JtRGF0YSBUaGUgc3VibWl0dGVkIGZvcm0gZGF0YVxuICogQHBhcmFtICB7RnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciB0aGUgQVBJIGNhbGxcbiAqL1xuTGlzdC5wcm90b3R5cGUudXBkYXRlSXRlbSA9IGZ1bmN0aW9uIChpZCwgZm9ybURhdGEsIGNhbGxiYWNrKSB7XG5cdHhocih7XG5cdFx0dXJsOiBgJHtLZXlzdG9uZS5hZG1pblBhdGh9L2FwaS8ke3RoaXMucGF0aH0vJHtpZH1gLFxuXHRcdHJlc3BvbnNlVHlwZTogJ2pzb24nLFxuXHRcdG1ldGhvZDogJ1BPU1QnLFxuXHRcdGhlYWRlcnM6IGFzc2lnbih7fSwgS2V5c3RvbmUuY3NyZi5oZWFkZXIpLFxuXHRcdGJvZHk6IGZvcm1EYXRhLFxuXHR9LCAoZXJyLCByZXNwLCBkYXRhKSA9PiB7XG5cdFx0aWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGVycik7XG5cdFx0aWYgKHJlc3Auc3RhdHVzQ29kZSA9PT0gMjAwKSB7XG5cdFx0XHRjYWxsYmFjayhudWxsLCBkYXRhKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y2FsbGJhY2soZGF0YSk7XG5cdFx0fVxuXHR9KTtcbn07XG5cbkxpc3QucHJvdG90eXBlLmV4cGFuZENvbHVtbnMgPSBmdW5jdGlvbiAoaW5wdXQpIHtcblx0bGV0IG5hbWVJbmNsdWRlZCA9IGZhbHNlO1xuXHRjb25zdCBjb2xzID0gbGlzdFRvQXJyYXkoaW5wdXQpLm1hcChpID0+IHtcblx0XHRjb25zdCBzcGxpdCA9IGkuc3BsaXQoJ3wnKTtcblx0XHRsZXQgcGF0aCA9IHNwbGl0WzBdO1xuXHRcdGxldCB3aWR0aCA9IHNwbGl0WzFdO1xuXHRcdGlmIChwYXRoID09PSAnX19uYW1lX18nKSB7XG5cdFx0XHRwYXRoID0gdGhpcy5uYW1lUGF0aDtcblx0XHR9XG5cdFx0Y29uc3QgZmllbGQgPSB0aGlzLmZpZWxkc1twYXRoXTtcblx0XHRpZiAoIWZpZWxkKSB7XG5cdFx0XHQvLyBUT0RPOiBTdXBwb3J0IGFyYml0YXJ5IGRvY3VtZW50IHBhdGhzXG5cdFx0XHRpZiAoIXRoaXMuaGlkZGVuKSB7XG5cdFx0XHRcdGlmIChwYXRoID09PSB0aGlzLm5hbWVQYXRoKSB7XG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKGBMaXN0ICR7dGhpcy5rZXl9IGRpZCBub3Qgc3BlY2lmeSBhbnkgZGVmYXVsdCBjb2x1bW5zIG9yIGEgbmFtZSBmaWVsZGApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnNvbGUud2FybihgTGlzdCAke3RoaXMua2V5fSBzcGVjaWZpZWQgYW4gaW52YWxpZCBkZWZhdWx0IGNvbHVtbjogJHtwYXRofWApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGlmIChwYXRoID09PSB0aGlzLm5hbWVQYXRoKSB7XG5cdFx0XHRuYW1lSW5jbHVkZWQgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4ge1xuXHRcdFx0ZmllbGQ6IGZpZWxkLFxuXHRcdFx0bGFiZWw6IGZpZWxkLmxhYmVsLFxuXHRcdFx0cGF0aDogZmllbGQucGF0aCxcblx0XHRcdHR5cGU6IGZpZWxkLnR5cGUsXG5cdFx0XHR3aWR0aDogd2lkdGgsXG5cdFx0fTtcblx0fSkuZmlsdGVyKHRydXRoeSk7XG5cdGlmICghbmFtZUluY2x1ZGVkKSB7XG5cdFx0Y29scy51bnNoaWZ0KHtcblx0XHRcdHR5cGU6ICdpZCcsXG5cdFx0XHRsYWJlbDogJ0lEJyxcblx0XHRcdHBhdGg6ICdpZCcsXG5cdFx0fSk7XG5cdH1cblx0cmV0dXJuIGNvbHM7XG59O1xuXG5MaXN0LnByb3RvdHlwZS5leHBhbmRTb3J0ID0gZnVuY3Rpb24gKGlucHV0KSB7XG5cdGNvbnN0IHNvcnQgPSB7XG5cdFx0cmF3SW5wdXQ6IGlucHV0IHx8IHRoaXMuZGVmYXVsdFNvcnQsXG5cdFx0aXNEZWZhdWx0U29ydDogZmFsc2UsXG5cdH07XG5cdHNvcnQuaW5wdXQgPSBzb3J0LnJhd0lucHV0O1xuXHRpZiAoc29ydC5pbnB1dCA9PT0gJ19fZGVmYXVsdF9fJykge1xuXHRcdHNvcnQuaXNEZWZhdWx0U29ydCA9IHRydWU7XG5cdFx0c29ydC5pbnB1dCA9IHRoaXMuc29ydGFibGUgPyAnc29ydE9yZGVyJyA6IHRoaXMubmFtZVBhdGg7XG5cdH1cblx0c29ydC5wYXRocyA9IGxpc3RUb0FycmF5KHNvcnQuaW5wdXQpLm1hcChwYXRoID0+IHtcblx0XHRsZXQgaW52ZXJ0ID0gZmFsc2U7XG5cdFx0aWYgKHBhdGguY2hhckF0KDApID09PSAnLScpIHtcblx0XHRcdGludmVydCA9IHRydWU7XG5cdFx0XHRwYXRoID0gcGF0aC5zdWJzdHIoMSk7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKHBhdGguY2hhckF0KDApID09PSAnKycpIHtcblx0XHRcdHBhdGggPSBwYXRoLnN1YnN0cigxKTtcblx0XHR9XG5cdFx0Y29uc3QgZmllbGQgPSB0aGlzLmZpZWxkc1twYXRoXTtcblx0XHRpZiAoIWZpZWxkKSB7XG5cdFx0XHQvLyBUT0RPOiBTdXBwb3J0IGFyYml0YXJ5IGRvY3VtZW50IHBhdGhzXG5cdFx0XHRjb25zb2xlLndhcm4oJ0ludmFsaWQgU29ydCBzcGVjaWZpZWQ6JywgcGF0aCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHJldHVybiB7XG5cdFx0XHRmaWVsZDogZmllbGQsXG5cdFx0XHR0eXBlOiBmaWVsZC50eXBlLFxuXHRcdFx0bGFiZWw6IGZpZWxkLmxhYmVsLFxuXHRcdFx0cGF0aDogZmllbGQucGF0aCxcblx0XHRcdGludmVydDogaW52ZXJ0LFxuXHRcdH07XG5cdH0pLmZpbHRlcih0cnV0aHkpO1xuXHRyZXR1cm4gc29ydDtcbn07XG5cbi8qKlxuICogTG9hZCBhIHNwZWNpZmljIGl0ZW0gdmlhIHRoZSBBUElcbiAqXG4gKiBAcGFyYW0gIHtTdHJpbmd9ICAgaXRlbUlkICAgVGhlIGlkIG9mIHRoZSBpdGVtIHdlIHdhbnQgdG8gbG9hZFxuICogQHBhcmFtICB7T2JqZWN0fSAgIG9wdGlvbnNcbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBjYWxsYmFja1xuICovXG5MaXN0LnByb3RvdHlwZS5sb2FkSXRlbSA9IGZ1bmN0aW9uIChpdGVtSWQsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyICYmIHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0Y2FsbGJhY2sgPSBvcHRpb25zO1xuXHRcdG9wdGlvbnMgPSBudWxsO1xuXHR9XG5cdGxldCB1cmwgPSBLZXlzdG9uZS5hZG1pblBhdGggKyAnL2FwaS8nICsgdGhpcy5wYXRoICsgJy8nICsgaXRlbUlkO1xuXHRjb25zdCBxdWVyeSA9IHFzLnN0cmluZ2lmeShvcHRpb25zKTtcblx0aWYgKHF1ZXJ5Lmxlbmd0aCkgdXJsICs9ICc/JyArIHF1ZXJ5O1xuXHR4aHIoe1xuXHRcdHVybDogdXJsLFxuXHRcdHJlc3BvbnNlVHlwZTogJ2pzb24nLFxuXHR9LCAoZXJyLCByZXNwLCBkYXRhKSA9PiB7XG5cdFx0aWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGVycik7XG5cdFx0Ly8gUGFzcyB0aGUgZGF0YSBhcyByZXN1bHQgb3IgZXJyb3IsIGRlcGVuZGluZyBvbiB0aGUgc3RhdHVzQ29kZVxuXHRcdGlmIChyZXNwLnN0YXR1c0NvZGUgPT09IDIwMCkge1xuXHRcdFx0Y2FsbGJhY2sobnVsbCwgZGF0YSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNhbGxiYWNrKGRhdGEpO1xuXHRcdH1cblx0fSk7XG59O1xuXG4vKipcbiAqIExvYWQgYWxsIGl0ZW1zIG9mIGEgbGlzdCwgb3B0aW9uYWxseSBwYXNzaW5nIG9iamVjdHMgdG8gYnVpbGQgYSBxdWVyeSBzdHJpbmdcbiAqIGZvciBzb3J0aW5nIG9yIHNlYXJjaGluZ1xuICpcbiAqIEBwYXJhbSAge09iamVjdH0gICBvcHRpb25zXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqL1xuTGlzdC5wcm90b3R5cGUubG9hZEl0ZW1zID0gZnVuY3Rpb24gKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG5cdGNvbnN0IHVybCA9IEtleXN0b25lLmFkbWluUGF0aCArICcvYXBpLycgKyB0aGlzLnBhdGggKyBidWlsZFF1ZXJ5U3RyaW5nKG9wdGlvbnMpO1xuXHR4aHIoe1xuXHRcdHVybDogdXJsLFxuXHRcdHJlc3BvbnNlVHlwZTogJ2pzb24nLFxuXHR9LCAoZXJyLCByZXNwLCBkYXRhKSA9PiB7XG5cdFx0aWYgKGVycikgY2FsbGJhY2soZXJyKTtcblx0XHQvLyBQYXNzIHRoZSBkYXRhIGFzIHJlc3VsdCBvciBlcnJvciwgZGVwZW5kaW5nIG9uIHRoZSBzdGF0dXNDb2RlXG5cdFx0aWYgKHJlc3Auc3RhdHVzQ29kZSA9PT0gMjAwKSB7XG5cdFx0XHRjYWxsYmFjayhudWxsLCBkYXRhKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y2FsbGJhY2soZGF0YSk7XG5cdFx0fVxuXHR9KTtcbn07XG5cbi8qKlxuICogQ29uc3RydWN0cyBhIGRvd25sb2FkIFVSTCB0byBkb3dubG9hZCBhIGxpc3Qgd2l0aCB0aGUgY3VycmVudCBzb3J0aW5nLCBmaWx0ZXJpbmcsXG4gKiBzZWxlY3Rpb24gYW5kIHNlYXJjaGluZyBvcHRpb25zXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSAgICAgICAgIFRoZSBkb3dubG9hZCBVUkxcbiAqL1xuTGlzdC5wcm90b3R5cGUuZ2V0RG93bmxvYWRVUkwgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuXHRjb25zdCB1cmwgPSBLZXlzdG9uZS5hZG1pblBhdGggKyAnL2FwaS8nICsgdGhpcy5wYXRoO1xuXHRjb25zdCBwYXJ0cyA9IFtdO1xuXHRpZiAob3B0aW9ucy5mb3JtYXQgIT09ICdqc29uJykge1xuXHRcdG9wdGlvbnMuZm9ybWF0ID0gJ2Nzdic7XG5cdH1cblx0cGFydHMucHVzaChvcHRpb25zLnNlYXJjaCA/ICdzZWFyY2g9JyArIG9wdGlvbnMuc2VhcmNoIDogJycpO1xuXHRwYXJ0cy5wdXNoKG9wdGlvbnMuZmlsdGVycy5sZW5ndGggPyAnZmlsdGVycz0nICsgSlNPTi5zdHJpbmdpZnkoZ2V0RmlsdGVycyhvcHRpb25zLmZpbHRlcnMpKSA6ICcnKTtcblx0cGFydHMucHVzaChvcHRpb25zLmNvbHVtbnMgPyAnc2VsZWN0PScgKyBvcHRpb25zLmNvbHVtbnMubWFwKGkgPT4gaS5wYXRoKS5qb2luKCcsJykgOiAnJyk7XG5cdHBhcnRzLnB1c2gob3B0aW9ucy5zb3J0ID8gJ3NvcnQ9JyArIGdldFNvcnRTdHJpbmcob3B0aW9ucy5zb3J0KSA6ICcnKTtcblx0cGFydHMucHVzaCgnZXhwYW5kUmVsYXRpb25zaGlwRmllbGRzPXRydWUnKTtcblx0cmV0dXJuIHVybCArICcvZXhwb3J0LicgKyBvcHRpb25zLmZvcm1hdCArICc/JyArIHBhcnRzLmZpbHRlcih0cnV0aHkpLmpvaW4oJyYnKTtcbn07XG5cbi8qKlxuICogRGVsZXRlIGEgc3BlY2lmaWMgaXRlbSB2aWEgdGhlIEFQSVxuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gICBpdGVtSWQgICBUaGUgaWQgb2YgdGhlIGl0ZW0gd2Ugd2FudCB0byBkZWxldGVcbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSBjYWxsYmFja1xuICovXG5MaXN0LnByb3RvdHlwZS5kZWxldGVJdGVtID0gZnVuY3Rpb24gKGl0ZW1JZCwgY2FsbGJhY2spIHtcblx0dGhpcy5kZWxldGVJdGVtcyhbaXRlbUlkXSwgY2FsbGJhY2spO1xufTtcblxuLyoqXG4gKiBEZWxldGUgbXVsdGlwbGUgaXRlbXMgYXQgb25jZSB2aWEgdGhlIEFQSVxuICpcbiAqIEBwYXJhbSAge0FycmF5fSAgIGl0ZW1JZHMgIEFuIGFycmF5IG9mIGlkcyBvZiBpdGVtcyB3ZSB3YW50IHRvIGRlbGV0ZVxuICogQHBhcmFtICB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKi9cbkxpc3QucHJvdG90eXBlLmRlbGV0ZUl0ZW1zID0gZnVuY3Rpb24gKGl0ZW1JZHMsIGNhbGxiYWNrKSB7XG5cdGNvbnN0IHVybCA9IEtleXN0b25lLmFkbWluUGF0aCArICcvYXBpLycgKyB0aGlzLnBhdGggKyAnL2RlbGV0ZSc7XG5cdHhocih7XG5cdFx0dXJsOiB1cmwsXG5cdFx0bWV0aG9kOiAnUE9TVCcsXG5cdFx0aGVhZGVyczogYXNzaWduKHt9LCBLZXlzdG9uZS5jc3JmLmhlYWRlciksXG5cdFx0anNvbjoge1xuXHRcdFx0aWRzOiBpdGVtSWRzLFxuXHRcdH0sXG5cdH0sIChlcnIsIHJlc3AsIGJvZHkpID0+IHtcblx0XHRpZiAoZXJyKSByZXR1cm4gY2FsbGJhY2soZXJyKTtcblx0XHQvLyBQYXNzIHRoZSBib2R5IGFzIHJlc3VsdCBvciBlcnJvciwgZGVwZW5kaW5nIG9uIHRoZSBzdGF0dXNDb2RlXG5cdFx0aWYgKHJlc3Auc3RhdHVzQ29kZSA9PT0gMjAwKSB7XG5cdFx0XHRjYWxsYmFjayhudWxsLCBib2R5KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y2FsbGJhY2soYm9keSk7XG5cdFx0fVxuXHR9KTtcbn07XG5cbkxpc3QucHJvdG90eXBlLnJlb3JkZXJJdGVtcyA9IGZ1bmN0aW9uIChpdGVtLCBvbGRTb3J0T3JkZXIsIG5ld1NvcnRPcmRlciwgcGFnZU9wdGlvbnMsIGNhbGxiYWNrKSB7XG5cdGNvbnN0IHVybCA9IEtleXN0b25lLmFkbWluUGF0aCArICcvYXBpLycgKyB0aGlzLnBhdGggKyAnLycgKyBpdGVtLmlkICsgJy9zb3J0T3JkZXIvJyArIG9sZFNvcnRPcmRlciArICcvJyArIG5ld1NvcnRPcmRlciArICcvJyArIGJ1aWxkUXVlcnlTdHJpbmcocGFnZU9wdGlvbnMpO1xuXHR4aHIoe1xuXHRcdHVybDogdXJsLFxuXHRcdG1ldGhvZDogJ1BPU1QnLFxuXHRcdGhlYWRlcnM6IGFzc2lnbih7fSwgS2V5c3RvbmUuY3NyZi5oZWFkZXIpLFxuXHR9LCAoZXJyLCByZXNwLCBib2R5KSA9PiB7XG5cdFx0aWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGVycik7XG5cdFx0dHJ5IHtcblx0XHRcdGJvZHkgPSBKU09OLnBhcnNlKGJvZHkpO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdGNvbnNvbGUubG9nKCdFcnJvciBwYXJzaW5nIHJlc3VsdHMganNvbjonLCBlLCBib2R5KTtcblx0XHRcdHJldHVybiBjYWxsYmFjayhlKTtcblx0XHR9XG5cdFx0Ly8gUGFzcyB0aGUgYm9keSBhcyByZXN1bHQgb3IgZXJyb3IsIGRlcGVuZGluZyBvbiB0aGUgc3RhdHVzQ29kZVxuXHRcdGlmIChyZXNwLnN0YXR1c0NvZGUgPT09IDIwMCkge1xuXHRcdFx0Y2FsbGJhY2sobnVsbCwgYm9keSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNhbGxiYWNrKGJvZHkpO1xuXHRcdH1cblx0fSk7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gTGlzdDtcbiIsIi8qKlxuXHRWYWxpZGF0ZSBIZXhcblx0PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cblx0QHBhcmFtIHtTdHJpbmd9IGhleFxuXG5cdDEuIHJlbW92ZSBoYXNoIGlmIHByZXNlbnRcblx0Mi4gY29udmVydCBmcm9tIDMgdG8gNiBkaWdpdCBjb2xvciBjb2RlICYgZW5zdXJlIHZhbGlkIGhleFxuKi9cblxuZnVuY3Rpb24gdmFsaWRhdGVIZXggKGNvbG9yKSB7XG5cdGNvbnN0IGhleCA9IGNvbG9yLnJlcGxhY2UoJyMnLCAnJyk7XG5cblx0aWYgKGhleC5sZW5ndGggPT09IDMpIHtcblx0XHRyZXR1cm4gaGV4WzBdICsgaGV4WzBdICsgaGV4WzFdICsgaGV4WzFdICsgaGV4WzJdICsgaGV4WzJdO1xuXHR9XG5cdGlmIChoZXgubGVuZ3RoICE9PSA2KSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGNvbG9yIHZhbHVlIHByb3ZpZGVkOiBcIiR7Y29sb3J9XCJgKTtcblx0fVxuXG5cdHJldHVybiBoZXg7XG59O1xuXG4vKipcblx0RmFkZSBDb2xvclxuXHQ9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuXHRUYWtlcyBhIGhleGlkZWNpbWFsIGNvbG9yLCBjb252ZXJ0cyBpdCB0byBSR0IgYW5kIGFwcGxpZXMgYW4gYWxwaGEgdmFsdWUuXG5cblx0QHBhcmFtIHtTdHJpbmd9IGNvbG9yXG5cdEBwYXJhbSB7TnVtYmVyfSBvcGFjaXR5ICgwLTEwMClcblxuXHQxLiBjb252ZXJ0IGhleCB0byBSR0Jcblx0Mi4gY29tYmluZSBhbmQgYWRkIGFscGhhIGNoYW5uZWxcbiovXG5cbmZ1bmN0aW9uIGZhZGUgKGNvbG9yLCBvcGFjaXR5ID0gMTAwKSB7XG5cdGNvbnN0IGRlY2ltYWxGcmFjdGlvbiA9IG9wYWNpdHkgLyAxMDA7XG5cdGNvbnN0IGhleCA9IHZhbGlkYXRlSGV4KGNvbG9yKTtcblxuXHQvLyAxLlxuXHRjb25zdCByID0gcGFyc2VJbnQoaGV4LnN1YnN0cmluZygwLCAyKSwgMTYpO1xuXHRjb25zdCBnID0gcGFyc2VJbnQoaGV4LnN1YnN0cmluZygyLCA0KSwgMTYpO1xuXHRjb25zdCBiID0gcGFyc2VJbnQoaGV4LnN1YnN0cmluZyg0LCA2KSwgMTYpO1xuXG5cdC8vIDIuXG5cdGNvbnN0IHJlc3VsdCA9ICdyZ2JhKCdcblx0XHQrIHIgKyAnLCdcblx0XHQrIGcgKyAnLCdcblx0XHQrIGIgKyAnLCdcblx0XHQrIGRlY2ltYWxGcmFjdGlvblxuXHRcdCsgJyknO1xuXG5cdHJldHVybiByZXN1bHQ7XG59O1xuXG5cbi8qKlxuXHRTaGFkZSBDb2xvclxuXHQ9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuXHRUYWtlcyBhIGhleGlkZWNpbWFsIGNvbG9yLCBjb252ZXJ0cyBpdCB0byBSR0IgYW5kIGxpZ2h0ZW5zIG9yIGRhcmtlbnNcblxuXHRAcGFyYW0ge1N0cmluZ30gY29sb3Jcblx0QHBhcmFtIHtOdW1iZXJ9IG9wYWNpdHkgKDAtMTAwKVxuXG5cdDEuIGRvIGZhbmN5IFJHQiBiaXR3aXNlIG9wZXJhdGlvbnNcblx0Mi4gY29tYmluZSBiYWNrIGludG8gYSBoZXggdmFsdWVcbiovXG5cbmZ1bmN0aW9uIHNoYWRlIChjb2xvciwgcGVyY2VudCkge1xuXHRjb25zdCBkZWNpbWFsRnJhY3Rpb24gPSBwZXJjZW50IC8gMTAwO1xuXHRjb25zdCBoZXggPSB2YWxpZGF0ZUhleChjb2xvcik7XG5cblx0Ly8gMS5cblx0bGV0IGYgPSBwYXJzZUludChoZXgsIDE2KTtcblx0bGV0IHQgPSBkZWNpbWFsRnJhY3Rpb24gPCAwID8gMCA6IDI1NTtcblx0bGV0IHAgPSBkZWNpbWFsRnJhY3Rpb24gPCAwID8gZGVjaW1hbEZyYWN0aW9uICogLTEgOiBkZWNpbWFsRnJhY3Rpb247XG5cblx0Y29uc3QgUiA9IGYgPj4gMTY7XG5cdGNvbnN0IEcgPSBmID4+IDggJiAweDAwRkY7XG5cdGNvbnN0IEIgPSBmICYgMHgwMDAwRkY7XG5cblx0Ly8gMi5cblx0cmV0dXJuICcjJyArICgweDEwMDAwMDBcblx0XHQrIChNYXRoLnJvdW5kKCh0IC0gUikgKiBwKSArIFIpICogMHgxMDAwMFxuXHRcdCsgKE1hdGgucm91bmQoKHQgLSBHKSAqIHApICsgRykgKiAweDEwMFxuXHRcdCsgKE1hdGgucm91bmQoKHQgLSBCKSAqIHApICsgQikpLnRvU3RyaW5nKDE2KS5zbGljZSgxKTtcbn07XG5cbi8vIHNoYWRlIGhlbHBlcnNcbmNvbnN0IGxpZ2h0ZW4gPSBzaGFkZTtcbmZ1bmN0aW9uIGRhcmtlbiAoY29sb3IsIHBlcmNlbnQpIHtcblx0cmV0dXJuIHNoYWRlKGNvbG9yLCBwZXJjZW50ICogLTEpO1xufTtcblxuXG4vKipcblx0QmxlbmQgQ29sb3Jcblx0PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cblx0VGFrZXMgdHdvIGhleGlkZWNpbWFsIGNvbG9ycyBhbmQgYmxlbmQgdGhlbSB0b2dldGhlclxuXG5cdEBwYXJhbSB7U3RyaW5nfSBjb2xvcjFcblx0QHBhcmFtIHtTdHJpbmd9IGNvbG9yMlxuXHRAcGFyYW0ge051bWJlcn0gcGVyY2VudCAoMC0xMDApXG5cblx0MS4gZG8gZmFuY3kgUkdCIGJpdHdpc2Ugb3BlcmF0aW9uc1xuXHQyLiBjb21iaW5lIGJhY2sgaW50byBhIGhleCB2YWx1ZVxuKi9cblxuZnVuY3Rpb24gYmxlbmQgKGNvbG9yMSwgY29sb3IyLCBwZXJjZW50KSB7XG5cdGNvbnN0IGRlY2ltYWxGcmFjdGlvbiA9IHBlcmNlbnQgLyAxMDA7XG5cdGNvbnN0IGhleDEgPSB2YWxpZGF0ZUhleChjb2xvcjEpO1xuXHRjb25zdCBoZXgyID0gdmFsaWRhdGVIZXgoY29sb3IyKTtcblxuXHQvLyAxLlxuXHRjb25zdCBmID0gcGFyc2VJbnQoaGV4MSwgMTYpO1xuXHRjb25zdCB0ID0gcGFyc2VJbnQoaGV4MiwgMTYpO1xuXG5cdGNvbnN0IFIxID0gZiA+PiAxNjtcblx0Y29uc3QgRzEgPSBmID4+IDggJiAweDAwRkY7XG5cdGNvbnN0IEIxID0gZiAmIDB4MDAwMEZGO1xuXG5cdGNvbnN0IFIyID0gdCA+PiAxNjtcblx0Y29uc3QgRzIgPSB0ID4+IDggJiAweDAwRkY7XG5cdGNvbnN0IEIyID0gdCAmIDB4MDAwMEZGO1xuXG5cdC8vIDIuXG5cdHJldHVybiAnIycgKyAoMHgxMDAwMDAwXG5cdFx0KyAoTWF0aC5yb3VuZCgoUjIgLSBSMSkgKiBkZWNpbWFsRnJhY3Rpb24pICsgUjEpICogMHgxMDAwMFxuXHRcdCsgKE1hdGgucm91bmQoKEcyIC0gRzEpICogZGVjaW1hbEZyYWN0aW9uKSArIEcxKSAqIDB4MTAwXG5cdFx0KyAoTWF0aC5yb3VuZCgoQjIgLSBCMSkgKiBkZWNpbWFsRnJhY3Rpb24pICsgQjEpKS50b1N0cmluZygxNikuc2xpY2UoMSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRibGVuZCxcblx0ZGFya2VuLFxuXHRmYWRlLFxuXHRsaWdodGVuLFxufTtcbiIsIi8vID09PT09PT09PT09PT09PT09PT09PT1cbi8vIENvbmNhdGVuYXRlIENsYXNzbmFtZXNcbi8vID09PT09PT09PT09PT09PT09PT09PT1cbi8vXG4vLyBTdXBwb3J0IGNsYXNzTmFtZSBhcyBhbiBhcnJheTpcbi8vIGZvcmNlIGNsYXNzbmFtZSBwcm9wIGludG8gYW4gYXJyYXkgKHBvc3NpYmx5IG9mIGFycmF5cykgdGhlbiBmbGF0dGVuXG5cbi8qXG5cdC8vIFRvIHVzZSBzcHJlYWQgdGhlIG5ldyBhcnJheSBpbnRvIGdsYW1vcidzIGBjc3NgIGZ1bmN0aW9uXG5cblx0ZnVuY3Rpb24gQ29tcG9uZW50ICh7IGNsYXNzTmFtZSwgLi4ucHJvcHMgfSkge1xuXHRcdHByb3BzLmNsYXNzTmFtZSA9IGNzcyhcblx0XHRcdGNsYXNzZXMuY29tcG9uZW50LFxuXHRcdFx0Li4uY29uY2F0Q2xhc3NuYW1lcyhjbGFzc05hbWUpXG5cdFx0KTtcblxuXHRcdHJldHVybiA8Q29tcG9uZW50IHsuLi5wcm9wc30gLz47XG5cdH07XG4qL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbmNhdENsYXNzbmFtZXMgKGNsYXNzTmFtZSkge1xuXHRyZXR1cm4gW2NsYXNzTmFtZV0ucmVkdWNlKChhLCBiKSA9PiB7XG5cdFx0cmV0dXJuIGEuY29uY2F0KGIpO1xuXHR9LCBbXSk7XG59O1xuIiwiLyoqXG5cdExpbmVhciBHcmFkaWVudFxuXHQ9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuXHRTaG9ydC1oYW5kIGhlbHBlciBmb3IgYWRkaW5nIGEgbGluZWFyIGdyYWRpZW50IHRvIHlvdXIgY29tcG9uZW50LlxuXG5cdC0gQHBhcmFtIHtTdHJpbmd9IHNpZGVPckNvcm5lclxuXHQtIEBwYXJhbSB7U3RyaW5nfSB0b3Bcblx0LSBAcGFyYW0ge1N0cmluZ30gYm90dG9tXG5cdC0gQHBhcmFtIHtTdHJpbmd9IGJhc2UgKG9wdGlvbmFsKVxuXHQtIEByZXR1cm5zIHtPYmplY3R9IGNzcyBsaW5lYXIgZ3JhZGllbnQgZGVjbGFyYXRpb25cblxuXHRTcHJlYWQgdGhlIGRlY2xhcmF0aW9uIGludG8geW91ciBjb21wb25lbnQgY2xhc3M6XG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5cdG15Q29tcG9uZW50Q2xhc3M6IHtcblx0XHQuLi5saW5lYXJHcmFkaWVudChyZWQsIGJsdWUpLFxuXHR9XG4qL1xuXG5mdW5jdGlvbiBsaW5lYXJHcmFkaWVudCAoZGlyZWN0aW9uLCB0b3AsIGJvdHRvbSwgYmFzZSA9ICcnKSB7XG5cdHJldHVybiB7XG5cdFx0YmFja2dyb3VuZDogYGxpbmVhci1ncmFkaWVudCgke2RpcmVjdGlvbn0sICR7dG9wfSAwJSwgJHtib3R0b219IDEwMCUpICR7YmFzZX1gLFxuXHR9O1xufVxuXG4vLyBWZXJ0aWNhbCBHcmFkaWVudFxuZnVuY3Rpb24gZ3JhZGllbnRWZXJ0aWNhbCAodG9wLCBib3R0b20sIGJhc2UpIHtcblx0cmV0dXJuIGxpbmVhckdyYWRpZW50KCd0byBib3R0b20nLCB0b3AsIGJvdHRvbSwgYmFzZSk7XG59XG5cbi8vIEhvcml6b250YWwgR3JhZGllbnRcbmZ1bmN0aW9uIGdyYWRpZW50SG9yaXpvbnRhbCAodG9wLCBib3R0b20sIGJhc2UpIHtcblx0cmV0dXJuIGxpbmVhckdyYWRpZW50KCd0byByaWdodCcsIHRvcCwgYm90dG9tLCBiYXNlKTtcbn1cblxuLyoqXG5cdEJvcmRlciBSYWRpdXNcblx0PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cblx0U2hvcnQtaGFuZCBoZWxwZXIgZm9yIGJvcmRlciByYWRpaVxuKi9cblxuLy8gdG9wXG5mdW5jdGlvbiBib3JkZXJUb3BSYWRpdXMgKHJhZGl1cykge1xuXHRyZXR1cm4ge1xuXHRcdGJvcmRlclRvcExlZnRSYWRpdXM6IHJhZGl1cyxcblx0XHRib3JkZXJUb3BSaWdodFJhZGl1czogcmFkaXVzLFxuXHR9O1xufVxuXG4vLyByaWdodFxuZnVuY3Rpb24gYm9yZGVyUmlnaHRSYWRpdXMgKHJhZGl1cykge1xuXHRyZXR1cm4ge1xuXHRcdGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzOiByYWRpdXMsXG5cdFx0Ym9yZGVyVG9wUmlnaHRSYWRpdXM6IHJhZGl1cyxcblx0fTtcbn1cblxuLy8gYm90dG9tXG5mdW5jdGlvbiBib3JkZXJCb3R0b21SYWRpdXMgKHJhZGl1cykge1xuXHRyZXR1cm4ge1xuXHRcdGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6IHJhZGl1cyxcblx0XHRib3JkZXJCb3R0b21SaWdodFJhZGl1czogcmFkaXVzLFxuXHR9O1xufVxuXG4vLyBsZWZ0XG5mdW5jdGlvbiBib3JkZXJMZWZ0UmFkaXVzIChyYWRpdXMpIHtcblx0cmV0dXJuIHtcblx0XHRib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiByYWRpdXMsXG5cdFx0Ym9yZGVyVG9wTGVmdFJhZGl1czogcmFkaXVzLFxuXHR9O1xufVxuXG4vLyBSZXR1cm5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdGJvcmRlclRvcFJhZGl1cyxcblx0Ym9yZGVyUmlnaHRSYWRpdXMsXG5cdGJvcmRlckJvdHRvbVJhZGl1cyxcblx0Ym9yZGVyTGVmdFJhZGl1cyxcblxuXHRncmFkaWVudEhvcml6b250YWwsXG5cdGdyYWRpZW50VmVydGljYWwsXG59O1xuIiwiLyoqXG4gKiBFeHBvcnRzIGFuIG9iamVjdCBvZiBsaXN0cywga2V5ZWQgd2l0aCB0aGVpciBrZXkgaW5zdGVhZCBvZiB0aGVpciBuYW1lIGFuZFxuICogd3JhcHBlZCB3aXRoIHRoZSBMaXN0IGhlbHBlciAoLi9MaXN0LmpzKVxuICovXG5cbmltcG9ydCBMaXN0IGZyb20gJy4vTGlzdCc7XG5cbmV4cG9ydHMubGlzdHNCeUtleSA9IHt9O1xuZXhwb3J0cy5saXN0c0J5UGF0aCA9IHt9O1xuXG5mb3IgKGNvbnN0IGtleSBpbiBLZXlzdG9uZS5saXN0cykge1xuXHQvLyBHdWFyZCBmb3ItaW5zXG5cdGlmICh7fS5oYXNPd25Qcm9wZXJ0eS5jYWxsKEtleXN0b25lLmxpc3RzLCBrZXkpKSB7XG5cdFx0dmFyIGxpc3QgPSBuZXcgTGlzdChLZXlzdG9uZS5saXN0c1trZXldKTtcblx0XHRleHBvcnRzLmxpc3RzQnlLZXlba2V5XSA9IGxpc3Q7XG5cdFx0ZXhwb3J0cy5saXN0c0J5UGF0aFtsaXN0LnBhdGhdID0gbGlzdDtcblx0fVxufVxuIiwiaW1wb3J0IGFzc2lnbiBmcm9tICdvYmplY3QtYXNzaWduJztcbmltcG9ydCBibGFja2xpc3QgZnJvbSAnYmxhY2tsaXN0JztcbmltcG9ydCBpc0VxdWFsIGZyb20gJ2xvZGFzaC9pc0VxdWFsJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrRm9yUXVlcnlDaGFuZ2UgKG5leHRQcm9wcywgdGhpc1Byb3BzKSB7XG5cdGNvbnN0IHsgcXVlcnkgfSA9IG5leHRQcm9wcy5sb2NhdGlvbjtcblx0Y29uc3QgeyBjYWNoZWRRdWVyeSB9ID0gbmV4dFByb3BzLmFjdGl2ZTtcblxuXHRjb25zdCBwYXJzZWRRdWVyeSA9IE9iamVjdC5hc3NpZ24oXG5cdFx0e30sXG5cdFx0cXVlcnksXG5cdFx0eyBwYWdlOiBwYXJzZUludChxdWVyeS5wYWdlKSB9XG5cdCk7XG5cblx0aWYgKCFwYXJzZWRRdWVyeS5wYWdlKSBkZWxldGUgcGFyc2VkUXVlcnkucGFnZTtcblxuXHRjb25zdCBhdHRlbnVhdGVkUXVlcnkgPSBibGFja2xpc3QocGFyc2VkUXVlcnksICdzZWFyY2gnKTtcblx0Y29uc3QgYXR0ZW51YXRlZENhY2hlID0gYmxhY2tsaXN0KGNhY2hlZFF1ZXJ5LCAnc2VhcmNoJyk7XG5cblx0aWYgKG5leHRQcm9wcy5sb2NhdGlvbi5wYXRobmFtZSAhPT0gdGhpc1Byb3BzLmxvY2F0aW9uLnBhdGhuYW1lKSByZXR1cm4gdHJ1ZTtcblxuXHRpZiAoIWlzRXF1YWwoYXR0ZW51YXRlZFF1ZXJ5LCBhdHRlbnVhdGVkQ2FjaGUpKSByZXR1cm4gdHJ1ZTtcblxuXHRyZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpc2VWYWx1ZSAodmFsdWUsIGJlbmNobWFyaykge1xuXHRpZiAodmFsdWUgPT09IGJlbmNobWFyaykgcmV0dXJuIHZvaWQgMDtcblx0cmV0dXJuIHZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU29ydFF1ZXJ5UGFyYW1zIChyYXdJbnB1dCwgZGVmYXVsdFNvcnQpIHtcblx0cmV0dXJuIG5vcm1hbGlzZVZhbHVlKHJhd0lucHV0LCBkZWZhdWx0U29ydCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQYWdlUXVlcnlQYXJhbXMgKHBhZ2UsIGRlZmF1bHRWYWx1ZSkge1xuXHRyZXR1cm4gbm9ybWFsaXNlVmFsdWUocGFnZSwgZGVmYXVsdFZhbHVlKTtcbn1cblxuLyoqXG4gKiBVcGRhdGVzIHRoZSBxdWVyeSBwYXJhbWV0ZXJzIHdpdGggdGhlIG9uZXMgcGFzc2VkIGFzIHRoZSBmaXJzdCBhcmd1bWVudFxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gcGFyYW1zICAgICAgICAgVGhlIG5ldyBwYXJhbWV0ZXJzIHRvIGJlIGFkZGVkXG4gKiBAcGFyYW0gIHtPYmplY3R9IGxvY2F0aW9uICAgICAgIFRoZSBjdXJyZW50IGxvY2F0aW9uIG9iamVjdFxuICovXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlUXVlcnlQYXJhbXMgKHBhcmFtcywgbG9jYXRpb24pIHtcblx0aWYgKCFsb2NhdGlvbikgcmV0dXJuO1xuXHRjb25zdCBuZXdQYXJhbXMgPSBhc3NpZ24oe30sIGxvY2F0aW9uLnF1ZXJ5KTtcblx0Ly8gU3RyaW5naWZ5IG5lc3RlZCBvYmplY3RzIGluc2lkZSB0aGUgcGFyYW1ldGVyc1xuXHRPYmplY3Qua2V5cyhwYXJhbXMpLmZvckVhY2goaSA9PiB7XG5cdFx0aWYgKHBhcmFtc1tpXSkge1xuXHRcdFx0bmV3UGFyYW1zW2ldID0gcGFyYW1zW2ldO1xuXHRcdFx0aWYgKHR5cGVvZiBuZXdQYXJhbXNbaV0gPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdG5ld1BhcmFtc1tpXSA9IEpTT04uc3RyaW5naWZ5KG5ld1BhcmFtc1tpXSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRlbGV0ZSBuZXdQYXJhbXNbaV07XG5cdFx0fVxuXHR9KTtcblxuXHRyZXR1cm4gbmV3UGFyYW1zO1xufVxuXG4vKipcbiAqIFN0cmluZ2lmeSB0aGUgY29sdW1ucyBhcnJheSBmcm9tIHRoZSBzdGF0ZVxuICpcbiAqIEBwYXJhbSAge0FycmF5fSAgY29sdW1ucyAgICAgICAgICAgIFRoZSBjb2x1bW5zIGZyb20gdGhlIGFjdGl2ZSBzdGF0ZVxuICogQHBhcmFtICB7U3RyaW5nfSBkZWZhdWx0Q29sdW1uUGF0aHMgVGhlIGRlZmF1bHQgY29sdW1uIHBhdGhzIG9mIHRoZSBjdXJyZW50IGxpc3RcbiAqXG4gKiBAcmV0dXJuIHtTdHJpbmd9ICAgICAgICAgICAgICAgICAgICBUaGUgY29sdW1uIGFycmF5LCBzdHJpbmdpZmllZFxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5naWZ5Q29sdW1ucyAoY29sdW1ucywgZGVmYXVsdENvbHVtblBhdGhzKSB7XG5cdGlmICghY29sdW1ucykge1xuXHRcdHJldHVybjtcblx0fVxuXHQvLyBUdXJucyBbeyBwYXRoOiAnc29tZUNvbHVtbicgfSwgeyBwYXRoOiAnc29tZU90aGVyQ29sdW1uJyB9XVxuXHQvLyBpbnRvIFsnc29tZUNvbHVtbicsICdzb21lT3RoZXJDb2x1bW4nXVxuXHRsZXQgY29sdW1uU3RyaW5nID0gY29sdW1ucy5tYXAoKGNvbHVtbikgPT4gY29sdW1uLnBhdGgpO1xuXHQvLyBUdXJucyB0aGF0IGFycmF5IGludG8gJ3NvbWVDb2x1bW4sc29tZU90aGVyQ29sdW1uJ1xuXHRpZiAoQXJyYXkuaXNBcnJheShjb2x1bW5TdHJpbmcpKSBjb2x1bW5TdHJpbmcgPSBjb2x1bW5TdHJpbmcuam9pbignLCcpO1xuXHQvLyBJZiB0aGF0IGlzIHRoZSBzYW1lIGFzIHRoZSBkZWZhdWx0IGNvbHVtbnMsIGRvbid0IHNldCB0aGUgcXVlcnkgcGFyYW1cblx0aWYgKGNvbHVtblN0cmluZyA9PT0gZGVmYXVsdENvbHVtblBhdGhzKSBjb2x1bW5TdHJpbmcgPSB1bmRlZmluZWQ7XG5cdHJldHVybiBjb2x1bW5TdHJpbmc7XG59XG5cblxuLyoqXG4gKiBGbGF0dGVucyBmaWx0ZXJzIGZyb20gc3RhdGUgaW50byB0aGUgbWluaW11bSBuZWVkZWQgb2JqZWN0IHRvIGJlIHVzZWQgYXMgYSB1cmxcbiAqIHBhcmFtXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBmaWx0ZXJBcnJheSAgICAgICAgIFRoZSBhcnJheSBvZiBmaWx0ZXJzIGZyb20gc3RhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcmFtZXRpemVGaWx0ZXJzIChmaWx0ZXJBcnJheSkge1xuXHRpZiAoIWZpbHRlckFycmF5IHx8IGZpbHRlckFycmF5Lmxlbmd0aCA9PT0gMCkge1xuXHRcdHJldHVybjtcblx0fVxuXHRyZXR1cm4gZmlsdGVyQXJyYXkubWFwKChmaWx0ZXIpID0+IHtcblx0XHRyZXR1cm4gT2JqZWN0LmFzc2lnbih7XG5cdFx0XHRwYXRoOiBmaWx0ZXIuZmllbGQucGF0aCxcblx0XHR9LCBmaWx0ZXIudmFsdWUpO1xuXHR9KTtcbn1cbiIsIi8qKlxuICogQSBmZXcgaGVscGVyIG1ldGhvZHMgZm9yIHN0cmluZ3NcbiAqL1xuXG5pbXBvcnQgaW5mbGVjdCBmcm9tICdpJztcbmltcG9ydCB7IGNvbXBhY3QsIHNpemUgfSBmcm9tICdsb2Rhc2gnO1xuXG4vKipcbiAqIERpc3BsYXlzIHRoZSBzaW5ndWxhciBvciBwbHVyYWwgb2YgYSBzdHJpbmcgYmFzZWQgb24gYSBudW1iZXJcbiAqIG9yIG51bWJlciBvZiBpdGVtcyBpbiBhbiBhcnJheS5cbiAqXG4gKiBJZiBhcml0eSBpcyAxLCByZXR1cm5zIHRoZSBwbHVyYWwgZm9ybSBvZiB0aGUgd29yZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gY291bnRcbiAqIEBwYXJhbSB7U3RyaW5nfSBzaW5ndWxhciBzdHJpbmdcbiAqIEBwYXJhbSB7U3RyaW5nfSBwbHVyYWwgc3RyaW5nXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHNpbmd1bGFyIG9yIHBsdXJhbCwgKiBpcyByZXBsYWNlZCB3aXRoIGNvdW50XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMucGx1cmFsID0gZnVuY3Rpb24gKGNvdW50LCBzbiwgcGwpIHtcblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcblx0XHRyZXR1cm4gaW5mbGVjdC5wbHVyYWxpemUoY291bnQpO1xuXHR9XG5cdGlmICh0eXBlb2Ygc24gIT09ICdzdHJpbmcnKSBzbiA9ICcnO1xuXHRpZiAoIXBsKSB7XG5cdFx0cGwgPSBpbmZsZWN0LnBsdXJhbGl6ZShzbik7XG5cdH1cblx0aWYgKHR5cGVvZiBjb3VudCA9PT0gJ3N0cmluZycpIHtcblx0XHRjb3VudCA9IE51bWJlcihjb3VudCk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIGNvdW50ICE9PSAnbnVtYmVyJykge1xuXHRcdGNvdW50ID0gc2l6ZShjb3VudCk7XG5cdH1cblx0cmV0dXJuIChjb3VudCA9PT0gMSA/IHNuIDogcGwpLnJlcGxhY2UoJyonLCBjb3VudCk7XG59O1xuXG5cbi8qKlxuICogQ29udmVydHMgdGhlIGZpcnN0IGxldHRlciBpbiBhIHN0cmluZyB0byB1cHBlcmNhc2VcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtTdHJpbmd9IFN0clxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLnVwY2FzZSA9IGZ1bmN0aW9uIChzdHIpIHtcblx0aWYgKHN0ciAmJiBzdHIudG9TdHJpbmcpIHN0ciA9IHN0ci50b1N0cmluZygpO1xuXHRpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycgfHwgIXN0ci5sZW5ndGgpIHJldHVybiAnJztcblx0cmV0dXJuIChzdHIuc3Vic3RyKDAsIDEpLnRvVXBwZXJDYXNlKCkgKyBzdHIuc3Vic3RyKDEpKTtcbn07XG5cblxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgZmlyc3QgbGV0dGVyIGluIGEgc3RyaW5nIHRvIGxvd2VyY2FzZVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBTdHJcbiAqIEByZXR1cm4ge1N0cmluZ30gc3RyXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuZG93bmNhc2UgPSBmdW5jdGlvbiAoc3RyKSB7XG5cdGlmIChzdHIgJiYgc3RyLnRvU3RyaW5nKSBzdHIgPSBzdHIudG9TdHJpbmcoKTtcblx0aWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnIHx8ICFzdHIubGVuZ3RoKSByZXR1cm4gJyc7XG5cdHJldHVybiAoc3RyLnN1YnN0cigwLCAxKS50b0xvd2VyQ2FzZSgpICsgc3RyLnN1YnN0cigxKSk7XG59O1xuXG5cbi8qKlxuICogQ29udmVydHMgYSBzdHJpbmcgdG8gdGl0bGUgY2FzZVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge1N0cmluZ30gVGl0bGUgQ2FzZSBmb3JtIG9mIHN0clxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLnRpdGxlY2FzZSA9IGZ1bmN0aW9uIChzdHIpIHtcblx0aWYgKHN0ciAmJiBzdHIudG9TdHJpbmcpIHN0ciA9IHN0ci50b1N0cmluZygpO1xuXHRpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycgfHwgIXN0ci5sZW5ndGgpIHJldHVybiAnJztcblx0c3RyID0gc3RyLnJlcGxhY2UoLyhbYS16XSkoW0EtWl0pL2csICckMSAkMicpO1xuXHR2YXIgcGFydHMgPSBzdHIuc3BsaXQoL1xcc3xffFxcLS8pO1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0aWYgKHBhcnRzW2ldICYmICEvXltBLVowLTldKyQvLnRlc3QocGFydHNbaV0pKSB7XG5cdFx0XHRwYXJ0c1tpXSA9IGV4cG9ydHMudXBjYXNlKHBhcnRzW2ldKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGNvbXBhY3QocGFydHMpLmpvaW4oJyAnKTtcbn07XG5cblxuLyoqXG4gKiBDb252ZXJ0cyBhIHN0cmluZyB0byBjYW1lbCBjYXNlXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHBhcmFtIHtCb29sZWFufSBsb3dlcmNhc2VGaXJzdFdvcmRcbiAqIEByZXR1cm4ge1N0cmluZ30gY2FtZWwtY2FzZSBmb3JtIG9mIHN0clxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmNhbWVsY2FzZSA9IGZ1bmN0aW9uIChzdHIsIGxjKSB7XG5cdHJldHVybiBpbmZsZWN0LmNhbWVsaXplKHN0ciwgIShsYykpO1xufTtcbiIsInZhciBFeE1hdGNoID0gcmVxdWlyZSgnZXhwcmVzc2lvbi1tYXRjaCcpOyAvLyBNYXRjaGVzIG9iamVjdHMgd2l0aCBleHByZXNzaW9uc1xuXG4vKipcbiAqIENoZWNrcyBpZiBzb21ldGhpbmcgaXMgYW4gb2JqZWN0XG4gKlxuICogQHBhcmFtICB7QW55fSBhcmcgICBUaGUgc29tZXRoaW5nIHdlIHdhbnQgdG8gY2hlY2sgdGhlIHR5cGUgb2ZcbiAqIEByZXR1cm4ge0Jvb2xlYW59IElmIGFyZyBpcyBhbiBvYmplY3Qgb3Igbm90XG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0IChhcmcpIHtcblx0cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmcpID09PSAnW29iamVjdCBPYmplY3RdJztcbn07XG5cbi8qKlxuICogRXZhbHVhdGVzIHRoZSB2aXNpYmlsaXR5IG9mIGEgZmllbGQgYmFzZWQgb24gaXRzIGRlcGVuZGVuY2llcyBhbmQgdGhlaXIgdmFsdWVzXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fEFueX0gZGVwZW5kc09uIFRoZSBkZXBlbmRzT24gdmFyaWFibGUgd2UgZ2V0IGZyb20gdGhlIGZpZWxkXG4gKiBAcGFyYW0gIHtPYmplY3R9XHRcdHZhbHVlcyAgICBUaGUgdmFsdWVzIGN1cnJlbnRseSBpbiB0aGUgZmllbGRzXG4gKiBAcmV0dXJuIHtCb29sZWFufVx0XHRcdCAgSWYgdGhlIGN1cnJlbnQgZmllbGQgc2hvdWxkIGJlIGRpc3BsYXllZCBiYXNlZFxuICogICAgICAgICAgICAgICAgICAgICAgICAgIFx0ICBvbiBpdCdzIGRlcGVuZGVuY2llcyBhbmQgdGhlaXIgdmFsdWVzXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZXZhbERlcGVuZHNPbiAoZGVwZW5kc09uLCB2YWx1ZXMpIHtcblx0aWYgKCFpc09iamVjdChkZXBlbmRzT24pIHx8ICFPYmplY3Qua2V5cyhkZXBlbmRzT24pLmxlbmd0aCkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0Ly8gQ2hlY2tzIGlmIHRoZSBjdXJyZW50IGZpZWxkIHNob3VsZCBiZSBkaXNwbGF5ZWQsIGJhc2VkIG9uIHRoZSB2YWx1ZXMgb2Zcblx0Ly8gb3RoZXIgZmllbGRzIGFuZCB0aGUgZGVwZW5kc09uIGNvbmZpZ3VyYXRpb24gb2YgdGhpcyBmaWVsZFxuXHR2YXIgTWF0Y2ggPSBuZXcgRXhNYXRjaChkZXBlbmRzT24sIHZhbHVlcywgZmFsc2UpO1xuXHRyZXR1cm4gTWF0Y2gubWF0Y2goKTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxucmVxdWlyZShcIi4vbm9Db25mbGljdFwiKTtcblxudmFyIF9nbG9iYWwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vZ2xvYmFsXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuaWYgKF9nbG9iYWwuZGVmYXVsdC5fYmFiZWxQb2x5ZmlsbCAmJiB0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb25zb2xlLndhcm4pIHtcbiAgY29uc29sZS53YXJuKFwiQGJhYmVsL3BvbHlmaWxsIGlzIGxvYWRlZCBtb3JlIHRoYW4gb25jZSBvbiB0aGlzIHBhZ2UuIFRoaXMgaXMgcHJvYmFibHkgbm90IGRlc2lyYWJsZS9pbnRlbmRlZCBcIiArIFwiYW5kIG1heSBoYXZlIGNvbnNlcXVlbmNlcyBpZiBkaWZmZXJlbnQgdmVyc2lvbnMgb2YgdGhlIHBvbHlmaWxscyBhcmUgYXBwbGllZCBzZXF1ZW50aWFsbHkuIFwiICsgXCJJZiB5b3UgZG8gbmVlZCB0byBsb2FkIHRoZSBwb2x5ZmlsbCBtb3JlIHRoYW4gb25jZSwgdXNlIEBiYWJlbC9wb2x5ZmlsbC9ub0NvbmZsaWN0IFwiICsgXCJpbnN0ZWFkIHRvIGJ5cGFzcyB0aGUgd2FybmluZy5cIik7XG59XG5cbl9nbG9iYWwuZGVmYXVsdC5fYmFiZWxQb2x5ZmlsbCA9IHRydWU7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2VzNlwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vYXJyYXkvaW5jbHVkZXNcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL2FycmF5L2ZsYXQtbWFwXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9zdHJpbmcvcGFkLXN0YXJ0XCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9zdHJpbmcvcGFkLWVuZFwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vc3RyaW5nL3RyaW0tc3RhcnRcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3N0cmluZy90cmltLWVuZFwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vc3ltYm9sL2FzeW5jLWl0ZXJhdG9yXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yc1wiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vb2JqZWN0L3ZhbHVlc1wiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vb2JqZWN0L2VudHJpZXNcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3Byb21pc2UvZmluYWxseVwiKTtcblxucmVxdWlyZShcImNvcmUtanMvd2ViXCIpO1xuXG5yZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lXCIpOyIsInJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN5bWJvbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmtleXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC5pcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmJpbmQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmhhcy1pbnN0YW5jZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucGFyc2UtaW50Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIudG8tZml4ZWQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5lcHNpbG9uJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtaW50ZWdlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLmlzLW5hbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5taW4tc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguYWNvc2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguYXNpbmgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguYXRhbmgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguY2JydCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5jbHozMicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5jb3NoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmZyb3VuZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5oeXBvdCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5pbXVsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzEwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGguc2lnbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYubWF0aC5zaW5oJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXRoLnRhbmgnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm1hdGgudHJ1bmMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5yYXcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy50cmltJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuZW5kcy13aXRoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmJpZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udGNvbG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcubGluaycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3VwJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5kYXRlLm5vdycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuZGF0ZS50by1qc29uJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmRhdGUudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5kYXRlLnRvLXByaW1pdGl2ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmZyb20nKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5Lm9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5qb2luJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5zbGljZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuc29ydCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5Lm1hcCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5zb21lJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZmlsbCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZmluZCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLmV4ZWMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5wcm9taXNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5tYXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnNldCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYud2Vhay1tYXAnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LndlYWstc2V0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC5hcnJheS1idWZmZXInKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmRhdGEtdmlldycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWNsYW1wZWQtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmludDE2LWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmludDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi50eXBlZC51aW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0MzItYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuZW51bWVyYXRlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldCcpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5oYXMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5vd24ta2V5cycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9fY29yZScpO1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuYXJyYXkuZmxhdC1tYXAnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLkFycmF5LmZsYXRNYXA7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuQXJyYXkuaW5jbHVkZXM7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmVudHJpZXM7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnM7XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QudmFsdWVzO1xuIiwiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYucHJvbWlzZScpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5Qcm9taXNlWydmaW5hbGx5J107XG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLWVuZCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuU3RyaW5nLnBhZEVuZDtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlN0cmluZy5wYWRTdGFydDtcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN0cmluZy50cmltLXJpZ2h0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5TdHJpbmcudHJpbVJpZ2h0O1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuU3RyaW5nLnRyaW1MZWZ0O1xuIiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX3drcy1leHQnKS5mKCdhc3luY0l0ZXJhdG9yJyk7XG4iLCJyZXF1aXJlKCcuLi9tb2R1bGVzL2VzNy5nbG9iYWwnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9fY29yZScpLmdsb2JhbDtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjYuNScgfTtcbmlmICh0eXBlb2YgX19lID09ICdudW1iZXInKSBfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GO1xuICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcbiAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XG4gIHZhciBJU19QUk9UTyA9IHR5cGUgJiAkZXhwb3J0LlA7XG4gIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcbiAgdmFyIElTX1dSQVAgPSB0eXBlICYgJGV4cG9ydC5XO1xuICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pO1xuICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV07XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdO1xuICB2YXIga2V5LCBvd24sIG91dDtcbiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICBpZiAob3duICYmIGhhcyhleHBvcnRzLCBrZXkpKSBjb250aW51ZTtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IG93biA/IHRhcmdldFtrZXldIDogc291cmNlW2tleV07XG4gICAgLy8gcHJldmVudCBnbG9iYWwgcG9sbHV0aW9uIGZvciBuYW1lc3BhY2VzXG4gICAgZXhwb3J0c1trZXldID0gSVNfR0xPQkFMICYmIHR5cGVvZiB0YXJnZXRba2V5XSAhPSAnZnVuY3Rpb24nID8gc291cmNlW2tleV1cbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIDogSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpXG4gICAgLy8gd3JhcCBnbG9iYWwgY29uc3RydWN0b3JzIGZvciBwcmV2ZW50IGNoYW5nZSB0aGVtIGluIGxpYnJhcnlcbiAgICA6IElTX1dSQVAgJiYgdGFyZ2V0W2tleV0gPT0gb3V0ID8gKGZ1bmN0aW9uIChDKSB7XG4gICAgICB2YXIgRiA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgQykge1xuICAgICAgICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IEMoKTtcbiAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBDKGEpO1xuICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IEMoYSwgYik7XG4gICAgICAgICAgfSByZXR1cm4gbmV3IEMoYSwgYiwgYyk7XG4gICAgICAgIH0gcmV0dXJuIEMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgICBGW1BST1RPVFlQRV0gPSBDW1BST1RPVFlQRV07XG4gICAgICByZXR1cm4gRjtcbiAgICAvLyBtYWtlIHN0YXRpYyB2ZXJzaW9ucyBmb3IgcHJvdG90eXBlIG1ldGhvZHNcbiAgICB9KShvdXQpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXhwb3J0IHByb3RvIG1ldGhvZHMgdG8gY29yZS4lQ09OU1RSVUNUT1IlLm1ldGhvZHMuJU5BTUUlXG4gICAgaWYgKElTX1BST1RPKSB7XG4gICAgICAoZXhwb3J0cy52aXJ0dWFsIHx8IChleHBvcnRzLnZpcnR1YWwgPSB7fSkpW2tleV0gPSBvdXQ7XG4gICAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUucHJvdG90eXBlLiVOQU1FJVxuICAgICAgaWYgKHR5cGUgJiAkZXhwb3J0LlIgJiYgZXhwUHJvdG8gJiYgIWV4cFByb3RvW2tleV0pIGhpZGUoZXhwUHJvdG8sIGtleSwgb3V0KTtcbiAgICB9XG4gIH1cbn07XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1nbG9iYWxcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7IGdsb2JhbDogcmVxdWlyZSgnLi9fZ2xvYmFsJykgfSk7XG4iLCJ2YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgbXNnKSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ251bWJlcicgJiYgY29mKGl0KSAhPSAnTnVtYmVyJykgdGhyb3cgVHlwZUVycm9yKG1zZyk7XG4gIHJldHVybiAraXQ7XG59O1xuIiwiLy8gMjIuMS4zLjMxIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxudmFyIFVOU0NPUEFCTEVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbmlmIChBcnJheVByb3RvW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHJlcXVpcmUoJy4vX2hpZGUnKShBcnJheVByb3RvLCBVTlNDT1BBQkxFUywge30pO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4gLy8gYEFkdmFuY2VTdHJpbmdJbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hZHZhbmNlc3RyaW5naW5kZXhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFMsIGluZGV4LCB1bmljb2RlKSB7XG4gIHJldHVybiBpbmRleCArICh1bmljb2RlID8gYXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSwgZm9yYmlkZGVuRmllbGQpIHtcbiAgaWYgKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKG5hbWUgKyAnOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwiLy8gMjIuMS4zLjMgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgZW5kID0gdGhpcy5sZW5ndGgpXG4ndXNlIHN0cmljdCc7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gW10uY29weVdpdGhpbiB8fCBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldCAvKiA9IDAgKi8sIHN0YXJ0IC8qID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgdG8gPSB0b0Fic29sdXRlSW5kZXgodGFyZ2V0LCBsZW4pO1xuICB2YXIgZnJvbSA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuKTtcbiAgdmFyIGVuZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgY291bnQgPSBNYXRoLm1pbigoZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pKSAtIGZyb20sIGxlbiAtIHRvKTtcbiAgdmFyIGluYyA9IDE7XG4gIGlmIChmcm9tIDwgdG8gJiYgdG8gPCBmcm9tICsgY291bnQpIHtcbiAgICBpbmMgPSAtMTtcbiAgICBmcm9tICs9IGNvdW50IC0gMTtcbiAgICB0byArPSBjb3VudCAtIDE7XG4gIH1cbiAgd2hpbGUgKGNvdW50LS0gPiAwKSB7XG4gICAgaWYgKGZyb20gaW4gTykgT1t0b10gPSBPW2Zyb21dO1xuICAgIGVsc2UgZGVsZXRlIE9bdG9dO1xuICAgIHRvICs9IGluYztcbiAgICBmcm9tICs9IGluYztcbiAgfSByZXR1cm4gTztcbn07XG4iLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0ID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgbGVuZ3RoKTtcbiAgdmFyIGVuZCA9IGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICB2YXIgZW5kUG9zID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpO1xuICB3aGlsZSAoZW5kUG9zID4gaW5kZXgpIE9baW5kZXgrK10gPSB2YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pIHtcbiAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG4iLCIvLyAwIC0+IEFycmF5I2ZvckVhY2hcbi8vIDEgLT4gQXJyYXkjbWFwXG4vLyAyIC0+IEFycmF5I2ZpbHRlclxuLy8gMyAtPiBBcnJheSNzb21lXG4vLyA0IC0+IEFycmF5I2V2ZXJ5XG4vLyA1IC0+IEFycmF5I2ZpbmRcbi8vIDYgLT4gQXJyYXkjZmluZEluZGV4XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYXNjID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRZUEUsICRjcmVhdGUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBOT19IT0xFUyA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYO1xuICB2YXIgY3JlYXRlID0gJGNyZWF0ZSB8fCBhc2M7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgdGhhdCwgMyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKHNlbGYubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciByZXN1bHQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWwsIHJlcztcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbCA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzID0gZih2YWwsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHJlc3VsdFtpbmRleF0gPSByZXM7ICAgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlcykgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbDsgICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHJlc3VsdC5wdXNoKHZhbCk7ICAgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmIChJU19FVkVSWSkgcmV0dXJuIGZhbHNlOyAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogcmVzdWx0O1xuICB9O1xufTtcbiIsInZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIGNhbGxiYWNrZm4sIGFMZW4sIG1lbW8sIGlzUmlnaHQpIHtcbiAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoYXQpO1xuICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciBpbmRleCA9IGlzUmlnaHQgPyBsZW5ndGggLSAxIDogMDtcbiAgdmFyIGkgPSBpc1JpZ2h0ID8gLTEgOiAxO1xuICBpZiAoYUxlbiA8IDIpIGZvciAoOzspIHtcbiAgICBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgICAgbWVtbyA9IHNlbGZbaW5kZXhdO1xuICAgICAgaW5kZXggKz0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpbmRleCArPSBpO1xuICAgIGlmIChpc1JpZ2h0ID8gaW5kZXggPCAwIDogbGVuZ3RoIDw9IGluZGV4KSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICB9XG4gIH1cbiAgZm9yICg7aXNSaWdodCA/IGluZGV4ID49IDAgOiBsZW5ndGggPiBpbmRleDsgaW5kZXggKz0gaSkgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICBtZW1vID0gY2FsbGJhY2tmbihtZW1vLCBzZWxmW2luZGV4XSwgaW5kZXgsIE8pO1xuICB9XG4gIHJldHVybiBtZW1vO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWwpKSB7XG4gICAgQyA9IG9yaWdpbmFsLmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBpZiAoaXNPYmplY3QoQykpIHtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYgKEMgPT09IG51bGwpIEMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEM7XG59O1xuIiwiLy8gOS40LjIuMyBBcnJheVNwZWNpZXNDcmVhdGUob3JpZ2luYWxBcnJheSwgbGVuZ3RoKVxudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWwsIGxlbmd0aCkge1xuICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWwpKShsZW5ndGgpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBhcnJheVNsaWNlID0gW10uc2xpY2U7XG52YXIgZmFjdG9yaWVzID0ge307XG5cbnZhciBjb25zdHJ1Y3QgPSBmdW5jdGlvbiAoRiwgbGVuLCBhcmdzKSB7XG4gIGlmICghKGxlbiBpbiBmYWN0b3JpZXMpKSB7XG4gICAgZm9yICh2YXIgbiA9IFtdLCBpID0gMDsgaSA8IGxlbjsgaSsrKSBuW2ldID0gJ2FbJyArIGkgKyAnXSc7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgZmFjdG9yaWVzW2xlbl0gPSBGdW5jdGlvbignRixhJywgJ3JldHVybiBuZXcgRignICsgbi5qb2luKCcsJykgKyAnKScpO1xuICB9IHJldHVybiBmYWN0b3JpZXNbbGVuXShGLCBhcmdzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24uYmluZCB8fCBmdW5jdGlvbiBiaW5kKHRoYXQgLyogLCAuLi5hcmdzICovKSB7XG4gIHZhciBmbiA9IGFGdW5jdGlvbih0aGlzKTtcbiAgdmFyIHBhcnRBcmdzID0gYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gIHZhciBib3VuZCA9IGZ1bmN0aW9uICgvKiBhcmdzLi4uICovKSB7XG4gICAgdmFyIGFyZ3MgPSBwYXJ0QXJncy5jb25jYXQoYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgYm91bmQgPyBjb25zdHJ1Y3QoZm4sIGFyZ3MubGVuZ3RoLCBhcmdzKSA6IGludm9rZShmbiwgYXJncywgdGhhdCk7XG4gIH07XG4gIGlmIChpc09iamVjdChmbi5wcm90b3R5cGUpKSBib3VuZC5wcm90b3R5cGUgPSBmbi5wcm90b3R5cGU7XG4gIHJldHVybiBib3VuZDtcbn07XG4iLCIvLyBnZXR0aW5nIHRhZyBmcm9tIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBBUkcgPSBjb2YoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIFQsIEI7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mIChUID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUQUcpKSA9PSAnc3RyaW5nJyA/IFRcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IEFSRyA/IGNvZihPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChCID0gY29mKE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogQjtcbn07XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgJGl0ZXJEZWZpbmUgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFzdEtleSA9IHJlcXVpcmUoJy4vX21ldGEnKS5mYXN0S2V5O1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFNJWkUgPSBERVNDUklQVE9SUyA/ICdfcycgOiAnc2l6ZSc7XG5cbnZhciBnZXRFbnRyeSA9IGZ1bmN0aW9uICh0aGF0LCBrZXkpIHtcbiAgLy8gZmFzdCBjYXNlXG4gIHZhciBpbmRleCA9IGZhc3RLZXkoa2V5KTtcbiAgdmFyIGVudHJ5O1xuICBpZiAoaW5kZXggIT09ICdGJykgcmV0dXJuIHRoYXQuX2lbaW5kZXhdO1xuICAvLyBmcm96ZW4gb2JqZWN0IGNhc2VcbiAgZm9yIChlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICBpZiAoZW50cnkuayA9PSBrZXkpIHJldHVybiBlbnRyeTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll90ID0gTkFNRTsgICAgICAgICAvLyBjb2xsZWN0aW9uIHR5cGVcbiAgICAgIHRoYXQuX2kgPSBjcmVhdGUobnVsbCk7IC8vIGluZGV4XG4gICAgICB0aGF0Ll9mID0gdW5kZWZpbmVkOyAgICAvLyBmaXJzdCBlbnRyeVxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgICAgLy8gbGFzdCBlbnRyeVxuICAgICAgdGhhdFtTSVpFXSA9IDA7ICAgICAgICAgLy8gc2l6ZVxuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4xLjMuMSBNYXAucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIC8vIDIzLjIuMy4yIFNldC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICBmb3IgKHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSksIGRhdGEgPSB0aGF0Ll9pLCBlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoZW50cnkucCkgZW50cnkucCA9IGVudHJ5LnAubiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBkZWxldGUgZGF0YVtlbnRyeS5pXTtcbiAgICAgICAgfVxuICAgICAgICB0aGF0Ll9mID0gdGhhdC5fbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhhdFtTSVpFXSA9IDA7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjMgTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuMi4zLjQgU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICB2YXIgbmV4dCA9IGVudHJ5Lm47XG4gICAgICAgICAgdmFyIHByZXYgPSBlbnRyeS5wO1xuICAgICAgICAgIGRlbGV0ZSB0aGF0Ll9pW2VudHJ5LmldO1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBuZXh0O1xuICAgICAgICAgIGlmIChuZXh0KSBuZXh0LnAgPSBwcmV2O1xuICAgICAgICAgIGlmICh0aGF0Ll9mID09IGVudHJ5KSB0aGF0Ll9mID0gbmV4dDtcbiAgICAgICAgICBpZiAodGhhdC5fbCA9PSBlbnRyeSkgdGhhdC5fbCA9IHByZXY7XG4gICAgICAgICAgdGhhdFtTSVpFXS0tO1xuICAgICAgICB9IHJldHVybiAhIWVudHJ5O1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjIuMy42IFNldC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgLy8gMjMuMS4zLjUgTWFwLnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgICAgIHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMyk7XG4gICAgICAgIHZhciBlbnRyeTtcbiAgICAgICAgd2hpbGUgKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhpcy5fZikge1xuICAgICAgICAgIGYoZW50cnkudiwgZW50cnkuaywgdGhpcyk7XG4gICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIGVudHJ5ID0gZW50cnkucDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy43IE1hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjIuMy43IFNldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiAhIWdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChERVNDUklQVE9SUykgZFAoQy5wcm90b3R5cGUsICdzaXplJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZSh0aGlzLCBOQU1FKVtTSVpFXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgdmFyIHByZXYsIGluZGV4O1xuICAgIC8vIGNoYW5nZSBleGlzdGluZyBlbnRyeVxuICAgIGlmIChlbnRyeSkge1xuICAgICAgZW50cnkudiA9IHZhbHVlO1xuICAgIC8vIGNyZWF0ZSBuZXcgZW50cnlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhhdC5fbCA9IGVudHJ5ID0ge1xuICAgICAgICBpOiBpbmRleCA9IGZhc3RLZXkoa2V5LCB0cnVlKSwgLy8gPC0gaW5kZXhcbiAgICAgICAgazoga2V5LCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIGtleVxuICAgICAgICB2OiB2YWx1ZSwgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gdmFsdWVcbiAgICAgICAgcDogcHJldiA9IHRoYXQuX2wsICAgICAgICAgICAgIC8vIDwtIHByZXZpb3VzIGVudHJ5XG4gICAgICAgIG46IHVuZGVmaW5lZCwgICAgICAgICAgICAgICAgICAvLyA8LSBuZXh0IGVudHJ5XG4gICAgICAgIHI6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSByZW1vdmVkXG4gICAgICB9O1xuICAgICAgaWYgKCF0aGF0Ll9mKSB0aGF0Ll9mID0gZW50cnk7XG4gICAgICBpZiAocHJldikgcHJldi5uID0gZW50cnk7XG4gICAgICB0aGF0W1NJWkVdKys7XG4gICAgICAvLyBhZGQgdG8gaW5kZXhcbiAgICAgIGlmIChpbmRleCAhPT0gJ0YnKSB0aGF0Ll9pW2luZGV4XSA9IGVudHJ5O1xuICAgIH0gcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIGdldEVudHJ5OiBnZXRFbnRyeSxcbiAgc2V0U3Ryb25nOiBmdW5jdGlvbiAoQywgTkFNRSwgSVNfTUFQKSB7XG4gICAgLy8gYWRkIC5rZXlzLCAudmFsdWVzLCAuZW50cmllcywgW0BAaXRlcmF0b3JdXG4gICAgLy8gMjMuMS4zLjQsIDIzLjEuMy44LCAyMy4xLjMuMTEsIDIzLjEuMy4xMiwgMjMuMi4zLjUsIDIzLjIuMy44LCAyMy4yLjMuMTAsIDIzLjIuMy4xMVxuICAgICRpdGVyRGVmaW5lKEMsIE5BTUUsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICAgICAgdGhpcy5fdCA9IHZhbGlkYXRlKGl0ZXJhdGVkLCBOQU1FKTsgLy8gdGFyZ2V0XG4gICAgICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgICAgICAvLyBraW5kXG4gICAgICB0aGlzLl9sID0gdW5kZWZpbmVkOyAgICAgICAgICAgICAgICAvLyBwcmV2aW91c1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBraW5kID0gdGhhdC5faztcbiAgICAgIHZhciBlbnRyeSA9IHRoYXQuX2w7XG4gICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYgKCF0aGF0Ll90IHx8ICEodGhhdC5fbCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhhdC5fdC5fZikpIHtcbiAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgICAgdGhhdC5fdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHN0ZXAoMSk7XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kXG4gICAgICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGVudHJ5LmspO1xuICAgICAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIGVudHJ5LnYpO1xuICAgICAgcmV0dXJuIHN0ZXAoMCwgW2VudHJ5LmssIGVudHJ5LnZdKTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJywgIUlTX01BUCwgdHJ1ZSk7XG5cbiAgICAvLyBhZGQgW0BAc3BlY2llc10sIDIzLjEuMi4yLCAyMy4yLjIuMlxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBnZXRXZWFrID0gcmVxdWlyZSgnLi9fbWV0YScpLmdldFdlYWs7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG52YXIgJGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIGFycmF5RmluZCA9IGNyZWF0ZUFycmF5TWV0aG9kKDUpO1xudmFyIGFycmF5RmluZEluZGV4ID0gY3JlYXRlQXJyYXlNZXRob2QoNik7XG52YXIgaWQgPSAwO1xuXG4vLyBmYWxsYmFjayBmb3IgdW5jYXVnaHQgZnJvemVuIGtleXNcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKHRoYXQpIHtcbiAgcmV0dXJuIHRoYXQuX2wgfHwgKHRoYXQuX2wgPSBuZXcgVW5jYXVnaHRGcm96ZW5TdG9yZSgpKTtcbn07XG52YXIgVW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5hID0gW107XG59O1xudmFyIGZpbmRVbmNhdWdodEZyb3plbiA9IGZ1bmN0aW9uIChzdG9yZSwga2V5KSB7XG4gIHJldHVybiBhcnJheUZpbmQoc3RvcmUuYSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gIH0pO1xufTtcblVuY2F1Z2h0RnJvemVuU3RvcmUucHJvdG90eXBlID0ge1xuICBnZXQ6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIHJldHVybiBlbnRyeVsxXTtcbiAgfSxcbiAgaGFzOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICEhZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIGVudHJ5WzFdID0gdmFsdWU7XG4gICAgZWxzZSB0aGlzLmEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9LFxuICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBpbmRleCA9IGFycmF5RmluZEluZGV4KHRoaXMuYSwgZnVuY3Rpb24gKGl0KSB7XG4gICAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgICB9KTtcbiAgICBpZiAofmluZGV4KSB0aGlzLmEuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gISF+aW5kZXg7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xuICAgICAgdGhhdC5fdCA9IE5BTUU7ICAgICAgLy8gY29sbGVjdGlvbiB0eXBlXG4gICAgICB0aGF0Ll9pID0gaWQrKzsgICAgICAvLyBjb2xsZWN0aW9uIGlkXG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAvLyBsZWFrIHN0b3JlIGZvciB1bmNhdWdodCBmcm96ZW4gb2JqZWN0c1xuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4zLjMuMiBXZWFrTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuNC4zLjMgV2Vha1NldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgTkFNRSkpWydkZWxldGUnXShrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpICYmIGRlbGV0ZSBkYXRhW3RoaXMuX2ldO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjMuMy40IFdlYWtNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy40LjMuNCBXZWFrU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgTkFNRSkpLmhhcyhrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIGRhdGEgPSBnZXRXZWFrKGFuT2JqZWN0KGtleSksIHRydWUpO1xuICAgIGlmIChkYXRhID09PSB0cnVlKSB1bmNhdWdodEZyb3plblN0b3JlKHRoYXQpLnNldChrZXksIHZhbHVlKTtcbiAgICBlbHNlIGRhdGFbdGhhdC5faV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhhdDtcbiAgfSxcbiAgdWZzdG9yZTogdW5jYXVnaHRGcm96ZW5TdG9yZVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRpdGVyRGV0ZWN0ID0gcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUsIHdyYXBwZXIsIG1ldGhvZHMsIGNvbW1vbiwgSVNfTUFQLCBJU19XRUFLKSB7XG4gIHZhciBCYXNlID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgQyA9IEJhc2U7XG4gIHZhciBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCc7XG4gIHZhciBwcm90byA9IEMgJiYgQy5wcm90b3R5cGU7XG4gIHZhciBPID0ge307XG4gIHZhciBmaXhNZXRob2QgPSBmdW5jdGlvbiAoS0VZKSB7XG4gICAgdmFyIGZuID0gcHJvdG9bS0VZXTtcbiAgICByZWRlZmluZShwcm90bywgS0VZLFxuICAgICAgS0VZID09ICdkZWxldGUnID8gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdoYXMnID8gZnVuY3Rpb24gaGFzKGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdnZXQnID8gZnVuY3Rpb24gZ2V0KGEpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gdW5kZWZpbmVkIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnYWRkJyA/IGZ1bmN0aW9uIGFkZChhKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTsgcmV0dXJuIHRoaXM7IH1cbiAgICAgICAgOiBmdW5jdGlvbiBzZXQoYSwgYikgeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSwgYik7IHJldHVybiB0aGlzOyB9XG4gICAgKTtcbiAgfTtcbiAgaWYgKHR5cGVvZiBDICE9ICdmdW5jdGlvbicgfHwgIShJU19XRUFLIHx8IHByb3RvLmZvckVhY2ggJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgQygpLmVudHJpZXMoKS5uZXh0KCk7XG4gIH0pKSkge1xuICAgIC8vIGNyZWF0ZSBjb2xsZWN0aW9uIGNvbnN0cnVjdG9yXG4gICAgQyA9IGNvbW1vbi5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gICAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQygpO1xuICAgIC8vIGVhcmx5IGltcGxlbWVudGF0aW9ucyBub3Qgc3VwcG9ydHMgY2hhaW5pbmdcbiAgICB2YXIgSEFTTlRfQ0hBSU5JTkcgPSBpbnN0YW5jZVtBRERFUl0oSVNfV0VBSyA/IHt9IDogLTAsIDEpICE9IGluc3RhbmNlO1xuICAgIC8vIFY4IH4gIENocm9taXVtIDQwLSB3ZWFrLWNvbGxlY3Rpb25zIHRocm93cyBvbiBwcmltaXRpdmVzLCBidXQgc2hvdWxkIHJldHVybiBmYWxzZVxuICAgIHZhciBUSFJPV1NfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgaW5zdGFuY2UuaGFzKDEpOyB9KTtcbiAgICAvLyBtb3N0IGVhcmx5IGltcGxlbWVudGF0aW9ucyBkb2Vzbid0IHN1cHBvcnRzIGl0ZXJhYmxlcywgbW9zdCBtb2Rlcm4gLSBub3QgY2xvc2UgaXQgY29ycmVjdGx5XG4gICAgdmFyIEFDQ0VQVF9JVEVSQUJMRVMgPSAkaXRlckRldGVjdChmdW5jdGlvbiAoaXRlcikgeyBuZXcgQyhpdGVyKTsgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgLy8gZm9yIGVhcmx5IGltcGxlbWVudGF0aW9ucyAtMCBhbmQgKzAgbm90IHRoZSBzYW1lXG4gICAgdmFyIEJVR0dZX1pFUk8gPSAhSVNfV0VBSyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBWOCB+IENocm9taXVtIDQyLSBmYWlscyBvbmx5IHdpdGggNSsgZWxlbWVudHNcbiAgICAgIHZhciAkaW5zdGFuY2UgPSBuZXcgQygpO1xuICAgICAgdmFyIGluZGV4ID0gNTtcbiAgICAgIHdoaWxlIChpbmRleC0tKSAkaW5zdGFuY2VbQURERVJdKGluZGV4LCBpbmRleCk7XG4gICAgICByZXR1cm4gISRpbnN0YW5jZS5oYXMoLTApO1xuICAgIH0pO1xuICAgIGlmICghQUNDRVBUX0lURVJBQkxFUykge1xuICAgICAgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRhcmdldCwgaXRlcmFibGUpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0YXJnZXQsIEMsIE5BTUUpO1xuICAgICAgICB2YXIgdGhhdCA9IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKCksIHRhcmdldCwgQyk7XG4gICAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICAgICAgcmV0dXJuIHRoYXQ7XG4gICAgICB9KTtcbiAgICAgIEMucHJvdG90eXBlID0gcHJvdG87XG4gICAgICBwcm90by5jb25zdHJ1Y3RvciA9IEM7XG4gICAgfVxuICAgIGlmIChUSFJPV1NfT05fUFJJTUlUSVZFUyB8fCBCVUdHWV9aRVJPKSB7XG4gICAgICBmaXhNZXRob2QoJ2RlbGV0ZScpO1xuICAgICAgZml4TWV0aG9kKCdoYXMnKTtcbiAgICAgIElTX01BUCAmJiBmaXhNZXRob2QoJ2dldCcpO1xuICAgIH1cbiAgICBpZiAoQlVHR1lfWkVSTyB8fCBIQVNOVF9DSEFJTklORykgZml4TWV0aG9kKEFEREVSKTtcbiAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIHNob3VsZCBub3QgY29udGFpbnMgLmNsZWFyIG1ldGhvZFxuICAgIGlmIChJU19XRUFLICYmIHByb3RvLmNsZWFyKSBkZWxldGUgcHJvdG8uY2xlYXI7XG4gIH1cblxuICBzZXRUb1N0cmluZ1RhZyhDLCBOQU1FKTtcblxuICBPW05BTUVdID0gQztcbiAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQyAhPSBCYXNlKSwgTyk7XG5cbiAgaWYgKCFJU19XRUFLKSBjb21tb24uc2V0U3Ryb25nKEMsIE5BTUUsIElTX01BUCk7XG5cbiAgcmV0dXJuIEM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgaW5kZXgsIHZhbHVlKSB7XG4gIGlmIChpbmRleCBpbiBvYmplY3QpICRkZWZpbmVQcm9wZXJ0eS5mKG9iamVjdCwgaW5kZXgsIGNyZWF0ZURlc2MoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbaW5kZXhdID0gdmFsdWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZ2V0VGltZSA9IERhdGUucHJvdG90eXBlLmdldFRpbWU7XG52YXIgJHRvSVNPU3RyaW5nID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmc7XG5cbnZhciBseiA9IGZ1bmN0aW9uIChudW0pIHtcbiAgcmV0dXJuIG51bSA+IDkgPyBudW0gOiAnMCcgKyBudW07XG59O1xuXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcbm1vZHVsZS5leHBvcnRzID0gKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICR0b0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKC01ZTEzIC0gMSkpICE9ICcwMzg1LTA3LTI1VDA3OjA2OjM5Ljk5OVonO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgJHRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoTmFOKSk7XG59KSkgPyBmdW5jdGlvbiB0b0lTT1N0cmluZygpIHtcbiAgaWYgKCFpc0Zpbml0ZShnZXRUaW1lLmNhbGwodGhpcykpKSB0aHJvdyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTtcbiAgdmFyIGQgPSB0aGlzO1xuICB2YXIgeSA9IGQuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIG0gPSBkLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICB2YXIgcyA9IHkgPCAwID8gJy0nIDogeSA+IDk5OTkgPyAnKycgOiAnJztcbiAgcmV0dXJuIHMgKyAoJzAwMDAwJyArIE1hdGguYWJzKHkpKS5zbGljZShzID8gLTYgOiAtNCkgK1xuICAgICctJyArIGx6KGQuZ2V0VVRDTW9udGgoKSArIDEpICsgJy0nICsgbHooZC5nZXRVVENEYXRlKCkpICtcbiAgICAnVCcgKyBseihkLmdldFVUQ0hvdXJzKCkpICsgJzonICsgbHooZC5nZXRVVENNaW51dGVzKCkpICtcbiAgICAnOicgKyBseihkLmdldFVUQ1NlY29uZHMoKSkgKyAnLicgKyAobSA+IDk5ID8gbSA6ICcwJyArIGx6KG0pKSArICdaJztcbn0gOiAkdG9JU09TdHJpbmc7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIE5VTUJFUiA9ICdudW1iZXInO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChoaW50KSB7XG4gIGlmIChoaW50ICE9PSAnc3RyaW5nJyAmJiBoaW50ICE9PSBOVU1CRVIgJiYgaGludCAhPT0gJ2RlZmF1bHQnKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCBoaW50Jyk7XG4gIHJldHVybiB0b1ByaW1pdGl2ZShhbk9iamVjdCh0aGlzKSwgaGludCAhPSBOVU1CRVIpO1xufTtcbiIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZidcbikuc3BsaXQoJywnKTtcbiIsIi8vIGFsbCBlbnVtZXJhYmxlIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBzeW1ib2xzXG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHJlc3VsdCA9IGdldEtleXMoaXQpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgaWYgKGdldFN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IGdldFN5bWJvbHMoaXQpO1xuICAgIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAoc3ltYm9scy5sZW5ndGggPiBpKSBpZiAoaXNFbnVtLmNhbGwoaXQsIGtleSA9IHN5bWJvbHNbaSsrXSkpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GO1xuICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcbiAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XG4gIHZhciBJU19QUk9UTyA9IHR5cGUgJiAkZXhwb3J0LlA7XG4gIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSB8fCAoZ2xvYmFsW25hbWVdID0ge30pIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXTtcbiAgdmFyIGV4cG9ydHMgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KTtcbiAgdmFyIGV4cFByb3RvID0gZXhwb3J0c1tQUk9UT1RZUEVdIHx8IChleHBvcnRzW1BST1RPVFlQRV0gPSB7fSk7XG4gIHZhciBrZXksIG93biwgb3V0LCBleHA7XG4gIGlmIChJU19HTE9CQUwpIHNvdXJjZSA9IG5hbWU7XG4gIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSAob3duID8gdGFyZ2V0IDogc291cmNlKVtrZXldO1xuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgZXhwID0gSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIGlmICh0YXJnZXQpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBvdXQsIHR5cGUgJiAkZXhwb3J0LlUpO1xuICAgIC8vIGV4cG9ydFxuICAgIGlmIChleHBvcnRzW2tleV0gIT0gb3V0KSBoaWRlKGV4cG9ydHMsIGtleSwgZXhwKTtcbiAgICBpZiAoSVNfUFJPVE8gJiYgZXhwUHJvdG9ba2V5XSAhPSBvdXQpIGV4cFByb3RvW2tleV0gPSBvdXQ7XG4gIH1cbn07XG5nbG9iYWwuY29yZSA9IGNvcmU7XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XG4iLCJ2YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSkge1xuICB2YXIgcmUgPSAvLi87XG4gIHRyeSB7XG4gICAgJy8uLydbS0VZXShyZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0cnkge1xuICAgICAgcmVbTUFUQ0hdID0gZmFsc2U7XG4gICAgICByZXR1cm4gIScvLi8nW0tFWV0ocmUpO1xuICAgIH0gY2F0Y2ggKGYpIHsgLyogZW1wdHkgKi8gfVxuICB9IHJldHVybiB0cnVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5leGVjJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5cbnZhciBTUEVDSUVTID0gd2tzKCdzcGVjaWVzJyk7XG5cbnZhciBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vICNyZXBsYWNlIG5lZWRzIGJ1aWx0LWluIHN1cHBvcnQgZm9yIG5hbWVkIGdyb3Vwcy5cbiAgLy8gI21hdGNoIHdvcmtzIGZpbmUgYmVjYXVzZSBpdCBqdXN0IHJldHVybiB0aGUgZXhlYyByZXN1bHRzLCBldmVuIGlmIGl0IGhhc1xuICAvLyBhIFwiZ3JvcHNcIiBwcm9wZXJ0eS5cbiAgdmFyIHJlID0gLy4vO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICByZXN1bHQuZ3JvdXBzID0geyBhOiAnNycgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICByZXR1cm4gJycucmVwbGFjZShyZSwgJyQ8YT4nKSAhPT0gJzcnO1xufSk7XG5cbnZhciBTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMgPSAoZnVuY3Rpb24gKCkge1xuICAvLyBDaHJvbWUgNTEgaGFzIGEgYnVnZ3kgXCJzcGxpdFwiIGltcGxlbWVudGF0aW9uIHdoZW4gUmVnRXhwI2V4ZWMgIT09IG5hdGl2ZUV4ZWNcbiAgdmFyIHJlID0gLyg/OikvO1xuICB2YXIgb3JpZ2luYWxFeGVjID0gcmUuZXhlYztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9yaWdpbmFsRXhlYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xuICB2YXIgcmVzdWx0ID0gJ2FiJy5zcGxpdChyZSk7XG4gIHJldHVybiByZXN1bHQubGVuZ3RoID09PSAyICYmIHJlc3VsdFswXSA9PT0gJ2EnICYmIHJlc3VsdFsxXSA9PT0gJ2InO1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMpIHtcbiAgdmFyIFNZTUJPTCA9IHdrcyhLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgPyAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN5bWJvbC1uYW1lZCBSZWdFeHAgbWV0aG9kcyBjYWxsIC5leGVjXG4gICAgdmFyIGV4ZWNDYWxsZWQgPSBmYWxzZTtcbiAgICB2YXIgcmUgPSAvYS87XG4gICAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgZXhlY0NhbGxlZCA9IHRydWU7IHJldHVybiBudWxsOyB9O1xuICAgIGlmIChLRVkgPT09ICdzcGxpdCcpIHtcbiAgICAgIC8vIFJlZ0V4cFtAQHNwbGl0XSBkb2Vzbid0IGNhbGwgdGhlIHJlZ2V4J3MgZXhlYyBtZXRob2QsIGJ1dCBmaXJzdCBjcmVhdGVzXG4gICAgICAvLyBhIG5ldyBvbmUuIFdlIG5lZWQgdG8gcmV0dXJuIHRoZSBwYXRjaGVkIHJlZ2V4IHdoZW4gY3JlYXRpbmcgdGhlIG5ldyBvbmUuXG4gICAgICByZS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgICAgcmUuY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZTsgfTtcbiAgICB9XG4gICAgcmVbU1lNQk9MXSgnJyk7XG4gICAgcmV0dXJuICFleGVjQ2FsbGVkO1xuICB9KSA6IHVuZGVmaW5lZDtcblxuICBpZiAoXG4gICAgIURFTEVHQVRFU19UT19TWU1CT0wgfHxcbiAgICAhREVMRUdBVEVTX1RPX0VYRUMgfHxcbiAgICAoS0VZID09PSAncmVwbGFjZScgJiYgIVJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTKSB8fFxuICAgIChLRVkgPT09ICdzcGxpdCcgJiYgIVNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQylcbiAgKSB7XG4gICAgdmFyIG5hdGl2ZVJlZ0V4cE1ldGhvZCA9IC8uL1tTWU1CT0xdO1xuICAgIHZhciBmbnMgPSBleGVjKFxuICAgICAgZGVmaW5lZCxcbiAgICAgIFNZTUJPTCxcbiAgICAgICcnW0tFWV0sXG4gICAgICBmdW5jdGlvbiBtYXliZUNhbGxOYXRpdmUobmF0aXZlTWV0aG9kLCByZWdleHAsIHN0ciwgYXJnMiwgZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgaWYgKHJlZ2V4cC5leGVjID09PSByZWdleHBFeGVjKSB7XG4gICAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgICAvLyBUaGUgbmF0aXZlIFN0cmluZyBtZXRob2QgYWxyZWFkeSBkZWxlZ2F0ZXMgdG8gQEBtZXRob2QgKHRoaXNcbiAgICAgICAgICAgIC8vIHBvbHlmaWxsZWQgZnVuY3Rpb24pLCBsZWFzaW5nIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAgICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlUmVnRXhwTWV0aG9kLmNhbGwocmVnZXhwLCBzdHIsIGFyZzIpIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVNZXRob2QuY2FsbChzdHIsIHJlZ2V4cCwgYXJnMikgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBkb25lOiBmYWxzZSB9O1xuICAgICAgfVxuICAgICk7XG4gICAgdmFyIHN0cmZuID0gZm5zWzBdO1xuICAgIHZhciByeGZuID0gZm5zWzFdO1xuXG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7XG4gICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH1cbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxuICAgICAgOiBmdW5jdGlvbiAoc3RyaW5nKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzKTsgfVxuICAgICk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFnc1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAodGhhdC5nbG9iYWwpIHJlc3VsdCArPSAnZyc7XG4gIGlmICh0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmICh0aGF0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgaWYgKHRoYXQudW5pY29kZSkgcmVzdWx0ICs9ICd1JztcbiAgaWYgKHRoYXQuc3RpY2t5KSByZXN1bHQgKz0gJ3knO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUZsYXR0ZW5JbnRvQXJyYXlcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEUgPSByZXF1aXJlKCcuL193a3MnKSgnaXNDb25jYXRTcHJlYWRhYmxlJyk7XG5cbmZ1bmN0aW9uIGZsYXR0ZW5JbnRvQXJyYXkodGFyZ2V0LCBvcmlnaW5hbCwgc291cmNlLCBzb3VyY2VMZW4sIHN0YXJ0LCBkZXB0aCwgbWFwcGVyLCB0aGlzQXJnKSB7XG4gIHZhciB0YXJnZXRJbmRleCA9IHN0YXJ0O1xuICB2YXIgc291cmNlSW5kZXggPSAwO1xuICB2YXIgbWFwRm4gPSBtYXBwZXIgPyBjdHgobWFwcGVyLCB0aGlzQXJnLCAzKSA6IGZhbHNlO1xuICB2YXIgZWxlbWVudCwgc3ByZWFkYWJsZTtcblxuICB3aGlsZSAoc291cmNlSW5kZXggPCBzb3VyY2VMZW4pIHtcbiAgICBpZiAoc291cmNlSW5kZXggaW4gc291cmNlKSB7XG4gICAgICBlbGVtZW50ID0gbWFwRm4gPyBtYXBGbihzb3VyY2Vbc291cmNlSW5kZXhdLCBzb3VyY2VJbmRleCwgb3JpZ2luYWwpIDogc291cmNlW3NvdXJjZUluZGV4XTtcblxuICAgICAgc3ByZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgaWYgKGlzT2JqZWN0KGVsZW1lbnQpKSB7XG4gICAgICAgIHNwcmVhZGFibGUgPSBlbGVtZW50W0lTX0NPTkNBVF9TUFJFQURBQkxFXTtcbiAgICAgICAgc3ByZWFkYWJsZSA9IHNwcmVhZGFibGUgIT09IHVuZGVmaW5lZCA/ICEhc3ByZWFkYWJsZSA6IGlzQXJyYXkoZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzcHJlYWRhYmxlICYmIGRlcHRoID4gMCkge1xuICAgICAgICB0YXJnZXRJbmRleCA9IGZsYXR0ZW5JbnRvQXJyYXkodGFyZ2V0LCBvcmlnaW5hbCwgZWxlbWVudCwgdG9MZW5ndGgoZWxlbWVudC5sZW5ndGgpLCB0YXJnZXRJbmRleCwgZGVwdGggLSAxKSAtIDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGFyZ2V0SW5kZXggPj0gMHgxZmZmZmZmZmZmZmZmZikgdGhyb3cgVHlwZUVycm9yKCk7XG4gICAgICAgIHRhcmdldFt0YXJnZXRJbmRleF0gPSBlbGVtZW50O1xuICAgICAgfVxuXG4gICAgICB0YXJnZXRJbmRleCsrO1xuICAgIH1cbiAgICBzb3VyY2VJbmRleCsrO1xuICB9XG4gIHJldHVybiB0YXJnZXRJbmRleDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmbGF0dGVuSW50b0FycmF5O1xuIiwidmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKTtcbnZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBCUkVBSyA9IHt9O1xudmFyIFJFVFVSTiA9IHt9O1xudmFyIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYWJsZSwgZW50cmllcywgZm4sIHRoYXQsIElURVJBVE9SKSB7XG4gIHZhciBpdGVyRm4gPSBJVEVSQVRPUiA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGl0ZXJhYmxlOyB9IDogZ2V0SXRlckZuKGl0ZXJhYmxlKTtcbiAgdmFyIGYgPSBjdHgoZm4sIHRoYXQsIGVudHJpZXMgPyAyIDogMSk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGgsIHN0ZXAsIGl0ZXJhdG9yLCByZXN1bHQ7XG4gIGlmICh0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdGVyYWJsZSArICcgaXMgbm90IGl0ZXJhYmxlIScpO1xuICAvLyBmYXN0IGNhc2UgZm9yIGFycmF5cyB3aXRoIGRlZmF1bHQgaXRlcmF0b3JcbiAgaWYgKGlzQXJyYXlJdGVyKGl0ZXJGbikpIGZvciAobGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICByZXN1bHQgPSBlbnRyaWVzID8gZihhbk9iamVjdChzdGVwID0gaXRlcmFibGVbaW5kZXhdKVswXSwgc3RlcFsxXSkgOiBmKGl0ZXJhYmxlW2luZGV4XSk7XG4gICAgaWYgKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pIHJldHVybiByZXN1bHQ7XG4gIH0gZWxzZSBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoaXRlcmFibGUpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7KSB7XG4gICAgcmVzdWx0ID0gY2FsbChpdGVyYXRvciwgZiwgc3RlcC52YWx1ZSwgZW50cmllcyk7XG4gICAgaWYgKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pIHJldHVybiByZXN1bHQ7XG4gIH1cbn07XG5leHBvcnRzLkJSRUFLID0gQlJFQUs7XG5leHBvcnRzLlJFVFVSTiA9IFJFVFVSTjtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ25hdGl2ZS1mdW5jdGlvbi10by1zdHJpbmcnLCBGdW5jdGlvbi50b1N0cmluZyk7XG4iLCJ2YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbm1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQ7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCB0YXJnZXQsIEMpIHtcbiAgdmFyIFMgPSB0YXJnZXQuY29uc3RydWN0b3I7XG4gIHZhciBQO1xuICBpZiAoUyAhPT0gQyAmJiB0eXBlb2YgUyA9PSAnZnVuY3Rpb24nICYmIChQID0gUy5wcm90b3R5cGUpICE9PSBDLnByb3RvdHlwZSAmJiBpc09iamVjdChQKSAmJiBzZXRQcm90b3R5cGVPZikge1xuICAgIHNldFByb3RvdHlwZU9mKHRoYXQsIFApO1xuICB9IHJldHVybiB0aGF0O1xufTtcbiIsIi8vIGZhc3QgYXBwbHksIGh0dHA6Ly9qc3BlcmYubG5raXQuY29tL2Zhc3QtYXBwbHkvNVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIGFyZ3MsIHRoYXQpIHtcbiAgdmFyIHVuID0gdGhhdCA9PT0gdW5kZWZpbmVkO1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gdW4gPyBmbigpXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQpO1xuICAgIGNhc2UgMTogcmV0dXJuIHVuID8gZm4oYXJnc1swXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIGNhc2UgNDogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gIH0gcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG4iLCIvLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvW0lURVJBVE9SXSA9PT0gaXQpO1xufTtcbiIsIi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59O1xuIiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzSW50ZWdlcihpdCkge1xuICByZXR1cm4gIWlzT2JqZWN0KGl0KSAmJiBpc0Zpbml0ZShpdCkgJiYgZmxvb3IoaXQpID09PSBpdDtcbn07XG4iLCIvLyA3LjIuOCBJc1JlZ0V4cChhcmd1bWVudClcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgaXNSZWdFeHA7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjb2YoaXQpID09ICdSZWdFeHAnKTtcbn07XG4iLCIvLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW50cmllcyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZiAocmV0ICE9PSB1bmRlZmluZWQpIGFuT2JqZWN0KHJldC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgdGhyb3cgZTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyICRpdGVyQ3JlYXRlID0gcmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBCVUdHWSA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKTsgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxudmFyIEZGX0lURVJBVE9SID0gJ0BAaXRlcmF0b3InO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQmFzZSwgTkFNRSwgQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgdmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChraW5kKSB7XG4gICAgaWYgKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKSByZXR1cm4gcHJvdG9ba2luZF07XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgfTtcbiAgdmFyIFRBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgdmFyIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFUztcbiAgdmFyIFZBTFVFU19CVUcgPSBmYWxzZTtcbiAgdmFyIHByb3RvID0gQmFzZS5wcm90b3R5cGU7XG4gIHZhciAkbmF0aXZlID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdO1xuICB2YXIgJGRlZmF1bHQgPSAkbmF0aXZlIHx8IGdldE1ldGhvZChERUZBVUxUKTtcbiAgdmFyICRlbnRyaWVzID0gREVGQVVMVCA/ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKSA6IHVuZGVmaW5lZDtcbiAgdmFyICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlO1xuICB2YXIgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTtcbiAgLy8gRml4IG5hdGl2ZVxuICBpZiAoJGFueU5hdGl2ZSkge1xuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoJGFueU5hdGl2ZS5jYWxsKG5ldyBCYXNlKCkpKTtcbiAgICBpZiAoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgSXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XG4gICAgICAvLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXNcbiAgICAgIGlmICghTElCUkFSWSAmJiB0eXBlb2YgSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIGhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICB9XG4gIH1cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZiAoREVGX1ZBTFVFUyAmJiAkbmF0aXZlICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgVkFMVUVTX0JVRyA9IHRydWU7XG4gICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XG4gIH1cbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmICgoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSkge1xuICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gIH1cbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gPSByZXR1cm5UaGlzO1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiAkZW50cmllc1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgZm9yIChrZXkgaW4gbWV0aG9kcykge1xuICAgICAgaWYgKCEoa2V5IGluIHByb3RvKSkgcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpO1xuICB9XG4gIHJldHVybiBtZXRob2RzO1xufTtcbiIsInZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7XG4gIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uICgpIHsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBza2lwQ2xvc2luZykge1xuICBpZiAoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gWzddO1xuICAgIHZhciBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHsgZG9uZTogc2FmZSA9IHRydWUgfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcjsgfTtcbiAgICBleGVjKGFycik7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gc2FmZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkb25lLCB2YWx1ZSkge1xuICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZSB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwiLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwbTEgPSBNYXRoLmV4cG0xO1xubW9kdWxlLmV4cG9ydHMgPSAoISRleHBtMVxuICAvLyBPbGQgRkYgYnVnXG4gIHx8ICRleHBtMSgxMCkgPiAyMjAyNS40NjU3OTQ4MDY3MTkgfHwgJGV4cG0xKDEwKSA8IDIyMDI1LjQ2NTc5NDgwNjcxNjUxNjhcbiAgLy8gVG9yIEJyb3dzZXIgYnVnXG4gIHx8ICRleHBtMSgtMmUtMTcpICE9IC0yZS0xN1xuKSA/IGZ1bmN0aW9uIGV4cG0xKHgpIHtcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogeCA+IC0xZS02ICYmIHggPCAxZS02ID8geCArIHggKiB4IC8gMiA6IE1hdGguZXhwKHgpIC0gMTtcbn0gOiAkZXhwbTE7XG4iLCIvLyAyMC4yLjIuMTYgTWF0aC5mcm91bmQoeClcbnZhciBzaWduID0gcmVxdWlyZSgnLi9fbWF0aC1zaWduJyk7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgRVBTSUxPTiA9IHBvdygyLCAtNTIpO1xudmFyIEVQU0lMT04zMiA9IHBvdygyLCAtMjMpO1xudmFyIE1BWDMyID0gcG93KDIsIDEyNykgKiAoMiAtIEVQU0lMT04zMik7XG52YXIgTUlOMzIgPSBwb3coMiwgLTEyNik7XG5cbnZhciByb3VuZFRpZXNUb0V2ZW4gPSBmdW5jdGlvbiAobikge1xuICByZXR1cm4gbiArIDEgLyBFUFNJTE9OIC0gMSAvIEVQU0lMT047XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguZnJvdW5kIHx8IGZ1bmN0aW9uIGZyb3VuZCh4KSB7XG4gIHZhciAkYWJzID0gTWF0aC5hYnMoeCk7XG4gIHZhciAkc2lnbiA9IHNpZ24oeCk7XG4gIHZhciBhLCByZXN1bHQ7XG4gIGlmICgkYWJzIDwgTUlOMzIpIHJldHVybiAkc2lnbiAqIHJvdW5kVGllc1RvRXZlbigkYWJzIC8gTUlOMzIgLyBFUFNJTE9OMzIpICogTUlOMzIgKiBFUFNJTE9OMzI7XG4gIGEgPSAoMSArIEVQU0lMT04zMiAvIEVQU0lMT04pICogJGFicztcbiAgcmVzdWx0ID0gYSAtIChhIC0gJGFicyk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgaWYgKHJlc3VsdCA+IE1BWDMyIHx8IHJlc3VsdCAhPSByZXN1bHQpIHJldHVybiAkc2lnbiAqIEluZmluaXR5O1xuICByZXR1cm4gJHNpZ24gKiByZXN1bHQ7XG59O1xuIiwiLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5sb2cxcCB8fCBmdW5jdGlvbiBsb2cxcCh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA+IC0xZS04ICYmIHggPCAxZS04ID8geCAtIHggKiB4IC8gMiA6IE1hdGgubG9nKDEgKyB4KTtcbn07XG4iLCIvLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguc2lnbiB8fCBmdW5jdGlvbiBzaWduKHgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICByZXR1cm4gKHggPSAreCkgPT0gMCB8fCB4ICE9IHggPyB4IDogeCA8IDAgPyAtMSA6IDE7XG59O1xuIiwidmFyIE1FVEEgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgc2V0RGVzYyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaWQgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBzZXREZXNjKGl0LCBNRVRBLCB7IHZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpIHNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiBNRVRBLFxuICBORUVEOiBmYWxzZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2VhazogZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIG1hY3JvdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQ7XG52YXIgT2JzZXJ2ZXIgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlO1xudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBoZWFkLCBsYXN0LCBub3RpZnk7XG5cbiAgdmFyIGZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJlbnQsIGZuO1xuICAgIGlmIChpc05vZGUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSkgcGFyZW50LmV4aXQoKTtcbiAgICB3aGlsZSAoaGVhZCkge1xuICAgICAgZm4gPSBoZWFkLmZuO1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChoZWFkKSBub3RpZnkoKTtcbiAgICAgICAgZWxzZSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0gbGFzdCA9IHVuZGVmaW5lZDtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQuZW50ZXIoKTtcbiAgfTtcblxuICAvLyBOb2RlLmpzXG4gIGlmIChpc05vZGUpIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgICB9O1xuICAvLyBicm93c2VycyB3aXRoIE11dGF0aW9uT2JzZXJ2ZXIsIGV4Y2VwdCBpT1MgU2FmYXJpIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzMzOVxuICB9IGVsc2UgaWYgKE9ic2VydmVyICYmICEoZ2xvYmFsLm5hdmlnYXRvciAmJiBnbG9iYWwubmF2aWdhdG9yLnN0YW5kYWxvbmUpKSB7XG4gICAgdmFyIHRvZ2dsZSA9IHRydWU7XG4gICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgbmV3IE9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBub2RlLmRhdGEgPSB0b2dnbGUgPSAhdG9nZ2xlO1xuICAgIH07XG4gIC8vIGVudmlyb25tZW50cyB3aXRoIG1heWJlIG5vbi1jb21wbGV0ZWx5IGNvcnJlY3QsIGJ1dCBleGlzdGVudCBQcm9taXNlXG4gIH0gZWxzZSBpZiAoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpIHtcbiAgICAvLyBQcm9taXNlLnJlc29sdmUgd2l0aG91dCBhbiBhcmd1bWVudCB0aHJvd3MgYW4gZXJyb3IgaW4gTEcgV2ViT1MgMlxuICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvbWlzZS50aGVuKGZsdXNoKTtcbiAgICB9O1xuICAvLyBmb3Igb3RoZXIgZW52aXJvbm1lbnRzIC0gbWFjcm90YXNrIGJhc2VkIG9uOlxuICAvLyAtIHNldEltbWVkaWF0ZVxuICAvLyAtIE1lc3NhZ2VDaGFubmVsXG4gIC8vIC0gd2luZG93LnBvc3RNZXNzYWdcbiAgLy8gLSBvbnJlYWR5c3RhdGVjaGFuZ2VcbiAgLy8gLSBzZXRUaW1lb3V0XG4gIH0gZWxzZSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gc3RyYW5nZSBJRSArIHdlYnBhY2sgZGV2IHNlcnZlciBidWcgLSB1c2UgLmNhbGwoZ2xvYmFsKVxuICAgICAgbWFjcm90YXNrLmNhbGwoZ2xvYmFsLCBmbHVzaCk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZm4pIHtcbiAgICB2YXIgdGFzayA9IHsgZm46IGZuLCBuZXh0OiB1bmRlZmluZWQgfTtcbiAgICBpZiAobGFzdCkgbGFzdC5uZXh0ID0gdGFzaztcbiAgICBpZiAoIWhlYWQpIHtcbiAgICAgIGhlYWQgPSB0YXNrO1xuICAgICAgbm90aWZ5KCk7XG4gICAgfSBsYXN0ID0gdGFzaztcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyNS40LjEuNSBOZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcblxuZnVuY3Rpb24gUHJvbWlzZUNhcGFiaWxpdHkoQykge1xuICB2YXIgcmVzb2x2ZSwgcmVqZWN0O1xuICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbiAoJCRyZXNvbHZlLCAkJHJlamVjdCkge1xuICAgIGlmIChyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICByZXNvbHZlID0gJCRyZXNvbHZlO1xuICAgIHJlamVjdCA9ICQkcmVqZWN0O1xuICB9KTtcbiAgdGhpcy5yZXNvbHZlID0gYUZ1bmN0aW9uKHJlc29sdmUpO1xuICB0aGlzLnJlamVjdCA9IGFGdW5jdGlvbihyZWplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gKEMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjIuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlLCAuLi4pXG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciAkYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcblxuLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG5tb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICB2YXIgQSA9IHt9O1xuICB2YXIgQiA9IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIFMgPSBTeW1ib2woKTtcbiAgdmFyIEsgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW1NdID0gNztcbiAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoaykgeyBCW2tdID0gazsgfSk7XG4gIHJldHVybiAkYXNzaWduKHt9LCBBKVtTXSAhPSA3IHx8IE9iamVjdC5rZXlzKCRhc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBLO1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHZhciBpc0VudW0gPSBwSUUuZjtcbiAgd2hpbGUgKGFMZW4gPiBpbmRleCkge1xuICAgIHZhciBTID0gSU9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHZhciBrZXlzID0gZ2V0U3ltYm9scyA/IGdldEtleXMoUykuY29uY2F0KGdldFN5bWJvbHMoUykpIDogZ2V0S2V5cyhTKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGogPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGopIGlmIChpc0VudW0uY2FsbChTLCBrZXkgPSBrZXlzW2orK10pKSBUW2tleV0gPSBTW2tleV07XG4gIH0gcmV0dXJuIFQ7XG59IDogJGFzc2lnbjtcbiIsIi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZFBzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIEVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnaWZyYW1lJyk7XG4gIHZhciBpID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB2YXIgbHQgPSAnPCc7XG4gIHZhciBndCA9ICc+JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgcmVxdWlyZSgnLi9faHRtbCcpLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmxcbiAgLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDtcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlIChpLS0pIGRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbaV1dO1xuICByZXR1cm4gY3JlYXRlRGljdCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eSgpO1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IGdldEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgUDtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIGRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSU9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZ09QTihpdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nID8gZ2V0V2luZG93TmFtZXMoaXQpIDogZ09QTih0b0lPYmplY3QoaXQpKTtcbn07XG4iLCIvLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsIi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XG59O1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgaWYgKGtleSAhPSBJRV9QUk9UTykgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCIvLyBtb3N0IE9iamVjdCBtZXRob2RzIGJ5IEVTNiBzaG91bGQgYWNjZXB0IHByaW1pdGl2ZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGV4ZWMpIHtcbiAgdmFyIGZuID0gKGNvcmUuT2JqZWN0IHx8IHt9KVtLRVldIHx8IE9iamVjdFtLRVldO1xuICB2YXIgZXhwID0ge307XG4gIGV4cFtLRVldID0gZXhlYyhmbik7XG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBmbigxKTsgfSksICdPYmplY3QnLCBleHApO1xufTtcbiIsInZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgaXNFbnVtID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpc0VudHJpZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KGl0KTtcbiAgICB2YXIga2V5cyA9IGdldEtleXMoTyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKE8sIGtleSA9IGtleXNbaSsrXSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGlzRW50cmllcyA/IFtrZXksIE9ba2V5XV0gOiBPW2tleV0pO1xuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn07XG4iLCIvLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBSZWZsZWN0ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdDtcbm1vZHVsZS5leHBvcnRzID0gUmVmbGVjdCAmJiBSZWZsZWN0Lm93bktleXMgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdPUE4uZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgcmV0dXJuIGdldFN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsInZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlRmxvYXQ7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG5cbm1vZHVsZS5leHBvcnRzID0gMSAvICRwYXJzZUZsb2F0KHJlcXVpcmUoJy4vX3N0cmluZy13cycpICsgJy0wJykgIT09IC1JbmZpbml0eSA/IGZ1bmN0aW9uIHBhcnNlRmxvYXQoc3RyKSB7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHZhciByZXN1bHQgPSAkcGFyc2VGbG9hdChzdHJpbmcpO1xuICByZXR1cm4gcmVzdWx0ID09PSAwICYmIHN0cmluZy5jaGFyQXQoMCkgPT0gJy0nID8gLTAgOiByZXN1bHQ7XG59IDogJHBhcnNlRmxvYXQ7XG4iLCJ2YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VJbnQ7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG52YXIgd3MgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKTtcbnZhciBoZXggPSAvXlstK10/MFt4WF0vO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICRwYXJzZUludCh3cyArICcwOCcpICE9PSA4IHx8ICRwYXJzZUludCh3cyArICcweDE2JykgIT09IDIyID8gZnVuY3Rpb24gcGFyc2VJbnQoc3RyLCByYWRpeCkge1xuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpO1xuICByZXR1cm4gJHBhcnNlSW50KHN0cmluZywgKHJhZGl4ID4+PiAwKSB8fCAoaGV4LnRlc3Qoc3RyaW5nKSA/IDE2IDogMTApKTtcbn0gOiAkcGFyc2VJbnQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHsgZTogZmFsc2UsIHY6IGV4ZWMoKSB9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHsgZTogdHJ1ZSwgdjogZSB9O1xuICB9XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQywgeCkge1xuICBhbk9iamVjdChDKTtcbiAgaWYgKGlzT2JqZWN0KHgpICYmIHguY29uc3RydWN0b3IgPT09IEMpIHJldHVybiB4O1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKEMpO1xuICB2YXIgcmVzb2x2ZSA9IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmU7XG4gIHJlc29sdmUoeCk7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufTtcbiIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgc2FmZSkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSByZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIHNhZmUpO1xuICByZXR1cm4gdGFyZ2V0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFNSQyA9IHJlcXVpcmUoJy4vX3VpZCcpKCdzcmMnKTtcbnZhciAkdG9TdHJpbmcgPSByZXF1aXJlKCcuL19mdW5jdGlvbi10by1zdHJpbmcnKTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyIFRQTCA9ICgnJyArICR0b1N0cmluZykuc3BsaXQoVE9fU1RSSU5HKTtcblxucmVxdWlyZSgnLi9fY29yZScpLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuICR0b1N0cmluZy5jYWxsKGl0KTtcbn07XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbCwgc2FmZSkge1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWwgPT0gJ2Z1bmN0aW9uJztcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsICduYW1lJykgfHwgaGlkZSh2YWwsICduYW1lJywga2V5KTtcbiAgaWYgKE9ba2V5XSA9PT0gdmFsKSByZXR1cm47XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCBTUkMpIHx8IGhpZGUodmFsLCBTUkMsIE9ba2V5XSA/ICcnICsgT1trZXldIDogVFBMLmpvaW4oU3RyaW5nKGtleSkpKTtcbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIGlmICghc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH0gZWxzZSBpZiAoT1trZXldKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2Uge1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgdGhpc1tTUkNdIHx8ICR0b1N0cmluZy5jYWxsKHRoaXMpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIGJ1aWx0aW5FeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xuXG4gLy8gYFJlZ0V4cEV4ZWNgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwZXhlY1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUiwgUykge1xuICB2YXIgZXhlYyA9IFIuZXhlYztcbiAgaWYgKHR5cGVvZiBleGVjID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHJlc3VsdCA9IGV4ZWMuY2FsbChSLCBTKTtcbiAgICBpZiAodHlwZW9mIHJlc3VsdCAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZ0V4cCBleGVjIG1ldGhvZCByZXR1cm5lZCBzb21ldGhpbmcgb3RoZXIgdGhhbiBhbiBPYmplY3Qgb3IgbnVsbCcpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGlmIChjbGFzc29mKFIpICE9PSAnUmVnRXhwJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZ0V4cCNleGVjIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgcmVjZWl2ZXInKTtcbiAgfVxuICByZXR1cm4gYnVpbHRpbkV4ZWMuY2FsbChSLCBTKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWdleHBGbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG5cbnZhciBuYXRpdmVFeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xuLy8gVGhpcyBhbHdheXMgcmVmZXJzIHRvIHRoZSBuYXRpdmUgaW1wbGVtZW50YXRpb24sIGJlY2F1c2UgdGhlXG4vLyBTdHJpbmcjcmVwbGFjZSBwb2x5ZmlsbCB1c2VzIC4vZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYy5qcyxcbi8vIHdoaWNoIGxvYWRzIHRoaXMgZmlsZSBiZWZvcmUgcGF0Y2hpbmcgdGhlIG1ldGhvZC5cbnZhciBuYXRpdmVSZXBsYWNlID0gU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlO1xuXG52YXIgcGF0Y2hlZEV4ZWMgPSBuYXRpdmVFeGVjO1xuXG52YXIgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xuXG52YXIgVVBEQVRFU19MQVNUX0lOREVYX1dST05HID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlMSA9IC9hLyxcbiAgICAgIHJlMiA9IC9iKi9nO1xuICBuYXRpdmVFeGVjLmNhbGwocmUxLCAnYScpO1xuICBuYXRpdmVFeGVjLmNhbGwocmUyLCAnYScpO1xuICByZXR1cm4gcmUxW0xBU1RfSU5ERVhdICE9PSAwIHx8IHJlMltMQVNUX0lOREVYXSAhPT0gMDtcbn0pKCk7XG5cbi8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwLCBjb3BpZWQgZnJvbSBlczUtc2hpbSdzIFN0cmluZyNzcGxpdCBwYXRjaC5cbnZhciBOUENHX0lOQ0xVREVEID0gLygpPz8vLmV4ZWMoJycpWzFdICE9PSB1bmRlZmluZWQ7XG5cbnZhciBQQVRDSCA9IFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyB8fCBOUENHX0lOQ0xVREVEO1xuXG5pZiAoUEFUQ0gpIHtcbiAgcGF0Y2hlZEV4ZWMgPSBmdW5jdGlvbiBleGVjKHN0cikge1xuICAgIHZhciByZSA9IHRoaXM7XG4gICAgdmFyIGxhc3RJbmRleCwgcmVDb3B5LCBtYXRjaCwgaTtcblxuICAgIGlmIChOUENHX0lOQ0xVREVEKSB7XG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeJyArIHJlLnNvdXJjZSArICckKD8hXFxcXHMpJywgcmVnZXhwRmxhZ3MuY2FsbChyZSkpO1xuICAgIH1cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HKSBsYXN0SW5kZXggPSByZVtMQVNUX0lOREVYXTtcblxuICAgIG1hdGNoID0gbmF0aXZlRXhlYy5jYWxsKHJlLCBzdHIpO1xuXG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyAmJiBtYXRjaCkge1xuICAgICAgcmVbTEFTVF9JTkRFWF0gPSByZS5nbG9iYWwgPyBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCA6IGxhc3RJbmRleDtcbiAgICB9XG4gICAgaWYgKE5QQ0dfSU5DTFVERUQgJiYgbWF0Y2ggJiYgbWF0Y2gubGVuZ3RoID4gMSkge1xuICAgICAgLy8gRml4IGJyb3dzZXJzIHdob3NlIGBleGVjYCBtZXRob2RzIGRvbid0IGNvbnNpc3RlbnRseSByZXR1cm4gYHVuZGVmaW5lZGBcbiAgICAgIC8vIGZvciBOUENHLCBsaWtlIElFOC4gTk9URTogVGhpcyBkb2Vzbicgd29yayBmb3IgLyguPyk/L1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvb3AtZnVuY1xuICAgICAgbmF0aXZlUmVwbGFjZS5jYWxsKG1hdGNoWzBdLCByZUNvcHksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAyOyBpKyspIHtcbiAgICAgICAgICBpZiAoYXJndW1lbnRzW2ldID09PSB1bmRlZmluZWQpIG1hdGNoW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWF0Y2g7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcGF0Y2hlZEV4ZWM7XG4iLCIvLyA3LjIuOSBTYW1lVmFsdWUoeCwgeSlcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmlzIHx8IGZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICByZXR1cm4geCA9PT0geSA/IHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5IDogeCAhPSB4ICYmIHkgIT0geTtcbn07XG4iLCIvLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGNoZWNrID0gZnVuY3Rpb24gKE8sIHByb3RvKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBpZiAoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCkgdGhyb3cgVHlwZUVycm9yKHByb3RvICsgXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpO1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZnVuY3Rpb24gKHRlc3QsIGJ1Z2d5LCBzZXQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNldCA9IHJlcXVpcmUoJy4vX2N0eCcpKEZ1bmN0aW9uLmNhbGwsIHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTtcbiAgICAgICAgc2V0KHRlc3QsIFtdKTtcbiAgICAgICAgYnVnZ3kgPSAhKHRlc3QgaW5zdGFuY2VvZiBBcnJheSk7XG4gICAgICB9IGNhdGNoIChlKSB7IGJ1Z2d5ID0gdHJ1ZTsgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgICAgIGNoZWNrKE8sIHByb3RvKTtcbiAgICAgICAgaWYgKGJ1Z2d5KSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgICAgICBlbHNlIHNldChPLCBwcm90byk7XG4gICAgICAgIHJldHVybiBPO1xuICAgICAgfTtcbiAgICB9KHt9LCBmYWxzZSkgOiB1bmRlZmluZWQpLFxuICBjaGVjazogY2hlY2tcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSkge1xuICB2YXIgQyA9IGdsb2JhbFtLRVldO1xuICBpZiAoREVTQ1JJUFRPUlMgJiYgQyAmJiAhQ1tTUEVDSUVTXSkgZFAuZihDLCBTUEVDSUVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfVxuICB9KTtcbn07XG4iLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIHRhZywgc3RhdCkge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSkgZGVmKGl0LCBUQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pO1xufTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgna2V5cycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBzaGFyZWRba2V5XSB8fCAoc2hhcmVkW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuIiwidmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xufSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICB2ZXJzaW9uOiBjb3JlLnZlcnNpb24sXG4gIG1vZGU6IHJlcXVpcmUoJy4vX2xpYnJhcnknKSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDE5IERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xufSk7XG4iLCIvLyA3LjMuMjAgU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3RvcilcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIEQpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gRCA6IGFGdW5jdGlvbihTKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtZXRob2QsIGFyZykge1xuICByZXR1cm4gISFtZXRob2QgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNhbGxcbiAgICBhcmcgPyBtZXRob2QuY2FsbChudWxsLCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIDEpIDogbWV0aG9kLmNhbGwobnVsbCk7XG4gIH0pO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBwb3MpIHtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgICB2YXIgaSA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBsID0gcy5sZW5ndGg7XG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGkgPCAwIHx8IGkgPj0gbCkgcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG4iLCIvLyBoZWxwZXIgZm9yIFN0cmluZyN7c3RhcnRzV2l0aCwgZW5kc1dpdGgsIGluY2x1ZGVzfVxudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgc2VhcmNoU3RyaW5nLCBOQU1FKSB7XG4gIGlmIChpc1JlZ0V4cChzZWFyY2hTdHJpbmcpKSB0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZyMnICsgTkFNRSArIFwiIGRvZXNuJ3QgYWNjZXB0IHJlZ2V4IVwiKTtcbiAgcmV0dXJuIFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbn07XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIHF1b3QgPSAvXCIvZztcbi8vIEIuMi4zLjIuMSBDcmVhdGVIVE1MKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKVxudmFyIGNyZWF0ZUhUTUwgPSBmdW5jdGlvbiAoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgdmFyIFMgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTtcbiAgdmFyIHAxID0gJzwnICsgdGFnO1xuICBpZiAoYXR0cmlidXRlICE9PSAnJykgcDEgKz0gJyAnICsgYXR0cmlidXRlICsgJz1cIicgKyBTdHJpbmcodmFsdWUpLnJlcGxhY2UocXVvdCwgJyZxdW90OycpICsgJ1wiJztcbiAgcmV0dXJuIHAxICsgJz4nICsgUyArICc8LycgKyB0YWcgKyAnPic7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSwgZXhlYykge1xuICB2YXIgTyA9IHt9O1xuICBPW05BTUVdID0gZXhlYyhjcmVhdGVIVE1MKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRlc3QgPSAnJ1tOQU1FXSgnXCInKTtcbiAgICByZXR1cm4gdGVzdCAhPT0gdGVzdC50b0xvd2VyQ2FzZSgpIHx8IHRlc3Quc3BsaXQoJ1wiJykubGVuZ3RoID4gMztcbiAgfSksICdTdHJpbmcnLCBPKTtcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIG1heExlbmd0aCwgZmlsbFN0cmluZywgbGVmdCkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgdmFyIHN0cmluZ0xlbmd0aCA9IFMubGVuZ3RoO1xuICB2YXIgZmlsbFN0ciA9IGZpbGxTdHJpbmcgPT09IHVuZGVmaW5lZCA/ICcgJyA6IFN0cmluZyhmaWxsU3RyaW5nKTtcbiAgdmFyIGludE1heExlbmd0aCA9IHRvTGVuZ3RoKG1heExlbmd0aCk7XG4gIGlmIChpbnRNYXhMZW5ndGggPD0gc3RyaW5nTGVuZ3RoIHx8IGZpbGxTdHIgPT0gJycpIHJldHVybiBTO1xuICB2YXIgZmlsbExlbiA9IGludE1heExlbmd0aCAtIHN0cmluZ0xlbmd0aDtcbiAgdmFyIHN0cmluZ0ZpbGxlciA9IHJlcGVhdC5jYWxsKGZpbGxTdHIsIE1hdGguY2VpbChmaWxsTGVuIC8gZmlsbFN0ci5sZW5ndGgpKTtcbiAgaWYgKHN0cmluZ0ZpbGxlci5sZW5ndGggPiBmaWxsTGVuKSBzdHJpbmdGaWxsZXIgPSBzdHJpbmdGaWxsZXIuc2xpY2UoMCwgZmlsbExlbik7XG4gIHJldHVybiBsZWZ0ID8gc3RyaW5nRmlsbGVyICsgUyA6IFMgKyBzdHJpbmdGaWxsZXI7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlcGVhdChjb3VudCkge1xuICB2YXIgc3RyID0gU3RyaW5nKGRlZmluZWQodGhpcykpO1xuICB2YXIgcmVzID0gJyc7XG4gIHZhciBuID0gdG9JbnRlZ2VyKGNvdW50KTtcbiAgaWYgKG4gPCAwIHx8IG4gPT0gSW5maW5pdHkpIHRocm93IFJhbmdlRXJyb3IoXCJDb3VudCBjYW4ndCBiZSBuZWdhdGl2ZVwiKTtcbiAgZm9yICg7biA+IDA7IChuID4+Pj0gMSkgJiYgKHN0ciArPSBzdHIpKSBpZiAobiAmIDEpIHJlcyArPSBzdHI7XG4gIHJldHVybiByZXM7XG59O1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzcGFjZXMgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKTtcbnZhciBzcGFjZSA9ICdbJyArIHNwYWNlcyArICddJztcbnZhciBub24gPSAnXFx1MjAwYlxcdTAwODUnO1xudmFyIGx0cmltID0gUmVnRXhwKCdeJyArIHNwYWNlICsgc3BhY2UgKyAnKicpO1xudmFyIHJ0cmltID0gUmVnRXhwKHNwYWNlICsgc3BhY2UgKyAnKiQnKTtcblxudmFyIGV4cG9ydGVyID0gZnVuY3Rpb24gKEtFWSwgZXhlYywgQUxJQVMpIHtcbiAgdmFyIGV4cCA9IHt9O1xuICB2YXIgRk9SQ0UgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhc3BhY2VzW0tFWV0oKSB8fCBub25bS0VZXSgpICE9IG5vbjtcbiAgfSk7XG4gIHZhciBmbiA9IGV4cFtLRVldID0gRk9SQ0UgPyBleGVjKHRyaW0pIDogc3BhY2VzW0tFWV07XG4gIGlmIChBTElBUykgZXhwW0FMSUFTXSA9IGZuO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFLCAnU3RyaW5nJywgZXhwKTtcbn07XG5cbi8vIDEgLT4gU3RyaW5nI3RyaW1MZWZ0XG4vLyAyIC0+IFN0cmluZyN0cmltUmlnaHRcbi8vIDMgLT4gU3RyaW5nI3RyaW1cbnZhciB0cmltID0gZXhwb3J0ZXIudHJpbSA9IGZ1bmN0aW9uIChzdHJpbmcsIFRZUEUpIHtcbiAgc3RyaW5nID0gU3RyaW5nKGRlZmluZWQoc3RyaW5nKSk7XG4gIGlmIChUWVBFICYgMSkgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UobHRyaW0sICcnKTtcbiAgaWYgKFRZUEUgJiAyKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShydHJpbSwgJycpO1xuICByZXR1cm4gc3RyaW5nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0gJ1xceDA5XFx4MEFcXHgwQlxceDBDXFx4MERcXHgyMFxceEEwXFx1MTY4MFxcdTE4MEVcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzJyArXG4gICdcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOFxcdTIwMjlcXHVGRUZGJztcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi9faHRtbCcpO1xudmFyIGNlbCA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgc2V0VGFzayA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG52YXIgY2xlYXJUYXNrID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsO1xudmFyIERpc3BhdGNoID0gZ2xvYmFsLkRpc3BhdGNoO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG52YXIgcnVuID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaWQgPSArdGhpcztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICBpZiAocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBydW4uY2FsbChldmVudC5kYXRhKTtcbn07XG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZiAoIXNldFRhc2sgfHwgIWNsZWFyVGFzaykge1xuICBzZXRUYXNrID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICB2YXIgaSA9IDE7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgIGludm9rZSh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhclRhc2sgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkge1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZiAocmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBjdHgocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgJyonKTtcbiAgICB9O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjZWwoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2VsKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuLmNhbGwoaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBzZXRUaW1lb3V0KGN0eChydW4sIGlkLCAxKSwgMCk7XG4gICAgfTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0VGFzayxcbiAgY2xlYXI6IGNsZWFyVGFza1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59O1xuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9pbmRleFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09PSB1bmRlZmluZWQpIHJldHVybiAwO1xuICB2YXIgbnVtYmVyID0gdG9JbnRlZ2VyKGl0KTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKG51bWJlcik7XG4gIGlmIChudW1iZXIgIT09IGxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3JvbmcgbGVuZ3RoIScpO1xuICByZXR1cm4gbGVuZ3RoO1xufTtcbiIsIi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuIiwiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcbiIsIi8vIDcuMS4xNSBUb0xlbmd0aFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwiLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSkge1xuICB2YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbiAgdmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xuICB2YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuICB2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuICB2YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcbiAgdmFyICRidWZmZXIgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKTtcbiAgdmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xuICB2YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG4gIHZhciBwcm9wZXJ0eURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG4gIHZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xuICB2YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbiAgdmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbiAgdmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG4gIHZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbiAgdmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG4gIHZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuICB2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG4gIHZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xuICB2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbiAgdmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG4gIHZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbiAgdmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbiAgdmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuICB2YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbiAgdmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG4gIHZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbiAgdmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xuICB2YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XG4gIHZhciBjcmVhdGVBcnJheUluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKTtcbiAgdmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbiAgdmFyIEFycmF5SXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbiAgdmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xuICB2YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xuICB2YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XG4gIHZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG4gIHZhciBhcnJheUNvcHlXaXRoaW4gPSByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpO1xuICB2YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG4gIHZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG4gIHZhciBkUCA9ICREUC5mO1xuICB2YXIgZ09QRCA9ICRHT1BELmY7XG4gIHZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG4gIHZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xuICB2YXIgVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5O1xuICB2YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbiAgdmFyIFNIQVJFRF9CVUZGRVIgPSAnU2hhcmVkJyArIEFSUkFZX0JVRkZFUjtcbiAgdmFyIEJZVEVTX1BFUl9FTEVNRU5UID0gJ0JZVEVTX1BFUl9FTEVNRU5UJztcbiAgdmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuICB2YXIgQXJyYXlQcm90byA9IEFycmF5W1BST1RPVFlQRV07XG4gIHZhciAkQXJyYXlCdWZmZXIgPSAkYnVmZmVyLkFycmF5QnVmZmVyO1xuICB2YXIgJERhdGFWaWV3ID0gJGJ1ZmZlci5EYXRhVmlldztcbiAgdmFyIGFycmF5Rm9yRWFjaCA9IGNyZWF0ZUFycmF5TWV0aG9kKDApO1xuICB2YXIgYXJyYXlGaWx0ZXIgPSBjcmVhdGVBcnJheU1ldGhvZCgyKTtcbiAgdmFyIGFycmF5U29tZSA9IGNyZWF0ZUFycmF5TWV0aG9kKDMpO1xuICB2YXIgYXJyYXlFdmVyeSA9IGNyZWF0ZUFycmF5TWV0aG9kKDQpO1xuICB2YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XG4gIHZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xuICB2YXIgYXJyYXlJbmNsdWRlcyA9IGNyZWF0ZUFycmF5SW5jbHVkZXModHJ1ZSk7XG4gIHZhciBhcnJheUluZGV4T2YgPSBjcmVhdGVBcnJheUluY2x1ZGVzKGZhbHNlKTtcbiAgdmFyIGFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvcnMudmFsdWVzO1xuICB2YXIgYXJyYXlLZXlzID0gQXJyYXlJdGVyYXRvcnMua2V5cztcbiAgdmFyIGFycmF5RW50cmllcyA9IEFycmF5SXRlcmF0b3JzLmVudHJpZXM7XG4gIHZhciBhcnJheUxhc3RJbmRleE9mID0gQXJyYXlQcm90by5sYXN0SW5kZXhPZjtcbiAgdmFyIGFycmF5UmVkdWNlID0gQXJyYXlQcm90by5yZWR1Y2U7XG4gIHZhciBhcnJheVJlZHVjZVJpZ2h0ID0gQXJyYXlQcm90by5yZWR1Y2VSaWdodDtcbiAgdmFyIGFycmF5Sm9pbiA9IEFycmF5UHJvdG8uam9pbjtcbiAgdmFyIGFycmF5U29ydCA9IEFycmF5UHJvdG8uc29ydDtcbiAgdmFyIGFycmF5U2xpY2UgPSBBcnJheVByb3RvLnNsaWNlO1xuICB2YXIgYXJyYXlUb1N0cmluZyA9IEFycmF5UHJvdG8udG9TdHJpbmc7XG4gIHZhciBhcnJheVRvTG9jYWxlU3RyaW5nID0gQXJyYXlQcm90by50b0xvY2FsZVN0cmluZztcbiAgdmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xuICB2YXIgVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xuICB2YXIgVFlQRURfQ09OU1RSVUNUT1IgPSB1aWQoJ3R5cGVkX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBERUZfQ09OU1RSVUNUT1IgPSB1aWQoJ2RlZl9jb25zdHJ1Y3RvcicpO1xuICB2YXIgQUxMX0NPTlNUUlVDVE9SUyA9ICR0eXBlZC5DT05TVFI7XG4gIHZhciBUWVBFRF9BUlJBWSA9ICR0eXBlZC5UWVBFRDtcbiAgdmFyIFZJRVcgPSAkdHlwZWQuVklFVztcbiAgdmFyIFdST05HX0xFTkdUSCA9ICdXcm9uZyBsZW5ndGghJztcblxuICB2YXIgJG1hcCA9IGNyZWF0ZUFycmF5TWV0aG9kKDEsIGZ1bmN0aW9uIChPLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gYWxsb2NhdGUoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxlbmd0aCk7XG4gIH0pO1xuXG4gIHZhciBMSVRUTEVfRU5ESUFOID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShuZXcgVWludDE2QXJyYXkoWzFdKS5idWZmZXIpWzBdID09PSAxO1xuICB9KTtcblxuICB2YXIgRk9SQ0VEX1NFVCA9ICEhVWludDhBcnJheSAmJiAhIVVpbnQ4QXJyYXlbUFJPVE9UWVBFXS5zZXQgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBVaW50OEFycmF5KDEpLnNldCh7fSk7XG4gIH0pO1xuXG4gIHZhciB0b09mZnNldCA9IGZ1bmN0aW9uIChpdCwgQllURVMpIHtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGl0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIHJldHVybiBvZmZzZXQ7XG4gIH07XG5cbiAgdmFyIHZhbGlkYXRlID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgaWYgKGlzT2JqZWN0KGl0KSAmJiBUWVBFRF9BUlJBWSBpbiBpdCkgcmV0dXJuIGl0O1xuICAgIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgdHlwZWQgYXJyYXkhJyk7XG4gIH07XG5cbiAgdmFyIGFsbG9jYXRlID0gZnVuY3Rpb24gKEMsIGxlbmd0aCkge1xuICAgIGlmICghKGlzT2JqZWN0KEMpICYmIFRZUEVEX0NPTlNUUlVDVE9SIGluIEMpKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0l0IGlzIG5vdCBhIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yIScpO1xuICAgIH0gcmV0dXJuIG5ldyBDKGxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHNwZWNpZXNGcm9tTGlzdCA9IGZ1bmN0aW9uIChPLCBsaXN0KSB7XG4gICAgcmV0dXJuIGZyb21MaXN0KHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsaXN0KTtcbiAgfTtcblxuICB2YXIgZnJvbUxpc3QgPSBmdW5jdGlvbiAoQywgbGlzdCkge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZShDLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKGl0LCBrZXksIGludGVybmFsKSB7XG4gICAgZFAoaXQsIGtleSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RbaW50ZXJuYWxdOyB9IH0pO1xuICB9O1xuXG4gIHZhciAkZnJvbSA9IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwZm4sIHRoaXNBcmcgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHNvdXJjZSk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBpLCBsZW5ndGgsIHZhbHVlcywgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhaXNBcnJheUl0ZXIoaXRlckZuKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCB2YWx1ZXMgPSBbXSwgaSA9IDA7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaSsrKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKHN0ZXAudmFsdWUpO1xuICAgICAgfSBPID0gdmFsdWVzO1xuICAgIH1cbiAgICBpZiAobWFwcGluZyAmJiBhTGVuID4gMikgbWFwZm4gPSBjdHgobWFwZm4sIGFyZ3VtZW50c1syXSwgMik7XG4gICAgZm9yIChpID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpLCByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpOyBsZW5ndGggPiBpOyBpKyspIHtcbiAgICAgIHJlc3VsdFtpXSA9IG1hcHBpbmcgPyBtYXBmbihPW2ldLCBpKSA6IE9baV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyICRvZiA9IGZ1bmN0aW9uIG9mKC8qIC4uLml0ZW1zICovKSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBhcmd1bWVudHNbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBpT1MgU2FmYXJpIDYueCBmYWlscyBoZXJlXG4gIHZhciBUT19MT0NBTEVfQlVHID0gISFVaW50OEFycmF5ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb0xvY2FsZVN0cmluZy5jYWxsKG5ldyBVaW50OEFycmF5KDEpKTsgfSk7XG5cbiAgdmFyICR0b0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvTG9jYWxlU3RyaW5nKCkge1xuICAgIHJldHVybiBhcnJheVRvTG9jYWxlU3RyaW5nLmFwcGx5KFRPX0xPQ0FMRV9CVUcgPyBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcykpIDogdmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgdmFyIHByb3RvID0ge1xuICAgIGNvcHlXaXRoaW46IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCAvKiAsIGVuZCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5Q29weVdpdGhpbi5jYWxsKHZhbGlkYXRlKHRoaXMpLCB0YXJnZXQsIHN0YXJ0LCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUV2ZXJ5KHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaWxsOiBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQsIGVuZCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlGaWxsLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlGaWx0ZXIodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sXG4gICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSk7XG4gICAgfSxcbiAgICBmaW5kOiBmdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUZpbmQodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZEluZGV4KHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIGFycmF5Rm9yRWFjaCh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmRleE9mKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xuICAgICAgcmV0dXJuIGFycmF5SW5jbHVkZXModmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUpvaW4uYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlMYXN0SW5kZXhPZi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIG1hcDogZnVuY3Rpb24gbWFwKG1hcGZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuICRtYXAodmFsaWRhdGUodGhpcyksIG1hcGZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZS5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZVJpZ2h0LmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBsZW5ndGggPSB2YWxpZGF0ZSh0aGF0KS5sZW5ndGg7XG4gICAgICB2YXIgbWlkZGxlID0gTWF0aC5mbG9vcihsZW5ndGggLyAyKTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgdmFsdWU7XG4gICAgICB3aGlsZSAoaW5kZXggPCBtaWRkbGUpIHtcbiAgICAgICAgdmFsdWUgPSB0aGF0W2luZGV4XTtcbiAgICAgICAgdGhhdFtpbmRleCsrXSA9IHRoYXRbLS1sZW5ndGhdO1xuICAgICAgICB0aGF0W2xlbmd0aF0gPSB2YWx1ZTtcbiAgICAgIH0gcmV0dXJuIHRoYXQ7XG4gICAgfSxcbiAgICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb21lKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgICAgcmV0dXJuIGFycmF5U29ydC5jYWxsKHZhbGlkYXRlKHRoaXMpLCBjb21wYXJlZm4pO1xuICAgIH0sXG4gICAgc3ViYXJyYXk6IGZ1bmN0aW9uIHN1YmFycmF5KGJlZ2luLCBlbmQpIHtcbiAgICAgIHZhciBPID0gdmFsaWRhdGUodGhpcyk7XG4gICAgICB2YXIgbGVuZ3RoID0gTy5sZW5ndGg7XG4gICAgICB2YXIgJGJlZ2luID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW5ndGgpO1xuICAgICAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSkpKFxuICAgICAgICBPLmJ1ZmZlcixcbiAgICAgICAgTy5ieXRlT2Zmc2V0ICsgJGJlZ2luICogTy5CWVRFU19QRVJfRUxFTUVOVCxcbiAgICAgICAgdG9MZW5ndGgoKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKSkgLSAkYmVnaW4pXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICB2YXIgJHNsaWNlID0gZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpLCBzdGFydCwgZW5kKSk7XG4gIH07XG5cbiAgdmFyICRzZXQgPSBmdW5jdGlvbiBzZXQoYXJyYXlMaWtlIC8qICwgb2Zmc2V0ICovKSB7XG4gICAgdmFsaWRhdGUodGhpcyk7XG4gICAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50c1sxXSwgMSk7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgIHZhciBzcmMgPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aChzcmMubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGlmIChsZW4gKyBvZmZzZXQgPiBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB3aGlsZSAoaW5kZXggPCBsZW4pIHRoaXNbb2Zmc2V0ICsgaW5kZXhdID0gc3JjW2luZGV4KytdO1xuICB9O1xuXG4gIHZhciAkaXRlcmF0b3JzID0ge1xuICAgIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gICAgICByZXR1cm4gYXJyYXlFbnRyaWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAga2V5czogZnVuY3Rpb24ga2V5cygpIHtcbiAgICAgIHJldHVybiBhcnJheUtleXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgICAgIHJldHVybiBhcnJheVZhbHVlcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzVEFJbmRleCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc09iamVjdCh0YXJnZXQpXG4gICAgICAmJiB0YXJnZXRbVFlQRURfQVJSQVldXG4gICAgICAmJiB0eXBlb2Yga2V5ICE9ICdzeW1ib2wnXG4gICAgICAmJiBrZXkgaW4gdGFyZ2V0XG4gICAgICAmJiBTdHJpbmcoK2tleSkgPT0gU3RyaW5nKGtleSk7XG4gIH07XG4gIHZhciAkZ2V0RGVzYyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkge1xuICAgIHJldHVybiBpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgPyBwcm9wZXJ0eURlc2MoMiwgdGFyZ2V0W2tleV0pXG4gICAgICA6IGdPUEQodGFyZ2V0LCBrZXkpO1xuICB9O1xuICB2YXIgJHNldERlc2MgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIGlmIChpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgJiYgaXNPYmplY3QoZGVzYylcbiAgICAgICYmIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnZ2V0JylcbiAgICAgICYmICFoYXMoZGVzYywgJ3NldCcpXG4gICAgICAvLyBUT0RPOiBhZGQgdmFsaWRhdGlvbiBkZXNjcmlwdG9yIHcvbyBjYWxsaW5nIGFjY2Vzc29yc1xuICAgICAgJiYgIWRlc2MuY29uZmlndXJhYmxlXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnd3JpdGFibGUnKSB8fCBkZXNjLndyaXRhYmxlKVxuICAgICAgJiYgKCFoYXMoZGVzYywgJ2VudW1lcmFibGUnKSB8fCBkZXNjLmVudW1lcmFibGUpXG4gICAgKSB7XG4gICAgICB0YXJnZXRba2V5XSA9IGRlc2MudmFsdWU7XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH0gcmV0dXJuIGRQKHRhcmdldCwga2V5LCBkZXNjKTtcbiAgfTtcblxuICBpZiAoIUFMTF9DT05TVFJVQ1RPUlMpIHtcbiAgICAkR09QRC5mID0gJGdldERlc2M7XG4gICAgJERQLmYgPSAkc2V0RGVzYztcbiAgfVxuXG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIUFMTF9DT05TVFJVQ1RPUlMsICdPYmplY3QnLCB7XG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0RGVzYyxcbiAgICBkZWZpbmVQcm9wZXJ0eTogJHNldERlc2NcbiAgfSk7XG5cbiAgaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb1N0cmluZy5jYWxsKHt9KTsgfSkpIHtcbiAgICBhcnJheVRvU3RyaW5nID0gYXJyYXlUb0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRoaXMpO1xuICAgIH07XG4gIH1cblxuICB2YXIgJFR5cGVkQXJyYXlQcm90b3R5cGUkID0gcmVkZWZpbmVBbGwoe30sIHByb3RvKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAkaXRlcmF0b3JzKTtcbiAgaGlkZSgkVHlwZWRBcnJheVByb3RvdHlwZSQsIElURVJBVE9SLCAkaXRlcmF0b3JzLnZhbHVlcyk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwge1xuICAgIHNsaWNlOiAkc2xpY2UsXG4gICAgc2V0OiAkc2V0LFxuICAgIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiAoKSB7IC8qIG5vb3AgKi8gfSxcbiAgICB0b1N0cmluZzogYXJyYXlUb1N0cmluZyxcbiAgICB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nXG4gIH0pO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnVmZmVyJywgJ2InKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVPZmZzZXQnLCAnbycpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZUxlbmd0aCcsICdsJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdsZW5ndGgnLCAnZScpO1xuICBkUCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIFRBRywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tUWVBFRF9BUlJBWV07IH1cbiAgfSk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgQllURVMsIHdyYXBwZXIsIENMQU1QRUQpIHtcbiAgICBDTEFNUEVEID0gISFDTEFNUEVEO1xuICAgIHZhciBOQU1FID0gS0VZICsgKENMQU1QRUQgPyAnQ2xhbXBlZCcgOiAnJykgKyAnQXJyYXknO1xuICAgIHZhciBHRVRURVIgPSAnZ2V0JyArIEtFWTtcbiAgICB2YXIgU0VUVEVSID0gJ3NldCcgKyBLRVk7XG4gICAgdmFyIFR5cGVkQXJyYXkgPSBnbG9iYWxbTkFNRV07XG4gICAgdmFyIEJhc2UgPSBUeXBlZEFycmF5IHx8IHt9O1xuICAgIHZhciBUQUMgPSBUeXBlZEFycmF5ICYmIGdldFByb3RvdHlwZU9mKFR5cGVkQXJyYXkpO1xuICAgIHZhciBGT1JDRUQgPSAhVHlwZWRBcnJheSB8fCAhJHR5cGVkLkFCVjtcbiAgICB2YXIgTyA9IHt9O1xuICAgIHZhciBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheSAmJiBUeXBlZEFycmF5W1BST1RPVFlQRV07XG4gICAgdmFyIGdldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgcmV0dXJuIGRhdGEudltHRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIGlmIChDTEFNUEVEKSB2YWx1ZSA9ICh2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpKSA8IDAgPyAwIDogdmFsdWUgPiAweGZmID8gMHhmZiA6IHZhbHVlICYgMHhmZjtcbiAgICAgIGRhdGEudltTRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIHZhbHVlLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBhZGRFbGVtZW50ID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICBkUCh0aGF0LCBpbmRleCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0dGVyKHRoaXMsIGluZGV4KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gc2V0dGVyKHRoaXMsIGluZGV4LCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FLCAnX2QnKTtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICAgIHZhciBidWZmZXIsIGJ5dGVMZW5ndGgsIGxlbmd0aCwga2xhc3M7XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgICAgICBsZW5ndGggPSB0b0luZGV4KGRhdGEpO1xuICAgICAgICAgIGJ5dGVMZW5ndGggPSBsZW5ndGggKiBCWVRFUztcbiAgICAgICAgICBidWZmZXIgPSBuZXcgJEFycmF5QnVmZmVyKGJ5dGVMZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcbiAgICAgICAgICBidWZmZXIgPSBkYXRhO1xuICAgICAgICAgIG9mZnNldCA9IHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKTtcbiAgICAgICAgICB2YXIgJGxlbiA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBpZiAoJGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoJGxlbiAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gJGxlbiAtIG9mZnNldDtcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoIDwgMCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gdG9MZW5ndGgoJGxlbmd0aCkgKiBCWVRFUztcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoICsgb2Zmc2V0ID4gJGxlbikgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGggPSBieXRlTGVuZ3RoIC8gQllURVM7XG4gICAgICAgIH0gZWxzZSBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkge1xuICAgICAgICAgIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBoaWRlKHRoYXQsICdfZCcsIHtcbiAgICAgICAgICBiOiBidWZmZXIsXG4gICAgICAgICAgbzogb2Zmc2V0LFxuICAgICAgICAgIGw6IGJ5dGVMZW5ndGgsXG4gICAgICAgICAgZTogbGVuZ3RoLFxuICAgICAgICAgIHY6IG5ldyAkRGF0YVZpZXcoYnVmZmVyKVxuICAgICAgICB9KTtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSBhZGRFbGVtZW50KHRoYXQsIGluZGV4KyspO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gY3JlYXRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCk7XG4gICAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIFR5cGVkQXJyYXkpO1xuICAgIH0gZWxzZSBpZiAoIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIFR5cGVkQXJyYXkoMSk7XG4gICAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9KSB8fCAhJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgICAgIG5ldyBUeXBlZEFycmF5KCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShudWxsKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShpdGVyKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9LCB0cnVlKSkge1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FKTtcbiAgICAgICAgdmFyIGtsYXNzO1xuICAgICAgICAvLyBgd3NgIG1vZHVsZSBidWcsIHRlbXBvcmFyaWx5IHJlbW92ZSB2YWxpZGF0aW9uIGxlbmd0aCBmb3IgVWludDhBcnJheVxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2Vic29ja2V0cy93cy9wdWxsLzY0NVxuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSByZXR1cm4gbmV3IEJhc2UodG9JbmRleChkYXRhKSk7XG4gICAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKSB7XG4gICAgICAgICAgcmV0dXJuICRsZW5ndGggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyksICRsZW5ndGgpXG4gICAgICAgICAgICA6ICRvZmZzZXQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSlcbiAgICAgICAgICAgICAgOiBuZXcgQmFzZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoVFlQRURfQVJSQVkgaW4gZGF0YSkgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgIH0pO1xuICAgICAgYXJyYXlGb3JFYWNoKFRBQyAhPT0gRnVuY3Rpb24ucHJvdG90eXBlID8gZ09QTihCYXNlKS5jb25jYXQoZ09QTihUQUMpKSA6IGdPUE4oQmFzZSksIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIFR5cGVkQXJyYXkpKSBoaWRlKFR5cGVkQXJyYXksIGtleSwgQmFzZVtrZXldKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gVHlwZWRBcnJheVByb3RvdHlwZTtcbiAgICAgIGlmICghTElCUkFSWSkgVHlwZWRBcnJheVByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFR5cGVkQXJyYXk7XG4gICAgfVxuICAgIHZhciAkbmF0aXZlSXRlcmF0b3IgPSBUeXBlZEFycmF5UHJvdG90eXBlW0lURVJBVE9SXTtcbiAgICB2YXIgQ09SUkVDVF9JVEVSX05BTUUgPSAhISRuYXRpdmVJdGVyYXRvclxuICAgICAgJiYgKCRuYXRpdmVJdGVyYXRvci5uYW1lID09ICd2YWx1ZXMnIHx8ICRuYXRpdmVJdGVyYXRvci5uYW1lID09IHVuZGVmaW5lZCk7XG4gICAgdmFyICRpdGVyYXRvciA9ICRpdGVyYXRvcnMudmFsdWVzO1xuICAgIGhpZGUoVHlwZWRBcnJheSwgVFlQRURfQ09OU1RSVUNUT1IsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVFlQRURfQVJSQVksIE5BTUUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBERUZfQ09OU1RSVUNUT1IsIFR5cGVkQXJyYXkpO1xuXG4gICAgaWYgKENMQU1QRUQgPyBuZXcgVHlwZWRBcnJheSgxKVtUQUddICE9IE5BTUUgOiAhKFRBRyBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSkge1xuICAgICAgZFAoVHlwZWRBcnJheVByb3RvdHlwZSwgVEFHLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gTkFNRTsgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgT1tOQU1FXSA9IFR5cGVkQXJyYXk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChUeXBlZEFycmF5ICE9IEJhc2UpLCBPKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TLCBOQU1FLCB7XG4gICAgICBCWVRFU19QRVJfRUxFTUVOVDogQllURVNcbiAgICB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBCYXNlLm9mLmNhbGwoVHlwZWRBcnJheSwgMSk7IH0pLCBOQU1FLCB7XG4gICAgICBmcm9tOiAkZnJvbSxcbiAgICAgIG9mOiAkb2ZcbiAgICB9KTtcblxuICAgIGlmICghKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIEJZVEVTX1BFUl9FTEVNRU5ULCBCWVRFUyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCwgTkFNRSwgcHJvdG8pO1xuXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0VEX1NFVCwgTkFNRSwgeyBzZXQ6ICRzZXQgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFDT1JSRUNUX0lURVJfTkFNRSwgTkFNRSwgJGl0ZXJhdG9ycyk7XG5cbiAgICBpZiAoIUxJQlJBUlkgJiYgVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyAhPSBhcnJheVRvU3RyaW5nKSBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nID0gYXJyYXlUb1N0cmluZztcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMSkuc2xpY2UoKTtcbiAgICB9KSwgTkFNRSwgeyBzbGljZTogJHNsaWNlIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFsxLCAyXS50b0xvY2FsZVN0cmluZygpICE9IG5ldyBUeXBlZEFycmF5KFsxLCAyXSkudG9Mb2NhbGVTdHJpbmcoKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZS50b0xvY2FsZVN0cmluZy5jYWxsKFsxLCAyXSk7XG4gICAgfSkpLCBOQU1FLCB7IHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmcgfSk7XG5cbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBDT1JSRUNUX0lURVJfTkFNRSA/ICRuYXRpdmVJdGVyYXRvciA6ICRpdGVyYXRvcjtcbiAgICBpZiAoIUxJQlJBUlkgJiYgIUNPUlJFQ1RfSVRFUl9OQU1FKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIElURVJBVE9SLCAkaXRlcmF0b3IpO1xuICB9O1xufSBlbHNlIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG52YXIgREFUQV9WSUVXID0gJ0RhdGFWaWV3JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoISc7XG52YXIgV1JPTkdfSU5ERVggPSAnV3JvbmcgaW5kZXghJztcbnZhciAkQXJyYXlCdWZmZXIgPSBnbG9iYWxbQVJSQVlfQlVGRkVSXTtcbnZhciAkRGF0YVZpZXcgPSBnbG9iYWxbREFUQV9WSUVXXTtcbnZhciBNYXRoID0gZ2xvYmFsLk1hdGg7XG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvdy1yZXN0cmljdGVkLW5hbWVzXG52YXIgSW5maW5pdHkgPSBnbG9iYWwuSW5maW5pdHk7XG52YXIgQmFzZUJ1ZmZlciA9ICRBcnJheUJ1ZmZlcjtcbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgTE4yID0gTWF0aC5MTjI7XG52YXIgQlVGRkVSID0gJ2J1ZmZlcic7XG52YXIgQllURV9MRU5HVEggPSAnYnl0ZUxlbmd0aCc7XG52YXIgQllURV9PRkZTRVQgPSAnYnl0ZU9mZnNldCc7XG52YXIgJEJVRkZFUiA9IERFU0NSSVBUT1JTID8gJ19iJyA6IEJVRkZFUjtcbnZhciAkTEVOR1RIID0gREVTQ1JJUFRPUlMgPyAnX2wnIDogQllURV9MRU5HVEg7XG52YXIgJE9GRlNFVCA9IERFU0NSSVBUT1JTID8gJ19vJyA6IEJZVEVfT0ZGU0VUO1xuXG4vLyBJRUVFNzU0IGNvbnZlcnNpb25zIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaWVlZTc1NFxuZnVuY3Rpb24gcGFja0lFRUU3NTQodmFsdWUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KG5CeXRlcyk7XG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgcnQgPSBtTGVuID09PSAyMyA/IHBvdygyLCAtMjQpIC0gcG93KDIsIC03NykgOiAwO1xuICB2YXIgaSA9IDA7XG4gIHZhciBzID0gdmFsdWUgPCAwIHx8IHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDAgPyAxIDogMDtcbiAgdmFyIGUsIG0sIGM7XG4gIHZhbHVlID0gYWJzKHZhbHVlKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICBpZiAodmFsdWUgIT0gdmFsdWUgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIG0gPSB2YWx1ZSAhPSB2YWx1ZSA/IDEgOiAwO1xuICAgIGUgPSBlTWF4O1xuICB9IGVsc2Uge1xuICAgIGUgPSBmbG9vcihsb2codmFsdWUpIC8gTE4yKTtcbiAgICBpZiAodmFsdWUgKiAoYyA9IHBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tO1xuICAgICAgYyAqPSAyO1xuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gYztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBwb3coMiwgMSAtIGVCaWFzKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKys7XG4gICAgICBjIC89IDI7XG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDA7XG4gICAgICBlID0gZU1heDtcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IGUgKyBlQmlhcztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogcG93KDIsIGVCaWFzIC0gMSkgKiBwb3coMiwgbUxlbik7XG4gICAgICBlID0gMDtcbiAgICB9XG4gIH1cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW2krK10gPSBtICYgMjU1LCBtIC89IDI1NiwgbUxlbiAtPSA4KTtcbiAgZSA9IGUgPDwgbUxlbiB8IG07XG4gIGVMZW4gKz0gbUxlbjtcbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbaSsrXSA9IGUgJiAyNTUsIGUgLz0gMjU2LCBlTGVuIC09IDgpO1xuICBidWZmZXJbLS1pXSB8PSBzICogMTI4O1xuICByZXR1cm4gYnVmZmVyO1xufVxuZnVuY3Rpb24gdW5wYWNrSUVFRTc1NChidWZmZXIsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIG5CaXRzID0gZUxlbiAtIDc7XG4gIHZhciBpID0gbkJ5dGVzIC0gMTtcbiAgdmFyIHMgPSBidWZmZXJbaS0tXTtcbiAgdmFyIGUgPSBzICYgMTI3O1xuICB2YXIgbTtcbiAgcyA+Pj0gNztcbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIG0gPSBlICYgKDEgPDwgLW5CaXRzKSAtIDE7XG4gIGUgPj49IC1uQml0cztcbiAgbkJpdHMgKz0gbUxlbjtcbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhcztcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiBzID8gLUluZmluaXR5IDogSW5maW5pdHk7XG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBwb3coMiwgbUxlbik7XG4gICAgZSA9IGUgLSBlQmlhcztcbiAgfSByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIHBvdygyLCBlIC0gbUxlbik7XG59XG5cbmZ1bmN0aW9uIHVucGFja0kzMihieXRlcykge1xuICByZXR1cm4gYnl0ZXNbM10gPDwgMjQgfCBieXRlc1syXSA8PCAxNiB8IGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbn1cbmZ1bmN0aW9uIHBhY2tJOChpdCkge1xuICByZXR1cm4gW2l0ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTE2KGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrSTMyKGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZiwgaXQgPj4gMTYgJiAweGZmLCBpdCA+PiAyNCAmIDB4ZmZdO1xufVxuZnVuY3Rpb24gcGFja0Y2NChpdCkge1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDUyLCA4KTtcbn1cbmZ1bmN0aW9uIHBhY2tGMzIoaXQpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCAyMywgNCk7XG59XG5cbmZ1bmN0aW9uIGFkZEdldHRlcihDLCBrZXksIGludGVybmFsKSB7XG4gIGRQKENbUFJPVE9UWVBFXSwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tpbnRlcm5hbF07IH0gfSk7XG59XG5cbmZ1bmN0aW9uIGdldCh2aWV3LCBieXRlcywgaW5kZXgsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleDtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChudW1JbmRleCk7XG4gIGlmIChpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2I7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXTtcbiAgdmFyIHBhY2sgPSBzdG9yZS5zbGljZShzdGFydCwgc3RhcnQgKyBieXRlcyk7XG4gIHJldHVybiBpc0xpdHRsZUVuZGlhbiA/IHBhY2sgOiBwYWNrLnJldmVyc2UoKTtcbn1cbmZ1bmN0aW9uIHNldCh2aWV3LCBieXRlcywgaW5kZXgsIGNvbnZlcnNpb24sIHZhbHVlLCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XG4gIHZhciBwYWNrID0gY29udmVyc2lvbigrdmFsdWUpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzOyBpKyspIHN0b3JlW3N0YXJ0ICsgaV0gPSBwYWNrW2lzTGl0dGxlRW5kaWFuID8gaSA6IGJ5dGVzIC0gaSAtIDFdO1xufVxuXG5pZiAoISR0eXBlZC5BQlYpIHtcbiAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0b0luZGV4KGxlbmd0aCk7XG4gICAgdGhpcy5fYiA9IGFycmF5RmlsbC5jYWxsKG5ldyBBcnJheShieXRlTGVuZ3RoKSwgMCk7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkRGF0YVZpZXcsIERBVEFfVklFVyk7XG4gICAgYW5JbnN0YW5jZShidWZmZXIsICRBcnJheUJ1ZmZlciwgREFUQV9WSUVXKTtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYnVmZmVyWyRMRU5HVEhdO1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoYnl0ZU9mZnNldCk7XG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPT09IHVuZGVmaW5lZCA/IGJ1ZmZlckxlbmd0aCAtIG9mZnNldCA6IHRvTGVuZ3RoKGJ5dGVMZW5ndGgpO1xuICAgIGlmIChvZmZzZXQgKyBieXRlTGVuZ3RoID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgdGhpc1skQlVGRkVSXSA9IGJ1ZmZlcjtcbiAgICB0aGlzWyRPRkZTRVRdID0gb2Zmc2V0O1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIGFkZEdldHRlcigkQXJyYXlCdWZmZXIsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCVUZGRVIsICdfYicpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX09GRlNFVCwgJ19vJyk7XG4gIH1cblxuICByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIGdldEludDg6IGZ1bmN0aW9uIGdldEludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXSA8PCAyNCA+PiAyNDtcbiAgICB9LFxuICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MTY6IGZ1bmN0aW9uIGdldEludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIChieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF0pIDw8IDE2ID4+IDE2O1xuICAgIH0sXG4gICAgZ2V0VWludDE2OiBmdW5jdGlvbiBnZXRVaW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpO1xuICAgIH0sXG4gICAgZ2V0VWludDMyOiBmdW5jdGlvbiBnZXRVaW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSkgPj4+IDA7XG4gICAgfSxcbiAgICBnZXRGbG9hdDMyOiBmdW5jdGlvbiBnZXRGbG9hdDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCAyMywgNCk7XG4gICAgfSxcbiAgICBnZXRGbG9hdDY0OiBmdW5jdGlvbiBnZXRGbG9hdDY0KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCA1MiwgOCk7XG4gICAgfSxcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldEludDE2OiBmdW5jdGlvbiBzZXRJbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDE2OiBmdW5jdGlvbiBzZXRVaW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDMyOiBmdW5jdGlvbiBzZXRVaW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0MzI6IGZ1bmN0aW9uIHNldEZsb2F0MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrRjMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0NjQ6IGZ1bmN0aW9uIHNldEZsb2F0NjQoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRjY0LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgJEFycmF5QnVmZmVyKDEpO1xuICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICB9KSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKE5hTik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgcmV0dXJuICRBcnJheUJ1ZmZlci5uYW1lICE9IEFSUkFZX0JVRkZFUjtcbiAgfSkpIHtcbiAgICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyKTtcbiAgICAgIHJldHVybiBuZXcgQmFzZUJ1ZmZlcih0b0luZGV4KGxlbmd0aCkpO1xuICAgIH07XG4gICAgdmFyIEFycmF5QnVmZmVyUHJvdG8gPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXSA9IEJhc2VCdWZmZXJbUFJPVE9UWVBFXTtcbiAgICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlQnVmZmVyKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOykge1xuICAgICAgaWYgKCEoKGtleSA9IGtleXNbaisrXSkgaW4gJEFycmF5QnVmZmVyKSkgaGlkZSgkQXJyYXlCdWZmZXIsIGtleSwgQmFzZUJ1ZmZlcltrZXldKTtcbiAgICB9XG4gICAgaWYgKCFMSUJSQVJZKSBBcnJheUJ1ZmZlclByb3RvLmNvbnN0cnVjdG9yID0gJEFycmF5QnVmZmVyO1xuICB9XG4gIC8vIGlPUyBTYWZhcmkgNy54IGJ1Z1xuICB2YXIgdmlldyA9IG5ldyAkRGF0YVZpZXcobmV3ICRBcnJheUJ1ZmZlcigyKSk7XG4gIHZhciAkc2V0SW50OCA9ICREYXRhVmlld1tQUk9UT1RZUEVdLnNldEludDg7XG4gIHZpZXcuc2V0SW50OCgwLCAyMTQ3NDgzNjQ4KTtcbiAgdmlldy5zZXRJbnQ4KDEsIDIxNDc0ODM2NDkpO1xuICBpZiAodmlldy5nZXRJbnQ4KDApIHx8ICF2aWV3LmdldEludDgoMSkpIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH1cbiAgfSwgdHJ1ZSk7XG59XG5zZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG5zZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7XG5oaWRlKCREYXRhVmlld1tQUk9UT1RZUEVdLCAkdHlwZWQuVklFVywgdHJ1ZSk7XG5leHBvcnRzW0FSUkFZX0JVRkZFUl0gPSAkQXJyYXlCdWZmZXI7XG5leHBvcnRzW0RBVEFfVklFV10gPSAkRGF0YVZpZXc7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBUWVBFRCA9IHVpZCgndHlwZWRfYXJyYXknKTtcbnZhciBWSUVXID0gdWlkKCd2aWV3Jyk7XG52YXIgQUJWID0gISEoZ2xvYmFsLkFycmF5QnVmZmVyICYmIGdsb2JhbC5EYXRhVmlldyk7XG52YXIgQ09OU1RSID0gQUJWO1xudmFyIGkgPSAwO1xudmFyIGwgPSA5O1xudmFyIFR5cGVkO1xuXG52YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9ycyA9IChcbiAgJ0ludDhBcnJheSxVaW50OEFycmF5LFVpbnQ4Q2xhbXBlZEFycmF5LEludDE2QXJyYXksVWludDE2QXJyYXksSW50MzJBcnJheSxVaW50MzJBcnJheSxGbG9hdDMyQXJyYXksRmxvYXQ2NEFycmF5J1xuKS5zcGxpdCgnLCcpO1xuXG53aGlsZSAoaSA8IGwpIHtcbiAgaWYgKFR5cGVkID0gZ2xvYmFsW1R5cGVkQXJyYXlDb25zdHJ1Y3RvcnNbaSsrXV0pIHtcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVFlQRUQsIHRydWUpO1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgfSBlbHNlIENPTlNUUiA9IGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQUJWOiBBQlYsXG4gIENPTlNUUjogQ09OU1RSLFxuICBUWVBFRDogVFlQRUQsXG4gIFZJRVc6IFZJRVdcbn07XG4iLCJ2YXIgaWQgPSAwO1xudmFyIHB4ID0gTWF0aC5yYW5kb20oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBuYXZpZ2F0b3IgPSBnbG9iYWwubmF2aWdhdG9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50IHx8ICcnO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgVFlQRSkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSB8fCBpdC5fdCAhPT0gVFlQRSkgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyICRTeW1ib2wgPSBjb3JlLlN5bWJvbCB8fCAoY29yZS5TeW1ib2wgPSBMSUJSQVJZID8ge30gOiBnbG9iYWwuU3ltYm9sIHx8IHt9KTtcbiAgaWYgKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpIGRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHsgdmFsdWU6IHdrc0V4dC5mKG5hbWUpIH0pO1xufTtcbiIsImV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX3drcycpO1xuIiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ3drcycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlN5bWJvbDtcbnZhciBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xuXG52YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuXG4kZXhwb3J0cy5zdG9yZSA9IHN0b3JlO1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG4iLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGNvcHlXaXRoaW46IHJlcXVpcmUoJy4vX2FycmF5LWNvcHktd2l0aGluJykgfSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdjb3B5V2l0aGluJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRldmVyeSA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg0KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmV2ZXJ5LCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNSAvIDE1LjQuNC4xNiBBcnJheS5wcm90b3R5cGUuZXZlcnkoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRldmVyeSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHsgZmlsbDogcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpIH0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnZmlsbCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmlsdGVyID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZmlsdGVyLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNyAvIDE1LjQuNC4yMCBBcnJheS5wcm90b3R5cGUuZmlsdGVyKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmaWx0ZXIodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOSBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNik7XG52YXIgS0VZID0gJ2ZpbmRJbmRleCc7XG52YXIgZm9yY2VkID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoS0VZIGluIFtdKSBBcnJheSgxKVtLRVldKGZ1bmN0aW9uICgpIHsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOCBBcnJheS5wcm90b3R5cGUuZmluZChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDUpO1xudmFyIEtFWSA9ICdmaW5kJztcbnZhciBmb3JjZWQgPSB0cnVlO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChLRVkgaW4gW10pIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24gKCkgeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKShLRVkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcbnZhciBTVFJJQ1QgPSByZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZm9yRWFjaCwgdHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIVNUUklDVCwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTAgLyAxNS40LjQuMTggQXJyYXkucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZm9yRWFjaCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24gKGl0ZXIpIHsgQXJyYXkuZnJvbShpdGVyKTsgfSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjEgQXJyYXkuZnJvbShhcnJheUxpa2UsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICBmcm9tOiBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSAvKiAsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIG1hcGZuID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGl0ZXJGbiA9IGdldEl0ZXJGbihPKTtcbiAgICB2YXIgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmIChtYXBwaW5nKSBtYXBmbiA9IGN0eChtYXBmbiwgYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQsIDIpO1xuICAgIC8vIGlmIG9iamVjdCBpc24ndCBpdGVyYWJsZSBvciBpdCdzIGFycmF5IHdpdGggZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBzaW1wbGUgY2FzZVxuICAgIGlmIChpdGVyRm4gIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcihpdGVyRm4pKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCByZXN1bHQgPSBuZXcgQygpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IGNhbGwoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgICBmb3IgKHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgJG5hdGl2ZSA9IFtdLmluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTEgLyAxNS40LjQuMTQgQXJyYXkucHJvdG90eXBlLmluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuIE5FR0FUSVZFX1pFUk9cbiAgICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgICAgID8gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDBcbiAgICAgIDogJGluZGV4T2YodGhpcywgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIvLyAyMi4xLjIuMiAvIDE1LjQuMy4yIEFycmF5LmlzQXJyYXkoYXJnKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdBcnJheScsIHsgaXNBcnJheTogcmVxdWlyZSgnLi9faXMtYXJyYXknKSB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGtpbmQgPSB0aGlzLl9rO1xuICB2YXIgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmICghTyB8fCBpbmRleCA+PSBPLmxlbmd0aCkge1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmpvaW4oc2VwYXJhdG9yKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlKb2luID0gW10uam9pbjtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIHN0cmluZ3NcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKHJlcXVpcmUoJy4vX2lvYmplY3QnKSAhPSBPYmplY3QgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShhcnJheUpvaW4pKSwgJ0FycmF5Jywge1xuICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikge1xuICAgIHJldHVybiBhcnJheUpvaW4uY2FsbCh0b0lPYmplY3QodGhpcyksIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkID8gJywnIDogc2VwYXJhdG9yKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciAkbmF0aXZlID0gW10ubGFzdEluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmxhc3RJbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE0IC8gMTUuNC40LjE1IEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXG4gIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gQFsqLTFdICovKSB7XG4gICAgLy8gY29udmVydCAtMCB0byArMFxuICAgIGlmIChORUdBVElWRV9aRVJPKSByZXR1cm4gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDA7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QodGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSBsZW5ndGggLSAxO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkgaW5kZXggPSBNYXRoLm1pbihpbmRleCwgdG9JbnRlZ2VyKGFyZ3VtZW50c1sxXSkpO1xuICAgIGlmIChpbmRleCA8IDApIGluZGV4ID0gbGVuZ3RoICsgaW5kZXg7XG4gICAgZm9yICg7aW5kZXggPj0gMDsgaW5kZXgtLSkgaWYgKGluZGV4IGluIE8pIGlmIChPW2luZGV4XSA9PT0gc2VhcmNoRWxlbWVudCkgcmV0dXJuIGluZGV4IHx8IDA7XG4gICAgcmV0dXJuIC0xO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJG1hcCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgxKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLm1hcCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE1IC8gMTUuNC40LjE5IEFycmF5LnByb3RvdHlwZS5tYXAoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJG1hcCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcblxuLy8gV2ViS2l0IEFycmF5Lm9mIGlzbid0IGdlbmVyaWNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuICEoQXJyYXkub2YuY2FsbChGKSBpbnN0YW5jZW9mIEYpO1xufSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjMgQXJyYXkub2YoIC4uLml0ZW1zKVxuICBvZjogZnVuY3Rpb24gb2YoLyogLi4uYXJncyAqLykge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXkpKGFMZW4pO1xuICAgIHdoaWxlIChhTGVuID4gaW5kZXgpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGFMZW47XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuL19hcnJheS1yZWR1Y2UnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnJlZHVjZVJpZ2h0LCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTkgLyAxNS40LjQuMjIgQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIHRydWUpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5LXJlZHVjZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTggLyAxNS40LjQuMjEgQXJyYXkucHJvdG90eXBlLnJlZHVjZShjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXG4gIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIGZhbHNlKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuL19odG1sJyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIEVTMyBzdHJpbmdzIGFuZCBET00gb2JqZWN0c1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgaWYgKGh0bWwpIGFycmF5U2xpY2UuY2FsbChodG1sKTtcbn0pLCAnQXJyYXknLCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShiZWdpbiwgZW5kKSB7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoaXMubGVuZ3RoKTtcbiAgICB2YXIga2xhc3MgPSBjb2YodGhpcyk7XG4gICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQ7XG4gICAgaWYgKGtsYXNzID09ICdBcnJheScpIHJldHVybiBhcnJheVNsaWNlLmNhbGwodGhpcywgYmVnaW4sIGVuZCk7XG4gICAgdmFyIHN0YXJ0ID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW4pO1xuICAgIHZhciB1cFRvID0gdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuKTtcbiAgICB2YXIgc2l6ZSA9IHRvTGVuZ3RoKHVwVG8gLSBzdGFydCk7XG4gICAgdmFyIGNsb25lZCA9IG5ldyBBcnJheShzaXplKTtcbiAgICB2YXIgaSA9IDA7XG4gICAgZm9yICg7IGkgPCBzaXplOyBpKyspIGNsb25lZFtpXSA9IGtsYXNzID09ICdTdHJpbmcnXG4gICAgICA/IHRoaXMuY2hhckF0KHN0YXJ0ICsgaSlcbiAgICAgIDogdGhpc1tzdGFydCArIGldO1xuICAgIHJldHVybiBjbG9uZWQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkc29tZSA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnNvbWUsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yMyAvIDE1LjQuNC4xNyBBcnJheS5wcm90b3R5cGUuc29tZShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRzb21lKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJHNvcnQgPSBbXS5zb3J0O1xudmFyIHRlc3QgPSBbMSwgMiwgM107XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gSUU4LVxuICB0ZXN0LnNvcnQodW5kZWZpbmVkKTtcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IGJ1Z1xuICB0ZXN0LnNvcnQobnVsbCk7XG4gIC8vIE9sZCBXZWJLaXRcbn0pIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJHNvcnQpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMjUgQXJyYXkucHJvdG90eXBlLnNvcnQoY29tcGFyZWZuKVxuICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbikge1xuICAgIHJldHVybiBjb21wYXJlZm4gPT09IHVuZGVmaW5lZFxuICAgICAgPyAkc29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpKVxuICAgICAgOiAkc29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpLCBhRnVuY3Rpb24oY29tcGFyZWZuKSk7XG4gIH1cbn0pO1xuIiwicmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnQXJyYXknKTtcbiIsIi8vIDIwLjMuMy4xIC8gMTUuOS40LjQgRGF0ZS5ub3coKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdEYXRlJywgeyBub3c6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpOyB9IH0pO1xuIiwiLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JU09TdHJpbmcgPSByZXF1aXJlKCcuL19kYXRlLXRvLWlzby1zdHJpbmcnKTtcblxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZyAhPT0gdG9JU09TdHJpbmcpLCAnRGF0ZScsIHtcbiAgdG9JU09TdHJpbmc6IHRvSVNPU3RyaW5nXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmV3IERhdGUoTmFOKS50b0pTT04oKSAhPT0gbnVsbFxuICAgIHx8IERhdGUucHJvdG90eXBlLnRvSlNPTi5jYWxsKHsgdG9JU09TdHJpbmc6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDE7IH0gfSkgIT09IDE7XG59KSwgJ0RhdGUnLCB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTihrZXkpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBwdiA9IHRvUHJpbWl0aXZlKE8pO1xuICAgIHJldHVybiB0eXBlb2YgcHYgPT0gJ251bWJlcicgJiYgIWlzRmluaXRlKHB2KSA/IG51bGwgOiBPLnRvSVNPU3RyaW5nKCk7XG4gIH1cbn0pO1xuIiwidmFyIFRPX1BSSU1JVElWRSA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1ByaW1pdGl2ZScpO1xudmFyIHByb3RvID0gRGF0ZS5wcm90b3R5cGU7XG5cbmlmICghKFRPX1BSSU1JVElWRSBpbiBwcm90bykpIHJlcXVpcmUoJy4vX2hpZGUnKShwcm90bywgVE9fUFJJTUlUSVZFLCByZXF1aXJlKCcuL19kYXRlLXRvLXByaW1pdGl2ZScpKTtcbiIsInZhciBEYXRlUHJvdG8gPSBEYXRlLnByb3RvdHlwZTtcbnZhciBJTlZBTElEX0RBVEUgPSAnSW52YWxpZCBEYXRlJztcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IERhdGVQcm90b1tUT19TVFJJTkddO1xudmFyIGdldFRpbWUgPSBEYXRlUHJvdG8uZ2V0VGltZTtcbmlmIChuZXcgRGF0ZShOYU4pICsgJycgIT0gSU5WQUxJRF9EQVRFKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoRGF0ZVByb3RvLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciB2YWx1ZSA9IGdldFRpbWUuY2FsbCh0aGlzKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/ICR0b1N0cmluZy5jYWxsKHRoaXMpIDogSU5WQUxJRF9EQVRFO1xuICB9KTtcbn1cbiIsIi8vIDE5LjIuMy4yIC8gMTUuMy40LjUgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQodGhpc0FyZywgYXJncy4uLilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnRnVuY3Rpb24nLCB7IGJpbmQ6IHJlcXVpcmUoJy4vX2JpbmQnKSB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIEhBU19JTlNUQU5DRSA9IHJlcXVpcmUoJy4vX3drcycpKCdoYXNJbnN0YW5jZScpO1xudmFyIEZ1bmN0aW9uUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG4vLyAxOS4yLjMuNiBGdW5jdGlvbi5wcm90b3R5cGVbQEBoYXNJbnN0YW5jZV0oVilcbmlmICghKEhBU19JTlNUQU5DRSBpbiBGdW5jdGlvblByb3RvKSkgcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZihGdW5jdGlvblByb3RvLCBIQVNfSU5TVEFOQ0UsIHsgdmFsdWU6IGZ1bmN0aW9uIChPKSB7XG4gIGlmICh0eXBlb2YgdGhpcyAhPSAnZnVuY3Rpb24nIHx8ICFpc09iamVjdChPKSkgcmV0dXJuIGZhbHNlO1xuICBpZiAoIWlzT2JqZWN0KHRoaXMucHJvdG90eXBlKSkgcmV0dXJuIE8gaW5zdGFuY2VvZiB0aGlzO1xuICAvLyBmb3IgZW52aXJvbm1lbnQgdy9vIG5hdGl2ZSBgQEBoYXNJbnN0YW5jZWAgbG9naWMgZW5vdWdoIGBpbnN0YW5jZW9mYCwgYnV0IGFkZCB0aGlzOlxuICB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKSBpZiAodGhpcy5wcm90b3R5cGUgPT09IE8pIHJldHVybiB0cnVlO1xuICByZXR1cm4gZmFsc2U7XG59IH0pO1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBGUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgbmFtZVJFID0gL15cXHMqZnVuY3Rpb24gKFteIChdKikvO1xudmFyIE5BTUUgPSAnbmFtZSc7XG5cbi8vIDE5LjIuNC4yIG5hbWVcbk5BTUUgaW4gRlByb3RvIHx8IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgZFAoRlByb3RvLCBOQU1FLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoJycgKyB0aGlzKS5tYXRjaChuYW1lUkUpWzFdO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgTUFQID0gJ01hcCc7XG5cbi8vIDIzLjEgTWFwIE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKE1BUCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gTWFwKCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMS4zLjYgTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBzdHJvbmcuZ2V0RW50cnkodmFsaWRhdGUodGhpcywgTUFQKSwga2V5KTtcbiAgICByZXR1cm4gZW50cnkgJiYgZW50cnkudjtcbiAgfSxcbiAgLy8gMjMuMS4zLjkgTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nLCB0cnVlKTtcbiIsIi8vIDIwLjIuMi4zIE1hdGguYWNvc2goeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgbG9nMXAgPSByZXF1aXJlKCcuL19tYXRoLWxvZzFwJyk7XG52YXIgc3FydCA9IE1hdGguc3FydDtcbnZhciAkYWNvc2ggPSBNYXRoLmFjb3NoO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFjb3NoXG4gIC8vIFY4IGJ1ZzogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM1MDlcbiAgJiYgTWF0aC5mbG9vcigkYWNvc2goTnVtYmVyLk1BWF9WQUxVRSkpID09IDcxMFxuICAvLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYWNvc2goSW5maW5pdHkpIC0+IE5hTlxuICAmJiAkYWNvc2goSW5maW5pdHkpID09IEluZmluaXR5XG4pLCAnTWF0aCcsIHtcbiAgYWNvc2g6IGZ1bmN0aW9uIGFjb3NoKHgpIHtcbiAgICByZXR1cm4gKHggPSAreCkgPCAxID8gTmFOIDogeCA+IDk0OTA2MjY1LjYyNDI1MTU2XG4gICAgICA/IE1hdGgubG9nKHgpICsgTWF0aC5MTjJcbiAgICAgIDogbG9nMXAoeCAtIDEgKyBzcXJ0KHggLSAxKSAqIHNxcnQoeCArIDEpKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuNSBNYXRoLmFzaW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhc2luaCA9IE1hdGguYXNpbmg7XG5cbmZ1bmN0aW9uIGFzaW5oKHgpIHtcbiAgcmV0dXJuICFpc0Zpbml0ZSh4ID0gK3gpIHx8IHggPT0gMCA/IHggOiB4IDwgMCA/IC1hc2luaCgteCkgOiBNYXRoLmxvZyh4ICsgTWF0aC5zcXJ0KHggKiB4ICsgMSkpO1xufVxuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXNpbmgoMCkgLT4gLTBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXNpbmggJiYgMSAvICRhc2luaCgwKSA+IDApLCAnTWF0aCcsIHsgYXNpbmg6IGFzaW5oIH0pO1xuIiwiLy8gMjAuMi4yLjcgTWF0aC5hdGFuaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXRhbmggPSBNYXRoLmF0YW5oO1xuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXRhbmgoLTApIC0+IDBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXRhbmggJiYgMSAvICRhdGFuaCgtMCkgPCAwKSwgJ01hdGgnLCB7XG4gIGF0YW5oOiBmdW5jdGlvbiBhdGFuaCh4KSB7XG4gICAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogTWF0aC5sb2coKDEgKyB4KSAvICgxIC0geCkpIC8gMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuOSBNYXRoLmNicnQoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgc2lnbiA9IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNicnQ6IGZ1bmN0aW9uIGNicnQoeCkge1xuICAgIHJldHVybiBzaWduKHggPSAreCkgKiBNYXRoLnBvdyhNYXRoLmFicyh4KSwgMSAvIDMpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xMSBNYXRoLmNsejMyKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNsejMyOiBmdW5jdGlvbiBjbHozMih4KSB7XG4gICAgcmV0dXJuICh4ID4+Pj0gMCkgPyAzMSAtIE1hdGguZmxvb3IoTWF0aC5sb2coeCArIDAuNSkgKiBNYXRoLkxPRzJFKSA6IDMyO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4xMiBNYXRoLmNvc2goeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY29zaDogZnVuY3Rpb24gY29zaCh4KSB7XG4gICAgcmV0dXJuIChleHAoeCA9ICt4KSArIGV4cCgteCkpIC8gMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCRleHBtMSAhPSBNYXRoLmV4cG0xKSwgJ01hdGgnLCB7IGV4cG0xOiAkZXhwbTEgfSk7XG4iLCIvLyAyMC4yLjIuMTYgTWF0aC5mcm91bmQoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgZnJvdW5kOiByZXF1aXJlKCcuL19tYXRoLWZyb3VuZCcpIH0pO1xuIiwiLy8gMjAuMi4yLjE3IE1hdGguaHlwb3QoW3ZhbHVlMVssIHZhbHVlMlssIOKApiBdXV0pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFicyA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGh5cG90OiBmdW5jdGlvbiBoeXBvdCh2YWx1ZTEsIHZhbHVlMikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHN1bSA9IDA7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbGFyZyA9IDA7XG4gICAgdmFyIGFyZywgZGl2O1xuICAgIHdoaWxlIChpIDwgYUxlbikge1xuICAgICAgYXJnID0gYWJzKGFyZ3VtZW50c1tpKytdKTtcbiAgICAgIGlmIChsYXJnIDwgYXJnKSB7XG4gICAgICAgIGRpdiA9IGxhcmcgLyBhcmc7XG4gICAgICAgIHN1bSA9IHN1bSAqIGRpdiAqIGRpdiArIDE7XG4gICAgICAgIGxhcmcgPSBhcmc7XG4gICAgICB9IGVsc2UgaWYgKGFyZyA+IDApIHtcbiAgICAgICAgZGl2ID0gYXJnIC8gbGFyZztcbiAgICAgICAgc3VtICs9IGRpdiAqIGRpdjtcbiAgICAgIH0gZWxzZSBzdW0gKz0gYXJnO1xuICAgIH1cbiAgICByZXR1cm4gbGFyZyA9PT0gSW5maW5pdHkgPyBJbmZpbml0eSA6IGxhcmcgKiBNYXRoLnNxcnQoc3VtKTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMTggTWF0aC5pbXVsKHgsIHkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbXVsID0gTWF0aC5pbXVsO1xuXG4vLyBzb21lIFdlYktpdCB2ZXJzaW9ucyBmYWlscyB3aXRoIGJpZyBudW1iZXJzLCBzb21lIGhhcyB3cm9uZyBhcml0eVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICRpbXVsKDB4ZmZmZmZmZmYsIDUpICE9IC01IHx8ICRpbXVsLmxlbmd0aCAhPSAyO1xufSksICdNYXRoJywge1xuICBpbXVsOiBmdW5jdGlvbiBpbXVsKHgsIHkpIHtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmO1xuICAgIHZhciB4biA9ICt4O1xuICAgIHZhciB5biA9ICt5O1xuICAgIHZhciB4bCA9IFVJTlQxNiAmIHhuO1xuICAgIHZhciB5bCA9IFVJTlQxNiAmIHluO1xuICAgIHJldHVybiAwIHwgeGwgKiB5bCArICgoVUlOVDE2ICYgeG4gPj4+IDE2KSAqIHlsICsgeGwgKiAoVUlOVDE2ICYgeW4gPj4+IDE2KSA8PCAxNiA+Pj4gMCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjIxIE1hdGgubG9nMTAoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgbG9nMTA6IGZ1bmN0aW9uIGxvZzEwKHgpIHtcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgKiBNYXRoLkxPRzEwRTtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMjAgTWF0aC5sb2cxcCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBsb2cxcDogcmVxdWlyZSgnLi9fbWF0aC1sb2cxcCcpIH0pO1xuIiwiLy8gMjAuMi4yLjIyIE1hdGgubG9nMih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBsb2cyOiBmdW5jdGlvbiBsb2cyKHgpIHtcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgLyBNYXRoLkxOMjtcbiAgfVxufSk7XG4iLCIvLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IHNpZ246IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpIH0pO1xuIiwiLy8gMjAuMi4yLjMwIE1hdGguc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuLy8gVjggbmVhciBDaHJvbWl1bSAzOCBoYXMgYSBwcm9ibGVtIHdpdGggdmVyeSBzbWFsbCBudW1iZXJzXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIU1hdGguc2luaCgtMmUtMTcpICE9IC0yZS0xNztcbn0pLCAnTWF0aCcsIHtcbiAgc2luaDogZnVuY3Rpb24gc2luaCh4KSB7XG4gICAgcmV0dXJuIE1hdGguYWJzKHggPSAreCkgPCAxXG4gICAgICA/IChleHBtMSh4KSAtIGV4cG0xKC14KSkgLyAyXG4gICAgICA6IChleHAoeCAtIDEpIC0gZXhwKC14IC0gMSkpICogKE1hdGguRSAvIDIpO1xuICB9XG59KTtcbiIsIi8vIDIwLjIuMi4zMyBNYXRoLnRhbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdGFuaDogZnVuY3Rpb24gdGFuaCh4KSB7XG4gICAgdmFyIGEgPSBleHBtMSh4ID0gK3gpO1xuICAgIHZhciBiID0gZXhwbTEoLXgpO1xuICAgIHJldHVybiBhID09IEluZmluaXR5ID8gMSA6IGIgPT0gSW5maW5pdHkgPyAtMSA6IChhIC0gYikgLyAoZXhwKHgpICsgZXhwKC14KSk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMi4yLjM0IE1hdGgudHJ1bmMoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdHJ1bmM6IGZ1bmN0aW9uIHRydW5jKGl0KSB7XG4gICAgcmV0dXJuIChpdCA+IDAgPyBNYXRoLmZsb29yIDogTWF0aC5jZWlsKShpdCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG52YXIgTlVNQkVSID0gJ051bWJlcic7XG52YXIgJE51bWJlciA9IGdsb2JhbFtOVU1CRVJdO1xudmFyIEJhc2UgPSAkTnVtYmVyO1xudmFyIHByb3RvID0gJE51bWJlci5wcm90b3R5cGU7XG4vLyBPcGVyYSB+MTIgaGFzIGJyb2tlbiBPYmplY3QjdG9TdHJpbmdcbnZhciBCUk9LRU5fQ09GID0gY29mKHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKShwcm90bykpID09IE5VTUJFUjtcbnZhciBUUklNID0gJ3RyaW0nIGluIFN0cmluZy5wcm90b3R5cGU7XG5cbi8vIDcuMS4zIFRvTnVtYmVyKGFyZ3VtZW50KVxudmFyIHRvTnVtYmVyID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBpdCA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCBmYWxzZSk7XG4gIGlmICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgJiYgaXQubGVuZ3RoID4gMikge1xuICAgIGl0ID0gVFJJTSA/IGl0LnRyaW0oKSA6ICR0cmltKGl0LCAzKTtcbiAgICB2YXIgZmlyc3QgPSBpdC5jaGFyQ29kZUF0KDApO1xuICAgIHZhciB0aGlyZCwgcmFkaXgsIG1heENvZGU7XG4gICAgaWYgKGZpcnN0ID09PSA0MyB8fCBmaXJzdCA9PT0gNDUpIHtcbiAgICAgIHRoaXJkID0gaXQuY2hhckNvZGVBdCgyKTtcbiAgICAgIGlmICh0aGlyZCA9PT0gODggfHwgdGhpcmQgPT09IDEyMCkgcmV0dXJuIE5hTjsgLy8gTnVtYmVyKCcrMHgxJykgc2hvdWxkIGJlIE5hTiwgb2xkIFY4IGZpeFxuICAgIH0gZWxzZSBpZiAoZmlyc3QgPT09IDQ4KSB7XG4gICAgICBzd2l0Y2ggKGl0LmNoYXJDb2RlQXQoMSkpIHtcbiAgICAgICAgY2FzZSA2NjogY2FzZSA5ODogcmFkaXggPSAyOyBtYXhDb2RlID0gNDk7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIC9eMGJbMDFdKyQvaVxuICAgICAgICBjYXNlIDc5OiBjYXNlIDExMTogcmFkaXggPSA4OyBtYXhDb2RlID0gNTU7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIC9eMG9bMC03XSskL2lcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuICtpdDtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGRpZ2l0cyA9IGl0LnNsaWNlKDIpLCBpID0gMCwgbCA9IGRpZ2l0cy5sZW5ndGgsIGNvZGU7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29kZSA9IGRpZ2l0cy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAvLyBwYXJzZUludCBwYXJzZXMgYSBzdHJpbmcgdG8gYSBmaXJzdCB1bmF2YWlsYWJsZSBzeW1ib2xcbiAgICAgICAgLy8gYnV0IFRvTnVtYmVyIHNob3VsZCByZXR1cm4gTmFOIGlmIGEgc3RyaW5nIGNvbnRhaW5zIHVuYXZhaWxhYmxlIHN5bWJvbHNcbiAgICAgICAgaWYgKGNvZGUgPCA0OCB8fCBjb2RlID4gbWF4Q29kZSkgcmV0dXJuIE5hTjtcbiAgICAgIH0gcmV0dXJuIHBhcnNlSW50KGRpZ2l0cywgcmFkaXgpO1xuICAgIH1cbiAgfSByZXR1cm4gK2l0O1xufTtcblxuaWYgKCEkTnVtYmVyKCcgMG8xJykgfHwgISROdW1iZXIoJzBiMScpIHx8ICROdW1iZXIoJysweDEnKSkge1xuICAkTnVtYmVyID0gZnVuY3Rpb24gTnVtYmVyKHZhbHVlKSB7XG4gICAgdmFyIGl0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgPyAwIDogdmFsdWU7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHJldHVybiB0aGF0IGluc3RhbmNlb2YgJE51bWJlclxuICAgICAgLy8gY2hlY2sgb24gMS4uY29uc3RydWN0b3IoZm9vKSBjYXNlXG4gICAgICAmJiAoQlJPS0VOX0NPRiA/IGZhaWxzKGZ1bmN0aW9uICgpIHsgcHJvdG8udmFsdWVPZi5jYWxsKHRoYXQpOyB9KSA6IGNvZih0aGF0KSAhPSBOVU1CRVIpXG4gICAgICAgID8gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UodG9OdW1iZXIoaXQpKSwgdGhhdCwgJE51bWJlcikgOiB0b051bWJlcihpdCk7XG4gIH07XG4gIGZvciAodmFyIGtleXMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QTihCYXNlKSA6IChcbiAgICAvLyBFUzM6XG4gICAgJ01BWF9WQUxVRSxNSU5fVkFMVUUsTmFOLE5FR0FUSVZFX0lORklOSVRZLFBPU0lUSVZFX0lORklOSVRZLCcgK1xuICAgIC8vIEVTNiAoaW4gY2FzZSwgaWYgbW9kdWxlcyB3aXRoIEVTNiBOdW1iZXIgc3RhdGljcyByZXF1aXJlZCBiZWZvcmUpOlxuICAgICdFUFNJTE9OLGlzRmluaXRlLGlzSW50ZWdlcixpc05hTixpc1NhZmVJbnRlZ2VyLE1BWF9TQUZFX0lOVEVHRVIsJyArXG4gICAgJ01JTl9TQUZFX0lOVEVHRVIscGFyc2VGbG9hdCxwYXJzZUludCxpc0ludGVnZXInXG4gICkuc3BsaXQoJywnKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOyBqKyspIHtcbiAgICBpZiAoaGFzKEJhc2UsIGtleSA9IGtleXNbal0pICYmICFoYXMoJE51bWJlciwga2V5KSkge1xuICAgICAgZFAoJE51bWJlciwga2V5LCBnT1BEKEJhc2UsIGtleSkpO1xuICAgIH1cbiAgfVxuICAkTnVtYmVyLnByb3RvdHlwZSA9IHByb3RvO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICROdW1iZXI7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCBOVU1CRVIsICROdW1iZXIpO1xufVxuIiwiLy8gMjAuMS4yLjEgTnVtYmVyLkVQU0lMT05cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBFUFNJTE9OOiBNYXRoLnBvdygyLCAtNTIpIH0pO1xuIiwiLy8gMjAuMS4yLjIgTnVtYmVyLmlzRmluaXRlKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgX2lzRmluaXRlID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuaXNGaW5pdGU7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc0Zpbml0ZTogZnVuY3Rpb24gaXNGaW5pdGUoaXQpIHtcbiAgICByZXR1cm4gdHlwZW9mIGl0ID09ICdudW1iZXInICYmIF9pc0Zpbml0ZShpdCk7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgaXNJbnRlZ2VyOiByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJykgfSk7XG4iLCIvLyAyMC4xLjIuNCBOdW1iZXIuaXNOYU4obnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzTmFOOiBmdW5jdGlvbiBpc05hTihudW1iZXIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgcmV0dXJuIG51bWJlciAhPSBudW1iZXI7XG4gIH1cbn0pO1xuIiwiLy8gMjAuMS4yLjUgTnVtYmVyLmlzU2FmZUludGVnZXIobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc0ludGVnZXIgPSByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJyk7XG52YXIgYWJzID0gTWF0aC5hYnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc1NhZmVJbnRlZ2VyOiBmdW5jdGlvbiBpc1NhZmVJbnRlZ2VyKG51bWJlcikge1xuICAgIHJldHVybiBpc0ludGVnZXIobnVtYmVyKSAmJiBhYnMobnVtYmVyKSA8PSAweDFmZmZmZmZmZmZmZmZmO1xuICB9XG59KTtcbiIsIi8vIDIwLjEuMi42IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgTUFYX1NBRkVfSU5URUdFUjogMHgxZmZmZmZmZmZmZmZmZiB9KTtcbiIsIi8vIDIwLjEuMi4xMCBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IE1JTl9TQUZFX0lOVEVHRVI6IC0weDFmZmZmZmZmZmZmZmZmIH0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX3BhcnNlLWZsb2F0Jyk7XG4vLyAyMC4xLjIuMTIgTnVtYmVyLnBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCAnTnVtYmVyJywgeyBwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdCB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XG4vLyAyMC4xLjIuMTMgTnVtYmVyLnBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgJ051bWJlcicsIHsgcGFyc2VJbnQ6ICRwYXJzZUludCB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpO1xudmFyICR0b0ZpeGVkID0gMS4wLnRvRml4ZWQ7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGRhdGEgPSBbMCwgMCwgMCwgMCwgMCwgMF07XG52YXIgRVJST1IgPSAnTnVtYmVyLnRvRml4ZWQ6IGluY29ycmVjdCBpbnZvY2F0aW9uISc7XG52YXIgWkVSTyA9ICcwJztcblxudmFyIG11bHRpcGx5ID0gZnVuY3Rpb24gKG4sIGMpIHtcbiAgdmFyIGkgPSAtMTtcbiAgdmFyIGMyID0gYztcbiAgd2hpbGUgKCsraSA8IDYpIHtcbiAgICBjMiArPSBuICogZGF0YVtpXTtcbiAgICBkYXRhW2ldID0gYzIgJSAxZTc7XG4gICAgYzIgPSBmbG9vcihjMiAvIDFlNyk7XG4gIH1cbn07XG52YXIgZGl2aWRlID0gZnVuY3Rpb24gKG4pIHtcbiAgdmFyIGkgPSA2O1xuICB2YXIgYyA9IDA7XG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIGMgKz0gZGF0YVtpXTtcbiAgICBkYXRhW2ldID0gZmxvb3IoYyAvIG4pO1xuICAgIGMgPSAoYyAlIG4pICogMWU3O1xuICB9XG59O1xudmFyIG51bVRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaSA9IDY7XG4gIHZhciBzID0gJyc7XG4gIHdoaWxlICgtLWkgPj0gMCkge1xuICAgIGlmIChzICE9PSAnJyB8fCBpID09PSAwIHx8IGRhdGFbaV0gIT09IDApIHtcbiAgICAgIHZhciB0ID0gU3RyaW5nKGRhdGFbaV0pO1xuICAgICAgcyA9IHMgPT09ICcnID8gdCA6IHMgKyByZXBlYXQuY2FsbChaRVJPLCA3IC0gdC5sZW5ndGgpICsgdDtcbiAgICB9XG4gIH0gcmV0dXJuIHM7XG59O1xudmFyIHBvdyA9IGZ1bmN0aW9uICh4LCBuLCBhY2MpIHtcbiAgcmV0dXJuIG4gPT09IDAgPyBhY2MgOiBuICUgMiA9PT0gMSA/IHBvdyh4LCBuIC0gMSwgYWNjICogeCkgOiBwb3coeCAqIHgsIG4gLyAyLCBhY2MpO1xufTtcbnZhciBsb2cgPSBmdW5jdGlvbiAoeCkge1xuICB2YXIgbiA9IDA7XG4gIHZhciB4MiA9IHg7XG4gIHdoaWxlICh4MiA+PSA0MDk2KSB7XG4gICAgbiArPSAxMjtcbiAgICB4MiAvPSA0MDk2O1xuICB9XG4gIHdoaWxlICh4MiA+PSAyKSB7XG4gICAgbiArPSAxO1xuICAgIHgyIC89IDI7XG4gIH0gcmV0dXJuIG47XG59O1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICghISR0b0ZpeGVkICYmIChcbiAgMC4wMDAwOC50b0ZpeGVkKDMpICE9PSAnMC4wMDAnIHx8XG4gIDAuOS50b0ZpeGVkKDApICE9PSAnMScgfHxcbiAgMS4yNTUudG9GaXhlZCgyKSAhPT0gJzEuMjUnIHx8XG4gIDEwMDAwMDAwMDAwMDAwMDAxMjguMC50b0ZpeGVkKDApICE9PSAnMTAwMDAwMDAwMDAwMDAwMDEyOCdcbikgfHwgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICAkdG9GaXhlZC5jYWxsKHt9KTtcbn0pKSwgJ051bWJlcicsIHtcbiAgdG9GaXhlZDogZnVuY3Rpb24gdG9GaXhlZChmcmFjdGlvbkRpZ2l0cykge1xuICAgIHZhciB4ID0gYU51bWJlclZhbHVlKHRoaXMsIEVSUk9SKTtcbiAgICB2YXIgZiA9IHRvSW50ZWdlcihmcmFjdGlvbkRpZ2l0cyk7XG4gICAgdmFyIHMgPSAnJztcbiAgICB2YXIgbSA9IFpFUk87XG4gICAgdmFyIGUsIHosIGosIGs7XG4gICAgaWYgKGYgPCAwIHx8IGYgPiAyMCkgdGhyb3cgUmFuZ2VFcnJvcihFUlJPUik7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmICh4ICE9IHgpIHJldHVybiAnTmFOJztcbiAgICBpZiAoeCA8PSAtMWUyMSB8fCB4ID49IDFlMjEpIHJldHVybiBTdHJpbmcoeCk7XG4gICAgaWYgKHggPCAwKSB7XG4gICAgICBzID0gJy0nO1xuICAgICAgeCA9IC14O1xuICAgIH1cbiAgICBpZiAoeCA+IDFlLTIxKSB7XG4gICAgICBlID0gbG9nKHggKiBwb3coMiwgNjksIDEpKSAtIDY5O1xuICAgICAgeiA9IGUgPCAwID8geCAqIHBvdygyLCAtZSwgMSkgOiB4IC8gcG93KDIsIGUsIDEpO1xuICAgICAgeiAqPSAweDEwMDAwMDAwMDAwMDAwO1xuICAgICAgZSA9IDUyIC0gZTtcbiAgICAgIGlmIChlID4gMCkge1xuICAgICAgICBtdWx0aXBseSgwLCB6KTtcbiAgICAgICAgaiA9IGY7XG4gICAgICAgIHdoaWxlIChqID49IDcpIHtcbiAgICAgICAgICBtdWx0aXBseSgxZTcsIDApO1xuICAgICAgICAgIGogLT0gNztcbiAgICAgICAgfVxuICAgICAgICBtdWx0aXBseShwb3coMTAsIGosIDEpLCAwKTtcbiAgICAgICAgaiA9IGUgLSAxO1xuICAgICAgICB3aGlsZSAoaiA+PSAyMykge1xuICAgICAgICAgIGRpdmlkZSgxIDw8IDIzKTtcbiAgICAgICAgICBqIC09IDIzO1xuICAgICAgICB9XG4gICAgICAgIGRpdmlkZSgxIDw8IGopO1xuICAgICAgICBtdWx0aXBseSgxLCAxKTtcbiAgICAgICAgZGl2aWRlKDIpO1xuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBtdWx0aXBseSgxIDw8IC1lLCAwKTtcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCkgKyByZXBlYXQuY2FsbChaRVJPLCBmKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGYgPiAwKSB7XG4gICAgICBrID0gbS5sZW5ndGg7XG4gICAgICBtID0gcyArIChrIDw9IGYgPyAnMC4nICsgcmVwZWF0LmNhbGwoWkVSTywgZiAtIGspICsgbSA6IG0uc2xpY2UoMCwgayAtIGYpICsgJy4nICsgbS5zbGljZShrIC0gZikpO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gcyArIG07XG4gICAgfSByZXR1cm4gbTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgYU51bWJlclZhbHVlID0gcmVxdWlyZSgnLi9fYS1udW1iZXItdmFsdWUnKTtcbnZhciAkdG9QcmVjaXNpb24gPSAxLjAudG9QcmVjaXNpb247XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIElFNy1cbiAgcmV0dXJuICR0b1ByZWNpc2lvbi5jYWxsKDEsIHVuZGVmaW5lZCkgIT09ICcxJztcbn0pIHx8ICEkZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICAkdG9QcmVjaXNpb24uY2FsbCh7fSk7XG59KSksICdOdW1iZXInLCB7XG4gIHRvUHJlY2lzaW9uOiBmdW5jdGlvbiB0b1ByZWNpc2lvbihwcmVjaXNpb24pIHtcbiAgICB2YXIgdGhhdCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCAnTnVtYmVyI3RvUHJlY2lzaW9uOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgICByZXR1cm4gcHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyAkdG9QcmVjaXNpb24uY2FsbCh0aGF0KSA6ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQsIHByZWNpc2lvbik7XG4gIH1cbn0pO1xuIiwiLy8gMTkuMS4zLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GLCAnT2JqZWN0JywgeyBhc3NpZ246IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKSB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBjcmVhdGU6IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKSB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuMyAvIDE1LjIuMy43IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpLCAnT2JqZWN0JywgeyBkZWZpbmVQcm9wZXJ0aWVzOiByZXF1aXJlKCcuL19vYmplY3QtZHBzJykgfSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjQgLyAxNS4yLjMuNiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnR5OiByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mIH0pO1xuIiwiLy8gMTkuMS4yLjUgT2JqZWN0LmZyZWV6ZShPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdmcmVlemUnLCBmdW5jdGlvbiAoJGZyZWV6ZSkge1xuICByZXR1cm4gZnVuY3Rpb24gZnJlZXplKGl0KSB7XG4gICAgcmV0dXJuICRmcmVlemUgJiYgaXNPYmplY3QoaXQpID8gJGZyZWV6ZShtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5RGVzY3JpcHRvcicsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodG9JT2JqZWN0KGl0KSwga2V5KTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlOYW1lcycsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpLmY7XG59KTtcbiIsIi8vIDE5LjEuMi45IE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldFByb3RvdHlwZU9mJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpIHtcbiAgICByZXR1cm4gJGdldFByb3RvdHlwZU9mKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMi4xMSBPYmplY3QuaXNFeHRlbnNpYmxlKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc0V4dGVuc2libGUnLCBmdW5jdGlvbiAoJGlzRXh0ZW5zaWJsZSkge1xuICByZXR1cm4gZnVuY3Rpb24gaXNFeHRlbnNpYmxlKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKGl0KSA6IHRydWUgOiBmYWxzZTtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjEyIE9iamVjdC5pc0Zyb3plbihPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNGcm96ZW4nLCBmdW5jdGlvbiAoJGlzRnJvemVuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc0Zyb3plbihpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNGcm96ZW4gPyAkaXNGcm96ZW4oaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTMgT2JqZWN0LmlzU2VhbGVkKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc1NlYWxlZCcsIGZ1bmN0aW9uICgkaXNTZWFsZWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzU2VhbGVkKGl0KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc1NlYWxlZCA/ICRpc1NlYWxlZChpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMy4xMCBPYmplY3QuaXModmFsdWUxLCB2YWx1ZTIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGlzOiByZXF1aXJlKCcuL19zYW1lLXZhbHVlJykgfSk7XG4iLCIvLyAxOS4xLjIuMTQgT2JqZWN0LmtleXMoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdrZXlzJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24ga2V5cyhpdCkge1xuICAgIHJldHVybiAka2V5cyh0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG4iLCIvLyAxOS4xLjIuMTUgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ3ByZXZlbnRFeHRlbnNpb25zJywgZnVuY3Rpb24gKCRwcmV2ZW50RXh0ZW5zaW9ucykge1xuICByZXR1cm4gZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnMoaXQpIHtcbiAgICByZXR1cm4gJHByZXZlbnRFeHRlbnNpb25zICYmIGlzT2JqZWN0KGl0KSA/ICRwcmV2ZW50RXh0ZW5zaW9ucyhtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuIiwiLy8gMTkuMS4yLjE3IE9iamVjdC5zZWFsKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ3NlYWwnLCBmdW5jdGlvbiAoJHNlYWwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNlYWwoaXQpIHtcbiAgICByZXR1cm4gJHNlYWwgJiYgaXNPYmplY3QoaXQpID8gJHNlYWwobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcbiIsIi8vIDE5LjEuMy4xOSBPYmplY3Quc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IHNldFByb3RvdHlwZU9mOiByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQgfSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIHRlc3QgPSB7fTtcbnRlc3RbcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyldID0gJ3onO1xuaWYgKHRlc3QgKyAnJyAhPSAnW29iamVjdCB6XScpIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7XG4gIH0sIHRydWUpO1xufVxuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX3BhcnNlLWZsb2F0Jyk7XG4vLyAxOC4yLjQgcGFyc2VGbG9hdChzdHJpbmcpXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgeyBwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdCB9KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XG4vLyAxOC4yLjUgcGFyc2VJbnQoc3RyaW5nLCByYWRpeClcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlSW50ICE9ICRwYXJzZUludCksIHsgcGFyc2VJbnQ6ICRwYXJzZUludCB9KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHRhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0O1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4vX21pY3JvdGFzaycpKCk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4vX3BlcmZvcm0nKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuL19wcm9taXNlLXJlc29sdmUnKTtcbnZhciBQUk9NSVNFID0gJ1Byb21pc2UnO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHZlcnNpb25zID0gcHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zO1xudmFyIHY4ID0gdmVyc2lvbnMgJiYgdmVyc2lvbnMudjggfHwgJyc7XG52YXIgJFByb21pc2UgPSBnbG9iYWxbUFJPTUlTRV07XG52YXIgaXNOb2RlID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG52YXIgZW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgSW50ZXJuYWwsIG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSwgT3duUHJvbWlzZUNhcGFiaWxpdHksIFdyYXBwZXI7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mO1xuXG52YXIgVVNFX05BVElWRSA9ICEhZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIC8vIGNvcnJlY3Qgc3ViY2xhc3Npbmcgd2l0aCBAQHNwZWNpZXMgc3VwcG9ydFxuICAgIHZhciBwcm9taXNlID0gJFByb21pc2UucmVzb2x2ZSgxKTtcbiAgICB2YXIgRmFrZVByb21pc2UgPSAocHJvbWlzZS5jb25zdHJ1Y3RvciA9IHt9KVtyZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpXSA9IGZ1bmN0aW9uIChleGVjKSB7XG4gICAgICBleGVjKGVtcHR5LCBlbXB0eSk7XG4gICAgfTtcbiAgICAvLyB1bmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gICAgcmV0dXJuIChpc05vZGUgfHwgdHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCA9PSAnZnVuY3Rpb24nKVxuICAgICAgJiYgcHJvbWlzZS50aGVuKGVtcHR5KSBpbnN0YW5jZW9mIEZha2VQcm9taXNlXG4gICAgICAvLyB2OCA2LjYgKE5vZGUgMTAgYW5kIENocm9tZSA2NikgaGF2ZSBhIGJ1ZyB3aXRoIHJlc29sdmluZyBjdXN0b20gdGhlbmFibGVzXG4gICAgICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD04MzA1NjVcbiAgICAgIC8vIHdlIGNhbid0IGRldGVjdCBpdCBzeW5jaHJvbm91c2x5LCBzbyBqdXN0IGNoZWNrIHZlcnNpb25zXG4gICAgICAmJiB2OC5pbmRleE9mKCc2LjYnKSAhPT0gMFxuICAgICAgJiYgdXNlckFnZW50LmluZGV4T2YoJ0Nocm9tZS82NicpID09PSAtMTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59KCk7XG5cbi8vIGhlbHBlcnNcbnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciB0aGVuO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmIHR5cGVvZiAodGhlbiA9IGl0LnRoZW4pID09ICdmdW5jdGlvbicgPyB0aGVuIDogZmFsc2U7XG59O1xudmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChwcm9taXNlLCBpc1JlamVjdCkge1xuICBpZiAocHJvbWlzZS5fbikgcmV0dXJuO1xuICBwcm9taXNlLl9uID0gdHJ1ZTtcbiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYztcbiAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92O1xuICAgIHZhciBvayA9IHByb21pc2UuX3MgPT0gMTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJ1biA9IGZ1bmN0aW9uIChyZWFjdGlvbikge1xuICAgICAgdmFyIGhhbmRsZXIgPSBvayA/IHJlYWN0aW9uLm9rIDogcmVhY3Rpb24uZmFpbDtcbiAgICAgIHZhciByZXNvbHZlID0gcmVhY3Rpb24ucmVzb2x2ZTtcbiAgICAgIHZhciByZWplY3QgPSByZWFjdGlvbi5yZWplY3Q7XG4gICAgICB2YXIgZG9tYWluID0gcmVhY3Rpb24uZG9tYWluO1xuICAgICAgdmFyIHJlc3VsdCwgdGhlbiwgZXhpdGVkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICBpZiAoIW9rKSB7XG4gICAgICAgICAgICBpZiAocHJvbWlzZS5faCA9PSAyKSBvbkhhbmRsZVVuaGFuZGxlZChwcm9taXNlKTtcbiAgICAgICAgICAgIHByb21pc2UuX2ggPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGFuZGxlciA9PT0gdHJ1ZSkgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpOyAvLyBtYXkgdGhyb3dcbiAgICAgICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICAgICAgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICAgICAgZXhpdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSkge1xuICAgICAgICAgICAgcmVqZWN0KFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChkb21haW4gJiYgIWV4aXRlZCkgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCA+IGkpIHJ1bihjaGFpbltpKytdKTsgLy8gdmFyaWFibGUgbGVuZ3RoIC0gY2FuJ3QgdXNlIGZvckVhY2hcbiAgICBwcm9taXNlLl9jID0gW107XG4gICAgcHJvbWlzZS5fbiA9IGZhbHNlO1xuICAgIGlmIChpc1JlamVjdCAmJiAhcHJvbWlzZS5faCkgb25VbmhhbmRsZWQocHJvbWlzZSk7XG4gIH0pO1xufTtcbnZhciBvblVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92O1xuICAgIHZhciB1bmhhbmRsZWQgPSBpc1VuaGFuZGxlZChwcm9taXNlKTtcbiAgICB2YXIgcmVzdWx0LCBoYW5kbGVyLCBjb25zb2xlO1xuICAgIGlmICh1bmhhbmRsZWQpIHtcbiAgICAgIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaXNOb2RlKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaGFuZGxlciA9IGdsb2JhbC5vbnVuaGFuZGxlZHJlamVjdGlvbikge1xuICAgICAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHZhbHVlIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKChjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGUpICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHByb21pc2UuX2ggPSBpc05vZGUgfHwgaXNVbmhhbmRsZWQocHJvbWlzZSkgPyAyIDogMTtcbiAgICB9IHByb21pc2UuX2EgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHVuaGFuZGxlZCAmJiByZXN1bHQuZSkgdGhyb3cgcmVzdWx0LnY7XG4gIH0pO1xufTtcbnZhciBpc1VuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHJldHVybiBwcm9taXNlLl9oICE9PSAxICYmIChwcm9taXNlLl9hIHx8IHByb21pc2UuX2MpLmxlbmd0aCA9PT0gMDtcbn07XG52YXIgb25IYW5kbGVVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhhbmRsZXI7XG4gICAgaWYgKGlzTm9kZSkge1xuICAgICAgcHJvY2Vzcy5lbWl0KCdyZWplY3Rpb25IYW5kbGVkJywgcHJvbWlzZSk7XG4gICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9ucmVqZWN0aW9uaGFuZGxlZCkge1xuICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogcHJvbWlzZS5fdiB9KTtcbiAgICB9XG4gIH0pO1xufTtcbnZhciAkcmVqZWN0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgaWYgKHByb21pc2UuX2QpIHJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICBwcm9taXNlLl92ID0gdmFsdWU7XG4gIHByb21pc2UuX3MgPSAyO1xuICBpZiAoIXByb21pc2UuX2EpIHByb21pc2UuX2EgPSBwcm9taXNlLl9jLnNsaWNlKCk7XG4gIG5vdGlmeShwcm9taXNlLCB0cnVlKTtcbn07XG52YXIgJHJlc29sdmUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICB2YXIgdGhlbjtcbiAgaWYgKHByb21pc2UuX2QpIHJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICB0cnkge1xuICAgIGlmIChwcm9taXNlID09PSB2YWx1ZSkgdGhyb3cgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKSkge1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfTsgLy8gd3JhcFxuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSwgY3R4KCRyZXNvbHZlLCB3cmFwcGVyLCAxKSwgY3R4KCRyZWplY3QsIHdyYXBwZXIsIDEpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICRyZWplY3QuY2FsbCh3cmFwcGVyLCBlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgICAgIHByb21pc2UuX3MgPSAxO1xuICAgICAgbm90aWZ5KHByb21pc2UsIGZhbHNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAkcmVqZWN0LmNhbGwoeyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH0sIGUpOyAvLyB3cmFwXG4gIH1cbn07XG5cbi8vIGNvbnN0cnVjdG9yIHBvbHlmaWxsXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcilcbiAgJFByb21pc2UgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkUHJvbWlzZSwgUFJPTUlTRSwgJ19oJyk7XG4gICAgYUZ1bmN0aW9uKGV4ZWN1dG9yKTtcbiAgICBJbnRlcm5hbC5jYWxsKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihjdHgoJHJlc29sdmUsIHRoaXMsIDEpLCBjdHgoJHJlamVjdCwgdGhpcywgMSkpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgJHJlamVjdC5jYWxsKHRoaXMsIGVycik7XG4gICAgfVxuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgSW50ZXJuYWwgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgdGhpcy5fYyA9IFtdOyAgICAgICAgICAgICAvLyA8LSBhd2FpdGluZyByZWFjdGlvbnNcbiAgICB0aGlzLl9hID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIGNoZWNrZWQgaW4gaXNVbmhhbmRsZWQgcmVhY3Rpb25zXG4gICAgdGhpcy5fcyA9IDA7ICAgICAgICAgICAgICAvLyA8LSBzdGF0ZVxuICAgIHRoaXMuX2QgPSBmYWxzZTsgICAgICAgICAgLy8gPC0gZG9uZVxuICAgIHRoaXMuX3YgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gdmFsdWVcbiAgICB0aGlzLl9oID0gMDsgICAgICAgICAgICAgIC8vIDwtIHJlamVjdGlvbiBzdGF0ZSwgMCAtIGRlZmF1bHQsIDEgLSBoYW5kbGVkLCAyIC0gdW5oYW5kbGVkXG4gICAgdGhpcy5fbiA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBub3RpZnlcbiAgfTtcbiAgSW50ZXJuYWwucHJvdG90eXBlID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJykoJFByb21pc2UucHJvdG90eXBlLCB7XG4gICAgLy8gMjUuNC41LjMgUHJvbWlzZS5wcm90b3R5cGUudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZClcbiAgICB0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJFByb21pc2UpKTtcbiAgICAgIHJlYWN0aW9uLm9rID0gdHlwZW9mIG9uRnVsZmlsbGVkID09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IHRydWU7XG4gICAgICByZWFjdGlvbi5mYWlsID0gdHlwZW9mIG9uUmVqZWN0ZWQgPT0gJ2Z1bmN0aW9uJyAmJiBvblJlamVjdGVkO1xuICAgICAgcmVhY3Rpb24uZG9tYWluID0gaXNOb2RlID8gcHJvY2Vzcy5kb21haW4gOiB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9jLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX2EpIHRoaXMuX2EucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fcykgbm90aWZ5KHRoaXMsIGZhbHNlKTtcbiAgICAgIHJldHVybiByZWFjdGlvbi5wcm9taXNlO1xuICAgIH0sXG4gICAgLy8gMjUuNC41LjEgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2gob25SZWplY3RlZClcbiAgICAnY2F0Y2gnOiBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICAgIH1cbiAgfSk7XG4gIE93blByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gbmV3IEludGVybmFsKCk7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBjdHgoJHJlc29sdmUsIHByb21pc2UsIDEpO1xuICAgIHRoaXMucmVqZWN0ID0gY3R4KCRyZWplY3QsIHByb21pc2UsIDEpO1xuICB9O1xuICBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICAgIHJldHVybiBDID09PSAkUHJvbWlzZSB8fCBDID09PSBXcmFwcGVyXG4gICAgICA/IG5ldyBPd25Qcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgOiBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgUHJvbWlzZTogJFByb21pc2UgfSk7XG5yZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpKCRQcm9taXNlLCBQUk9NSVNFKTtcbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoUFJPTUlTRSk7XG5XcmFwcGVyID0gcmVxdWlyZSgnLi9fY29yZScpW1BST01JU0VdO1xuXG4vLyBzdGF0aWNzXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC41IFByb21pc2UucmVqZWN0KHIpXG4gIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHIpIHtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpO1xuICAgIHZhciAkJHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgICQkcmVqZWN0KHIpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTElCUkFSWSB8fCAhVVNFX05BVElWRSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjYgUHJvbWlzZS5yZXNvbHZlKHgpXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCkge1xuICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShMSUJSQVJZICYmIHRoaXMgPT09IFdyYXBwZXIgPyAkUHJvbWlzZSA6IHRoaXMsIHgpO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIShVU0VfTkFUSVZFICYmIHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgJFByb21pc2UuYWxsKGl0ZXIpWydjYXRjaCddKGVtcHR5KTtcbn0pKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuMSBQcm9taXNlLmFsbChpdGVyYWJsZSlcbiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVzb2x2ZSA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgJGluZGV4ID0gaW5kZXgrKztcbiAgICAgICAgdmFyIGFscmVhZHlDYWxsZWQgPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgcmVtYWluaW5nKys7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGlmIChhbHJlYWR5Q2FsbGVkKSByZXR1cm47XG4gICAgICAgICAgYWxyZWFkeUNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgdmFsdWVzWyRpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfSxcbiAgLy8gMjUuNC40LjQgUHJvbWlzZS5yYWNlKGl0ZXJhYmxlKVxuICByYWNlOiBmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oY2FwYWJpbGl0eS5yZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xIFJlZmxlY3QuYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHJBcHBseSA9IChyZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0IHx8IHt9KS5hcHBseTtcbnZhciBmQXBwbHkgPSBGdW5jdGlvbi5hcHBseTtcbi8vIE1TIEVkZ2UgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJBcHBseShmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSksICdSZWZsZWN0Jywge1xuICBhcHBseTogZnVuY3Rpb24gYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpIHtcbiAgICB2YXIgVCA9IGFGdW5jdGlvbih0YXJnZXQpO1xuICAgIHZhciBMID0gYW5PYmplY3QoYXJndW1lbnRzTGlzdCk7XG4gICAgcmV0dXJuIHJBcHBseSA/IHJBcHBseShULCB0aGlzQXJndW1lbnQsIEwpIDogZkFwcGx5LmNhbGwoVCwgdGhpc0FyZ3VtZW50LCBMKTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjIgUmVmbGVjdC5jb25zdHJ1Y3QodGFyZ2V0LCBhcmd1bWVudHNMaXN0IFssIG5ld1RhcmdldF0pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9fYmluZCcpO1xudmFyIHJDb25zdHJ1Y3QgPSAocmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdCB8fCB7fSkuY29uc3RydWN0O1xuXG4vLyBNUyBFZGdlIHN1cHBvcnRzIG9ubHkgMiBhcmd1bWVudHMgYW5kIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbi8vIEZGIE5pZ2h0bHkgc2V0cyB0aGlyZCBhcmd1bWVudCBhcyBgbmV3LnRhcmdldGAsIGJ1dCBkb2VzIG5vdCBjcmVhdGUgYHRoaXNgIGZyb20gaXRcbnZhciBORVdfVEFSR0VUX0JVRyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShyQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgW10sIEYpIGluc3RhbmNlb2YgRik7XG59KTtcbnZhciBBUkdTX0JVRyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChORVdfVEFSR0VUX0JVRyB8fCBBUkdTX0JVRyksICdSZWZsZWN0Jywge1xuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIGNvbnN0cnVjdChUYXJnZXQsIGFyZ3MgLyogLCBuZXdUYXJnZXQgKi8pIHtcbiAgICBhRnVuY3Rpb24oVGFyZ2V0KTtcbiAgICBhbk9iamVjdChhcmdzKTtcbiAgICB2YXIgbmV3VGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyBUYXJnZXQgOiBhRnVuY3Rpb24oYXJndW1lbnRzWzJdKTtcbiAgICBpZiAoQVJHU19CVUcgJiYgIU5FV19UQVJHRVRfQlVHKSByZXR1cm4gckNvbnN0cnVjdChUYXJnZXQsIGFyZ3MsIG5ld1RhcmdldCk7XG4gICAgaWYgKFRhcmdldCA9PSBuZXdUYXJnZXQpIHtcbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgb3B0aW1pemF0aW9uIGZvciAwLTQgYXJndW1lbnRzXG4gICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBUYXJnZXQoKTtcbiAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdKTtcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgIH1cbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgbG90IG9mIGFyZ3VtZW50cyBjYXNlXG4gICAgICB2YXIgJGFyZ3MgPSBbbnVsbF07XG4gICAgICAkYXJncy5wdXNoLmFwcGx5KCRhcmdzLCBhcmdzKTtcbiAgICAgIHJldHVybiBuZXcgKGJpbmQuYXBwbHkoVGFyZ2V0LCAkYXJncykpKCk7XG4gICAgfVxuICAgIC8vIHdpdGggYWx0ZXJlZCBuZXdUYXJnZXQsIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGNvbnN0cnVjdG9yc1xuICAgIHZhciBwcm90byA9IG5ld1RhcmdldC5wcm90b3R5cGU7XG4gICAgdmFyIGluc3RhbmNlID0gY3JlYXRlKGlzT2JqZWN0KHByb3RvKSA/IHByb3RvIDogT2JqZWN0LnByb3RvdHlwZSk7XG4gICAgdmFyIHJlc3VsdCA9IEZ1bmN0aW9uLmFwcGx5LmNhbGwoVGFyZ2V0LCBpbnN0YW5jZSwgYXJncyk7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiBpbnN0YW5jZTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjMgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKVxudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcblxuLy8gTVMgRWRnZSBoYXMgYnJva2VuIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkgLSB0aHJvd2luZyBpbnN0ZWFkIG9mIHJldHVybmluZyBmYWxzZVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkoZFAuZih7fSwgMSwgeyB2YWx1ZTogMSB9KSwgMSwgeyB2YWx1ZTogMiB9KTtcbn0pLCAnUmVmbGVjdCcsIHtcbiAgZGVmaW5lUHJvcGVydHk6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHByb3BlcnR5S2V5ID0gdG9QcmltaXRpdmUocHJvcGVydHlLZXksIHRydWUpO1xuICAgIGFuT2JqZWN0KGF0dHJpYnV0ZXMpO1xuICAgIHRyeSB7XG4gICAgICBkUC5mKHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iLCIvLyAyNi4xLjQgUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZGVsZXRlUHJvcGVydHk6IGZ1bmN0aW9uIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICB2YXIgZGVzYyA9IGdPUEQoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICAgIHJldHVybiBkZXNjICYmICFkZXNjLmNvbmZpZ3VyYWJsZSA/IGZhbHNlIDogZGVsZXRlIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjYuMS41IFJlZmxlY3QuZW51bWVyYXRlKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBFbnVtZXJhdGUgPSBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgdGhpcy5fdCA9IGFuT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdmFyIGtleXMgPSB0aGlzLl9rID0gW107ICAgICAgLy8ga2V5c1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBpdGVyYXRlZCkga2V5cy5wdXNoKGtleSk7XG59O1xucmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKShFbnVtZXJhdGUsICdPYmplY3QnLCBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gdGhpcztcbiAgdmFyIGtleXMgPSB0aGF0Ll9rO1xuICB2YXIga2V5O1xuICBkbyB7XG4gICAgaWYgKHRoYXQuX2kgPj0ga2V5cy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfSB3aGlsZSAoISgoa2V5ID0ga2V5c1t0aGF0Ll9pKytdKSBpbiB0aGF0Ll90KSk7XG4gIHJldHVybiB7IHZhbHVlOiBrZXksIGRvbmU6IGZhbHNlIH07XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBlbnVtZXJhdGU6IGZ1bmN0aW9uIGVudW1lcmF0ZSh0YXJnZXQpIHtcbiAgICByZXR1cm4gbmV3IEVudW1lcmF0ZSh0YXJnZXQpO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuNyBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICByZXR1cm4gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjggUmVmbGVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGdldFByb3RvID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKHRhcmdldCkge1xuICAgIHJldHVybiBnZXRQcm90byhhbk9iamVjdCh0YXJnZXQpKTtcbiAgfVxufSk7XG4iLCIvLyAyNi4xLjYgUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSBbLCByZWNlaXZlcl0pXG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuZnVuY3Rpb24gZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgLyogLCByZWNlaXZlciAqLykge1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHRhcmdldCA6IGFyZ3VtZW50c1syXTtcbiAgdmFyIGRlc2MsIHByb3RvO1xuICBpZiAoYW5PYmplY3QodGFyZ2V0KSA9PT0gcmVjZWl2ZXIpIHJldHVybiB0YXJnZXRbcHJvcGVydHlLZXldO1xuICBpZiAoZGVzYyA9IGdPUEQuZih0YXJnZXQsIHByb3BlcnR5S2V5KSkgcmV0dXJuIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgID8gZGVzYy52YWx1ZVxuICAgIDogZGVzYy5nZXQgIT09IHVuZGVmaW5lZFxuICAgICAgPyBkZXNjLmdldC5jYWxsKHJlY2VpdmVyKVxuICAgICAgOiB1bmRlZmluZWQ7XG4gIGlmIChpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSByZXR1cm4gZ2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgcmVjZWl2ZXIpO1xufVxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IGdldDogZ2V0IH0pO1xuIiwiLy8gMjYuMS45IFJlZmxlY3QuaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGhhczogZnVuY3Rpb24gaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICByZXR1cm4gcHJvcGVydHlLZXkgaW4gdGFyZ2V0O1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMTAgUmVmbGVjdC5pc0V4dGVuc2libGUodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGlzRXh0ZW5zaWJsZTogZnVuY3Rpb24gaXNFeHRlbnNpYmxlKHRhcmdldCkge1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcmV0dXJuICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKHRhcmdldCkgOiB0cnVlO1xuICB9XG59KTtcbiIsIi8vIDI2LjEuMTEgUmVmbGVjdC5vd25LZXlzKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgb3duS2V5czogcmVxdWlyZSgnLi9fb3duLWtleXMnKSB9KTtcbiIsIi8vIDI2LjEuMTIgUmVmbGVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJHByZXZlbnRFeHRlbnNpb25zID0gT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIHByZXZlbnRFeHRlbnNpb25zOiBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHRyeSB7XG4gICAgICBpZiAoJHByZXZlbnRFeHRlbnNpb25zKSAkcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwiLy8gMjYuMS4xNCBSZWZsZWN0LnNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNldFByb3RvID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJyk7XG5cbmlmIChzZXRQcm90bykgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBzZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bykge1xuICAgIHNldFByb3RvLmNoZWNrKHRhcmdldCwgcHJvdG8pO1xuICAgIHRyeSB7XG4gICAgICBzZXRQcm90by5zZXQodGFyZ2V0LCBwcm90byk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcbiIsIi8vIDI2LjEuMTMgUmVmbGVjdC5zZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViBbLCByZWNlaXZlcl0pXG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIHNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIC8qICwgcmVjZWl2ZXIgKi8pIHtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDQgPyB0YXJnZXQgOiBhcmd1bWVudHNbM107XG4gIHZhciBvd25EZXNjID0gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgdmFyIGV4aXN0aW5nRGVzY3JpcHRvciwgcHJvdG87XG4gIGlmICghb3duRGVzYykge1xuICAgIGlmIChpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSB7XG4gICAgICByZXR1cm4gc2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgViwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgICBvd25EZXNjID0gY3JlYXRlRGVzYygwKTtcbiAgfVxuICBpZiAoaGFzKG93bkRlc2MsICd2YWx1ZScpKSB7XG4gICAgaWYgKG93bkRlc2Mud3JpdGFibGUgPT09IGZhbHNlIHx8ICFpc09iamVjdChyZWNlaXZlcikpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yID0gZ09QRC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSkpIHtcbiAgICAgIGlmIChleGlzdGluZ0Rlc2NyaXB0b3IuZ2V0IHx8IGV4aXN0aW5nRGVzY3JpcHRvci5zZXQgfHwgZXhpc3RpbmdEZXNjcmlwdG9yLndyaXRhYmxlID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgZXhpc3RpbmdEZXNjcmlwdG9yLnZhbHVlID0gVjtcbiAgICAgIGRQLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBleGlzdGluZ0Rlc2NyaXB0b3IpO1xuICAgIH0gZWxzZSBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgY3JlYXRlRGVzYygwLCBWKSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIG93bkRlc2Muc2V0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IChvd25EZXNjLnNldC5jYWxsKHJlY2VpdmVyLCBWKSwgdHJ1ZSk7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgc2V0OiBzZXQgfSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciAkZmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyICRSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xudmFyIEJhc2UgPSAkUmVnRXhwO1xudmFyIHByb3RvID0gJFJlZ0V4cC5wcm90b3R5cGU7XG52YXIgcmUxID0gL2EvZztcbnZhciByZTIgPSAvYS9nO1xuLy8gXCJuZXdcIiBjcmVhdGVzIGEgbmV3IG9iamVjdCwgb2xkIHdlYmtpdCBidWdneSBoZXJlXG52YXIgQ09SUkVDVF9ORVcgPSBuZXcgJFJlZ0V4cChyZTEpICE9PSByZTE7XG5cbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICghQ09SUkVDVF9ORVcgfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJlMltyZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKV0gPSBmYWxzZTtcbiAgLy8gUmVnRXhwIGNvbnN0cnVjdG9yIGNhbiBhbHRlciBmbGFncyBhbmQgSXNSZWdFeHAgd29ya3MgY29ycmVjdCB3aXRoIEBAbWF0Y2hcbiAgcmV0dXJuICRSZWdFeHAocmUxKSAhPSByZTEgfHwgJFJlZ0V4cChyZTIpID09IHJlMiB8fCAkUmVnRXhwKHJlMSwgJ2knKSAhPSAnL2EvaSc7XG59KSkpIHtcbiAgJFJlZ0V4cCA9IGZ1bmN0aW9uIFJlZ0V4cChwLCBmKSB7XG4gICAgdmFyIHRpUkUgPSB0aGlzIGluc3RhbmNlb2YgJFJlZ0V4cDtcbiAgICB2YXIgcGlSRSA9IGlzUmVnRXhwKHApO1xuICAgIHZhciBmaVUgPSBmID09PSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuICF0aVJFICYmIHBpUkUgJiYgcC5jb25zdHJ1Y3RvciA9PT0gJFJlZ0V4cCAmJiBmaVUgPyBwXG4gICAgICA6IGluaGVyaXRJZlJlcXVpcmVkKENPUlJFQ1RfTkVXXG4gICAgICAgID8gbmV3IEJhc2UocGlSRSAmJiAhZmlVID8gcC5zb3VyY2UgOiBwLCBmKVxuICAgICAgICA6IEJhc2UoKHBpUkUgPSBwIGluc3RhbmNlb2YgJFJlZ0V4cCkgPyBwLnNvdXJjZSA6IHAsIHBpUkUgJiYgZmlVID8gJGZsYWdzLmNhbGwocCkgOiBmKVxuICAgICAgLCB0aVJFID8gdGhpcyA6IHByb3RvLCAkUmVnRXhwKTtcbiAgfTtcbiAgdmFyIHByb3h5ID0gZnVuY3Rpb24gKGtleSkge1xuICAgIGtleSBpbiAkUmVnRXhwIHx8IGRQKCRSZWdFeHAsIGtleSwge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBCYXNlW2tleV07IH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIChpdCkgeyBCYXNlW2tleV0gPSBpdDsgfVxuICAgIH0pO1xuICB9O1xuICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlKSwgaSA9IDA7IGtleXMubGVuZ3RoID4gaTspIHByb3h5KGtleXNbaSsrXSk7XG4gIHByb3RvLmNvbnN0cnVjdG9yID0gJFJlZ0V4cDtcbiAgJFJlZ0V4cC5wcm90b3R5cGUgPSBwcm90bztcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsICdSZWdFeHAnLCAkUmVnRXhwKTtcbn1cblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnUmVnRXhwJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5yZXF1aXJlKCcuL19leHBvcnQnKSh7XG4gIHRhcmdldDogJ1JlZ0V4cCcsXG4gIHByb3RvOiB0cnVlLFxuICBmb3JjZWQ6IHJlZ2V4cEV4ZWMgIT09IC8uLy5leGVjXG59LCB7XG4gIGV4ZWM6IHJlZ2V4cEV4ZWNcbn0pO1xuIiwiLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3MoKVxuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgLy4vZy5mbGFncyAhPSAnZycpIHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoUmVnRXhwLnByb3RvdHlwZSwgJ2ZsYWdzJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogcmVxdWlyZSgnLi9fZmxhZ3MnKVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9fYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcblxuLy8gQEBtYXRjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdtYXRjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBNQVRDSCwgJG1hdGNoLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5tYXRjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5tYXRjaFxuICAgIGZ1bmN0aW9uIG1hdGNoKHJlZ2V4cCkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtNQVRDSF07XG4gICAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtNQVRDSF0oU3RyaW5nKE8pKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAbWF0Y2hcbiAgICBmdW5jdGlvbiAocmVnZXhwKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKCRtYXRjaCwgcmVnZXhwLCB0aGlzKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIGlmICghcnguZ2xvYmFsKSByZXR1cm4gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICB2YXIgZnVsbFVuaWNvZGUgPSByeC51bmljb2RlO1xuICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBBID0gW107XG4gICAgICB2YXIgbiA9IDA7XG4gICAgICB2YXIgcmVzdWx0O1xuICAgICAgd2hpbGUgKChyZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKSkgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIG1hdGNoU3RyID0gU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIEFbbl0gPSBtYXRjaFN0cjtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgICAgbisrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG4gPT09IDAgPyBudWxsIDogQTtcbiAgICB9XG4gIF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuL19hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MUyA9IC9cXCQoWyQmYCddfFxcZFxcZD98PFtePl0qPikvZztcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCA9IC9cXCQoWyQmYCddfFxcZFxcZD8pL2c7XG5cbnZhciBtYXliZVRvU3RyaW5nID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gaXQgOiBTdHJpbmcoaXQpO1xufTtcblxuLy8gQEByZXBsYWNlIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3JlcGxhY2UnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgUkVQTEFDRSwgJHJlcGxhY2UsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2VgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucmVwbGFjZVxuICAgIGZ1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgICAgdmFyIGZuID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VhcmNoVmFsdWVbUkVQTEFDRV07XG4gICAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZFxuICAgICAgICA/IGZuLmNhbGwoc2VhcmNoVmFsdWUsIE8sIHJlcGxhY2VWYWx1ZSlcbiAgICAgICAgOiAkcmVwbGFjZS5jYWxsKFN0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAcmVwbGFjZVxuICAgIGZ1bmN0aW9uIChyZWdleHAsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZSgkcmVwbGFjZSwgcmVnZXhwLCB0aGlzLCByZXBsYWNlVmFsdWUpO1xuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICB2YXIgZnVuY3Rpb25hbFJlcGxhY2UgPSB0eXBlb2YgcmVwbGFjZVZhbHVlID09PSAnZnVuY3Rpb24nO1xuICAgICAgaWYgKCFmdW5jdGlvbmFsUmVwbGFjZSkgcmVwbGFjZVZhbHVlID0gU3RyaW5nKHJlcGxhY2VWYWx1ZSk7XG4gICAgICB2YXIgZ2xvYmFsID0gcnguZ2xvYmFsO1xuICAgICAgaWYgKGdsb2JhbCkge1xuICAgICAgICB2YXIgZnVsbFVuaWNvZGUgPSByeC51bmljb2RlO1xuICAgICAgICByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkgYnJlYWs7XG4gICAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQpO1xuICAgICAgICBpZiAoIWdsb2JhbCkgYnJlYWs7XG4gICAgICAgIHZhciBtYXRjaFN0ciA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgfVxuICAgICAgdmFyIGFjY3VtdWxhdGVkUmVzdWx0ID0gJyc7XG4gICAgICB2YXIgbmV4dFNvdXJjZVBvc2l0aW9uID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHQgPSByZXN1bHRzW2ldO1xuICAgICAgICB2YXIgbWF0Y2hlZCA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICB2YXIgcG9zaXRpb24gPSBtYXgobWluKHRvSW50ZWdlcihyZXN1bHQuaW5kZXgpLCBTLmxlbmd0aCksIDApO1xuICAgICAgICB2YXIgY2FwdHVyZXMgPSBbXTtcbiAgICAgICAgLy8gTk9URTogVGhpcyBpcyBlcXVpdmFsZW50IHRvXG4gICAgICAgIC8vICAgY2FwdHVyZXMgPSByZXN1bHQuc2xpY2UoMSkubWFwKG1heWJlVG9TdHJpbmcpXG4gICAgICAgIC8vIGJ1dCBmb3Igc29tZSByZWFzb24gYG5hdGl2ZVNsaWNlLmNhbGwocmVzdWx0LCAxLCByZXN1bHQubGVuZ3RoKWAgKGNhbGxlZCBpblxuICAgICAgICAvLyB0aGUgc2xpY2UgcG9seWZpbGwgd2hlbiBzbGljaW5nIG5hdGl2ZSBhcnJheXMpIFwiZG9lc24ndCB3b3JrXCIgaW4gc2FmYXJpIDkgYW5kXG4gICAgICAgIC8vIGNhdXNlcyBhIGNyYXNoIChodHRwczovL3Bhc3RlYmluLmNvbS9OMjFRemVRQSkgd2hlbiB0cnlpbmcgdG8gZGVidWcgaXQuXG4gICAgICAgIGZvciAodmFyIGogPSAxOyBqIDwgcmVzdWx0Lmxlbmd0aDsgaisrKSBjYXB0dXJlcy5wdXNoKG1heWJlVG9TdHJpbmcocmVzdWx0W2pdKSk7XG4gICAgICAgIHZhciBuYW1lZENhcHR1cmVzID0gcmVzdWx0Lmdyb3VwcztcbiAgICAgICAgaWYgKGZ1bmN0aW9uYWxSZXBsYWNlKSB7XG4gICAgICAgICAgdmFyIHJlcGxhY2VyQXJncyA9IFttYXRjaGVkXS5jb25jYXQoY2FwdHVyZXMsIHBvc2l0aW9uLCBTKTtcbiAgICAgICAgICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSByZXBsYWNlckFyZ3MucHVzaChuYW1lZENhcHR1cmVzKTtcbiAgICAgICAgICB2YXIgcmVwbGFjZW1lbnQgPSBTdHJpbmcocmVwbGFjZVZhbHVlLmFwcGx5KHVuZGVmaW5lZCwgcmVwbGFjZXJBcmdzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVwbGFjZW1lbnQgPSBnZXRTdWJzdGl0dXRpb24obWF0Y2hlZCwgUywgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3NpdGlvbiA+PSBuZXh0U291cmNlUG9zaXRpb24pIHtcbiAgICAgICAgICBhY2N1bXVsYXRlZFJlc3VsdCArPSBTLnNsaWNlKG5leHRTb3VyY2VQb3NpdGlvbiwgcG9zaXRpb24pICsgcmVwbGFjZW1lbnQ7XG4gICAgICAgICAgbmV4dFNvdXJjZVBvc2l0aW9uID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFjY3VtdWxhdGVkUmVzdWx0ICsgUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24pO1xuICAgIH1cbiAgXTtcblxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWdldHN1YnN0aXR1dGlvblxuICBmdW5jdGlvbiBnZXRTdWJzdGl0dXRpb24obWF0Y2hlZCwgc3RyLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VtZW50KSB7XG4gICAgdmFyIHRhaWxQb3MgPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xuICAgIHZhciBtID0gY2FwdHVyZXMubGVuZ3RoO1xuICAgIHZhciBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQ7XG4gICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbmFtZWRDYXB0dXJlcyA9IHRvT2JqZWN0KG5hbWVkQ2FwdHVyZXMpO1xuICAgICAgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTO1xuICAgIH1cbiAgICByZXR1cm4gJHJlcGxhY2UuY2FsbChyZXBsYWNlbWVudCwgc3ltYm9scywgZnVuY3Rpb24gKG1hdGNoLCBjaCkge1xuICAgICAgdmFyIGNhcHR1cmU7XG4gICAgICBzd2l0Y2ggKGNoLmNoYXJBdCgwKSkge1xuICAgICAgICBjYXNlICckJzogcmV0dXJuICckJztcbiAgICAgICAgY2FzZSAnJic6IHJldHVybiBtYXRjaGVkO1xuICAgICAgICBjYXNlICdgJzogcmV0dXJuIHN0ci5zbGljZSgwLCBwb3NpdGlvbik7XG4gICAgICAgIGNhc2UgXCInXCI6IHJldHVybiBzdHIuc2xpY2UodGFpbFBvcyk7XG4gICAgICAgIGNhc2UgJzwnOlxuICAgICAgICAgIGNhcHR1cmUgPSBuYW1lZENhcHR1cmVzW2NoLnNsaWNlKDEsIC0xKV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IC8vIFxcZFxcZD9cbiAgICAgICAgICB2YXIgbiA9ICtjaDtcbiAgICAgICAgICBpZiAobiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgIGlmIChuID4gbSkge1xuICAgICAgICAgICAgdmFyIGYgPSBmbG9vcihuIC8gMTApO1xuICAgICAgICAgICAgaWYgKGYgPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICAgIGlmIChmIDw9IG0pIHJldHVybiBjYXB0dXJlc1tmIC0gMV0gPT09IHVuZGVmaW5lZCA/IGNoLmNoYXJBdCgxKSA6IGNhcHR1cmVzW2YgLSAxXSArIGNoLmNoYXJBdCgxKTtcbiAgICAgICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FwdHVyZSA9IGNhcHR1cmVzW24gLSAxXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjYXB0dXJlID09PSB1bmRlZmluZWQgPyAnJyA6IGNhcHR1cmU7XG4gICAgfSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBzYW1lVmFsdWUgPSByZXF1aXJlKCcuL19zYW1lLXZhbHVlJyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG5cbi8vIEBAc2VhcmNoIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NlYXJjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBTRUFSQ0gsICRzZWFyY2gsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnNlYXJjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zZWFyY2hcbiAgICBmdW5jdGlvbiBzZWFyY2gocmVnZXhwKSB7XG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XG4gICAgICB2YXIgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW1NFQVJDSF07XG4gICAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtTRUFSQ0hdKFN0cmluZyhPKSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBzZWFyY2hcbiAgICBmdW5jdGlvbiAocmVnZXhwKSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKCRzZWFyY2gsIHJlZ2V4cCwgdGhpcyk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XG4gICAgICB2YXIgcHJldmlvdXNMYXN0SW5kZXggPSByeC5sYXN0SW5kZXg7XG4gICAgICBpZiAoIXNhbWVWYWx1ZShwcmV2aW91c0xhc3RJbmRleCwgMCkpIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICBpZiAoIXNhbWVWYWx1ZShyeC5sYXN0SW5kZXgsIHByZXZpb3VzTGFzdEluZGV4KSkgcngubGFzdEluZGV4ID0gcHJldmlvdXNMYXN0SW5kZXg7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSBudWxsID8gLTEgOiByZXN1bHQuaW5kZXg7XG4gICAgfVxuICBdO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vX2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjYWxsUmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRtaW4gPSBNYXRoLm1pbjtcbnZhciAkcHVzaCA9IFtdLnB1c2g7XG52YXIgJFNQTElUID0gJ3NwbGl0JztcbnZhciBMRU5HVEggPSAnbGVuZ3RoJztcbnZhciBMQVNUX0lOREVYID0gJ2xhc3RJbmRleCc7XG52YXIgTUFYX1VJTlQzMiA9IDB4ZmZmZmZmZmY7XG5cbi8vIGJhYmVsLW1pbmlmeSB0cmFuc3BpbGVzIFJlZ0V4cCgneCcsICd5JykgLT4gL3gveSBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yXG52YXIgU1VQUE9SVFNfWSA9ICFmYWlscyhmdW5jdGlvbiAoKSB7IFJlZ0V4cChNQVhfVUlOVDMyLCAneScpOyB9KTtcblxuLy8gQEBzcGxpdCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdzcGxpdCcsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBTUExJVCwgJHNwbGl0LCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgdmFyIGludGVybmFsU3BsaXQ7XG4gIGlmIChcbiAgICAnYWJiYydbJFNQTElUXSgvKGIpKi8pWzFdID09ICdjJyB8fFxuICAgICd0ZXN0J1skU1BMSVRdKC8oPzopLywgLTEpW0xFTkdUSF0gIT0gNCB8fFxuICAgICdhYidbJFNQTElUXSgvKD86YWIpKi8pW0xFTkdUSF0gIT0gMiB8fFxuICAgICcuJ1skU1BMSVRdKC8oLj8pKC4/KS8pW0xFTkdUSF0gIT0gNCB8fFxuICAgICcuJ1skU1BMSVRdKC8oKSgpLylbTEVOR1RIXSA+IDEgfHxcbiAgICAnJ1skU1BMSVRdKC8uPy8pW0xFTkdUSF1cbiAgKSB7XG4gICAgLy8gYmFzZWQgb24gZXM1LXNoaW0gaW1wbGVtZW50YXRpb24sIG5lZWQgdG8gcmV3b3JrIGl0XG4gICAgaW50ZXJuYWxTcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICB2YXIgc3RyaW5nID0gU3RyaW5nKHRoaXMpO1xuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwKSByZXR1cm4gW107XG4gICAgICAvLyBJZiBgc2VwYXJhdG9yYCBpcyBub3QgYSByZWdleCwgdXNlIG5hdGl2ZSBzcGxpdFxuICAgICAgaWYgKCFpc1JlZ0V4cChzZXBhcmF0b3IpKSByZXR1cm4gJHNwbGl0LmNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICAgIHZhciBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5zdGlja3kgPyAneScgOiAnJyk7XG4gICAgICB2YXIgbGFzdExhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgc3BsaXRMaW1pdCA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7XG4gICAgICAvLyBNYWtlIGBnbG9iYWxgIGFuZCBhdm9pZCBgbGFzdEluZGV4YCBpc3N1ZXMgYnkgd29ya2luZyB3aXRoIGEgY29weVxuICAgICAgdmFyIHNlcGFyYXRvckNvcHkgPSBuZXcgUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIGZsYWdzICsgJ2cnKTtcbiAgICAgIHZhciBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoO1xuICAgICAgd2hpbGUgKG1hdGNoID0gcmVnZXhwRXhlYy5jYWxsKHNlcGFyYXRvckNvcHksIHN0cmluZykpIHtcbiAgICAgICAgbGFzdEluZGV4ID0gc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXTtcbiAgICAgICAgaWYgKGxhc3RJbmRleCA+IGxhc3RMYXN0SW5kZXgpIHtcbiAgICAgICAgICBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCwgbWF0Y2guaW5kZXgpKTtcbiAgICAgICAgICBpZiAobWF0Y2hbTEVOR1RIXSA+IDEgJiYgbWF0Y2guaW5kZXggPCBzdHJpbmdbTEVOR1RIXSkgJHB1c2guYXBwbHkob3V0cHV0LCBtYXRjaC5zbGljZSgxKSk7XG4gICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdW0xFTkdUSF07XG4gICAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICBpZiAob3V0cHV0W0xFTkdUSF0gPj0gc3BsaXRMaW1pdCkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0gPT09IG1hdGNoLmluZGV4KSBzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdKys7IC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3BcbiAgICAgIH1cbiAgICAgIGlmIChsYXN0TGFzdEluZGV4ID09PSBzdHJpbmdbTEVOR1RIXSkge1xuICAgICAgICBpZiAobGFzdExlbmd0aCB8fCAhc2VwYXJhdG9yQ29weS50ZXN0KCcnKSkgb3V0cHV0LnB1c2goJycpO1xuICAgICAgfSBlbHNlIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4KSk7XG4gICAgICByZXR1cm4gb3V0cHV0W0xFTkdUSF0gPiBzcGxpdExpbWl0ID8gb3V0cHV0LnNsaWNlKDAsIHNwbGl0TGltaXQpIDogb3V0cHV0O1xuICAgIH07XG4gIC8vIENoYWtyYSwgVjhcbiAgfSBlbHNlIGlmICgnMCdbJFNQTElUXSh1bmRlZmluZWQsIDApW0xFTkdUSF0pIHtcbiAgICBpbnRlcm5hbFNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHJldHVybiBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCA/IFtdIDogJHNwbGl0LmNhbGwodGhpcywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBpbnRlcm5hbFNwbGl0ID0gJHNwbGl0O1xuICB9XG5cbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5zcGxpdGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zcGxpdFxuICAgIGZ1bmN0aW9uIHNwbGl0KHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBzcGxpdHRlciA9IHNlcGFyYXRvciA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZXBhcmF0b3JbU1BMSVRdO1xuICAgICAgcmV0dXJuIHNwbGl0dGVyICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBzcGxpdHRlci5jYWxsKHNlcGFyYXRvciwgTywgbGltaXQpXG4gICAgICAgIDogaW50ZXJuYWxTcGxpdC5jYWxsKFN0cmluZyhPKSwgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHNwbGl0XG4gICAgLy9cbiAgICAvLyBOT1RFOiBUaGlzIGNhbm5vdCBiZSBwcm9wZXJseSBwb2x5ZmlsbGVkIGluIGVuZ2luZXMgdGhhdCBkb24ndCBzdXBwb3J0XG4gICAgLy8gdGhlICd5JyBmbGFnLlxuICAgIGZ1bmN0aW9uIChyZWdleHAsIGxpbWl0KSB7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKGludGVybmFsU3BsaXQsIHJlZ2V4cCwgdGhpcywgbGltaXQsIGludGVybmFsU3BsaXQgIT09ICRzcGxpdCk7XG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHJ4LCBSZWdFeHApO1xuXG4gICAgICB2YXIgdW5pY29kZU1hdGNoaW5nID0gcngudW5pY29kZTtcbiAgICAgIHZhciBmbGFncyA9IChyeC5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyeC5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHJ4LnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKFNVUFBPUlRTX1kgPyAneScgOiAnZycpO1xuXG4gICAgICAvLyBeKD8gKyByeCArICkgaXMgbmVlZGVkLCBpbiBjb21iaW5hdGlvbiB3aXRoIHNvbWUgUyBzbGljaW5nLCB0b1xuICAgICAgLy8gc2ltdWxhdGUgdGhlICd5JyBmbGFnLlxuICAgICAgdmFyIHNwbGl0dGVyID0gbmV3IEMoU1VQUE9SVFNfWSA/IHJ4IDogJ14oPzonICsgcnguc291cmNlICsgJyknLCBmbGFncyk7XG4gICAgICB2YXIgbGltID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9VSU5UMzIgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIGlmIChsaW0gPT09IDApIHJldHVybiBbXTtcbiAgICAgIGlmIChTLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGNhbGxSZWdFeHBFeGVjKHNwbGl0dGVyLCBTKSA9PT0gbnVsbCA/IFtTXSA6IFtdO1xuICAgICAgdmFyIHAgPSAwO1xuICAgICAgdmFyIHEgPSAwO1xuICAgICAgdmFyIEEgPSBbXTtcbiAgICAgIHdoaWxlIChxIDwgUy5sZW5ndGgpIHtcbiAgICAgICAgc3BsaXR0ZXIubGFzdEluZGV4ID0gU1VQUE9SVFNfWSA/IHEgOiAwO1xuICAgICAgICB2YXIgeiA9IGNhbGxSZWdFeHBFeGVjKHNwbGl0dGVyLCBTVVBQT1JUU19ZID8gUyA6IFMuc2xpY2UocSkpO1xuICAgICAgICB2YXIgZTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHogPT09IG51bGwgfHxcbiAgICAgICAgICAoZSA9ICRtaW4odG9MZW5ndGgoc3BsaXR0ZXIubGFzdEluZGV4ICsgKFNVUFBPUlRTX1kgPyAwIDogcSkpLCBTLmxlbmd0aCkpID09PSBwXG4gICAgICAgICkge1xuICAgICAgICAgIHEgPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgcSwgdW5pY29kZU1hdGNoaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBBLnB1c2goUy5zbGljZShwLCBxKSk7XG4gICAgICAgICAgaWYgKEEubGVuZ3RoID09PSBsaW0pIHJldHVybiBBO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IHoubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICBBLnB1c2goeltpXSk7XG4gICAgICAgICAgICBpZiAoQS5sZW5ndGggPT09IGxpbSkgcmV0dXJuIEE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHEgPSBwID0gZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgQS5wdXNoKFMuc2xpY2UocCkpO1xuICAgICAgcmV0dXJuIEE7XG4gICAgfVxuICBdO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuL2VzNi5yZWdleHAuZmxhZ3MnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRmbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gLy4vW1RPX1NUUklOR107XG5cbnZhciBkZWZpbmUgPSBmdW5jdGlvbiAoZm4pIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShSZWdFeHAucHJvdG90eXBlLCBUT19TVFJJTkcsIGZuLCB0cnVlKTtcbn07XG5cbi8vIDIxLjIuNS4xNCBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nKClcbmlmIChyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHsgcmV0dXJuICR0b1N0cmluZy5jYWxsKHsgc291cmNlOiAnYScsIGZsYWdzOiAnYicgfSkgIT0gJy9hL2InOyB9KSkge1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIFIgPSBhbk9iamVjdCh0aGlzKTtcbiAgICByZXR1cm4gJy8nLmNvbmNhdChSLnNvdXJjZSwgJy8nLFxuICAgICAgJ2ZsYWdzJyBpbiBSID8gUi5mbGFncyA6ICFERVNDUklQVE9SUyAmJiBSIGluc3RhbmNlb2YgUmVnRXhwID8gJGZsYWdzLmNhbGwoUikgOiB1bmRlZmluZWQpO1xuICB9KTtcbi8vIEZGNDQtIFJlZ0V4cCN0b1N0cmluZyBoYXMgYSB3cm9uZyBuYW1lXG59IGVsc2UgaWYgKCR0b1N0cmluZy5uYW1lICE9IFRPX1NUUklORykge1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICR0b1N0cmluZy5jYWxsKHRoaXMpO1xuICB9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFNFVCA9ICdTZXQnO1xuXG4vLyAyMy4yIFNldCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShTRVQsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFNldCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjIuMy4xIFNldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHZhbGlkYXRlKHRoaXMsIFNFVCksIHZhbHVlID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWUsIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjIgU3RyaW5nLnByb3RvdHlwZS5hbmNob3IobmFtZSlcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2FuY2hvcicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBhbmNob3IobmFtZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ25hbWUnLCBuYW1lKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMyBTdHJpbmcucHJvdG90eXBlLmJpZygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdiaWcnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYmlnKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiaWcnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy40IFN0cmluZy5wcm90b3R5cGUuYmxpbmsoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYmxpbmsnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gYmxpbmsoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JsaW5rJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNSBTdHJpbmcucHJvdG90eXBlLmJvbGQoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYm9sZCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBib2xkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiJywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKShmYWxzZSk7XG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjMgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdChwb3MpXG4gIGNvZGVQb2ludEF0OiBmdW5jdGlvbiBjb2RlUG9pbnRBdChwb3MpIHtcbiAgICByZXR1cm4gJGF0KHRoaXMsIHBvcyk7XG4gIH1cbn0pO1xuIiwiLy8gMjEuMS4zLjYgU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aChzZWFyY2hTdHJpbmcgWywgZW5kUG9zaXRpb25dKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIEVORFNfV0lUSCA9ICdlbmRzV2l0aCc7XG52YXIgJGVuZHNXaXRoID0gJydbRU5EU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShFTkRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBlbmRzV2l0aDogZnVuY3Rpb24gZW5kc1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgZW5kUG9zaXRpb24gPSBAbGVuZ3RoICovKSB7XG4gICAgdmFyIHRoYXQgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgRU5EU19XSVRIKTtcbiAgICB2YXIgZW5kUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhhdC5sZW5ndGgpO1xuICAgIHZhciBlbmQgPSBlbmRQb3NpdGlvbiA9PT0gdW5kZWZpbmVkID8gbGVuIDogTWF0aC5taW4odG9MZW5ndGgoZW5kUG9zaXRpb24pLCBsZW4pO1xuICAgIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJGVuZHNXaXRoXG4gICAgICA/ICRlbmRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgZW5kKVxuICAgICAgOiB0aGF0LnNsaWNlKGVuZCAtIHNlYXJjaC5sZW5ndGgsIGVuZCkgPT09IHNlYXJjaDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy42IFN0cmluZy5wcm90b3R5cGUuZml4ZWQoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZml4ZWQnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZml4ZWQoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3R0JywgJycsICcnKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNyBTdHJpbmcucHJvdG90eXBlLmZvbnRjb2xvcihjb2xvcilcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZvbnRjb2xvcicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmb250Y29sb3IoY29sb3IpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdjb2xvcicsIGNvbG9yKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuOCBTdHJpbmcucHJvdG90eXBlLmZvbnRzaXplKHNpemUpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250c2l6ZScsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmb250c2l6ZShzaXplKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnc2l6ZScsIHNpemUpO1xuICB9O1xufSk7XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcbnZhciAkZnJvbUNvZGVQb2ludCA9IFN0cmluZy5mcm9tQ29kZVBvaW50O1xuXG4vLyBsZW5ndGggc2hvdWxkIGJlIDEsIG9sZCBGRiBwcm9ibGVtXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghISRmcm9tQ29kZVBvaW50ICYmICRmcm9tQ29kZVBvaW50Lmxlbmd0aCAhPSAxKSwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjIgU3RyaW5nLmZyb21Db2RlUG9pbnQoLi4uY29kZVBvaW50cylcbiAgZnJvbUNvZGVQb2ludDogZnVuY3Rpb24gZnJvbUNvZGVQb2ludCh4KSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgcmVzID0gW107XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgY29kZTtcbiAgICB3aGlsZSAoYUxlbiA+IGkpIHtcbiAgICAgIGNvZGUgPSArYXJndW1lbnRzW2krK107XG4gICAgICBpZiAodG9BYnNvbHV0ZUluZGV4KGNvZGUsIDB4MTBmZmZmKSAhPT0gY29kZSkgdGhyb3cgUmFuZ2VFcnJvcihjb2RlICsgJyBpcyBub3QgYSB2YWxpZCBjb2RlIHBvaW50Jyk7XG4gICAgICByZXMucHVzaChjb2RlIDwgMHgxMDAwMFxuICAgICAgICA/IGZyb21DaGFyQ29kZShjb2RlKVxuICAgICAgICA6IGZyb21DaGFyQ29kZSgoKGNvZGUgLT0gMHgxMDAwMCkgPj4gMTApICsgMHhkODAwLCBjb2RlICUgMHg0MDAgKyAweGRjMDApXG4gICAgICApO1xuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7XG4iLCIvLyAyMS4xLjMuNyBTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzKHNlYXJjaFN0cmluZywgcG9zaXRpb24gPSAwKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBJTkNMVURFUyA9ICdpbmNsdWRlcyc7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoSU5DTFVERVMpLCAnU3RyaW5nJywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgcmV0dXJuICEhfmNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBJTkNMVURFUylcbiAgICAgIC5pbmRleE9mKHNlYXJjaFN0cmluZywgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjkgU3RyaW5nLnByb3RvdHlwZS5pdGFsaWNzKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2l0YWxpY3MnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gaXRhbGljcygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnaScsICcnLCAnJyk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuLy8gMjEuMS41LjIuMSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBpbmRleCA9IHRoaXMuX2k7XG4gIHZhciBwb2ludDtcbiAgaWYgKGluZGV4ID49IE8ubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIHBvaW50ID0gJGF0KE8sIGluZGV4KTtcbiAgdGhpcy5faSArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTAgU3RyaW5nLnByb3RvdHlwZS5saW5rKHVybClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2xpbmsnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gbGluayh1cmwpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICdocmVmJywgdXJsKTtcbiAgfTtcbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMi40IFN0cmluZy5yYXcoY2FsbFNpdGUsIC4uLnN1YnN0aXR1dGlvbnMpXG4gIHJhdzogZnVuY3Rpb24gcmF3KGNhbGxTaXRlKSB7XG4gICAgdmFyIHRwbCA9IHRvSU9iamVjdChjYWxsU2l0ZS5yYXcpO1xuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0cGwubGVuZ3RoKTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAobGVuID4gaSkge1xuICAgICAgcmVzLnB1c2goU3RyaW5nKHRwbFtpKytdKSk7XG4gICAgICBpZiAoaSA8IGFMZW4pIHJlcy5wdXNoKFN0cmluZyhhcmd1bWVudHNbaV0pKTtcbiAgICB9IHJldHVybiByZXMuam9pbignJyk7XG4gIH1cbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4xMyBTdHJpbmcucHJvdG90eXBlLnJlcGVhdChjb3VudClcbiAgcmVwZWF0OiByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0Jylcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTEgU3RyaW5nLnByb3RvdHlwZS5zbWFsbCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzbWFsbCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzbWFsbCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc21hbGwnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIvLyAyMS4xLjMuMTggU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoKHNlYXJjaFN0cmluZyBbLCBwb3NpdGlvbiBdKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIFNUQVJUU19XSVRIID0gJ3N0YXJ0c1dpdGgnO1xudmFyICRzdGFydHNXaXRoID0gJydbU1RBUlRTX1dJVEhdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKFNUQVJUU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgc3RhcnRzV2l0aDogZnVuY3Rpb24gc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICB2YXIgdGhhdCA9IGNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBTVEFSVFNfV0lUSCk7XG4gICAgdmFyIGluZGV4ID0gdG9MZW5ndGgoTWF0aC5taW4oYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRoYXQubGVuZ3RoKSk7XG4gICAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiAkc3RhcnRzV2l0aFxuICAgICAgPyAkc3RhcnRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgaW5kZXgpXG4gICAgICA6IHRoYXQuc2xpY2UoaW5kZXgsIGluZGV4ICsgc2VhcmNoLmxlbmd0aCkgPT09IHNlYXJjaDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMiBTdHJpbmcucHJvdG90eXBlLnN0cmlrZSgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdHJpa2UnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3RyaWtlKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdHJpa2UnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMyBTdHJpbmcucHJvdG90eXBlLnN1YigpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdWInLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3ViKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdWInLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xNCBTdHJpbmcucHJvdG90eXBlLnN1cCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdXAnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gc3VwKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdXAnLCAnJywgJycpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyMS4xLjMuMjUgU3RyaW5nLnByb3RvdHlwZS50cmltKClcbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW0nLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW0oKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDMpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBFQ01BU2NyaXB0IDYgc3ltYm9scyBzaGltXG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgTUVUQSA9IHJlcXVpcmUoJy4vX21ldGEnKS5LRVk7XG52YXIgJGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIHdrc0RlZmluZSA9IHJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKTtcbnZhciBlbnVtS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0ta2V5cycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIF9jcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZ09QTkV4dCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpO1xudmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkRFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QRCA9ICRHT1BELmY7XG52YXIgZFAgPSAkRFAuZjtcbnZhciBnT1BOID0gZ09QTkV4dC5mO1xudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyICRKU09OID0gZ2xvYmFsLkpTT047XG52YXIgX3N0cmluZ2lmeSA9ICRKU09OICYmICRKU09OLnN0cmluZ2lmeTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBISURERU4gPSB3a3MoJ19oaWRkZW4nKTtcbnZhciBUT19QUklNSVRJVkUgPSB3a3MoJ3RvUHJpbWl0aXZlJyk7XG52YXIgaXNFbnVtID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC1yZWdpc3RyeScpO1xudmFyIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTtcbnZhciBPUFN5bWJvbHMgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdFtQUk9UT1RZUEVdO1xudmFyIFVTRV9OQVRJVkUgPSB0eXBlb2YgJFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIHNldHRlciA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2MgPSBERVNDUklQVE9SUyAmJiAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkUCh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoaXQsIGtleSwgRCkge1xuICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTtcbiAgaWYgKHByb3RvRGVzYykgZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gIGRQKGl0LCBrZXksIEQpO1xuICBpZiAocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bykgZFAoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcbn0gOiBkUDtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHN5bS5fayA9IHRhZztcbiAgcmV0dXJuIHN5bTtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKSB7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8pICRkZWZpbmVQcm9wZXJ0eShPUFN5bWJvbHMsIGtleSwgRCk7XG4gIGFuT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgYW5PYmplY3QoRCk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghRC5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhpdCwgSElEREVOKSkgZFAoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pIGl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9IF9jcmVhdGUoRCwgeyBlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xuICB9IHJldHVybiBkUChpdCwga2V5LCBEKTtcbn07XG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKSB7XG4gIGFuT2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbCA9IGtleXMubGVuZ3RoO1xuICB2YXIga2V5O1xuICB3aGlsZSAobCA+IGkpICRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pO1xuICByZXR1cm4gaXQ7XG59O1xudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApIHtcbiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApO1xufTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpIHtcbiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcbn07XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gIGl0ID0gdG9JT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7XG4gIGlmIChEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIEQuZW51bWVyYWJsZSA9IHRydWU7XG4gIHJldHVybiBEO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgdmFyIG5hbWVzID0gZ09QTih0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gIHZhciBJU19PUCA9IGl0ID09PSBPYmplY3RQcm90bztcbiAgdmFyIG5hbWVzID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIChJU19PUCA/IGhhcyhPYmplY3RQcm90bywga2V5KSA6IHRydWUpKSByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcbmlmICghVVNFX05BVElWRSkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7XG4gICAgdmFyIHRhZyA9IHVpZChhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyICRzZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90bykgJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIHNldHRlcikgc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiAkc2V0IH0pO1xuICAgIHJldHVybiB3cmFwKHRhZyk7XG4gIH07XG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2s7XG4gIH0pO1xuXG4gICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkRFAuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiAhcmVxdWlyZSgnLi9fbGlicmFyeScpKSB7XG4gICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICB3a3NFeHQuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2tzKG5hbWUpKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBTeW1ib2w6ICRTeW1ib2wgfSk7XG5cbmZvciAodmFyIGVzNlN5bWJvbHMgPSAoXG4gIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0XG4gICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcydcbikuc3BsaXQoJywnKSwgaiA9IDA7IGVzNlN5bWJvbHMubGVuZ3RoID4gajspd2tzKGVzNlN5bWJvbHNbaisrXSk7XG5cbmZvciAodmFyIHdlbGxLbm93blN5bWJvbHMgPSAka2V5cyh3a3Muc3RvcmUpLCBrID0gMDsgd2VsbEtub3duU3ltYm9scy5sZW5ndGggPiBrOykgd2tzRGVmaW5lKHdlbGxLbm93blN5bWJvbHNbaysrXSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7XG4gIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KVxuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcbiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XVxuICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpO1xuICB9LFxuICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSlcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2whJyk7XG4gICAgZm9yICh2YXIga2V5IGluIFN5bWJvbFJlZ2lzdHJ5KSBpZiAoU3ltYm9sUmVnaXN0cnlba2V5XSA9PT0gc3ltKSByZXR1cm4ga2V5O1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IGZhbHNlOyB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHtcbiAgLy8gMTkuMS4yLjIgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxuJEpTT04gJiYgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoIVVTRV9OQVRJVkUgfHwgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFMgPSAkU3ltYm9sKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoeyBhOiBTIH0pICE9ICd7fScgfHwgX3N0cmluZ2lmeShPYmplY3QoUykpICE9ICd7fSc7XG59KSksICdKU09OJywge1xuICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCkge1xuICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICB2YXIgaSA9IDE7XG4gICAgdmFyIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgICRyZXBsYWNlciA9IHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiAkcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpO1xuICB9XG59KTtcblxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgcmVxdWlyZSgnLi9faGlkZScpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xudmFyIGJ1ZmZlciA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgQXJyYXlCdWZmZXIgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5BcnJheUJ1ZmZlcjtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgJEFycmF5QnVmZmVyID0gYnVmZmVyLkFycmF5QnVmZmVyO1xudmFyICREYXRhVmlldyA9IGJ1ZmZlci5EYXRhVmlldztcbnZhciAkaXNWaWV3ID0gJHR5cGVkLkFCViAmJiBBcnJheUJ1ZmZlci5pc1ZpZXc7XG52YXIgJHNsaWNlID0gJEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZTtcbnZhciBWSUVXID0gJHR5cGVkLlZJRVc7XG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQXJyYXlCdWZmZXIgIT09ICRBcnJheUJ1ZmZlciksIHsgQXJyYXlCdWZmZXI6ICRBcnJheUJ1ZmZlciB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhJHR5cGVkLkNPTlNUUiwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuMy4xIEFycmF5QnVmZmVyLmlzVmlldyhhcmcpXG4gIGlzVmlldzogZnVuY3Rpb24gaXNWaWV3KGl0KSB7XG4gICAgcmV0dXJuICRpc1ZpZXcgJiYgJGlzVmlldyhpdCkgfHwgaXNPYmplY3QoaXQpICYmIFZJRVcgaW4gaXQ7XG4gIH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuVSArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIW5ldyAkQXJyYXlCdWZmZXIoMikuc2xpY2UoMSwgdW5kZWZpbmVkKS5ieXRlTGVuZ3RoO1xufSksIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjQuMyBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2Uoc3RhcnQsIGVuZClcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICBpZiAoJHNsaWNlICE9PSB1bmRlZmluZWQgJiYgZW5kID09PSB1bmRlZmluZWQpIHJldHVybiAkc2xpY2UuY2FsbChhbk9iamVjdCh0aGlzKSwgc3RhcnQpOyAvLyBGRiBmaXhcbiAgICB2YXIgbGVuID0gYW5PYmplY3QodGhpcykuYnl0ZUxlbmd0aDtcbiAgICB2YXIgZmlyc3QgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gICAgdmFyIGZpbiA9IHRvQWJzb2x1dGVJbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZCwgbGVuKTtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJEFycmF5QnVmZmVyKSkodG9MZW5ndGgoZmluIC0gZmlyc3QpKTtcbiAgICB2YXIgdmlld1MgPSBuZXcgJERhdGFWaWV3KHRoaXMpO1xuICAgIHZhciB2aWV3VCA9IG5ldyAkRGF0YVZpZXcocmVzdWx0KTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHdoaWxlIChmaXJzdCA8IGZpbikge1xuICAgICAgdmlld1Quc2V0VWludDgoaW5kZXgrKywgdmlld1MuZ2V0VWludDgoZmlyc3QrKykpO1xuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoQVJSQVlfQlVGRkVSKTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL190eXBlZCcpLkFCViwge1xuICBEYXRhVmlldzogcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJykuRGF0YVZpZXdcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnRmxvYXQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBGbG9hdDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnRmxvYXQ2NCcsIDgsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBGbG9hdDY0QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50MTYnLCAyLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQxNicsIDIsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pO1xuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OENsYW1wZWRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSwgdHJ1ZSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgZWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJyk7XG52YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgTkFUSVZFX1dFQUtfTUFQID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIElTX0lFMTEgPSAhZ2xvYmFsLkFjdGl2ZVhPYmplY3QgJiYgJ0FjdGl2ZVhPYmplY3QnIGluIGdsb2JhbDtcbnZhciBXRUFLX01BUCA9ICdXZWFrTWFwJztcbnZhciBnZXRXZWFrID0gbWV0YS5nZXRXZWFrO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IHdlYWsudWZzdG9yZTtcbnZhciBJbnRlcm5hbE1hcDtcblxudmFyIHdyYXBwZXIgPSBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrTWFwKCkge1xuICAgIHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICB9O1xufTtcblxudmFyIG1ldGhvZHMgPSB7XG4gIC8vIDIzLjMuMy4zIFdlYWtNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIGlmIChpc09iamVjdChrZXkpKSB7XG4gICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBXRUFLX01BUCkpLmdldChrZXkpO1xuICAgICAgcmV0dXJuIGRhdGEgPyBkYXRhW3RoaXMuX2ldIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgfSxcbiAgLy8gMjMuMy4zLjUgV2Vha01hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gd2Vhay5kZWYodmFsaWRhdGUodGhpcywgV0VBS19NQVApLCBrZXksIHZhbHVlKTtcbiAgfVxufTtcblxuLy8gMjMuMyBXZWFrTWFwIE9iamVjdHNcbnZhciAkV2Vha01hcCA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFdFQUtfTUFQLCB3cmFwcGVyLCBtZXRob2RzLCB3ZWFrLCB0cnVlLCB0cnVlKTtcblxuLy8gSUUxMSBXZWFrTWFwIGZyb3plbiBrZXlzIGZpeFxuaWYgKE5BVElWRV9XRUFLX01BUCAmJiBJU19JRTExKSB7XG4gIEludGVybmFsTWFwID0gd2Vhay5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBXRUFLX01BUCk7XG4gIGFzc2lnbihJbnRlcm5hbE1hcC5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICBtZXRhLk5FRUQgPSB0cnVlO1xuICBlYWNoKFsnZGVsZXRlJywgJ2hhcycsICdnZXQnLCAnc2V0J10sIGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcHJvdG8gPSAkV2Vha01hcC5wcm90b3R5cGU7XG4gICAgdmFyIG1ldGhvZCA9IHByb3RvW2tleV07XG4gICAgcmVkZWZpbmUocHJvdG8sIGtleSwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIC8vIHN0b3JlIGZyb3plbiBvYmplY3RzIG9uIGludGVybmFsIHdlYWttYXAgc2hpbVxuICAgICAgaWYgKGlzT2JqZWN0KGEpICYmICFpc0V4dGVuc2libGUoYSkpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9mKSB0aGlzLl9mID0gbmV3IEludGVybmFsTWFwKCk7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9mW2tleV0oYSwgYik7XG4gICAgICAgIHJldHVybiBrZXkgPT0gJ3NldCcgPyB0aGlzIDogcmVzdWx0O1xuICAgICAgLy8gc3RvcmUgYWxsIHRoZSByZXN0IG9uIG5hdGl2ZSB3ZWFrbWFwXG4gICAgICB9IHJldHVybiBtZXRob2QuY2FsbCh0aGlzLCBhLCBiKTtcbiAgICB9KTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFdFQUtfU0VUID0gJ1dlYWtTZXQnO1xuXG4vLyAyMy40IFdlYWtTZXQgT2JqZWN0c1xucmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFdFQUtfU0VULCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrU2V0KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuNC4zLjEgV2Vha1NldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgIHJldHVybiB3ZWFrLmRlZih2YWxpZGF0ZSh0aGlzLCBXRUFLX1NFVCksIHZhbHVlLCB0cnVlKTtcbiAgfVxufSwgd2VhaywgZmFsc2UsIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtQXJyYXkucHJvdG90eXBlLmZsYXRNYXBcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmxhdHRlbkludG9BcnJheSA9IHJlcXVpcmUoJy4vX2ZsYXR0ZW4taW50by1hcnJheScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgZmxhdE1hcDogZnVuY3Rpb24gZmxhdE1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHNvdXJjZUxlbiwgQTtcbiAgICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7XG4gICAgc291cmNlTGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG4gICAgZmxhdHRlbkludG9BcnJheShBLCBPLCBPLCBzb3VyY2VMZW4sIDAsIDEsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnZmxhdE1hcCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhlbCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gJGluY2x1ZGVzKHRoaXMsIGVsLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnaW5jbHVkZXMnKTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZW50cmllcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcyhpdCkge1xuICAgIHJldHVybiAkZW50cmllcyhpdCk7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4vX293bi1rZXlzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iamVjdCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gICAgdmFyIGdldERlc2MgPSBnT1BELmY7XG4gICAgdmFyIGtleXMgPSBvd25LZXlzKE8pO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleSwgZGVzYztcbiAgICB3aGlsZSAoa2V5cy5sZW5ndGggPiBpKSB7XG4gICAgICBkZXNjID0gZ2V0RGVzYyhPLCBrZXkgPSBrZXlzW2krK10pO1xuICAgICAgaWYgKGRlc2MgIT09IHVuZGVmaW5lZCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBrZXksIGRlc2MpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdmFsdWVzID0gcmVxdWlyZSgnLi9fb2JqZWN0LXRvLWFycmF5JykoZmFsc2UpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoaXQpIHtcbiAgICByZXR1cm4gJHZhbHVlcyhpdCk7XG4gIH1cbn0pO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJvbWlzZS1maW5hbGx5XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnUHJvbWlzZScsIHsgJ2ZpbmFsbHknOiBmdW5jdGlvbiAob25GaW5hbGx5KSB7XG4gIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIGNvcmUuUHJvbWlzZSB8fCBnbG9iYWwuUHJvbWlzZSk7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIG9uRmluYWxseSA9PSAnZnVuY3Rpb24nO1xuICByZXR1cm4gdGhpcy50aGVuKFxuICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHg7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHksXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyB0aHJvdyBlOyB9KTtcbiAgICB9IDogb25GaW5hbGx5XG4gICk7XG59IH0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhZCA9IHJlcXVpcmUoJy4vX3N0cmluZy1wYWQnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8yODBcbnZhciBXRUJLSVRfQlVHID0gL1ZlcnNpb25cXC8xMFxcLlxcZCsoXFwuXFxkKyk/KCBNb2JpbGVcXC9cXHcrKT8gU2FmYXJpXFwvLy50ZXN0KHVzZXJBZ2VudCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogV0VCS0lUX0JVRywgJ1N0cmluZycsIHtcbiAgcGFkRW5kOiBmdW5jdGlvbiBwYWRFbmQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGZhbHNlKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFkID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzI4MFxudmFyIFdFQktJVF9CVUcgPSAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8oIE1vYmlsZVxcL1xcdyspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBXRUJLSVRfQlVHLCAnU3RyaW5nJywge1xuICBwYWRTdGFydDogZnVuY3Rpb24gcGFkU3RhcnQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRydWUpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1MZWZ0JywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltTGVmdCgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMSk7XG4gIH07XG59LCAndHJpbVN0YXJ0Jyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vc2VibWFya2JhZ2UvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltUmlnaHQnLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1SaWdodCgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMik7XG4gIH07XG59LCAndHJpbUVuZCcpO1xuIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdhc3luY0l0ZXJhdG9yJyk7XG4iLCJ2YXIgJGl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdrcygndG9TdHJpbmdUYWcnKTtcbnZhciBBcnJheVZhbHVlcyA9IEl0ZXJhdG9ycy5BcnJheTtcblxudmFyIERPTUl0ZXJhYmxlcyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiBmYWxzZSxcbiAgQ1NTVmFsdWVMaXN0OiBmYWxzZSxcbiAgQ2xpZW50UmVjdExpc3Q6IGZhbHNlLFxuICBET01SZWN0TGlzdDogZmFsc2UsXG4gIERPTVN0cmluZ0xpc3Q6IGZhbHNlLFxuICBET01Ub2tlbkxpc3Q6IHRydWUsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiBmYWxzZSxcbiAgRmlsZUxpc3Q6IGZhbHNlLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTEZvcm1FbGVtZW50OiBmYWxzZSxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IGZhbHNlLFxuICBNZWRpYUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBNaW1lVHlwZUFycmF5OiBmYWxzZSxcbiAgTmFtZWROb2RlTWFwOiBmYWxzZSxcbiAgTm9kZUxpc3Q6IHRydWUsXG4gIFBhaW50UmVxdWVzdExpc3Q6IGZhbHNlLFxuICBQbHVnaW46IGZhbHNlLFxuICBQbHVnaW5BcnJheTogZmFsc2UsXG4gIFNWR0xlbmd0aExpc3Q6IGZhbHNlLFxuICBTVkdOdW1iZXJMaXN0OiBmYWxzZSxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IGZhbHNlLFxuICBTVkdQb2ludExpc3Q6IGZhbHNlLFxuICBTVkdTdHJpbmdMaXN0OiBmYWxzZSxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogZmFsc2UsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IGZhbHNlLFxuICBTdHlsZVNoZWV0TGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIFRleHRUcmFja0N1ZUxpc3Q6IGZhbHNlLFxuICBUZXh0VHJhY2tMaXN0OiBmYWxzZSxcbiAgVG91Y2hMaXN0OiBmYWxzZVxufTtcblxuZm9yICh2YXIgY29sbGVjdGlvbnMgPSBnZXRLZXlzKERPTUl0ZXJhYmxlcyksIGkgPSAwOyBpIDwgY29sbGVjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgdmFyIE5BTUUgPSBjb2xsZWN0aW9uc1tpXTtcbiAgdmFyIGV4cGxpY2l0ID0gRE9NSXRlcmFibGVzW05BTUVdO1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIHByb3RvID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgdmFyIGtleTtcbiAgaWYgKHByb3RvKSB7XG4gICAgaWYgKCFwcm90b1tJVEVSQVRPUl0pIGhpZGUocHJvdG8sIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICAgaWYgKCFwcm90b1tUT19TVFJJTkdfVEFHXSkgaGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gICAgSXRlcmF0b3JzW05BTUVdID0gQXJyYXlWYWx1ZXM7XG4gICAgaWYgKGV4cGxpY2l0KSBmb3IgKGtleSBpbiAkaXRlcmF0b3JzKSBpZiAoIXByb3RvW2tleV0pIHJlZGVmaW5lKHByb3RvLCBrZXksICRpdGVyYXRvcnNba2V5XSwgdHJ1ZSk7XG4gIH1cbn1cbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHRhc2sgPSByZXF1aXJlKCcuL190YXNrJyk7XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuQiwge1xuICBzZXRJbW1lZGlhdGU6ICR0YXNrLnNldCxcbiAgY2xlYXJJbW1lZGlhdGU6ICR0YXNrLmNsZWFyXG59KTtcbiIsIi8vIGllOS0gc2V0VGltZW91dCAmIHNldEludGVydmFsIGFkZGl0aW9uYWwgcGFyYW1ldGVycyBmaXhcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xudmFyIHNsaWNlID0gW10uc2xpY2U7XG52YXIgTVNJRSA9IC9NU0lFIC5cXC4vLnRlc3QodXNlckFnZW50KTsgLy8gPC0gZGlydHkgaWU5LSBjaGVja1xudmFyIHdyYXAgPSBmdW5jdGlvbiAoc2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZm4sIHRpbWUgLyogLCAuLi5hcmdzICovKSB7XG4gICAgdmFyIGJvdW5kQXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyO1xuICAgIHZhciBhcmdzID0gYm91bmRBcmdzID8gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpIDogZmFsc2U7XG4gICAgcmV0dXJuIHNldChib3VuZEFyZ3MgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgICh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pKS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9IDogZm4sIHRpbWUpO1xuICB9O1xufTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CICsgJGV4cG9ydC5GICogTVNJRSwge1xuICBzZXRUaW1lb3V0OiB3cmFwKGdsb2JhbC5zZXRUaW1lb3V0KSxcbiAgc2V0SW50ZXJ2YWw6IHdyYXAoZ2xvYmFsLnNldEludGVydmFsKVxufSk7XG4iLCJyZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi50aW1lcnMnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmltbWVkaWF0ZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvX2NvcmUnKTtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgRGF0YVZpZXcgPSBnZXROYXRpdmUocm9vdCwgJ0RhdGFWaWV3Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gRGF0YVZpZXc7XG4iLCJ2YXIgaGFzaENsZWFyID0gcmVxdWlyZSgnLi9faGFzaENsZWFyJyksXG4gICAgaGFzaERlbGV0ZSA9IHJlcXVpcmUoJy4vX2hhc2hEZWxldGUnKSxcbiAgICBoYXNoR2V0ID0gcmVxdWlyZSgnLi9faGFzaEdldCcpLFxuICAgIGhhc2hIYXMgPSByZXF1aXJlKCcuL19oYXNoSGFzJyksXG4gICAgaGFzaFNldCA9IHJlcXVpcmUoJy4vX2hhc2hTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG5IYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbkhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG5IYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbkhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gSGFzaDtcbiIsInZhciBsaXN0Q2FjaGVDbGVhciA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZUNsZWFyJyksXG4gICAgbGlzdENhY2hlRGVsZXRlID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlRGVsZXRlJyksXG4gICAgbGlzdENhY2hlR2V0ID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlR2V0JyksXG4gICAgbGlzdENhY2hlSGFzID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlSGFzJyksXG4gICAgbGlzdENhY2hlU2V0ID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG5MaXN0Q2FjaGUucHJvdG90eXBlLmNsZWFyID0gbGlzdENhY2hlQ2xlYXI7XG5MaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbkxpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuTGlzdENhY2hlLnByb3RvdHlwZS5oYXMgPSBsaXN0Q2FjaGVIYXM7XG5MaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBMaXN0Q2FjaGU7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIE1hcCA9IGdldE5hdGl2ZShyb290LCAnTWFwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gTWFwO1xuIiwidmFyIG1hcENhY2hlQ2xlYXIgPSByZXF1aXJlKCcuL19tYXBDYWNoZUNsZWFyJyksXG4gICAgbWFwQ2FjaGVEZWxldGUgPSByZXF1aXJlKCcuL19tYXBDYWNoZURlbGV0ZScpLFxuICAgIG1hcENhY2hlR2V0ID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVHZXQnKSxcbiAgICBtYXBDYWNoZUhhcyA9IHJlcXVpcmUoJy4vX21hcENhY2hlSGFzJyksXG4gICAgbWFwQ2FjaGVTZXQgPSByZXF1aXJlKCcuL19tYXBDYWNoZVNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbk1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbk1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbk1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbk1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXBDYWNoZTtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgUHJvbWlzZSA9IGdldE5hdGl2ZShyb290LCAnUHJvbWlzZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFByb21pc2U7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFNldCA9IGdldE5hdGl2ZShyb290LCAnU2V0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gU2V0O1xuIiwidmFyIE1hcENhY2hlID0gcmVxdWlyZSgnLi9fTWFwQ2FjaGUnKSxcbiAgICBzZXRDYWNoZUFkZCA9IHJlcXVpcmUoJy4vX3NldENhY2hlQWRkJyksXG4gICAgc2V0Q2FjaGVIYXMgPSByZXF1aXJlKCcuL19zZXRDYWNoZUhhcycpO1xuXG4vKipcbiAqXG4gKiBDcmVhdGVzIGFuIGFycmF5IGNhY2hlIG9iamVjdCB0byBzdG9yZSB1bmlxdWUgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIFNldENhY2hlKHZhbHVlcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHZhbHVlcyA9PSBudWxsID8gMCA6IHZhbHVlcy5sZW5ndGg7XG5cbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB0aGlzLmFkZCh2YWx1ZXNbaW5kZXhdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgU2V0Q2FjaGVgLlxuU2V0Q2FjaGUucHJvdG90eXBlLmFkZCA9IFNldENhY2hlLnByb3RvdHlwZS5wdXNoID0gc2V0Q2FjaGVBZGQ7XG5TZXRDYWNoZS5wcm90b3R5cGUuaGFzID0gc2V0Q2FjaGVIYXM7XG5cbm1vZHVsZS5leHBvcnRzID0gU2V0Q2FjaGU7XG4iLCJ2YXIgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyksXG4gICAgc3RhY2tDbGVhciA9IHJlcXVpcmUoJy4vX3N0YWNrQ2xlYXInKSxcbiAgICBzdGFja0RlbGV0ZSA9IHJlcXVpcmUoJy4vX3N0YWNrRGVsZXRlJyksXG4gICAgc3RhY2tHZXQgPSByZXF1aXJlKCcuL19zdGFja0dldCcpLFxuICAgIHN0YWNrSGFzID0gcmVxdWlyZSgnLi9fc3RhY2tIYXMnKSxcbiAgICBzdGFja1NldCA9IHJlcXVpcmUoJy4vX3N0YWNrU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0YWNrIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIFN0YWNrKGVudHJpZXMpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZShlbnRyaWVzKTtcbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgU3RhY2tgLlxuU3RhY2sucHJvdG90eXBlLmNsZWFyID0gc3RhY2tDbGVhcjtcblN0YWNrLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBzdGFja0RlbGV0ZTtcblN0YWNrLnByb3RvdHlwZS5nZXQgPSBzdGFja0dldDtcblN0YWNrLnByb3RvdHlwZS5oYXMgPSBzdGFja0hhcztcblN0YWNrLnByb3RvdHlwZS5zZXQgPSBzdGFja1NldDtcblxubW9kdWxlLmV4cG9ydHMgPSBTdGFjaztcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW1ib2w7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgVWludDhBcnJheSA9IHJvb3QuVWludDhBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBVaW50OEFycmF5O1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBXZWFrTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdXZWFrTWFwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gV2Vha01hcDtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZpbHRlcmAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheUZpbHRlcihhcnJheSwgcHJlZGljYXRlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICByZXNJbmRleCA9IDAsXG4gICAgICByZXN1bHQgPSBbXTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUZpbHRlcjtcbiIsInZhciBiYXNlVGltZXMgPSByZXF1aXJlKCcuL19iYXNlVGltZXMnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vX2lzSW5kZXgnKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyKHZhbHVlKSxcbiAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpIDogW10sXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICgoaW5oZXJpdGVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aClcbiAgICAgICAgKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlMaWtlS2V5cztcbiIsIi8qKlxuICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFwcGVuZC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBhcnJheVB1c2goYXJyYXksIHZhbHVlcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBvZmZzZXQgPSBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheVB1c2g7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zb21lYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlTb21lKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5U29tZTtcbiIsInZhciBlcSA9IHJlcXVpcmUoJy4vZXEnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhc3NvY0luZGV4T2Y7XG4iLCJ2YXIgYXJyYXlQdXNoID0gcmVxdWlyZSgnLi9fYXJyYXlQdXNoJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRBbGxLZXlzYCBhbmQgYGdldEFsbEtleXNJbmAgd2hpY2ggdXNlc1xuICogYGtleXNGdW5jYCBhbmQgYHN5bWJvbHNGdW5jYCB0byBnZXQgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3ltYm9sc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0Z1bmMsIHN5bWJvbHNGdW5jKSB7XG4gIHZhciByZXN1bHQgPSBrZXlzRnVuYyhvYmplY3QpO1xuICByZXR1cm4gaXNBcnJheShvYmplY3QpID8gcmVzdWx0IDogYXJyYXlQdXNoKHJlc3VsdCwgc3ltYm9sc0Z1bmMob2JqZWN0KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldEFsbEtleXM7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgZ2V0UmF3VGFnID0gcmVxdWlyZSgnLi9fZ2V0UmF3VGFnJyksXG4gICAgb2JqZWN0VG9TdHJpbmcgPSByZXF1aXJlKCcuL19vYmplY3RUb1N0cmluZycpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICB9XG4gIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlR2V0VGFnO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FyZ3VtZW50c2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICovXG5mdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJnc1RhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNBcmd1bWVudHM7XG4iLCJ2YXIgYmFzZUlzRXF1YWxEZWVwID0gcmVxdWlyZSgnLi9fYmFzZUlzRXF1YWxEZWVwJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0VxdWFsYCB3aGljaCBzdXBwb3J0cyBwYXJ0aWFsIGNvbXBhcmlzb25zXG4gKiBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAqICAxIC0gVW5vcmRlcmVkIGNvbXBhcmlzb25cbiAqICAyIC0gUGFydGlhbCBjb21wYXJpc29uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYHZhbHVlYCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykge1xuICBpZiAodmFsdWUgPT09IG90aGVyKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwgfHwgb3RoZXIgPT0gbnVsbCB8fCAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzT2JqZWN0TGlrZShvdGhlcikpKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXI7XG4gIH1cbiAgcmV0dXJuIGJhc2VJc0VxdWFsRGVlcCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGJhc2VJc0VxdWFsLCBzdGFjayk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzRXF1YWw7XG4iLCJ2YXIgU3RhY2sgPSByZXF1aXJlKCcuL19TdGFjaycpLFxuICAgIGVxdWFsQXJyYXlzID0gcmVxdWlyZSgnLi9fZXF1YWxBcnJheXMnKSxcbiAgICBlcXVhbEJ5VGFnID0gcmVxdWlyZSgnLi9fZXF1YWxCeVRhZycpLFxuICAgIGVxdWFsT2JqZWN0cyA9IHJlcXVpcmUoJy4vX2VxdWFsT2JqZWN0cycpLFxuICAgIGdldFRhZyA9IHJlcXVpcmUoJy4vX2dldFRhZycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0J1ZmZlciA9IHJlcXVpcmUoJy4vaXNCdWZmZXInKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDE7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAqIGRlZXAgY29tcGFyaXNvbnMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAqIHJlZmVyZW5jZXMgdG8gYmUgY29tcGFyZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsRGVlcChvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBvYmpJc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgIG90aElzQXJyID0gaXNBcnJheShvdGhlciksXG4gICAgICBvYmpUYWcgPSBvYmpJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG9iamVjdCksXG4gICAgICBvdGhUYWcgPSBvdGhJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG90aGVyKTtcblxuICBvYmpUYWcgPSBvYmpUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG9ialRhZztcbiAgb3RoVGFnID0gb3RoVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvdGhUYWc7XG5cbiAgdmFyIG9iaklzT2JqID0gb2JqVGFnID09IG9iamVjdFRhZyxcbiAgICAgIG90aElzT2JqID0gb3RoVGFnID09IG9iamVjdFRhZyxcbiAgICAgIGlzU2FtZVRhZyA9IG9ialRhZyA9PSBvdGhUYWc7XG5cbiAgaWYgKGlzU2FtZVRhZyAmJiBpc0J1ZmZlcihvYmplY3QpKSB7XG4gICAgaWYgKCFpc0J1ZmZlcihvdGhlcikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgb2JqSXNBcnIgPSB0cnVlO1xuICAgIG9iaklzT2JqID0gZmFsc2U7XG4gIH1cbiAgaWYgKGlzU2FtZVRhZyAmJiAhb2JqSXNPYmopIHtcbiAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgIHJldHVybiAob2JqSXNBcnIgfHwgaXNUeXBlZEFycmF5KG9iamVjdCkpXG4gICAgICA/IGVxdWFsQXJyYXlzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spXG4gICAgICA6IGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgb2JqVGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgfVxuICBpZiAoIShiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcpKSB7XG4gICAgdmFyIG9iaklzV3JhcHBlZCA9IG9iaklzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCAnX193cmFwcGVkX18nKSxcbiAgICAgICAgb3RoSXNXcmFwcGVkID0gb3RoSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwgJ19fd3JhcHBlZF9fJyk7XG5cbiAgICBpZiAob2JqSXNXcmFwcGVkIHx8IG90aElzV3JhcHBlZCkge1xuICAgICAgdmFyIG9ialVud3JhcHBlZCA9IG9iaklzV3JhcHBlZCA/IG9iamVjdC52YWx1ZSgpIDogb2JqZWN0LFxuICAgICAgICAgIG90aFVud3JhcHBlZCA9IG90aElzV3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjtcblxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHJldHVybiBlcXVhbEZ1bmMob2JqVW53cmFwcGVkLCBvdGhVbndyYXBwZWQsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFpc1NhbWVUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgcmV0dXJuIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNFcXVhbERlZXA7XG4iLCJ2YXIgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4vaXNGdW5jdGlvbicpLFxuICAgIGlzTWFza2VkID0gcmVxdWlyZSgnLi9faXNNYXNrZWQnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICB0b1NvdXJjZSA9IHJlcXVpcmUoJy4vX3RvU291cmNlJyk7XG5cbi8qKlxuICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gKi9cbnZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbnZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbnZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwYXR0ZXJuID0gaXNGdW5jdGlvbih2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzTmF0aXZlO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNMZW5ndGggPSByZXF1aXJlKCcuL2lzTGVuZ3RoJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgb2YgdHlwZWQgYXJyYXlzLiAqL1xudmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG50eXBlZEFycmF5VGFnc1tmbG9hdDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Zsb2F0NjRUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDhUYWddID0gdHlwZWRBcnJheVRhZ3NbaW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50OENsYW1wZWRUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbnR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbnR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Jvb2xUYWddID1cbnR5cGVkQXJyYXlUYWdzW2RhdGFWaWV3VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2RhdGVUYWddID1cbnR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbnR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPSB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID1cbnR5cGVkQXJyYXlUYWdzW29iamVjdFRhZ10gPSB0eXBlZEFycmF5VGFnc1tyZWdleHBUYWddID1cbnR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbnR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3NbYmFzZUdldFRhZyh2YWx1ZSldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc1R5cGVkQXJyYXk7XG4iLCJ2YXIgaXNQcm90b3R5cGUgPSByZXF1aXJlKCcuL19pc1Byb3RvdHlwZScpLFxuICAgIG5hdGl2ZUtleXMgPSByZXF1aXJlKCcuL19uYXRpdmVLZXlzJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c2Agd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBiYXNlS2V5cyhvYmplY3QpIHtcbiAgaWYgKCFpc1Byb3RvdHlwZShvYmplY3QpKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXMob2JqZWN0KTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBrZXkgIT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlS2V5cztcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVRpbWVzO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmFyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBzdG9yaW5nIG1ldGFkYXRhLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVVuYXJ5KGZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VVbmFyeTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGEgYGNhY2hlYCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gY2FjaGUgVGhlIGNhY2hlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGNhY2hlSGFzKGNhY2hlLCBrZXkpIHtcbiAgcmV0dXJuIGNhY2hlLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhY2hlSGFzO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbnZhciBjb3JlSnNEYXRhID0gcm9vdFsnX19jb3JlLWpzX3NoYXJlZF9fJ107XG5cbm1vZHVsZS5leHBvcnRzID0gY29yZUpzRGF0YTtcbiIsInZhciBTZXRDYWNoZSA9IHJlcXVpcmUoJy4vX1NldENhY2hlJyksXG4gICAgYXJyYXlTb21lID0gcmVxdWlyZSgnLi9fYXJyYXlTb21lJyksXG4gICAgY2FjaGVIYXMgPSByZXF1aXJlKCcuL19jYWNoZUhhcycpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBhcnJheXMgd2l0aCBzdXBwb3J0IGZvclxuICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7QXJyYXl9IG90aGVyIFRoZSBvdGhlciBhcnJheSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgYXJyYXlgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFycmF5cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEFycmF5cyhhcnJheSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIG90aExlbmd0aCA9IG90aGVyLmxlbmd0aDtcblxuICBpZiAoYXJyTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhKGlzUGFydGlhbCAmJiBvdGhMZW5ndGggPiBhcnJMZW5ndGgpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQoYXJyYXkpO1xuICBpZiAoc3RhY2tlZCAmJiBzdGFjay5nZXQob3RoZXIpKSB7XG4gICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gIH1cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSB0cnVlLFxuICAgICAgc2VlbiA9IChiaXRtYXNrICYgQ09NUEFSRV9VTk9SREVSRURfRkxBRykgPyBuZXcgU2V0Q2FjaGUgOiB1bmRlZmluZWQ7XG5cbiAgc3RhY2suc2V0KGFycmF5LCBvdGhlcik7XG4gIHN0YWNrLnNldChvdGhlciwgYXJyYXkpO1xuXG4gIC8vIElnbm9yZSBub24taW5kZXggcHJvcGVydGllcy5cbiAgd2hpbGUgKCsraW5kZXggPCBhcnJMZW5ndGgpIHtcbiAgICB2YXIgYXJyVmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgIG90aFZhbHVlID0gb3RoZXJbaW5kZXhdO1xuXG4gICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIGFyclZhbHVlLCBpbmRleCwgb3RoZXIsIGFycmF5LCBzdGFjaylcbiAgICAgICAgOiBjdXN0b21pemVyKGFyclZhbHVlLCBvdGhWYWx1ZSwgaW5kZXgsIGFycmF5LCBvdGhlciwgc3RhY2spO1xuICAgIH1cbiAgICBpZiAoY29tcGFyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGNvbXBhcmVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBpZiAoc2Vlbikge1xuICAgICAgaWYgKCFhcnJheVNvbWUob3RoZXIsIGZ1bmN0aW9uKG90aFZhbHVlLCBvdGhJbmRleCkge1xuICAgICAgICAgICAgaWYgKCFjYWNoZUhhcyhzZWVuLCBvdGhJbmRleCkgJiZcbiAgICAgICAgICAgICAgICAoYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHNlZW4ucHVzaChvdGhJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkpIHtcbiAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIShcbiAgICAgICAgICBhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHxcbiAgICAgICAgICAgIGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICApKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBzdGFja1snZGVsZXRlJ10oYXJyYXkpO1xuICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxdWFsQXJyYXlzO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIFVpbnQ4QXJyYXkgPSByZXF1aXJlKCcuL19VaW50OEFycmF5JyksXG4gICAgZXEgPSByZXF1aXJlKCcuL2VxJyksXG4gICAgZXF1YWxBcnJheXMgPSByZXF1aXJlKCcuL19lcXVhbEFycmF5cycpLFxuICAgIG1hcFRvQXJyYXkgPSByZXF1aXJlKCcuL19tYXBUb0FycmF5JyksXG4gICAgc2V0VG9BcnJheSA9IHJlcXVpcmUoJy4vX3NldFRvQXJyYXknKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XSc7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xWYWx1ZU9mID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by52YWx1ZU9mIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgY29tcGFyaW5nIG9iamVjdHMgb2ZcbiAqIHRoZSBzYW1lIGB0b1N0cmluZ1RhZ2AuXG4gKlxuICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjb21wYXJpbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgb3IgYFN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdHMgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIHRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgKG9iamVjdC5ieXRlT2Zmc2V0ICE9IG90aGVyLmJ5dGVPZmZzZXQpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IG9iamVjdC5idWZmZXI7XG4gICAgICBvdGhlciA9IG90aGVyLmJ1ZmZlcjtcblxuICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgIWVxdWFsRnVuYyhuZXcgVWludDhBcnJheShvYmplY3QpLCBuZXcgVWludDhBcnJheShvdGhlcikpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgY2FzZSBib29sVGFnOlxuICAgIGNhc2UgZGF0ZVRhZzpcbiAgICBjYXNlIG51bWJlclRhZzpcbiAgICAgIC8vIENvZXJjZSBib29sZWFucyB0byBgMWAgb3IgYDBgIGFuZCBkYXRlcyB0byBtaWxsaXNlY29uZHMuXG4gICAgICAvLyBJbnZhbGlkIGRhdGVzIGFyZSBjb2VyY2VkIHRvIGBOYU5gLlxuICAgICAgcmV0dXJuIGVxKCtvYmplY3QsICtvdGhlcik7XG5cbiAgICBjYXNlIGVycm9yVGFnOlxuICAgICAgcmV0dXJuIG9iamVjdC5uYW1lID09IG90aGVyLm5hbWUgJiYgb2JqZWN0Lm1lc3NhZ2UgPT0gb3RoZXIubWVzc2FnZTtcblxuICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgLy8gQ29lcmNlIHJlZ2V4ZXMgdG8gc3RyaW5ncyBhbmQgdHJlYXQgc3RyaW5ncywgcHJpbWl0aXZlcyBhbmQgb2JqZWN0cyxcbiAgICAgIC8vIGFzIGVxdWFsLiBTZWUgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudG9zdHJpbmdcbiAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICByZXR1cm4gb2JqZWN0ID09IChvdGhlciArICcnKTtcblxuICAgIGNhc2UgbWFwVGFnOlxuICAgICAgdmFyIGNvbnZlcnQgPSBtYXBUb0FycmF5O1xuXG4gICAgY2FzZSBzZXRUYWc6XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHO1xuICAgICAgY29udmVydCB8fCAoY29udmVydCA9IHNldFRvQXJyYXkpO1xuXG4gICAgICBpZiAob2JqZWN0LnNpemUgIT0gb3RoZXIuc2l6ZSAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgIH1cbiAgICAgIGJpdG1hc2sgfD0gQ09NUEFSRV9VTk9SREVSRURfRkxBRztcblxuICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gICAgICB2YXIgcmVzdWx0ID0gZXF1YWxBcnJheXMoY29udmVydChvYmplY3QpLCBjb252ZXJ0KG90aGVyKSwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgIGlmIChzeW1ib2xWYWx1ZU9mKSB7XG4gICAgICAgIHJldHVybiBzeW1ib2xWYWx1ZU9mLmNhbGwob2JqZWN0KSA9PSBzeW1ib2xWYWx1ZU9mLmNhbGwob3RoZXIpO1xuICAgICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcXVhbEJ5VGFnO1xuIiwidmFyIGdldEFsbEtleXMgPSByZXF1aXJlKCcuL19nZXRBbGxLZXlzJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIG9iamVjdHMgd2l0aCBzdXBwb3J0IGZvclxuICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgIG9ialByb3BzID0gZ2V0QWxsS2V5cyhvYmplY3QpLFxuICAgICAgb2JqTGVuZ3RoID0gb2JqUHJvcHMubGVuZ3RoLFxuICAgICAgb3RoUHJvcHMgPSBnZXRBbGxLZXlzKG90aGVyKSxcbiAgICAgIG90aExlbmd0aCA9IG90aFByb3BzLmxlbmd0aDtcblxuICBpZiAob2JqTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBpbmRleCA9IG9iakxlbmd0aDtcbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICB2YXIga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgIGlmICghKGlzUGFydGlhbCA/IGtleSBpbiBvdGhlciA6IGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsIGtleSkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgaWYgKHN0YWNrZWQgJiYgc3RhY2suZ2V0KG90aGVyKSkge1xuICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICB9XG4gIHZhciByZXN1bHQgPSB0cnVlO1xuICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gIHN0YWNrLnNldChvdGhlciwgb2JqZWN0KTtcblxuICB2YXIgc2tpcEN0b3IgPSBpc1BhcnRpYWw7XG4gIHdoaWxlICgrK2luZGV4IDwgb2JqTGVuZ3RoKSB7XG4gICAga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2tleV07XG5cbiAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgb2JqVmFsdWUsIGtleSwgb3RoZXIsIG9iamVjdCwgc3RhY2spXG4gICAgICAgIDogY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUsIGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2spO1xuICAgIH1cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBpZiAoIShjb21wYXJlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgPyAob2JqVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhvYmpWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSlcbiAgICAgICAgICA6IGNvbXBhcmVkXG4gICAgICAgICkpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHNraXBDdG9yIHx8IChza2lwQ3RvciA9IGtleSA9PSAnY29uc3RydWN0b3InKTtcbiAgfVxuICBpZiAocmVzdWx0ICYmICFza2lwQ3Rvcikge1xuICAgIHZhciBvYmpDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yLFxuICAgICAgICBvdGhDdG9yID0gb3RoZXIuY29uc3RydWN0b3I7XG5cbiAgICAvLyBOb24gYE9iamVjdGAgb2JqZWN0IGluc3RhbmNlcyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVhbC5cbiAgICBpZiAob2JqQ3RvciAhPSBvdGhDdG9yICYmXG4gICAgICAgICgnY29uc3RydWN0b3InIGluIG9iamVjdCAmJiAnY29uc3RydWN0b3InIGluIG90aGVyKSAmJlxuICAgICAgICAhKHR5cGVvZiBvYmpDdG9yID09ICdmdW5jdGlvbicgJiYgb2JqQ3RvciBpbnN0YW5jZW9mIG9iakN0b3IgJiZcbiAgICAgICAgICB0eXBlb2Ygb3RoQ3RvciA9PSAnZnVuY3Rpb24nICYmIG90aEN0b3IgaW5zdGFuY2VvZiBvdGhDdG9yKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxdWFsT2JqZWN0cztcbiIsIi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbm1vZHVsZS5leHBvcnRzID0gZnJlZUdsb2JhbDtcbiIsInZhciBiYXNlR2V0QWxsS2V5cyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRBbGxLZXlzJyksXG4gICAgZ2V0U3ltYm9scyA9IHJlcXVpcmUoJy4vX2dldFN5bWJvbHMnKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gZ2V0QWxsS2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5cywgZ2V0U3ltYm9scyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QWxsS2V5cztcbiIsInZhciBpc0tleWFibGUgPSByZXF1aXJlKCcuL19pc0tleWFibGUnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICA6IGRhdGEubWFwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE1hcERhdGE7XG4iLCJ2YXIgYmFzZUlzTmF0aXZlID0gcmVxdWlyZSgnLi9fYmFzZUlzTmF0aXZlJyksXG4gICAgZ2V0VmFsdWUgPSByZXF1aXJlKCcuL19nZXRWYWx1ZScpO1xuXG4vKipcbiAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICovXG5mdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE5hdGl2ZTtcbiIsInZhciBvdmVyQXJnID0gcmVxdWlyZSgnLi9fb3ZlckFyZycpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBnZXRQcm90b3R5cGUgPSBvdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRQcm90b3R5cGU7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRSYXdUYWc7XG4iLCJ2YXIgYXJyYXlGaWx0ZXIgPSByZXF1aXJlKCcuL19hcnJheUZpbHRlcicpLFxuICAgIHN0dWJBcnJheSA9IHJlcXVpcmUoJy4vc3R1YkFycmF5Jyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVHZXRTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gKi9cbnZhciBnZXRTeW1ib2xzID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICByZXR1cm4gYXJyYXlGaWx0ZXIobmF0aXZlR2V0U3ltYm9scyhvYmplY3QpLCBmdW5jdGlvbihzeW1ib2wpIHtcbiAgICByZXR1cm4gcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmplY3QsIHN5bWJvbCk7XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRTeW1ib2xzO1xuIiwidmFyIERhdGFWaWV3ID0gcmVxdWlyZSgnLi9fRGF0YVZpZXcnKSxcbiAgICBNYXAgPSByZXF1aXJlKCcuL19NYXAnKSxcbiAgICBQcm9taXNlID0gcmVxdWlyZSgnLi9fUHJvbWlzZScpLFxuICAgIFNldCA9IHJlcXVpcmUoJy4vX1NldCcpLFxuICAgIFdlYWtNYXAgPSByZXF1aXJlKCcuL19XZWFrTWFwJyksXG4gICAgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICB0b1NvdXJjZSA9IHJlcXVpcmUoJy4vX3RvU291cmNlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICBwcm9taXNlVGFnID0gJ1tvYmplY3QgUHJvbWlzZV0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XSc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG52YXIgZGF0YVZpZXdDdG9yU3RyaW5nID0gdG9Tb3VyY2UoRGF0YVZpZXcpLFxuICAgIG1hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShNYXApLFxuICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgc2V0Q3RvclN0cmluZyA9IHRvU291cmNlKFNldCksXG4gICAgd2Vha01hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShXZWFrTWFwKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBgdG9TdHJpbmdUYWdgIG9mIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xudmFyIGdldFRhZyA9IGJhc2VHZXRUYWc7XG5cbi8vIEZhbGxiYWNrIGZvciBkYXRhIHZpZXdzLCBtYXBzLCBzZXRzLCBhbmQgd2VhayBtYXBzIGluIElFIDExIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzIDwgNi5cbmlmICgoRGF0YVZpZXcgJiYgZ2V0VGFnKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSkpKSAhPSBkYXRhVmlld1RhZykgfHxcbiAgICAoTWFwICYmIGdldFRhZyhuZXcgTWFwKSAhPSBtYXBUYWcpIHx8XG4gICAgKFByb21pc2UgJiYgZ2V0VGFnKFByb21pc2UucmVzb2x2ZSgpKSAhPSBwcm9taXNlVGFnKSB8fFxuICAgIChTZXQgJiYgZ2V0VGFnKG5ldyBTZXQpICE9IHNldFRhZykgfHxcbiAgICAoV2Vha01hcCAmJiBnZXRUYWcobmV3IFdlYWtNYXApICE9IHdlYWtNYXBUYWcpKSB7XG4gIGdldFRhZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGJhc2VHZXRUYWcodmFsdWUpLFxuICAgICAgICBDdG9yID0gcmVzdWx0ID09IG9iamVjdFRhZyA/IHZhbHVlLmNvbnN0cnVjdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICBjdG9yU3RyaW5nID0gQ3RvciA/IHRvU291cmNlKEN0b3IpIDogJyc7XG5cbiAgICBpZiAoY3RvclN0cmluZykge1xuICAgICAgc3dpdGNoIChjdG9yU3RyaW5nKSB7XG4gICAgICAgIGNhc2UgZGF0YVZpZXdDdG9yU3RyaW5nOiByZXR1cm4gZGF0YVZpZXdUYWc7XG4gICAgICAgIGNhc2UgbWFwQ3RvclN0cmluZzogcmV0dXJuIG1hcFRhZztcbiAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzogcmV0dXJuIHByb21pc2VUYWc7XG4gICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzogcmV0dXJuIHNldFRhZztcbiAgICAgICAgY2FzZSB3ZWFrTWFwQ3RvclN0cmluZzogcmV0dXJuIHdlYWtNYXBUYWc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VGFnO1xuIiwiLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VmFsdWU7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKi9cbmZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hDbGVhcjtcbiIsIi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaERlbGV0ZTtcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgfVxuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hHZXQ7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoSGFzO1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKlxuICogU2V0cyB0aGUgaGFzaCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGhhc2hTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHRoaXMuc2l6ZSArPSB0aGlzLmhhcyhrZXkpID8gMCA6IDE7XG4gIGRhdGFba2V5XSA9IChuYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoU2V0O1xuIiwiLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbnZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG5cbiAgcmV0dXJuICEhbGVuZ3RoICYmXG4gICAgKHR5cGUgPT0gJ251bWJlcicgfHxcbiAgICAgICh0eXBlICE9ICdzeW1ib2wnICYmIHJlSXNVaW50LnRlc3QodmFsdWUpKSkgJiZcbiAgICAgICAgKHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzSW5kZXg7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNLZXlhYmxlKHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgID8gKHZhbHVlICE9PSAnX19wcm90b19fJylcbiAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNLZXlhYmxlO1xuIiwidmFyIGNvcmVKc0RhdGEgPSByZXF1aXJlKCcuL19jb3JlSnNEYXRhJyk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtZXRob2RzIG1hc3F1ZXJhZGluZyBhcyBuYXRpdmUuICovXG52YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgdmFyIHVpZCA9IC9bXi5dKyQvLmV4ZWMoY29yZUpzRGF0YSAmJiBjb3JlSnNEYXRhLmtleXMgJiYgY29yZUpzRGF0YS5rZXlzLklFX1BST1RPIHx8ICcnKTtcbiAgcmV0dXJuIHVpZCA/ICgnU3ltYm9sKHNyYylfMS4nICsgdWlkKSA6ICcnO1xufSgpKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc01hc2tlZChmdW5jKSB7XG4gIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNNYXNrZWQ7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm90b3R5cGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpIHtcbiAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvcixcbiAgICAgIHByb3RvID0gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3Rvci5wcm90b3R5cGUpIHx8IG9iamVjdFByb3RvO1xuXG4gIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNQcm90b3R5cGU7XG4iLCIvKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gW107XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlQ2xlYXI7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZTtcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgIGRhdGEucG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICB9XG4gIC0tdGhpcy5zaXplO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVEZWxldGU7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlR2V0O1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVIYXM7XG4iLCJ2YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogU2V0cyB0aGUgbGlzdCBjYWNoZSBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgKyt0aGlzLnNpemU7XG4gICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0gZWxzZSB7XG4gICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVTZXQ7XG4iLCJ2YXIgSGFzaCA9IHJlcXVpcmUoJy4vX0hhc2gnKSxcbiAgICBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKSxcbiAgICBNYXAgPSByZXF1aXJlKCcuL19NYXAnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgdGhpcy5zaXplID0gMDtcbiAgdGhpcy5fX2RhdGFfXyA9IHtcbiAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICdzdHJpbmcnOiBuZXcgSGFzaFxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlQ2xlYXI7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVEZWxldGU7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBtYXAgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmdldChrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlR2V0O1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVIYXM7XG4iLCJ2YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLFxuICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlU2V0O1xuIiwiLyoqXG4gKiBDb252ZXJ0cyBgbWFwYCB0byBpdHMga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICovXG5mdW5jdGlvbiBtYXBUb0FycmF5KG1hcCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG1hcC5zaXplKTtcblxuICBtYXAuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gW2tleSwgdmFsdWVdO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBUb0FycmF5O1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdGl2ZUNyZWF0ZTtcbiIsInZhciBvdmVyQXJnID0gcmVxdWlyZSgnLi9fb3ZlckFyZycpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCk7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF0aXZlS2V5cztcbiIsInZhciBmcmVlR2xvYmFsID0gcmVxdWlyZSgnLi9fZnJlZUdsb2JhbCcpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVQcm9jZXNzID0gbW9kdWxlRXhwb3J0cyAmJiBmcmVlR2xvYmFsLnByb2Nlc3M7XG5cbi8qKiBVc2VkIHRvIGFjY2VzcyBmYXN0ZXIgTm9kZS5qcyBoZWxwZXJzLiAqL1xudmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIC8vIFVzZSBgdXRpbC50eXBlc2AgZm9yIE5vZGUuanMgMTArLlxuICAgIHZhciB0eXBlcyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlICYmIGZyZWVNb2R1bGUucmVxdWlyZSgndXRpbCcpLnR5cGVzO1xuXG4gICAgaWYgKHR5cGVzKSB7XG4gICAgICByZXR1cm4gdHlwZXM7XG4gICAgfVxuXG4gICAgLy8gTGVnYWN5IGBwcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKWAgZm9yIE5vZGUuanMgPCAxMC5cbiAgICByZXR1cm4gZnJlZVByb2Nlc3MgJiYgZnJlZVByb2Nlc3MuYmluZGluZyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nKCd1dGlsJyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5vZGVVdGlsO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb2JqZWN0VG9TdHJpbmc7XG4iLCIvKipcbiAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvdmVyQXJnO1xuIiwidmFyIGZyZWVHbG9iYWwgPSByZXF1aXJlKCcuL19mcmVlR2xvYmFsJyk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxubW9kdWxlLmV4cG9ydHMgPSByb290O1xuIiwiLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIEFkZHMgYHZhbHVlYCB0byB0aGUgYXJyYXkgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGFkZFxuICogQG1lbWJlck9mIFNldENhY2hlXG4gKiBAYWxpYXMgcHVzaFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2FjaGUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVBZGQodmFsdWUpIHtcbiAgdGhpcy5fX2RhdGFfXy5zZXQodmFsdWUsIEhBU0hfVU5ERUZJTkVEKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0Q2FjaGVBZGQ7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIHRoZSBhcnJheSBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHNldENhY2hlSGFzKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0Q2FjaGVIYXM7XG4iLCIvKipcbiAqIENvbnZlcnRzIGBzZXRgIHRvIGFuIGFycmF5IG9mIGl0cyB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIHNldFRvQXJyYXkoc2V0KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldFRvQXJyYXk7XG4iLCJ2YXIgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqL1xuZnVuY3Rpb24gc3RhY2tDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGU7XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tDbGVhcjtcbiIsIi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICByZXN1bHQgPSBkYXRhWydkZWxldGUnXShrZXkpO1xuXG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0RlbGV0ZTtcbiIsIi8qKlxuICogR2V0cyB0aGUgc3RhY2sgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrR2V0KGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0dldDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGEgc3RhY2sgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0hhcyhrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3RhY2tIYXM7XG4iLCJ2YXIgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyksXG4gICAgTWFwQ2FjaGUgPSByZXF1aXJlKCcuL19NYXBDYWNoZScpO1xuXG4vKiogVXNlZCBhcyB0aGUgc2l6ZSB0byBlbmFibGUgbGFyZ2UgYXJyYXkgb3B0aW1pemF0aW9ucy4gKi9cbnZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4vKipcbiAqIFNldHMgdGhlIHN0YWNrIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHN0YWNrIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzdGFja1NldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKGRhdGEgaW5zdGFuY2VvZiBMaXN0Q2FjaGUpIHtcbiAgICB2YXIgcGFpcnMgPSBkYXRhLl9fZGF0YV9fO1xuICAgIGlmICghTWFwIHx8IChwYWlycy5sZW5ndGggPCBMQVJHRV9BUlJBWV9TSVpFIC0gMSkpIHtcbiAgICAgIHBhaXJzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgIHRoaXMuc2l6ZSA9ICsrZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlKHBhaXJzKTtcbiAgfVxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja1NldDtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICovXG5mdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiAnJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1NvdXJjZTtcbiIsIi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKCdhJywgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKE5hTiwgTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGVxO1xuIiwidmFyIGJhc2VJc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vX2Jhc2VJc0FyZ3VtZW50cycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FyZ3VtZW50cyA9IGJhc2VJc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA/IGJhc2VJc0FyZ3VtZW50cyA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdjYWxsZWUnKSAmJlxuICAgICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJndW1lbnRzO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheTtcbiIsInZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnLi9pc0Z1bmN0aW9uJyksXG4gICAgaXNMZW5ndGggPSByZXF1aXJlKCcuL2lzTGVuZ3RoJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQnc1xuICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICogZXF1YWwgdG8gYDBgIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoJ2FiYycpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJyYXlMaWtlO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290JyksXG4gICAgc3R1YkZhbHNlID0gcmVxdWlyZSgnLi9zdHViRmFsc2UnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gcm9vdC5CdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVJc0J1ZmZlciA9IEJ1ZmZlciA/IEJ1ZmZlci5pc0J1ZmZlciA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQnVmZmVyO1xuIiwidmFyIGJhc2VJc0VxdWFsID0gcmVxdWlyZSgnLi9fYmFzZUlzRXF1YWwnKTtcblxuLyoqXG4gKiBQZXJmb3JtcyBhIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlXG4gKiBlcXVpdmFsZW50LlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBzdXBwb3J0cyBjb21wYXJpbmcgYXJyYXlzLCBhcnJheSBidWZmZXJzLCBib29sZWFucyxcbiAqIGRhdGUgb2JqZWN0cywgZXJyb3Igb2JqZWN0cywgbWFwcywgbnVtYmVycywgYE9iamVjdGAgb2JqZWN0cywgcmVnZXhlcyxcbiAqIHNldHMsIHN0cmluZ3MsIHN5bWJvbHMsIGFuZCB0eXBlZCBhcnJheXMuIGBPYmplY3RgIG9iamVjdHMgYXJlIGNvbXBhcmVkXG4gKiBieSB0aGVpciBvd24sIG5vdCBpbmhlcml0ZWQsIGVudW1lcmFibGUgcHJvcGVydGllcy4gRnVuY3Rpb25zIGFuZCBET01cbiAqIG5vZGVzIGFyZSBjb21wYXJlZCBieSBzdHJpY3QgZXF1YWxpdHksIGkuZS4gYD09PWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICpcbiAqIF8uaXNFcXVhbChvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBvYmplY3QgPT09IG90aGVyO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNFcXVhbCh2YWx1ZSwgb3RoZXIpIHtcbiAgcmV0dXJuIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNFcXVhbDtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRnVuY3Rpb247XG4iLCIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNMZW5ndGgoMyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoJzMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNMZW5ndGg7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0TGlrZTtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGdldFByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2dldFByb3RvdHlwZScpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGluZmVyIHRoZSBgT2JqZWN0YCBjb25zdHJ1Y3Rvci4gKi9cbnZhciBvYmplY3RDdG9yU3RyaW5nID0gZnVuY1RvU3RyaW5nLmNhbGwoT2JqZWN0KTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgdGhhdCBpcywgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgdGhlXG4gKiBgT2JqZWN0YCBjb25zdHJ1Y3RvciBvciBvbmUgd2l0aCBhIGBbW1Byb3RvdHlwZV1dYCBvZiBgbnVsbGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjguMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogfVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChuZXcgRm9vKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdCh7ICd4JzogMCwgJ3knOiAwIH0pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgfHwgYmFzZUdldFRhZyh2YWx1ZSkgIT0gb2JqZWN0VGFnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwcm90byA9IGdldFByb3RvdHlwZSh2YWx1ZSk7XG4gIGlmIChwcm90byA9PT0gbnVsbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBDdG9yID0gaGFzT3duUHJvcGVydHkuY2FsbChwcm90bywgJ2NvbnN0cnVjdG9yJykgJiYgcHJvdG8uY29uc3RydWN0b3I7XG4gIHJldHVybiB0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IgaW5zdGFuY2VvZiBDdG9yICYmXG4gICAgZnVuY1RvU3RyaW5nLmNhbGwoQ3RvcikgPT0gb2JqZWN0Q3RvclN0cmluZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1BsYWluT2JqZWN0O1xuIiwidmFyIGJhc2VJc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL19iYXNlSXNUeXBlZEFycmF5JyksXG4gICAgYmFzZVVuYXJ5ID0gcmVxdWlyZSgnLi9fYmFzZVVuYXJ5JyksXG4gICAgbm9kZVV0aWwgPSByZXF1aXJlKCcuL19ub2RlVXRpbCcpO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc1R5cGVkQXJyYXkgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1R5cGVkQXJyYXk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIHR5cGVkIGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KFtdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc1R5cGVkQXJyYXk7XG4iLCJ2YXIgYXJyYXlMaWtlS2V5cyA9IHJlcXVpcmUoJy4vX2FycmF5TGlrZUtleXMnKSxcbiAgICBiYXNlS2V5cyA9IHJlcXVpcmUoJy4vX2Jhc2VLZXlzJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAqIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIF8ua2V5cygnaGknKTtcbiAqIC8vID0+IFsnMCcsICcxJ11cbiAqL1xuZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCkgOiBiYXNlS2V5cyhvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleXM7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIGFycmF5cyA9IF8udGltZXMoMiwgXy5zdHViQXJyYXkpO1xuICpcbiAqIGNvbnNvbGUubG9nKGFycmF5cyk7XG4gKiAvLyA9PiBbW10sIFtdXVxuICpcbiAqIGNvbnNvbGUubG9nKGFycmF5c1swXSA9PT0gYXJyYXlzWzFdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIHN0dWJBcnJheSgpIHtcbiAgcmV0dXJuIFtdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0dWJBcnJheTtcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gKiAvLyA9PiBbZmFsc2UsIGZhbHNlXVxuICovXG5mdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHViRmFsc2U7XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9pbyA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvaW8nKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICd0YWtlJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2lvLnRha2U7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICd0YWtlbScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pby50YWtlbTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ3B1dCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pby5wdXQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdhbGwnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW8uYWxsO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAncmFjZScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pby5yYWNlO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnY2FsbCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pby5jYWxsO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnYXBwbHknLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW8uYXBwbHk7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdjcHMnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW8uY3BzO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnZm9yaycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pby5mb3JrO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnc3Bhd24nLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW8uc3Bhd247XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdqb2luJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2lvLmpvaW47XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdjYW5jZWwnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW8uY2FuY2VsO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnc2VsZWN0Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2lvLnNlbGVjdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2FjdGlvbkNoYW5uZWwnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW8uYWN0aW9uQ2hhbm5lbDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2NhbmNlbGxlZCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pby5jYW5jZWxsZWQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdmbHVzaCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pby5mbHVzaDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2dldENvbnRleHQnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW8uZ2V0Q29udGV4dDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ3NldENvbnRleHQnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW8uc2V0Q29udGV4dDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ3Rha2VFdmVyeScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pby50YWtlRXZlcnk7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICd0YWtlTGF0ZXN0Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2lvLnRha2VMYXRlc3Q7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICd0aHJvdHRsZScsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pby50aHJvdHRsZTtcbiAgfVxufSk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmJ1ZmZlcnMgPSBleHBvcnRzLkJVRkZFUl9PVkVSRkxPVyA9IHVuZGVmaW5lZDtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuXG52YXIgQlVGRkVSX09WRVJGTE9XID0gZXhwb3J0cy5CVUZGRVJfT1ZFUkZMT1cgPSBcIkNoYW5uZWwncyBCdWZmZXIgb3ZlcmZsb3chXCI7XG5cbnZhciBPTl9PVkVSRkxPV19USFJPVyA9IDE7XG52YXIgT05fT1ZFUkZMT1dfRFJPUCA9IDI7XG52YXIgT05fT1ZFUkZMT1dfU0xJREUgPSAzO1xudmFyIE9OX09WRVJGTE9XX0VYUEFORCA9IDQ7XG5cbnZhciB6ZXJvQnVmZmVyID0geyBpc0VtcHR5OiBfdXRpbHMua1RydWUsIHB1dDogX3V0aWxzLm5vb3AsIHRha2U6IF91dGlscy5ub29wIH07XG5cbmZ1bmN0aW9uIHJpbmdCdWZmZXIoKSB7XG4gIHZhciBsaW1pdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMTA7XG4gIHZhciBvdmVyZmxvd0FjdGlvbiA9IGFyZ3VtZW50c1sxXTtcblxuICB2YXIgYXJyID0gbmV3IEFycmF5KGxpbWl0KTtcbiAgdmFyIGxlbmd0aCA9IDA7XG4gIHZhciBwdXNoSW5kZXggPSAwO1xuICB2YXIgcG9wSW5kZXggPSAwO1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChpdCkge1xuICAgIGFycltwdXNoSW5kZXhdID0gaXQ7XG4gICAgcHVzaEluZGV4ID0gKHB1c2hJbmRleCArIDEpICUgbGltaXQ7XG4gICAgbGVuZ3RoKys7XG4gIH07XG5cbiAgdmFyIHRha2UgPSBmdW5jdGlvbiB0YWtlKCkge1xuICAgIGlmIChsZW5ndGggIT0gMCkge1xuICAgICAgdmFyIGl0ID0gYXJyW3BvcEluZGV4XTtcbiAgICAgIGFycltwb3BJbmRleF0gPSBudWxsO1xuICAgICAgbGVuZ3RoLS07XG4gICAgICBwb3BJbmRleCA9IChwb3BJbmRleCArIDEpICUgbGltaXQ7XG4gICAgICByZXR1cm4gaXQ7XG4gICAgfVxuICB9O1xuXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIHZhciBpdGVtcyA9IFtdO1xuICAgIHdoaWxlIChsZW5ndGgpIHtcbiAgICAgIGl0ZW1zLnB1c2godGFrZSgpKTtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZW1zO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgaXNFbXB0eTogZnVuY3Rpb24gaXNFbXB0eSgpIHtcbiAgICAgIHJldHVybiBsZW5ndGggPT0gMDtcbiAgICB9LFxuICAgIHB1dDogZnVuY3Rpb24gcHV0KGl0KSB7XG4gICAgICBpZiAobGVuZ3RoIDwgbGltaXQpIHtcbiAgICAgICAgcHVzaChpdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZG91YmxlZExpbWl0ID0gdm9pZCAwO1xuICAgICAgICBzd2l0Y2ggKG92ZXJmbG93QWN0aW9uKSB7XG4gICAgICAgICAgY2FzZSBPTl9PVkVSRkxPV19USFJPVzpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihCVUZGRVJfT1ZFUkZMT1cpO1xuICAgICAgICAgIGNhc2UgT05fT1ZFUkZMT1dfU0xJREU6XG4gICAgICAgICAgICBhcnJbcHVzaEluZGV4XSA9IGl0O1xuICAgICAgICAgICAgcHVzaEluZGV4ID0gKHB1c2hJbmRleCArIDEpICUgbGltaXQ7XG4gICAgICAgICAgICBwb3BJbmRleCA9IHB1c2hJbmRleDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgT05fT1ZFUkZMT1dfRVhQQU5EOlxuICAgICAgICAgICAgZG91YmxlZExpbWl0ID0gMiAqIGxpbWl0O1xuXG4gICAgICAgICAgICBhcnIgPSBmbHVzaCgpO1xuXG4gICAgICAgICAgICBsZW5ndGggPSBhcnIubGVuZ3RoO1xuICAgICAgICAgICAgcHVzaEluZGV4ID0gYXJyLmxlbmd0aDtcbiAgICAgICAgICAgIHBvcEluZGV4ID0gMDtcblxuICAgICAgICAgICAgYXJyLmxlbmd0aCA9IGRvdWJsZWRMaW1pdDtcbiAgICAgICAgICAgIGxpbWl0ID0gZG91YmxlZExpbWl0O1xuXG4gICAgICAgICAgICBwdXNoKGl0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgLy8gRFJPUFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICB0YWtlOiB0YWtlLFxuICAgIGZsdXNoOiBmbHVzaFxuICB9O1xufVxuXG52YXIgYnVmZmVycyA9IGV4cG9ydHMuYnVmZmVycyA9IHtcbiAgbm9uZTogZnVuY3Rpb24gbm9uZSgpIHtcbiAgICByZXR1cm4gemVyb0J1ZmZlcjtcbiAgfSxcbiAgZml4ZWQ6IGZ1bmN0aW9uIGZpeGVkKGxpbWl0KSB7XG4gICAgcmV0dXJuIHJpbmdCdWZmZXIobGltaXQsIE9OX09WRVJGTE9XX1RIUk9XKTtcbiAgfSxcbiAgZHJvcHBpbmc6IGZ1bmN0aW9uIGRyb3BwaW5nKGxpbWl0KSB7XG4gICAgcmV0dXJuIHJpbmdCdWZmZXIobGltaXQsIE9OX09WRVJGTE9XX0RST1ApO1xuICB9LFxuICBzbGlkaW5nOiBmdW5jdGlvbiBzbGlkaW5nKGxpbWl0KSB7XG4gICAgcmV0dXJuIHJpbmdCdWZmZXIobGltaXQsIE9OX09WRVJGTE9XX1NMSURFKTtcbiAgfSxcbiAgZXhwYW5kaW5nOiBmdW5jdGlvbiBleHBhbmRpbmcoaW5pdGlhbFNpemUpIHtcbiAgICByZXR1cm4gcmluZ0J1ZmZlcihpbml0aWFsU2l6ZSwgT05fT1ZFUkZMT1dfRVhQQU5EKTtcbiAgfVxufTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLlVOREVGSU5FRF9JTlBVVF9FUlJPUiA9IGV4cG9ydHMuSU5WQUxJRF9CVUZGRVIgPSBleHBvcnRzLmlzRW5kID0gZXhwb3J0cy5FTkQgPSB1bmRlZmluZWQ7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmV4cG9ydHMuZW1pdHRlciA9IGVtaXR0ZXI7XG5leHBvcnRzLmNoYW5uZWwgPSBjaGFubmVsO1xuZXhwb3J0cy5ldmVudENoYW5uZWwgPSBldmVudENoYW5uZWw7XG5leHBvcnRzLnN0ZENoYW5uZWwgPSBzdGRDaGFubmVsO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG52YXIgX2J1ZmZlcnMgPSByZXF1aXJlKCcuL2J1ZmZlcnMnKTtcblxudmFyIF9zY2hlZHVsZXIgPSByZXF1aXJlKCcuL3NjaGVkdWxlcicpO1xuXG52YXIgQ0hBTk5FTF9FTkRfVFlQRSA9ICdAQHJlZHV4LXNhZ2EvQ0hBTk5FTF9FTkQnO1xudmFyIEVORCA9IGV4cG9ydHMuRU5EID0geyB0eXBlOiBDSEFOTkVMX0VORF9UWVBFIH07XG52YXIgaXNFbmQgPSBleHBvcnRzLmlzRW5kID0gZnVuY3Rpb24gaXNFbmQoYSkge1xuICByZXR1cm4gYSAmJiBhLnR5cGUgPT09IENIQU5ORUxfRU5EX1RZUEU7XG59O1xuXG5mdW5jdGlvbiBlbWl0dGVyKCkge1xuICB2YXIgc3Vic2NyaWJlcnMgPSBbXTtcblxuICBmdW5jdGlvbiBzdWJzY3JpYmUoc3ViKSB7XG4gICAgc3Vic2NyaWJlcnMucHVzaChzdWIpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gKDAsIF91dGlscy5yZW1vdmUpKHN1YnNjcmliZXJzLCBzdWIpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBlbWl0KGl0ZW0pIHtcbiAgICB2YXIgYXJyID0gc3Vic2NyaWJlcnMuc2xpY2UoKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJyLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBhcnJbaV0oaXRlbSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzdWJzY3JpYmU6IHN1YnNjcmliZSxcbiAgICBlbWl0OiBlbWl0XG4gIH07XG59XG5cbnZhciBJTlZBTElEX0JVRkZFUiA9IGV4cG9ydHMuSU5WQUxJRF9CVUZGRVIgPSAnaW52YWxpZCBidWZmZXIgcGFzc2VkIHRvIGNoYW5uZWwgZmFjdG9yeSBmdW5jdGlvbic7XG52YXIgVU5ERUZJTkVEX0lOUFVUX0VSUk9SID0gZXhwb3J0cy5VTkRFRklORURfSU5QVVRfRVJST1IgPSAnU2FnYSB3YXMgcHJvdmlkZWQgd2l0aCBhbiB1bmRlZmluZWQgYWN0aW9uJztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgZXhwb3J0cy5VTkRFRklORURfSU5QVVRfRVJST1IgPSBVTkRFRklORURfSU5QVVRfRVJST1IgKz0gJ1xcbkhpbnRzOlxcbiAgICAtIGNoZWNrIHRoYXQgeW91ciBBY3Rpb24gQ3JlYXRvciByZXR1cm5zIGEgbm9uLXVuZGVmaW5lZCB2YWx1ZVxcbiAgICAtIGlmIHRoZSBTYWdhIHdhcyBzdGFydGVkIHVzaW5nIHJ1blNhZ2EsIGNoZWNrIHRoYXQgeW91ciBzdWJzY3JpYmUgc291cmNlIHByb3ZpZGVzIHRoZSBhY3Rpb24gdG8gaXRzIGxpc3RlbmVyc1xcbiAgJztcbn1cblxuZnVuY3Rpb24gY2hhbm5lbCgpIHtcbiAgdmFyIGJ1ZmZlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogX2J1ZmZlcnMuYnVmZmVycy5maXhlZCgpO1xuXG4gIHZhciBjbG9zZWQgPSBmYWxzZTtcbiAgdmFyIHRha2VycyA9IFtdO1xuXG4gICgwLCBfdXRpbHMuY2hlY2spKGJ1ZmZlciwgX3V0aWxzLmlzLmJ1ZmZlciwgSU5WQUxJRF9CVUZGRVIpO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRm9yYmlkZGVuU3RhdGVzKCkge1xuICAgIGlmIChjbG9zZWQgJiYgdGFrZXJzLmxlbmd0aCkge1xuICAgICAgdGhyb3cgKDAsIF91dGlscy5pbnRlcm5hbEVycikoJ0Nhbm5vdCBoYXZlIGEgY2xvc2VkIGNoYW5uZWwgd2l0aCBwZW5kaW5nIHRha2VycycpO1xuICAgIH1cbiAgICBpZiAodGFrZXJzLmxlbmd0aCAmJiAhYnVmZmVyLmlzRW1wdHkoKSkge1xuICAgICAgdGhyb3cgKDAsIF91dGlscy5pbnRlcm5hbEVycikoJ0Nhbm5vdCBoYXZlIHBlbmRpbmcgdGFrZXJzIHdpdGggbm9uIGVtcHR5IGJ1ZmZlcicpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHB1dChpbnB1dCkge1xuICAgIGNoZWNrRm9yYmlkZGVuU3RhdGVzKCk7XG4gICAgKDAsIF91dGlscy5jaGVjaykoaW5wdXQsIF91dGlscy5pcy5ub3RVbmRlZiwgVU5ERUZJTkVEX0lOUFVUX0VSUk9SKTtcbiAgICBpZiAoY2xvc2VkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghdGFrZXJzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGJ1ZmZlci5wdXQoaW5wdXQpO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRha2Vycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGNiID0gdGFrZXJzW2ldO1xuICAgICAgaWYgKCFjYltfdXRpbHMuTUFUQ0hdIHx8IGNiW191dGlscy5NQVRDSF0oaW5wdXQpKSB7XG4gICAgICAgIHRha2Vycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIHJldHVybiBjYihpbnB1dCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdGFrZShjYikge1xuICAgIGNoZWNrRm9yYmlkZGVuU3RhdGVzKCk7XG4gICAgKDAsIF91dGlscy5jaGVjaykoY2IsIF91dGlscy5pcy5mdW5jLCBcImNoYW5uZWwudGFrZSdzIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvblwiKTtcblxuICAgIGlmIChjbG9zZWQgJiYgYnVmZmVyLmlzRW1wdHkoKSkge1xuICAgICAgY2IoRU5EKTtcbiAgICB9IGVsc2UgaWYgKCFidWZmZXIuaXNFbXB0eSgpKSB7XG4gICAgICBjYihidWZmZXIudGFrZSgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGFrZXJzLnB1c2goY2IpO1xuICAgICAgY2IuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKDAsIF91dGlscy5yZW1vdmUpKHRha2VycywgY2IpO1xuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmbHVzaChjYikge1xuICAgIGNoZWNrRm9yYmlkZGVuU3RhdGVzKCk7IC8vIFRPRE86IGNoZWNrIGlmIHNvbWUgbmV3IHN0YXRlIHNob3VsZCBiZSBmb3JiaWRkZW4gbm93XG4gICAgKDAsIF91dGlscy5jaGVjaykoY2IsIF91dGlscy5pcy5mdW5jLCBcImNoYW5uZWwuZmx1c2gnIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvblwiKTtcbiAgICBpZiAoY2xvc2VkICYmIGJ1ZmZlci5pc0VtcHR5KCkpIHtcbiAgICAgIGNiKEVORCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNiKGJ1ZmZlci5mbHVzaCgpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgIGNoZWNrRm9yYmlkZGVuU3RhdGVzKCk7XG4gICAgaWYgKCFjbG9zZWQpIHtcbiAgICAgIGNsb3NlZCA9IHRydWU7XG4gICAgICBpZiAodGFrZXJzLmxlbmd0aCkge1xuICAgICAgICB2YXIgYXJyID0gdGFrZXJzO1xuICAgICAgICB0YWtlcnMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFyci5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIGFycltpXShFTkQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0YWtlOiB0YWtlLFxuICAgIHB1dDogcHV0LFxuICAgIGZsdXNoOiBmbHVzaCxcbiAgICBjbG9zZTogY2xvc2UsXG4gICAgZ2V0IF9fdGFrZXJzX18oKSB7XG4gICAgICByZXR1cm4gdGFrZXJzO1xuICAgIH0sXG4gICAgZ2V0IF9fY2xvc2VkX18oKSB7XG4gICAgICByZXR1cm4gY2xvc2VkO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZXZlbnRDaGFubmVsKHN1YnNjcmliZSkge1xuICB2YXIgYnVmZmVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBfYnVmZmVycy5idWZmZXJzLm5vbmUoKTtcbiAgdmFyIG1hdGNoZXIgPSBhcmd1bWVudHNbMl07XG5cbiAgLyoqXG4gICAgc2hvdWxkIGJlIGlmKHR5cGVvZiBtYXRjaGVyICE9PSB1bmRlZmluZWQpIGluc3RlYWQ/XG4gICAgc2VlIFBSICMyNzMgZm9yIGEgYmFja2dyb3VuZCBkaXNjdXNzaW9uXG4gICoqL1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDIpIHtcbiAgICAoMCwgX3V0aWxzLmNoZWNrKShtYXRjaGVyLCBfdXRpbHMuaXMuZnVuYywgJ0ludmFsaWQgbWF0Y2ggZnVuY3Rpb24gcGFzc2VkIHRvIGV2ZW50Q2hhbm5lbCcpO1xuICB9XG5cbiAgdmFyIGNoYW4gPSBjaGFubmVsKGJ1ZmZlcik7XG4gIHZhciBjbG9zZSA9IGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgIGlmICghY2hhbi5fX2Nsb3NlZF9fKSB7XG4gICAgICBpZiAodW5zdWJzY3JpYmUpIHtcbiAgICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICAgIH1cbiAgICAgIGNoYW4uY2xvc2UoKTtcbiAgICB9XG4gIH07XG4gIHZhciB1bnN1YnNjcmliZSA9IHN1YnNjcmliZShmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICBpZiAoaXNFbmQoaW5wdXQpKSB7XG4gICAgICBjbG9zZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAobWF0Y2hlciAmJiAhbWF0Y2hlcihpbnB1dCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2hhbi5wdXQoaW5wdXQpO1xuICB9KTtcbiAgaWYgKGNoYW4uX19jbG9zZWRfXykge1xuICAgIHVuc3Vic2NyaWJlKCk7XG4gIH1cblxuICBpZiAoIV91dGlscy5pcy5mdW5jKHVuc3Vic2NyaWJlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignaW4gZXZlbnRDaGFubmVsOiBzdWJzY3JpYmUgc2hvdWxkIHJldHVybiBhIGZ1bmN0aW9uIHRvIHVuc3Vic2NyaWJlJyk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHRha2U6IGNoYW4udGFrZSxcbiAgICBmbHVzaDogY2hhbi5mbHVzaCxcbiAgICBjbG9zZTogY2xvc2VcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3RkQ2hhbm5lbChzdWJzY3JpYmUpIHtcbiAgdmFyIGNoYW4gPSBldmVudENoYW5uZWwoZnVuY3Rpb24gKGNiKSB7XG4gICAgcmV0dXJuIHN1YnNjcmliZShmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgIGlmIChpbnB1dFtfdXRpbHMuU0FHQV9BQ1RJT05dKSB7XG4gICAgICAgIGNiKGlucHV0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgKDAsIF9zY2hlZHVsZXIuYXNhcCkoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gY2IoaW5wdXQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgY2hhbiwge1xuICAgIHRha2U6IGZ1bmN0aW9uIHRha2UoY2IsIG1hdGNoZXIpIHtcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAoMCwgX3V0aWxzLmNoZWNrKShtYXRjaGVyLCBfdXRpbHMuaXMuZnVuYywgXCJjaGFubmVsLnRha2UncyBtYXRjaGVyIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvblwiKTtcbiAgICAgICAgY2JbX3V0aWxzLk1BVENIXSA9IG1hdGNoZXI7XG4gICAgICB9XG4gICAgICBjaGFuLnRha2UoY2IpO1xuICAgIH1cbiAgfSk7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5hc0VmZmVjdCA9IGV4cG9ydHMudGFrZW0gPSB1bmRlZmluZWQ7XG5leHBvcnRzLnRha2UgPSB0YWtlO1xuZXhwb3J0cy5wdXQgPSBwdXQ7XG5leHBvcnRzLmFsbCA9IGFsbDtcbmV4cG9ydHMucmFjZSA9IHJhY2U7XG5leHBvcnRzLmNhbGwgPSBjYWxsO1xuZXhwb3J0cy5hcHBseSA9IGFwcGx5O1xuZXhwb3J0cy5jcHMgPSBjcHM7XG5leHBvcnRzLmZvcmsgPSBmb3JrO1xuZXhwb3J0cy5zcGF3biA9IHNwYXduO1xuZXhwb3J0cy5qb2luID0gam9pbjtcbmV4cG9ydHMuY2FuY2VsID0gY2FuY2VsO1xuZXhwb3J0cy5zZWxlY3QgPSBzZWxlY3Q7XG5leHBvcnRzLmFjdGlvbkNoYW5uZWwgPSBhY3Rpb25DaGFubmVsO1xuZXhwb3J0cy5jYW5jZWxsZWQgPSBjYW5jZWxsZWQ7XG5leHBvcnRzLmZsdXNoID0gZmx1c2g7XG5leHBvcnRzLmdldENvbnRleHQgPSBnZXRDb250ZXh0O1xuZXhwb3J0cy5zZXRDb250ZXh0ID0gc2V0Q29udGV4dDtcbmV4cG9ydHMudGFrZUV2ZXJ5ID0gdGFrZUV2ZXJ5O1xuZXhwb3J0cy50YWtlTGF0ZXN0ID0gdGFrZUxhdGVzdDtcbmV4cG9ydHMudGhyb3R0bGUgPSB0aHJvdHRsZTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxudmFyIF9zYWdhSGVscGVycyA9IHJlcXVpcmUoJy4vc2FnYUhlbHBlcnMnKTtcblxudmFyIElPID0gKDAsIF91dGlscy5zeW0pKCdJTycpO1xudmFyIFRBS0UgPSAnVEFLRSc7XG52YXIgUFVUID0gJ1BVVCc7XG52YXIgQUxMID0gJ0FMTCc7XG52YXIgUkFDRSA9ICdSQUNFJztcbnZhciBDQUxMID0gJ0NBTEwnO1xudmFyIENQUyA9ICdDUFMnO1xudmFyIEZPUksgPSAnRk9SSyc7XG52YXIgSk9JTiA9ICdKT0lOJztcbnZhciBDQU5DRUwgPSAnQ0FOQ0VMJztcbnZhciBTRUxFQ1QgPSAnU0VMRUNUJztcbnZhciBBQ1RJT05fQ0hBTk5FTCA9ICdBQ1RJT05fQ0hBTk5FTCc7XG52YXIgQ0FOQ0VMTEVEID0gJ0NBTkNFTExFRCc7XG52YXIgRkxVU0ggPSAnRkxVU0gnO1xudmFyIEdFVF9DT05URVhUID0gJ0dFVF9DT05URVhUJztcbnZhciBTRVRfQ09OVEVYVCA9ICdTRVRfQ09OVEVYVCc7XG5cbnZhciBURVNUX0hJTlQgPSAnXFxuKEhJTlQ6IGlmIHlvdSBhcmUgZ2V0dGluZyB0aGlzIGVycm9ycyBpbiB0ZXN0cywgY29uc2lkZXIgdXNpbmcgY3JlYXRlTW9ja1Rhc2sgZnJvbSByZWR1eC1zYWdhL3V0aWxzKSc7XG5cbnZhciBlZmZlY3QgPSBmdW5jdGlvbiBlZmZlY3QodHlwZSwgcGF5bG9hZCkge1xuICB2YXIgX3JlZjtcblxuICByZXR1cm4gX3JlZiA9IHt9LCBfcmVmW0lPXSA9IHRydWUsIF9yZWZbdHlwZV0gPSBwYXlsb2FkLCBfcmVmO1xufTtcblxuZnVuY3Rpb24gdGFrZSgpIHtcbiAgdmFyIHBhdHRlcm5PckNoYW5uZWwgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICcqJztcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICgwLCBfdXRpbHMuY2hlY2spKGFyZ3VtZW50c1swXSwgX3V0aWxzLmlzLm5vdFVuZGVmLCAndGFrZShwYXR0ZXJuT3JDaGFubmVsKTogcGF0dGVybk9yQ2hhbm5lbCBpcyB1bmRlZmluZWQnKTtcbiAgfVxuICBpZiAoX3V0aWxzLmlzLnBhdHRlcm4ocGF0dGVybk9yQ2hhbm5lbCkpIHtcbiAgICByZXR1cm4gZWZmZWN0KFRBS0UsIHsgcGF0dGVybjogcGF0dGVybk9yQ2hhbm5lbCB9KTtcbiAgfVxuICBpZiAoX3V0aWxzLmlzLmNoYW5uZWwocGF0dGVybk9yQ2hhbm5lbCkpIHtcbiAgICByZXR1cm4gZWZmZWN0KFRBS0UsIHsgY2hhbm5lbDogcGF0dGVybk9yQ2hhbm5lbCB9KTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoJ3Rha2UocGF0dGVybk9yQ2hhbm5lbCk6IGFyZ3VtZW50ICcgKyBTdHJpbmcocGF0dGVybk9yQ2hhbm5lbCkgKyAnIGlzIG5vdCB2YWxpZCBjaGFubmVsIG9yIGEgdmFsaWQgcGF0dGVybicpO1xufVxuXG50YWtlLm1heWJlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgZWZmID0gdGFrZS5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gIGVmZltUQUtFXS5tYXliZSA9IHRydWU7XG4gIHJldHVybiBlZmY7XG59O1xuXG52YXIgdGFrZW0gPSAvKiNfX1BVUkVfXyovZXhwb3J0cy50YWtlbSA9ICgwLCBfdXRpbHMuZGVwcmVjYXRlKSh0YWtlLm1heWJlLCAvKiNfX1BVUkVfXyovKDAsIF91dGlscy51cGRhdGVJbmNlbnRpdmUpKCd0YWtlbScsICd0YWtlLm1heWJlJykpO1xuXG5mdW5jdGlvbiBwdXQoY2hhbm5lbCwgYWN0aW9uKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICgwLCBfdXRpbHMuY2hlY2spKGNoYW5uZWwsIF91dGlscy5pcy5ub3RVbmRlZiwgJ3B1dChjaGFubmVsLCBhY3Rpb24pOiBhcmd1bWVudCBjaGFubmVsIGlzIHVuZGVmaW5lZCcpO1xuICAgICgwLCBfdXRpbHMuY2hlY2spKGNoYW5uZWwsIF91dGlscy5pcy5jaGFubmVsLCAncHV0KGNoYW5uZWwsIGFjdGlvbik6IGFyZ3VtZW50ICcgKyBjaGFubmVsICsgJyBpcyBub3QgYSB2YWxpZCBjaGFubmVsJyk7XG4gICAgKDAsIF91dGlscy5jaGVjaykoYWN0aW9uLCBfdXRpbHMuaXMubm90VW5kZWYsICdwdXQoY2hhbm5lbCwgYWN0aW9uKTogYXJndW1lbnQgYWN0aW9uIGlzIHVuZGVmaW5lZCcpO1xuICB9IGVsc2Uge1xuICAgICgwLCBfdXRpbHMuY2hlY2spKGNoYW5uZWwsIF91dGlscy5pcy5ub3RVbmRlZiwgJ3B1dChhY3Rpb24pOiBhcmd1bWVudCBhY3Rpb24gaXMgdW5kZWZpbmVkJyk7XG4gICAgYWN0aW9uID0gY2hhbm5lbDtcbiAgICBjaGFubmVsID0gbnVsbDtcbiAgfVxuICByZXR1cm4gZWZmZWN0KFBVVCwgeyBjaGFubmVsOiBjaGFubmVsLCBhY3Rpb246IGFjdGlvbiB9KTtcbn1cblxucHV0LnJlc29sdmUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBlZmYgPSBwdXQuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICBlZmZbUFVUXS5yZXNvbHZlID0gdHJ1ZTtcbiAgcmV0dXJuIGVmZjtcbn07XG5cbnB1dC5zeW5jID0gKDAsIF91dGlscy5kZXByZWNhdGUpKHB1dC5yZXNvbHZlLCAoMCwgX3V0aWxzLnVwZGF0ZUluY2VudGl2ZSkoJ3B1dC5zeW5jJywgJ3B1dC5yZXNvbHZlJykpO1xuXG5mdW5jdGlvbiBhbGwoZWZmZWN0cykge1xuICByZXR1cm4gZWZmZWN0KEFMTCwgZWZmZWN0cyk7XG59XG5cbmZ1bmN0aW9uIHJhY2UoZWZmZWN0cykge1xuICByZXR1cm4gZWZmZWN0KFJBQ0UsIGVmZmVjdHMpO1xufVxuXG5mdW5jdGlvbiBnZXRGbkNhbGxEZXNjKG1ldGgsIGZuLCBhcmdzKSB7XG4gICgwLCBfdXRpbHMuY2hlY2spKGZuLCBfdXRpbHMuaXMubm90VW5kZWYsIG1ldGggKyAnOiBhcmd1bWVudCBmbiBpcyB1bmRlZmluZWQnKTtcblxuICB2YXIgY29udGV4dCA9IG51bGw7XG4gIGlmIChfdXRpbHMuaXMuYXJyYXkoZm4pKSB7XG4gICAgdmFyIF9mbiA9IGZuO1xuICAgIGNvbnRleHQgPSBfZm5bMF07XG4gICAgZm4gPSBfZm5bMV07XG4gIH0gZWxzZSBpZiAoZm4uZm4pIHtcbiAgICB2YXIgX2ZuMiA9IGZuO1xuICAgIGNvbnRleHQgPSBfZm4yLmNvbnRleHQ7XG4gICAgZm4gPSBfZm4yLmZuO1xuICB9XG4gIGlmIChjb250ZXh0ICYmIF91dGlscy5pcy5zdHJpbmcoZm4pICYmIF91dGlscy5pcy5mdW5jKGNvbnRleHRbZm5dKSkge1xuICAgIGZuID0gY29udGV4dFtmbl07XG4gIH1cbiAgKDAsIF91dGlscy5jaGVjaykoZm4sIF91dGlscy5pcy5mdW5jLCBtZXRoICsgJzogYXJndW1lbnQgJyArIGZuICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xuXG4gIHJldHVybiB7IGNvbnRleHQ6IGNvbnRleHQsIGZuOiBmbiwgYXJnczogYXJncyB9O1xufVxuXG5mdW5jdGlvbiBjYWxsKGZuKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGVmZmVjdChDQUxMLCBnZXRGbkNhbGxEZXNjKCdjYWxsJywgZm4sIGFyZ3MpKTtcbn1cblxuZnVuY3Rpb24gYXBwbHkoY29udGV4dCwgZm4pIHtcbiAgdmFyIGFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IFtdO1xuXG4gIHJldHVybiBlZmZlY3QoQ0FMTCwgZ2V0Rm5DYWxsRGVzYygnYXBwbHknLCB7IGNvbnRleHQ6IGNvbnRleHQsIGZuOiBmbiB9LCBhcmdzKSk7XG59XG5cbmZ1bmN0aW9uIGNwcyhmbikge1xuICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgYXJnc1tfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgfVxuXG4gIHJldHVybiBlZmZlY3QoQ1BTLCBnZXRGbkNhbGxEZXNjKCdjcHMnLCBmbiwgYXJncykpO1xufVxuXG5mdW5jdGlvbiBmb3JrKGZuKSB7XG4gIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4zID4gMSA/IF9sZW4zIC0gMSA6IDApLCBfa2V5MyA9IDE7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICBhcmdzW19rZXkzIC0gMV0gPSBhcmd1bWVudHNbX2tleTNdO1xuICB9XG5cbiAgcmV0dXJuIGVmZmVjdChGT1JLLCBnZXRGbkNhbGxEZXNjKCdmb3JrJywgZm4sIGFyZ3MpKTtcbn1cblxuZnVuY3Rpb24gc3Bhd24oZm4pIHtcbiAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjQgPiAxID8gX2xlbjQgLSAxIDogMCksIF9rZXk0ID0gMTsgX2tleTQgPCBfbGVuNDsgX2tleTQrKykge1xuICAgIGFyZ3NbX2tleTQgLSAxXSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gIH1cblxuICB2YXIgZWZmID0gZm9yay5hcHBseSh1bmRlZmluZWQsIFtmbl0uY29uY2F0KGFyZ3MpKTtcbiAgZWZmW0ZPUktdLmRldGFjaGVkID0gdHJ1ZTtcbiAgcmV0dXJuIGVmZjtcbn1cblxuZnVuY3Rpb24gam9pbigpIHtcbiAgZm9yICh2YXIgX2xlbjUgPSBhcmd1bWVudHMubGVuZ3RoLCB0YXNrcyA9IEFycmF5KF9sZW41KSwgX2tleTUgPSAwOyBfa2V5NSA8IF9sZW41OyBfa2V5NSsrKSB7XG4gICAgdGFza3NbX2tleTVdID0gYXJndW1lbnRzW19rZXk1XTtcbiAgfVxuXG4gIGlmICh0YXNrcy5sZW5ndGggPiAxKSB7XG4gICAgcmV0dXJuIGFsbCh0YXNrcy5tYXAoZnVuY3Rpb24gKHQpIHtcbiAgICAgIHJldHVybiBqb2luKHQpO1xuICAgIH0pKTtcbiAgfVxuICB2YXIgdGFzayA9IHRhc2tzWzBdO1xuICAoMCwgX3V0aWxzLmNoZWNrKSh0YXNrLCBfdXRpbHMuaXMubm90VW5kZWYsICdqb2luKHRhc2spOiBhcmd1bWVudCB0YXNrIGlzIHVuZGVmaW5lZCcpO1xuICAoMCwgX3V0aWxzLmNoZWNrKSh0YXNrLCBfdXRpbHMuaXMudGFzaywgJ2pvaW4odGFzayk6IGFyZ3VtZW50ICcgKyB0YXNrICsgJyBpcyBub3QgYSB2YWxpZCBUYXNrIG9iamVjdCAnICsgVEVTVF9ISU5UKTtcbiAgcmV0dXJuIGVmZmVjdChKT0lOLCB0YXNrKTtcbn1cblxuZnVuY3Rpb24gY2FuY2VsKCkge1xuICBmb3IgKHZhciBfbGVuNiA9IGFyZ3VtZW50cy5sZW5ndGgsIHRhc2tzID0gQXJyYXkoX2xlbjYpLCBfa2V5NiA9IDA7IF9rZXk2IDwgX2xlbjY7IF9rZXk2KyspIHtcbiAgICB0YXNrc1tfa2V5Nl0gPSBhcmd1bWVudHNbX2tleTZdO1xuICB9XG5cbiAgaWYgKHRhc2tzLmxlbmd0aCA+IDEpIHtcbiAgICByZXR1cm4gYWxsKHRhc2tzLm1hcChmdW5jdGlvbiAodCkge1xuICAgICAgcmV0dXJuIGNhbmNlbCh0KTtcbiAgICB9KSk7XG4gIH1cbiAgdmFyIHRhc2sgPSB0YXNrc1swXTtcbiAgaWYgKHRhc2tzLmxlbmd0aCA9PT0gMSkge1xuICAgICgwLCBfdXRpbHMuY2hlY2spKHRhc2ssIF91dGlscy5pcy5ub3RVbmRlZiwgJ2NhbmNlbCh0YXNrKTogYXJndW1lbnQgdGFzayBpcyB1bmRlZmluZWQnKTtcbiAgICAoMCwgX3V0aWxzLmNoZWNrKSh0YXNrLCBfdXRpbHMuaXMudGFzaywgJ2NhbmNlbCh0YXNrKTogYXJndW1lbnQgJyArIHRhc2sgKyAnIGlzIG5vdCBhIHZhbGlkIFRhc2sgb2JqZWN0ICcgKyBURVNUX0hJTlQpO1xuICB9XG4gIHJldHVybiBlZmZlY3QoQ0FOQ0VMLCB0YXNrIHx8IF91dGlscy5TRUxGX0NBTkNFTExBVElPTik7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdChzZWxlY3Rvcikge1xuICBmb3IgKHZhciBfbGVuNyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuNyA+IDEgPyBfbGVuNyAtIDEgOiAwKSwgX2tleTcgPSAxOyBfa2V5NyA8IF9sZW43OyBfa2V5NysrKSB7XG4gICAgYXJnc1tfa2V5NyAtIDFdID0gYXJndW1lbnRzW19rZXk3XTtcbiAgfVxuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgc2VsZWN0b3IgPSBfdXRpbHMuaWRlbnQ7XG4gIH0gZWxzZSB7XG4gICAgKDAsIF91dGlscy5jaGVjaykoc2VsZWN0b3IsIF91dGlscy5pcy5ub3RVbmRlZiwgJ3NlbGVjdChzZWxlY3RvcixbLi4uXSk6IGFyZ3VtZW50IHNlbGVjdG9yIGlzIHVuZGVmaW5lZCcpO1xuICAgICgwLCBfdXRpbHMuY2hlY2spKHNlbGVjdG9yLCBfdXRpbHMuaXMuZnVuYywgJ3NlbGVjdChzZWxlY3RvcixbLi4uXSk6IGFyZ3VtZW50ICcgKyBzZWxlY3RvciArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgfVxuICByZXR1cm4gZWZmZWN0KFNFTEVDVCwgeyBzZWxlY3Rvcjogc2VsZWN0b3IsIGFyZ3M6IGFyZ3MgfSk7XG59XG5cbi8qKlxuICBjaGFubmVsKHBhdHRlcm4sIFtidWZmZXJdKSAgICA9PiBjcmVhdGVzIGFuIGV2ZW50IGNoYW5uZWwgZm9yIHN0b3JlIGFjdGlvbnNcbioqL1xuZnVuY3Rpb24gYWN0aW9uQ2hhbm5lbChwYXR0ZXJuLCBidWZmZXIpIHtcbiAgKDAsIF91dGlscy5jaGVjaykocGF0dGVybiwgX3V0aWxzLmlzLm5vdFVuZGVmLCAnYWN0aW9uQ2hhbm5lbChwYXR0ZXJuLC4uLik6IGFyZ3VtZW50IHBhdHRlcm4gaXMgdW5kZWZpbmVkJyk7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICgwLCBfdXRpbHMuY2hlY2spKGJ1ZmZlciwgX3V0aWxzLmlzLm5vdFVuZGVmLCAnYWN0aW9uQ2hhbm5lbChwYXR0ZXJuLCBidWZmZXIpOiBhcmd1bWVudCBidWZmZXIgaXMgdW5kZWZpbmVkJyk7XG4gICAgKDAsIF91dGlscy5jaGVjaykoYnVmZmVyLCBfdXRpbHMuaXMuYnVmZmVyLCAnYWN0aW9uQ2hhbm5lbChwYXR0ZXJuLCBidWZmZXIpOiBhcmd1bWVudCAnICsgYnVmZmVyICsgJyBpcyBub3QgYSB2YWxpZCBidWZmZXInKTtcbiAgfVxuICByZXR1cm4gZWZmZWN0KEFDVElPTl9DSEFOTkVMLCB7IHBhdHRlcm46IHBhdHRlcm4sIGJ1ZmZlcjogYnVmZmVyIH0pO1xufVxuXG5mdW5jdGlvbiBjYW5jZWxsZWQoKSB7XG4gIHJldHVybiBlZmZlY3QoQ0FOQ0VMTEVELCB7fSk7XG59XG5cbmZ1bmN0aW9uIGZsdXNoKGNoYW5uZWwpIHtcbiAgKDAsIF91dGlscy5jaGVjaykoY2hhbm5lbCwgX3V0aWxzLmlzLmNoYW5uZWwsICdmbHVzaChjaGFubmVsKTogYXJndW1lbnQgJyArIGNoYW5uZWwgKyAnIGlzIG5vdCB2YWxpZCBjaGFubmVsJyk7XG4gIHJldHVybiBlZmZlY3QoRkxVU0gsIGNoYW5uZWwpO1xufVxuXG5mdW5jdGlvbiBnZXRDb250ZXh0KHByb3ApIHtcbiAgKDAsIF91dGlscy5jaGVjaykocHJvcCwgX3V0aWxzLmlzLnN0cmluZywgJ2dldENvbnRleHQocHJvcCk6IGFyZ3VtZW50ICcgKyBwcm9wICsgJyBpcyBub3QgYSBzdHJpbmcnKTtcbiAgcmV0dXJuIGVmZmVjdChHRVRfQ09OVEVYVCwgcHJvcCk7XG59XG5cbmZ1bmN0aW9uIHNldENvbnRleHQocHJvcHMpIHtcbiAgKDAsIF91dGlscy5jaGVjaykocHJvcHMsIF91dGlscy5pcy5vYmplY3QsICgwLCBfdXRpbHMuY3JlYXRlU2V0Q29udGV4dFdhcm5pbmcpKG51bGwsIHByb3BzKSk7XG4gIHJldHVybiBlZmZlY3QoU0VUX0NPTlRFWFQsIHByb3BzKTtcbn1cblxuZnVuY3Rpb24gdGFrZUV2ZXJ5KHBhdHRlcm5PckNoYW5uZWwsIHdvcmtlcikge1xuICBmb3IgKHZhciBfbGVuOCA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuOCA+IDIgPyBfbGVuOCAtIDIgOiAwKSwgX2tleTggPSAyOyBfa2V5OCA8IF9sZW44OyBfa2V5OCsrKSB7XG4gICAgYXJnc1tfa2V5OCAtIDJdID0gYXJndW1lbnRzW19rZXk4XTtcbiAgfVxuXG4gIHJldHVybiBmb3JrLmFwcGx5KHVuZGVmaW5lZCwgW19zYWdhSGVscGVycy50YWtlRXZlcnlIZWxwZXIsIHBhdHRlcm5PckNoYW5uZWwsIHdvcmtlcl0uY29uY2F0KGFyZ3MpKTtcbn1cblxuZnVuY3Rpb24gdGFrZUxhdGVzdChwYXR0ZXJuT3JDaGFubmVsLCB3b3JrZXIpIHtcbiAgZm9yICh2YXIgX2xlbjkgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjkgPiAyID8gX2xlbjkgLSAyIDogMCksIF9rZXk5ID0gMjsgX2tleTkgPCBfbGVuOTsgX2tleTkrKykge1xuICAgIGFyZ3NbX2tleTkgLSAyXSA9IGFyZ3VtZW50c1tfa2V5OV07XG4gIH1cblxuICByZXR1cm4gZm9yay5hcHBseSh1bmRlZmluZWQsIFtfc2FnYUhlbHBlcnMudGFrZUxhdGVzdEhlbHBlciwgcGF0dGVybk9yQ2hhbm5lbCwgd29ya2VyXS5jb25jYXQoYXJncykpO1xufVxuXG5mdW5jdGlvbiB0aHJvdHRsZShtcywgcGF0dGVybiwgd29ya2VyKSB7XG4gIGZvciAodmFyIF9sZW4xMCA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMTAgPiAzID8gX2xlbjEwIC0gMyA6IDApLCBfa2V5MTAgPSAzOyBfa2V5MTAgPCBfbGVuMTA7IF9rZXkxMCsrKSB7XG4gICAgYXJnc1tfa2V5MTAgLSAzXSA9IGFyZ3VtZW50c1tfa2V5MTBdO1xuICB9XG5cbiAgcmV0dXJuIGZvcmsuYXBwbHkodW5kZWZpbmVkLCBbX3NhZ2FIZWxwZXJzLnRocm90dGxlSGVscGVyLCBtcywgcGF0dGVybiwgd29ya2VyXS5jb25jYXQoYXJncykpO1xufVxuXG52YXIgY3JlYXRlQXNFZmZlY3RUeXBlID0gZnVuY3Rpb24gY3JlYXRlQXNFZmZlY3RUeXBlKHR5cGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChlZmZlY3QpIHtcbiAgICByZXR1cm4gZWZmZWN0ICYmIGVmZmVjdFtJT10gJiYgZWZmZWN0W3R5cGVdO1xuICB9O1xufTtcblxudmFyIGFzRWZmZWN0ID0gZXhwb3J0cy5hc0VmZmVjdCA9IHtcbiAgdGFrZTogY3JlYXRlQXNFZmZlY3RUeXBlKFRBS0UpLFxuICBwdXQ6IGNyZWF0ZUFzRWZmZWN0VHlwZShQVVQpLFxuICBhbGw6IGNyZWF0ZUFzRWZmZWN0VHlwZShBTEwpLFxuICByYWNlOiBjcmVhdGVBc0VmZmVjdFR5cGUoUkFDRSksXG4gIGNhbGw6IGNyZWF0ZUFzRWZmZWN0VHlwZShDQUxMKSxcbiAgY3BzOiBjcmVhdGVBc0VmZmVjdFR5cGUoQ1BTKSxcbiAgZm9yazogY3JlYXRlQXNFZmZlY3RUeXBlKEZPUkspLFxuICBqb2luOiBjcmVhdGVBc0VmZmVjdFR5cGUoSk9JTiksXG4gIGNhbmNlbDogY3JlYXRlQXNFZmZlY3RUeXBlKENBTkNFTCksXG4gIHNlbGVjdDogY3JlYXRlQXNFZmZlY3RUeXBlKFNFTEVDVCksXG4gIGFjdGlvbkNoYW5uZWw6IGNyZWF0ZUFzRWZmZWN0VHlwZShBQ1RJT05fQ0hBTk5FTCksXG4gIGNhbmNlbGxlZDogY3JlYXRlQXNFZmZlY3RUeXBlKENBTkNFTExFRCksXG4gIGZsdXNoOiBjcmVhdGVBc0VmZmVjdFR5cGUoRkxVU0gpLFxuICBnZXRDb250ZXh0OiBjcmVhdGVBc0VmZmVjdFR5cGUoR0VUX0NPTlRFWFQpLFxuICBzZXRDb250ZXh0OiBjcmVhdGVBc0VmZmVjdFR5cGUoU0VUX0NPTlRFWFQpXG59OyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMucUVuZCA9IHVuZGVmaW5lZDtcbmV4cG9ydHMuc2FmZU5hbWUgPSBzYWZlTmFtZTtcbmV4cG9ydHMuZGVmYXVsdCA9IGZzbUl0ZXJhdG9yO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxudmFyIGRvbmUgPSB7IGRvbmU6IHRydWUsIHZhbHVlOiB1bmRlZmluZWQgfTtcbnZhciBxRW5kID0gZXhwb3J0cy5xRW5kID0ge307XG5cbmZ1bmN0aW9uIHNhZmVOYW1lKHBhdHRlcm5PckNoYW5uZWwpIHtcbiAgaWYgKF91dGlscy5pcy5jaGFubmVsKHBhdHRlcm5PckNoYW5uZWwpKSB7XG4gICAgcmV0dXJuICdjaGFubmVsJztcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHBhdHRlcm5PckNoYW5uZWwpKSB7XG4gICAgcmV0dXJuIFN0cmluZyhwYXR0ZXJuT3JDaGFubmVsLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgIHJldHVybiBTdHJpbmcoZW50cnkpO1xuICAgIH0pKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gU3RyaW5nKHBhdHRlcm5PckNoYW5uZWwpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZzbUl0ZXJhdG9yKGZzbSwgcTApIHtcbiAgdmFyIG5hbWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICdpdGVyYXRvcic7XG5cbiAgdmFyIHVwZGF0ZVN0YXRlID0gdm9pZCAwLFxuICAgICAgcU5leHQgPSBxMDtcblxuICBmdW5jdGlvbiBuZXh0KGFyZywgZXJyb3IpIHtcbiAgICBpZiAocU5leHQgPT09IHFFbmQpIHtcbiAgICAgIHJldHVybiBkb25lO1xuICAgIH1cblxuICAgIGlmIChlcnJvcikge1xuICAgICAgcU5leHQgPSBxRW5kO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfSBlbHNlIHtcbiAgICAgIHVwZGF0ZVN0YXRlICYmIHVwZGF0ZVN0YXRlKGFyZyk7XG5cbiAgICAgIHZhciBfZnNtJHFOZXh0ID0gZnNtW3FOZXh0XSgpLFxuICAgICAgICAgIHEgPSBfZnNtJHFOZXh0WzBdLFxuICAgICAgICAgIG91dHB1dCA9IF9mc20kcU5leHRbMV0sXG4gICAgICAgICAgX3VwZGF0ZVN0YXRlID0gX2ZzbSRxTmV4dFsyXTtcblxuICAgICAgcU5leHQgPSBxO1xuICAgICAgdXBkYXRlU3RhdGUgPSBfdXBkYXRlU3RhdGU7XG4gICAgICByZXR1cm4gcU5leHQgPT09IHFFbmQgPyBkb25lIDogb3V0cHV0O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoMCwgX3V0aWxzLm1ha2VJdGVyYXRvcikobmV4dCwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgcmV0dXJuIG5leHQobnVsbCwgZXJyb3IpO1xuICB9LCBuYW1lLCB0cnVlKTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLnRocm90dGxlSGVscGVyID0gZXhwb3J0cy50YWtlTGF0ZXN0SGVscGVyID0gZXhwb3J0cy50YWtlRXZlcnlIZWxwZXIgPSBleHBvcnRzLnRocm90dGxlID0gZXhwb3J0cy50YWtlTGF0ZXN0ID0gZXhwb3J0cy50YWtlRXZlcnkgPSB1bmRlZmluZWQ7XG5cbnZhciBfdGFrZUV2ZXJ5ID0gcmVxdWlyZSgnLi90YWtlRXZlcnknKTtcblxudmFyIF90YWtlRXZlcnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdGFrZUV2ZXJ5KTtcblxudmFyIF90YWtlTGF0ZXN0ID0gcmVxdWlyZSgnLi90YWtlTGF0ZXN0Jyk7XG5cbnZhciBfdGFrZUxhdGVzdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90YWtlTGF0ZXN0KTtcblxudmFyIF90aHJvdHRsZSA9IHJlcXVpcmUoJy4vdGhyb3R0bGUnKTtcblxudmFyIF90aHJvdHRsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90aHJvdHRsZSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgZGVwcmVjYXRpb25XYXJuaW5nID0gZnVuY3Rpb24gZGVwcmVjYXRpb25XYXJuaW5nKGhlbHBlck5hbWUpIHtcbiAgcmV0dXJuICdpbXBvcnQgeyAnICsgaGVscGVyTmFtZSArICcgfSBmcm9tIFxcJ3JlZHV4LXNhZ2FcXCcgaGFzIGJlZW4gZGVwcmVjYXRlZCBpbiBmYXZvciBvZiBpbXBvcnQgeyAnICsgaGVscGVyTmFtZSArICcgfSBmcm9tIFxcJ3JlZHV4LXNhZ2EvZWZmZWN0c1xcJy5cXG5UaGUgbGF0dGVyIHdpbGwgbm90IHdvcmsgd2l0aCB5aWVsZCosIGFzIGhlbHBlciBlZmZlY3RzIGFyZSB3cmFwcGVkIGF1dG9tYXRpY2FsbHkgZm9yIHlvdSBpbiBmb3JrIGVmZmVjdC5cXG5UaGVyZWZvcmUgeWllbGQgJyArIGhlbHBlck5hbWUgKyAnIHdpbGwgcmV0dXJuIHRhc2sgZGVzY3JpcHRvciB0byB5b3VyIHNhZ2EgYW5kIGV4ZWN1dGUgbmV4dCBsaW5lcyBvZiBjb2RlLic7XG59O1xuXG52YXIgdGFrZUV2ZXJ5ID0gLyojX19QVVJFX18qLygwLCBfdXRpbHMuZGVwcmVjYXRlKShfdGFrZUV2ZXJ5Mi5kZWZhdWx0LCAvKiNfX1BVUkVfXyovZGVwcmVjYXRpb25XYXJuaW5nKCd0YWtlRXZlcnknKSk7XG52YXIgdGFrZUxhdGVzdCA9IC8qI19fUFVSRV9fKi8oMCwgX3V0aWxzLmRlcHJlY2F0ZSkoX3Rha2VMYXRlc3QyLmRlZmF1bHQsIC8qI19fUFVSRV9fKi9kZXByZWNhdGlvbldhcm5pbmcoJ3Rha2VMYXRlc3QnKSk7XG52YXIgdGhyb3R0bGUgPSAvKiNfX1BVUkVfXyovKDAsIF91dGlscy5kZXByZWNhdGUpKF90aHJvdHRsZTIuZGVmYXVsdCwgLyojX19QVVJFX18qL2RlcHJlY2F0aW9uV2FybmluZygndGhyb3R0bGUnKSk7XG5cbmV4cG9ydHMudGFrZUV2ZXJ5ID0gdGFrZUV2ZXJ5O1xuZXhwb3J0cy50YWtlTGF0ZXN0ID0gdGFrZUxhdGVzdDtcbmV4cG9ydHMudGhyb3R0bGUgPSB0aHJvdHRsZTtcbmV4cG9ydHMudGFrZUV2ZXJ5SGVscGVyID0gX3Rha2VFdmVyeTIuZGVmYXVsdDtcbmV4cG9ydHMudGFrZUxhdGVzdEhlbHBlciA9IF90YWtlTGF0ZXN0Mi5kZWZhdWx0O1xuZXhwb3J0cy50aHJvdHRsZUhlbHBlciA9IF90aHJvdHRsZTIuZGVmYXVsdDsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB0YWtlRXZlcnk7XG5cbnZhciBfZnNtSXRlcmF0b3IgPSByZXF1aXJlKCcuL2ZzbUl0ZXJhdG9yJyk7XG5cbnZhciBfZnNtSXRlcmF0b3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZnNtSXRlcmF0b3IpO1xuXG52YXIgX2lvID0gcmVxdWlyZSgnLi4vaW8nKTtcblxudmFyIF9jaGFubmVsID0gcmVxdWlyZSgnLi4vY2hhbm5lbCcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiB0YWtlRXZlcnkocGF0dGVybk9yQ2hhbm5lbCwgd29ya2VyKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDIgPyBfbGVuIC0gMiA6IDApLCBfa2V5ID0gMjsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDJdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIHlUYWtlID0geyBkb25lOiBmYWxzZSwgdmFsdWU6ICgwLCBfaW8udGFrZSkocGF0dGVybk9yQ2hhbm5lbCkgfTtcbiAgdmFyIHlGb3JrID0gZnVuY3Rpb24geUZvcmsoYWMpIHtcbiAgICByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IF9pby5mb3JrLmFwcGx5KHVuZGVmaW5lZCwgW3dvcmtlcl0uY29uY2F0KGFyZ3MsIFthY10pKSB9O1xuICB9O1xuXG4gIHZhciBhY3Rpb24gPSB2b2lkIDAsXG4gICAgICBzZXRBY3Rpb24gPSBmdW5jdGlvbiBzZXRBY3Rpb24oYWMpIHtcbiAgICByZXR1cm4gYWN0aW9uID0gYWM7XG4gIH07XG5cbiAgcmV0dXJuICgwLCBfZnNtSXRlcmF0b3IyLmRlZmF1bHQpKHtcbiAgICBxMTogZnVuY3Rpb24gcTEoKSB7XG4gICAgICByZXR1cm4gWydxMicsIHlUYWtlLCBzZXRBY3Rpb25dO1xuICAgIH0sXG4gICAgcTI6IGZ1bmN0aW9uIHEyKCkge1xuICAgICAgcmV0dXJuIGFjdGlvbiA9PT0gX2NoYW5uZWwuRU5EID8gW19mc21JdGVyYXRvci5xRW5kXSA6IFsncTEnLCB5Rm9yayhhY3Rpb24pXTtcbiAgICB9XG4gIH0sICdxMScsICd0YWtlRXZlcnkoJyArICgwLCBfZnNtSXRlcmF0b3Iuc2FmZU5hbWUpKHBhdHRlcm5PckNoYW5uZWwpICsgJywgJyArIHdvcmtlci5uYW1lICsgJyknKTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB0YWtlTGF0ZXN0O1xuXG52YXIgX2ZzbUl0ZXJhdG9yID0gcmVxdWlyZSgnLi9mc21JdGVyYXRvcicpO1xuXG52YXIgX2ZzbUl0ZXJhdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ZzbUl0ZXJhdG9yKTtcblxudmFyIF9pbyA9IHJlcXVpcmUoJy4uL2lvJyk7XG5cbnZhciBfY2hhbm5lbCA9IHJlcXVpcmUoJy4uL2NoYW5uZWwnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gdGFrZUxhdGVzdChwYXR0ZXJuT3JDaGFubmVsLCB3b3JrZXIpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMiA/IF9sZW4gLSAyIDogMCksIF9rZXkgPSAyOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5IC0gMl0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgeVRha2UgPSB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogKDAsIF9pby50YWtlKShwYXR0ZXJuT3JDaGFubmVsKSB9O1xuICB2YXIgeUZvcmsgPSBmdW5jdGlvbiB5Rm9yayhhYykge1xuICAgIHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogX2lvLmZvcmsuYXBwbHkodW5kZWZpbmVkLCBbd29ya2VyXS5jb25jYXQoYXJncywgW2FjXSkpIH07XG4gIH07XG4gIHZhciB5Q2FuY2VsID0gZnVuY3Rpb24geUNhbmNlbCh0YXNrKSB7XG4gICAgcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiAoMCwgX2lvLmNhbmNlbCkodGFzaykgfTtcbiAgfTtcblxuICB2YXIgdGFzayA9IHZvaWQgMCxcbiAgICAgIGFjdGlvbiA9IHZvaWQgMDtcbiAgdmFyIHNldFRhc2sgPSBmdW5jdGlvbiBzZXRUYXNrKHQpIHtcbiAgICByZXR1cm4gdGFzayA9IHQ7XG4gIH07XG4gIHZhciBzZXRBY3Rpb24gPSBmdW5jdGlvbiBzZXRBY3Rpb24oYWMpIHtcbiAgICByZXR1cm4gYWN0aW9uID0gYWM7XG4gIH07XG5cbiAgcmV0dXJuICgwLCBfZnNtSXRlcmF0b3IyLmRlZmF1bHQpKHtcbiAgICBxMTogZnVuY3Rpb24gcTEoKSB7XG4gICAgICByZXR1cm4gWydxMicsIHlUYWtlLCBzZXRBY3Rpb25dO1xuICAgIH0sXG4gICAgcTI6IGZ1bmN0aW9uIHEyKCkge1xuICAgICAgcmV0dXJuIGFjdGlvbiA9PT0gX2NoYW5uZWwuRU5EID8gW19mc21JdGVyYXRvci5xRW5kXSA6IHRhc2sgPyBbJ3EzJywgeUNhbmNlbCh0YXNrKV0gOiBbJ3ExJywgeUZvcmsoYWN0aW9uKSwgc2V0VGFza107XG4gICAgfSxcbiAgICBxMzogZnVuY3Rpb24gcTMoKSB7XG4gICAgICByZXR1cm4gWydxMScsIHlGb3JrKGFjdGlvbiksIHNldFRhc2tdO1xuICAgIH1cbiAgfSwgJ3ExJywgJ3Rha2VMYXRlc3QoJyArICgwLCBfZnNtSXRlcmF0b3Iuc2FmZU5hbWUpKHBhdHRlcm5PckNoYW5uZWwpICsgJywgJyArIHdvcmtlci5uYW1lICsgJyknKTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB0aHJvdHRsZTtcblxudmFyIF9mc21JdGVyYXRvciA9IHJlcXVpcmUoJy4vZnNtSXRlcmF0b3InKTtcblxudmFyIF9mc21JdGVyYXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9mc21JdGVyYXRvcik7XG5cbnZhciBfaW8gPSByZXF1aXJlKCcuLi9pbycpO1xuXG52YXIgX2NoYW5uZWwgPSByZXF1aXJlKCcuLi9jaGFubmVsJyk7XG5cbnZhciBfYnVmZmVycyA9IHJlcXVpcmUoJy4uL2J1ZmZlcnMnKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIHRocm90dGxlKGRlbGF5TGVuZ3RoLCBwYXR0ZXJuLCB3b3JrZXIpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMyA/IF9sZW4gLSAzIDogMCksIF9rZXkgPSAzOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5IC0gM10gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgYWN0aW9uID0gdm9pZCAwLFxuICAgICAgY2hhbm5lbCA9IHZvaWQgMDtcblxuICB2YXIgeUFjdGlvbkNoYW5uZWwgPSB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogKDAsIF9pby5hY3Rpb25DaGFubmVsKShwYXR0ZXJuLCBfYnVmZmVycy5idWZmZXJzLnNsaWRpbmcoMSkpIH07XG4gIHZhciB5VGFrZSA9IGZ1bmN0aW9uIHlUYWtlKCkge1xuICAgIHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogKDAsIF9pby50YWtlKShjaGFubmVsKSB9O1xuICB9O1xuICB2YXIgeUZvcmsgPSBmdW5jdGlvbiB5Rm9yayhhYykge1xuICAgIHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogX2lvLmZvcmsuYXBwbHkodW5kZWZpbmVkLCBbd29ya2VyXS5jb25jYXQoYXJncywgW2FjXSkpIH07XG4gIH07XG4gIHZhciB5RGVsYXkgPSB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogKDAsIF9pby5jYWxsKShfdXRpbHMuZGVsYXksIGRlbGF5TGVuZ3RoKSB9O1xuXG4gIHZhciBzZXRBY3Rpb24gPSBmdW5jdGlvbiBzZXRBY3Rpb24oYWMpIHtcbiAgICByZXR1cm4gYWN0aW9uID0gYWM7XG4gIH07XG4gIHZhciBzZXRDaGFubmVsID0gZnVuY3Rpb24gc2V0Q2hhbm5lbChjaCkge1xuICAgIHJldHVybiBjaGFubmVsID0gY2g7XG4gIH07XG5cbiAgcmV0dXJuICgwLCBfZnNtSXRlcmF0b3IyLmRlZmF1bHQpKHtcbiAgICBxMTogZnVuY3Rpb24gcTEoKSB7XG4gICAgICByZXR1cm4gWydxMicsIHlBY3Rpb25DaGFubmVsLCBzZXRDaGFubmVsXTtcbiAgICB9LFxuICAgIHEyOiBmdW5jdGlvbiBxMigpIHtcbiAgICAgIHJldHVybiBbJ3EzJywgeVRha2UoKSwgc2V0QWN0aW9uXTtcbiAgICB9LFxuICAgIHEzOiBmdW5jdGlvbiBxMygpIHtcbiAgICAgIHJldHVybiBhY3Rpb24gPT09IF9jaGFubmVsLkVORCA/IFtfZnNtSXRlcmF0b3IucUVuZF0gOiBbJ3E0JywgeUZvcmsoYWN0aW9uKV07XG4gICAgfSxcbiAgICBxNDogZnVuY3Rpb24gcTQoKSB7XG4gICAgICByZXR1cm4gWydxMicsIHlEZWxheV07XG4gICAgfVxuICB9LCAncTEnLCAndGhyb3R0bGUoJyArICgwLCBfZnNtSXRlcmF0b3Iuc2FmZU5hbWUpKHBhdHRlcm4pICsgJywgJyArIHdvcmtlci5uYW1lICsgJyknKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuYXNhcCA9IGFzYXA7XG5leHBvcnRzLnN1c3BlbmQgPSBzdXNwZW5kO1xuZXhwb3J0cy5mbHVzaCA9IGZsdXNoO1xudmFyIHF1ZXVlID0gW107XG4vKipcbiAgVmFyaWFibGUgdG8gaG9sZCBhIGNvdW50aW5nIHNlbWFwaG9yZVxuICAtIEluY3JlbWVudGluZyBhZGRzIGEgbG9jayBhbmQgcHV0cyB0aGUgc2NoZWR1bGVyIGluIGEgYHN1c3BlbmRlZGAgc3RhdGUgKGlmIGl0J3Mgbm90XG4gICAgYWxyZWFkeSBzdXNwZW5kZWQpXG4gIC0gRGVjcmVtZW50aW5nIHJlbGVhc2VzIGEgbG9jay4gWmVybyBsb2NrcyBwdXRzIHRoZSBzY2hlZHVsZXIgaW4gYSBgcmVsZWFzZWRgIHN0YXRlLiBUaGlzXG4gICAgdHJpZ2dlcnMgZmx1c2hpbmcgdGhlIHF1ZXVlZCB0YXNrcy5cbioqL1xudmFyIHNlbWFwaG9yZSA9IDA7XG5cbi8qKlxuICBFeGVjdXRlcyBhIHRhc2sgJ2F0b21pY2FsbHknLiBUYXNrcyBzY2hlZHVsZWQgZHVyaW5nIHRoaXMgZXhlY3V0aW9uIHdpbGwgYmUgcXVldWVkXG4gIGFuZCBmbHVzaGVkIGFmdGVyIHRoaXMgdGFzayBoYXMgZmluaXNoZWQgKGFzc3VtaW5nIHRoZSBzY2hlZHVsZXIgZW5kdXAgaW4gYSByZWxlYXNlZFxuICBzdGF0ZSkuXG4qKi9cbmZ1bmN0aW9uIGV4ZWModGFzaykge1xuICB0cnkge1xuICAgIHN1c3BlbmQoKTtcbiAgICB0YXNrKCk7XG4gIH0gZmluYWxseSB7XG4gICAgcmVsZWFzZSgpO1xuICB9XG59XG5cbi8qKlxuICBFeGVjdXRlcyBvciBxdWV1ZXMgYSB0YXNrIGRlcGVuZGluZyBvbiB0aGUgc3RhdGUgb2YgdGhlIHNjaGVkdWxlciAoYHN1c3BlbmRlZGAgb3IgYHJlbGVhc2VkYClcbioqL1xuZnVuY3Rpb24gYXNhcCh0YXNrKSB7XG4gIHF1ZXVlLnB1c2godGFzayk7XG5cbiAgaWYgKCFzZW1hcGhvcmUpIHtcbiAgICBzdXNwZW5kKCk7XG4gICAgZmx1c2goKTtcbiAgfVxufVxuXG4vKipcbiAgUHV0cyB0aGUgc2NoZWR1bGVyIGluIGEgYHN1c3BlbmRlZGAgc3RhdGUuIFNjaGVkdWxlZCB0YXNrcyB3aWxsIGJlIHF1ZXVlZCB1bnRpbCB0aGVcbiAgc2NoZWR1bGVyIGlzIHJlbGVhc2VkLlxuKiovXG5mdW5jdGlvbiBzdXNwZW5kKCkge1xuICBzZW1hcGhvcmUrKztcbn1cblxuLyoqXG4gIFB1dHMgdGhlIHNjaGVkdWxlciBpbiBhIGByZWxlYXNlZGAgc3RhdGUuXG4qKi9cbmZ1bmN0aW9uIHJlbGVhc2UoKSB7XG4gIHNlbWFwaG9yZS0tO1xufVxuXG4vKipcbiAgUmVsZWFzZXMgdGhlIGN1cnJlbnQgbG9jay4gRXhlY3V0ZXMgYWxsIHF1ZXVlZCB0YXNrcyBpZiB0aGUgc2NoZWR1bGVyIGlzIGluIHRoZSByZWxlYXNlZCBzdGF0ZS5cbioqL1xuZnVuY3Rpb24gZmx1c2goKSB7XG4gIHJlbGVhc2UoKTtcblxuICB2YXIgdGFzayA9IHZvaWQgMDtcbiAgd2hpbGUgKCFzZW1hcGhvcmUgJiYgKHRhc2sgPSBxdWV1ZS5zaGlmdCgpKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZXhlYyh0YXNrKTtcbiAgfVxufSIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5leHBvcnRzLmNoZWNrID0gY2hlY2s7XG5leHBvcnRzLmhhc093biA9IGhhc093bjtcbmV4cG9ydHMucmVtb3ZlID0gcmVtb3ZlO1xuZXhwb3J0cy5kZWZlcnJlZCA9IGRlZmVycmVkO1xuZXhwb3J0cy5hcnJheU9mRGVmZmVyZWQgPSBhcnJheU9mRGVmZmVyZWQ7XG5leHBvcnRzLmRlbGF5ID0gZGVsYXk7XG5leHBvcnRzLmNyZWF0ZU1vY2tUYXNrID0gY3JlYXRlTW9ja1Rhc2s7XG5leHBvcnRzLmF1dG9JbmMgPSBhdXRvSW5jO1xuZXhwb3J0cy5tYWtlSXRlcmF0b3IgPSBtYWtlSXRlcmF0b3I7XG5leHBvcnRzLmxvZyA9IGxvZztcbmV4cG9ydHMuZGVwcmVjYXRlID0gZGVwcmVjYXRlO1xudmFyIHN5bSA9IGV4cG9ydHMuc3ltID0gZnVuY3Rpb24gc3ltKGlkKSB7XG4gIHJldHVybiAnQEByZWR1eC1zYWdhLycgKyBpZDtcbn07XG5cbnZhciBUQVNLID0gZXhwb3J0cy5UQVNLID0gc3ltKCdUQVNLJyk7XG52YXIgSEVMUEVSID0gZXhwb3J0cy5IRUxQRVIgPSBzeW0oJ0hFTFBFUicpO1xudmFyIE1BVENIID0gZXhwb3J0cy5NQVRDSCA9IHN5bSgnTUFUQ0gnKTtcbnZhciBDQU5DRUwgPSBleHBvcnRzLkNBTkNFTCA9IHN5bSgnQ0FOQ0VMX1BST01JU0UnKTtcbnZhciBTQUdBX0FDVElPTiA9IGV4cG9ydHMuU0FHQV9BQ1RJT04gPSBzeW0oJ1NBR0FfQUNUSU9OJyk7XG52YXIgU0VMRl9DQU5DRUxMQVRJT04gPSBleHBvcnRzLlNFTEZfQ0FOQ0VMTEFUSU9OID0gc3ltKCdTRUxGX0NBTkNFTExBVElPTicpO1xudmFyIGtvbnN0ID0gZXhwb3J0cy5rb25zdCA9IGZ1bmN0aW9uIGtvbnN0KHYpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdjtcbiAgfTtcbn07XG52YXIga1RydWUgPSBleHBvcnRzLmtUcnVlID0ga29uc3QodHJ1ZSk7XG52YXIga0ZhbHNlID0gZXhwb3J0cy5rRmFsc2UgPSBrb25zdChmYWxzZSk7XG52YXIgbm9vcCA9IGV4cG9ydHMubm9vcCA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcbnZhciBpZGVudCA9IGV4cG9ydHMuaWRlbnQgPSBmdW5jdGlvbiBpZGVudCh2KSB7XG4gIHJldHVybiB2O1xufTtcblxuZnVuY3Rpb24gY2hlY2sodmFsdWUsIHByZWRpY2F0ZSwgZXJyb3IpIHtcbiAgaWYgKCFwcmVkaWNhdGUodmFsdWUpKSB7XG4gICAgbG9nKCdlcnJvcicsICd1bmNhdWdodCBhdCBjaGVjaycsIGVycm9yKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpO1xuICB9XG59XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBoYXNPd24ob2JqZWN0LCBwcm9wZXJ0eSkge1xuICByZXR1cm4gaXMubm90VW5kZWYob2JqZWN0KSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpO1xufVxuXG52YXIgaXMgPSBleHBvcnRzLmlzID0ge1xuICB1bmRlZjogZnVuY3Rpb24gdW5kZWYodikge1xuICAgIHJldHVybiB2ID09PSBudWxsIHx8IHYgPT09IHVuZGVmaW5lZDtcbiAgfSxcbiAgbm90VW5kZWY6IGZ1bmN0aW9uIG5vdFVuZGVmKHYpIHtcbiAgICByZXR1cm4gdiAhPT0gbnVsbCAmJiB2ICE9PSB1bmRlZmluZWQ7XG4gIH0sXG4gIGZ1bmM6IGZ1bmN0aW9uIGZ1bmMoZikge1xuICAgIHJldHVybiB0eXBlb2YgZiA9PT0gJ2Z1bmN0aW9uJztcbiAgfSxcbiAgbnVtYmVyOiBmdW5jdGlvbiBudW1iZXIobikge1xuICAgIHJldHVybiB0eXBlb2YgbiA9PT0gJ251bWJlcic7XG4gIH0sXG4gIHN0cmluZzogZnVuY3Rpb24gc3RyaW5nKHMpIHtcbiAgICByZXR1cm4gdHlwZW9mIHMgPT09ICdzdHJpbmcnO1xuICB9LFxuICBhcnJheTogQXJyYXkuaXNBcnJheSxcbiAgb2JqZWN0OiBmdW5jdGlvbiBvYmplY3Qob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiAhaXMuYXJyYXkob2JqKSAmJiAodHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yob2JqKSkgPT09ICdvYmplY3QnO1xuICB9LFxuICBwcm9taXNlOiBmdW5jdGlvbiBwcm9taXNlKHApIHtcbiAgICByZXR1cm4gcCAmJiBpcy5mdW5jKHAudGhlbik7XG4gIH0sXG4gIGl0ZXJhdG9yOiBmdW5jdGlvbiBpdGVyYXRvcihpdCkge1xuICAgIHJldHVybiBpdCAmJiBpcy5mdW5jKGl0Lm5leHQpICYmIGlzLmZ1bmMoaXQudGhyb3cpO1xuICB9LFxuICBpdGVyYWJsZTogZnVuY3Rpb24gaXRlcmFibGUoaXQpIHtcbiAgICByZXR1cm4gaXQgJiYgaXMuZnVuYyhTeW1ib2wpID8gaXMuZnVuYyhpdFtTeW1ib2wuaXRlcmF0b3JdKSA6IGlzLmFycmF5KGl0KTtcbiAgfSxcbiAgdGFzazogZnVuY3Rpb24gdGFzayh0KSB7XG4gICAgcmV0dXJuIHQgJiYgdFtUQVNLXTtcbiAgfSxcbiAgb2JzZXJ2YWJsZTogZnVuY3Rpb24gb2JzZXJ2YWJsZShvYikge1xuICAgIHJldHVybiBvYiAmJiBpcy5mdW5jKG9iLnN1YnNjcmliZSk7XG4gIH0sXG4gIGJ1ZmZlcjogZnVuY3Rpb24gYnVmZmVyKGJ1Zikge1xuICAgIHJldHVybiBidWYgJiYgaXMuZnVuYyhidWYuaXNFbXB0eSkgJiYgaXMuZnVuYyhidWYudGFrZSkgJiYgaXMuZnVuYyhidWYucHV0KTtcbiAgfSxcbiAgcGF0dGVybjogZnVuY3Rpb24gcGF0dGVybihwYXQpIHtcbiAgICByZXR1cm4gcGF0ICYmIChpcy5zdHJpbmcocGF0KSB8fCAodHlwZW9mIHBhdCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0KSkgPT09ICdzeW1ib2wnIHx8IGlzLmZ1bmMocGF0KSB8fCBpcy5hcnJheShwYXQpKTtcbiAgfSxcbiAgY2hhbm5lbDogZnVuY3Rpb24gY2hhbm5lbChjaCkge1xuICAgIHJldHVybiBjaCAmJiBpcy5mdW5jKGNoLnRha2UpICYmIGlzLmZ1bmMoY2guY2xvc2UpO1xuICB9LFxuICBoZWxwZXI6IGZ1bmN0aW9uIGhlbHBlcihpdCkge1xuICAgIHJldHVybiBpdCAmJiBpdFtIRUxQRVJdO1xuICB9LFxuICBzdHJpbmdhYmxlRnVuYzogZnVuY3Rpb24gc3RyaW5nYWJsZUZ1bmMoZikge1xuICAgIHJldHVybiBpcy5mdW5jKGYpICYmIGhhc093bihmLCAndG9TdHJpbmcnKTtcbiAgfVxufTtcblxudmFyIG9iamVjdCA9IGV4cG9ydHMub2JqZWN0ID0ge1xuICBhc3NpZ246IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkge1xuICAgIGZvciAodmFyIGkgaW4gc291cmNlKSB7XG4gICAgICBpZiAoaGFzT3duKHNvdXJjZSwgaSkpIHtcbiAgICAgICAgdGFyZ2V0W2ldID0gc291cmNlW2ldO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gcmVtb3ZlKGFycmF5LCBpdGVtKSB7XG4gIHZhciBpbmRleCA9IGFycmF5LmluZGV4T2YoaXRlbSk7XG4gIGlmIChpbmRleCA+PSAwKSB7XG4gICAgYXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxufVxuXG52YXIgYXJyYXkgPSBleHBvcnRzLmFycmF5ID0ge1xuICBmcm9tOiBmdW5jdGlvbiBmcm9tKG9iaikge1xuICAgIHZhciBhcnIgPSBBcnJheShvYmoubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpIGluIG9iaikge1xuICAgICAgaWYgKGhhc093bihvYmosIGkpKSB7XG4gICAgICAgIGFycltpXSA9IG9ialtpXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycjtcbiAgfVxufTtcblxuZnVuY3Rpb24gZGVmZXJyZWQoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgdmFyIGRlZiA9IF9leHRlbmRzKHt9LCBwcm9wcyk7XG4gIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGRlZi5yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICBkZWYucmVqZWN0ID0gcmVqZWN0O1xuICB9KTtcbiAgZGVmLnByb21pc2UgPSBwcm9taXNlO1xuICByZXR1cm4gZGVmO1xufVxuXG5mdW5jdGlvbiBhcnJheU9mRGVmZmVyZWQobGVuZ3RoKSB7XG4gIHZhciBhcnIgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGFyci5wdXNoKGRlZmVycmVkKCkpO1xuICB9XG4gIHJldHVybiBhcnI7XG59XG5cbmZ1bmN0aW9uIGRlbGF5KG1zKSB7XG4gIHZhciB2YWwgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG5cbiAgdmFyIHRpbWVvdXRJZCA9IHZvaWQgMDtcbiAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHJlc29sdmUodmFsKTtcbiAgICB9LCBtcyk7XG4gIH0pO1xuXG4gIHByb21pc2VbQ0FOQ0VMXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gIH07XG5cbiAgcmV0dXJuIHByb21pc2U7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU1vY2tUYXNrKCkge1xuICB2YXIgX3JlZjtcblxuICB2YXIgcnVubmluZyA9IHRydWU7XG4gIHZhciBfcmVzdWx0ID0gdm9pZCAwLFxuICAgICAgX2Vycm9yID0gdm9pZCAwO1xuXG4gIHJldHVybiBfcmVmID0ge30sIF9yZWZbVEFTS10gPSB0cnVlLCBfcmVmLmlzUnVubmluZyA9IGZ1bmN0aW9uIGlzUnVubmluZygpIHtcbiAgICByZXR1cm4gcnVubmluZztcbiAgfSwgX3JlZi5yZXN1bHQgPSBmdW5jdGlvbiByZXN1bHQoKSB7XG4gICAgcmV0dXJuIF9yZXN1bHQ7XG4gIH0sIF9yZWYuZXJyb3IgPSBmdW5jdGlvbiBlcnJvcigpIHtcbiAgICByZXR1cm4gX2Vycm9yO1xuICB9LCBfcmVmLnNldFJ1bm5pbmcgPSBmdW5jdGlvbiBzZXRSdW5uaW5nKGIpIHtcbiAgICByZXR1cm4gcnVubmluZyA9IGI7XG4gIH0sIF9yZWYuc2V0UmVzdWx0ID0gZnVuY3Rpb24gc2V0UmVzdWx0KHIpIHtcbiAgICByZXR1cm4gX3Jlc3VsdCA9IHI7XG4gIH0sIF9yZWYuc2V0RXJyb3IgPSBmdW5jdGlvbiBzZXRFcnJvcihlKSB7XG4gICAgcmV0dXJuIF9lcnJvciA9IGU7XG4gIH0sIF9yZWY7XG59XG5cbmZ1bmN0aW9uIGF1dG9JbmMoKSB7XG4gIHZhciBzZWVkID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICsrc2VlZDtcbiAgfTtcbn1cblxudmFyIHVpZCA9IGV4cG9ydHMudWlkID0gYXV0b0luYygpO1xuXG52YXIga1Rocm93ID0gZnVuY3Rpb24ga1Rocm93KGVycikge1xuICB0aHJvdyBlcnI7XG59O1xudmFyIGtSZXR1cm4gPSBmdW5jdGlvbiBrUmV0dXJuKHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogdHJ1ZSB9O1xufTtcbmZ1bmN0aW9uIG1ha2VJdGVyYXRvcihuZXh0KSB7XG4gIHZhciB0aHJvID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBrVGhyb3c7XG4gIHZhciBuYW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAnJztcbiAgdmFyIGlzSGVscGVyID0gYXJndW1lbnRzWzNdO1xuXG4gIHZhciBpdGVyYXRvciA9IHsgbmFtZTogbmFtZSwgbmV4dDogbmV4dCwgdGhyb3c6IHRocm8sIHJldHVybjoga1JldHVybiB9O1xuXG4gIGlmIChpc0hlbHBlcikge1xuICAgIGl0ZXJhdG9yW0hFTFBFUl0gPSB0cnVlO1xuICB9XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJykge1xuICAgIGl0ZXJhdG9yW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gaXRlcmF0b3I7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gaXRlcmF0b3I7XG59XG5cbi8qKlxuICBQcmludCBlcnJvciBpbiBhIHVzZWZ1bCB3YXkgd2hldGhlciBpbiBhIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAgKHdpdGggZXhwYW5kYWJsZSBlcnJvciBzdGFjayB0cmFjZXMpLCBvciBpbiBhIG5vZGUuanMgZW52aXJvbm1lbnRcbiAgKHRleHQtb25seSBsb2cgb3V0cHV0KVxuICoqL1xuZnVuY3Rpb24gbG9nKGxldmVsLCBtZXNzYWdlKSB7XG4gIHZhciBlcnJvciA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogJyc7XG5cbiAgLyplc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlKi9cbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc29sZS5sb2coJ3JlZHV4LXNhZ2EgJyArIGxldmVsICsgJzogJyArIG1lc3NhZ2UgKyAnXFxuJyArIChlcnJvciAmJiBlcnJvci5zdGFjayB8fCBlcnJvcikpO1xuICB9IGVsc2Uge1xuICAgIGNvbnNvbGVbbGV2ZWxdKG1lc3NhZ2UsIGVycm9yKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZXByZWNhdGUoZm4sIGRlcHJlY2F0aW9uV2FybmluZykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JykgbG9nKCd3YXJuJywgZGVwcmVjYXRpb25XYXJuaW5nKTtcbiAgICByZXR1cm4gZm4uYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG52YXIgdXBkYXRlSW5jZW50aXZlID0gZXhwb3J0cy51cGRhdGVJbmNlbnRpdmUgPSBmdW5jdGlvbiB1cGRhdGVJbmNlbnRpdmUoZGVwcmVjYXRlZCwgcHJlZmVycmVkKSB7XG4gIHJldHVybiBkZXByZWNhdGVkICsgJyBoYXMgYmVlbiBkZXByZWNhdGVkIGluIGZhdm9yIG9mICcgKyBwcmVmZXJyZWQgKyAnLCBwbGVhc2UgdXBkYXRlIHlvdXIgY29kZSc7XG59O1xuXG52YXIgaW50ZXJuYWxFcnIgPSBleHBvcnRzLmludGVybmFsRXJyID0gZnVuY3Rpb24gaW50ZXJuYWxFcnIoZXJyKSB7XG4gIHJldHVybiBuZXcgRXJyb3IoJ1xcbiAgcmVkdXgtc2FnYTogRXJyb3IgY2hlY2tpbmcgaG9va3MgZGV0ZWN0ZWQgYW4gaW5jb25zaXN0ZW50IHN0YXRlLiBUaGlzIGlzIGxpa2VseSBhIGJ1Z1xcbiAgaW4gcmVkdXgtc2FnYSBjb2RlIGFuZCBub3QgeW91cnMuIFRoYW5rcyBmb3IgcmVwb3J0aW5nIHRoaXMgaW4gdGhlIHByb2plY3RcXCdzIGdpdGh1YiByZXBvLlxcbiAgRXJyb3I6ICcgKyBlcnIgKyAnXFxuJyk7XG59O1xuXG52YXIgY3JlYXRlU2V0Q29udGV4dFdhcm5pbmcgPSBleHBvcnRzLmNyZWF0ZVNldENvbnRleHRXYXJuaW5nID0gZnVuY3Rpb24gY3JlYXRlU2V0Q29udGV4dFdhcm5pbmcoY3R4LCBwcm9wcykge1xuICByZXR1cm4gKGN0eCA/IGN0eCArICcuJyA6ICcnKSArICdzZXRDb250ZXh0KHByb3BzKTogYXJndW1lbnQgJyArIHByb3BzICsgJyBpcyBub3QgYSBwbGFpbiBvYmplY3QnO1xufTtcblxudmFyIHdyYXBTYWdhRGlzcGF0Y2ggPSBleHBvcnRzLndyYXBTYWdhRGlzcGF0Y2ggPSBmdW5jdGlvbiB3cmFwU2FnYURpc3BhdGNoKGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhY3Rpb24sIFNBR0FfQUNUSU9OLCB7IHZhbHVlOiB0cnVlIH0pKTtcbiAgfTtcbn07XG5cbnZhciBjbG9uZWFibGVHZW5lcmF0b3IgPSBleHBvcnRzLmNsb25lYWJsZUdlbmVyYXRvciA9IGZ1bmN0aW9uIGNsb25lYWJsZUdlbmVyYXRvcihnZW5lcmF0b3JGdW5jKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgdmFyIGhpc3RvcnkgPSBbXTtcbiAgICB2YXIgZ2VuID0gZ2VuZXJhdG9yRnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgIHJldHVybiB7XG4gICAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KGFyZykge1xuICAgICAgICBoaXN0b3J5LnB1c2goYXJnKTtcbiAgICAgICAgcmV0dXJuIGdlbi5uZXh0KGFyZyk7XG4gICAgICB9LFxuICAgICAgY2xvbmU6IGZ1bmN0aW9uIGNsb25lKCkge1xuICAgICAgICB2YXIgY2xvbmVkR2VuID0gY2xvbmVhYmxlR2VuZXJhdG9yKGdlbmVyYXRvckZ1bmMpLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICAgIGhpc3RvcnkuZm9yRWFjaChmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgICAgcmV0dXJuIGNsb25lZEdlbi5uZXh0KGFyZyk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY2xvbmVkR2VuO1xuICAgICAgfSxcbiAgICAgIHJldHVybjogZnVuY3Rpb24gX3JldHVybih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZ2VuLnJldHVybih2YWx1ZSk7XG4gICAgICB9LFxuICAgICAgdGhyb3c6IGZ1bmN0aW9uIF90aHJvdyhleGNlcHRpb24pIHtcbiAgICAgICAgcmV0dXJuIGdlbi50aHJvdyhleGNlcHRpb24pO1xuICAgICAgfVxuICAgIH07XG4gIH07XG59OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHJ1bnRpbWUgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt0b1N0cmluZ1RhZ1N5bWJvbF0gPVxuICAgIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkge1xuICAgICAgICBnZW5GdW5bdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBoYW5kbGVkIHRoZXJlLlxuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpXG4gICAgKTtcblxuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAvLyBOb3RlOiBbXCJyZXR1cm5cIl0gbXVzdCBiZSB1c2VkIGZvciBFUzMgcGFyc2luZyBjb21wYXRpYmlsaXR5LlxuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBHcFt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvclwiO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgR3BbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xuXG4gIC8vIFJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGVcbiAgLy8gb3Igbm90LCByZXR1cm4gdGhlIHJ1bnRpbWUgb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGRlY2xhcmUgdGhlIHZhcmlhYmxlXG4gIC8vIHJlZ2VuZXJhdG9yUnVudGltZSBpbiB0aGUgb3V0ZXIgc2NvcGUsIHdoaWNoIGFsbG93cyB0aGlzIG1vZHVsZSB0byBiZVxuICAvLyBpbmplY3RlZCBlYXNpbHkgYnkgYGJpbi9yZWdlbmVyYXRvciAtLWluY2x1ZGUtcnVudGltZSBzY3JpcHQuanNgLlxuICByZXR1cm4gZXhwb3J0cztcblxufShcbiAgLy8gSWYgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlLCB1c2UgbW9kdWxlLmV4cG9ydHNcbiAgLy8gYXMgdGhlIHJlZ2VuZXJhdG9yUnVudGltZSBuYW1lc3BhY2UuIE90aGVyd2lzZSBjcmVhdGUgYSBuZXcgZW1wdHlcbiAgLy8gb2JqZWN0LiBFaXRoZXIgd2F5LCB0aGUgcmVzdWx0aW5nIG9iamVjdCB3aWxsIGJlIHVzZWQgdG8gaW5pdGlhbGl6ZVxuICAvLyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIHZhcmlhYmxlIGF0IHRoZSB0b3Agb2YgdGhpcyBmaWxlLlxuICB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiID8gbW9kdWxlLmV4cG9ydHMgOiB7fVxuKSk7XG5cbnRyeSB7XG4gIHJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG59IGNhdGNoIChhY2NpZGVudGFsU3RyaWN0TW9kZSkge1xuICAvLyBUaGlzIG1vZHVsZSBzaG91bGQgbm90IGJlIHJ1bm5pbmcgaW4gc3RyaWN0IG1vZGUsIHNvIHRoZSBhYm92ZVxuICAvLyBhc3NpZ25tZW50IHNob3VsZCBhbHdheXMgd29yayB1bmxlc3Mgc29tZXRoaW5nIGlzIG1pc2NvbmZpZ3VyZWQuIEp1c3RcbiAgLy8gaW4gY2FzZSBydW50aW1lLmpzIGFjY2lkZW50YWxseSBydW5zIGluIHN0cmljdCBtb2RlLCB3ZSBjYW4gZXNjYXBlXG4gIC8vIHN0cmljdCBtb2RlIHVzaW5nIGEgZ2xvYmFsIEZ1bmN0aW9uIGNhbGwuIFRoaXMgY291bGQgY29uY2VpdmFibHkgZmFpbFxuICAvLyBpZiBhIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IGZvcmJpZHMgdXNpbmcgRnVuY3Rpb24sIGJ1dCBpbiB0aGF0IGNhc2VcbiAgLy8gdGhlIHByb3BlciBzb2x1dGlvbiBpcyB0byBmaXggdGhlIGFjY2lkZW50YWwgc3RyaWN0IG1vZGUgcHJvYmxlbS4gSWZcbiAgLy8geW91J3ZlIG1pc2NvbmZpZ3VyZWQgeW91ciBidW5kbGVyIHRvIGZvcmNlIHN0cmljdCBtb2RlIGFuZCBhcHBsaWVkIGFcbiAgLy8gQ1NQIHRvIGZvcmJpZCBGdW5jdGlvbiwgYW5kIHlvdSdyZSBub3Qgd2lsbGluZyB0byBmaXggZWl0aGVyIG9mIHRob3NlXG4gIC8vIHByb2JsZW1zLCBwbGVhc2UgZGV0YWlsIHlvdXIgdW5pcXVlIHByZWRpY2FtZW50IGluIGEgR2l0SHViIGlzc3VlLlxuICBGdW5jdGlvbihcInJcIiwgXCJyZWdlbmVyYXRvclJ1bnRpbWUgPSByXCIpKHJ1bnRpbWUpO1xufVxuIiwiLyoqXG4gKiBUaGlzIGlzIHRoZSBtYWluIGVudHJ5IGZpbGUsIHdoaWNoIHdlIGNvbXBpbGUgdGhlIG1haW4gSlMgYnVuZGxlIGZyb20uIEl0XG4gKiBvbmx5IGNvbnRhaW5zIHRoZSBjbGllbnQgc2lkZSByb3V0aW5nIHNldHVwLlxuICovXG5cbi8vIE5lZWRlZCBmb3IgRVM2IGdlbmVyYXRvcnMgKHJlZHV4LXNhZ2EpIHRvIHdvcmtcbmltcG9ydCAnQGJhYmVsL3BvbHlmaWxsJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCB7IFJvdXRlciwgUm91dGUsIGJyb3dzZXJIaXN0b3J5LCBJbmRleFJvdXRlIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgc3luY0hpc3RvcnlXaXRoU3RvcmUgfSBmcm9tICdyZWFjdC1yb3V0ZXItcmVkdXgnO1xuXG5pbXBvcnQgQXBwIGZyb20gJy4vQXBwJztcbmltcG9ydCBIb21lIGZyb20gJy4vc2NyZWVucy9Ib21lJztcbmltcG9ydCBJdGVtIGZyb20gJy4vc2NyZWVucy9JdGVtJztcbmltcG9ydCBMaXN0IGZyb20gJy4vc2NyZWVucy9MaXN0JztcblxuaW1wb3J0IHN0b3JlIGZyb20gJy4vc3RvcmUnO1xuXG4vLyBTeW5jIHRoZSBicm93c2VyIGhpc3RvcnkgdG8gdGhlIFJlZHV4IHN0b3JlXG5jb25zdCBoaXN0b3J5ID0gc3luY0hpc3RvcnlXaXRoU3RvcmUoYnJvd3Nlckhpc3RvcnksIHN0b3JlKTtcblxuLy8gSW5pdGlhbGlzZSBLZXlzdG9uZS5Vc2VyIGxpc3RcbmltcG9ydCB7IGxpc3RzQnlLZXkgfSBmcm9tICcuLi91dGlscy9saXN0cyc7XG5LZXlzdG9uZS5Vc2VyID0gbGlzdHNCeUtleVtLZXlzdG9uZS51c2VyTGlzdF07XG5cblJlYWN0RE9NLnJlbmRlcihcblx0PFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XG5cdFx0PFJvdXRlciBoaXN0b3J5PXtoaXN0b3J5fT5cblx0XHRcdDxSb3V0ZSBwYXRoPXtLZXlzdG9uZS5hZG1pblBhdGh9IGNvbXBvbmVudD17QXBwfT5cblx0XHRcdFx0PEluZGV4Um91dGUgY29tcG9uZW50PXtIb21lfSAvPlxuXHRcdFx0XHQ8Um91dGUgcGF0aD1cIjpsaXN0SWRcIiBjb21wb25lbnQ9e0xpc3R9IC8+XG5cdFx0XHRcdDxSb3V0ZSBwYXRoPVwiOmxpc3RJZC86aXRlbUlkXCIgY29tcG9uZW50PXtJdGVtfSAvPlxuXHRcdFx0PC9Sb3V0ZT5cblx0XHQ8L1JvdXRlcj5cblx0PC9Qcm92aWRlcj4sXG5cdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZWFjdC1yb290Jylcbik7XG4iXX0=
